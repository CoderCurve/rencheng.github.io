<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024面试题整理</title>
      <link href="/2024/10/04/ios/general/2024%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
      <url>/2024/10/04/ios/general/2024%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="贝壳"><a href="#贝壳" class="headerlink" title="贝壳"></a>贝壳</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><ol><li>说一说项目中印象比较深的模块</li><li>NSNotificationCenter实现原理</li><li>view的渲染流程，view的异步绘制在哪一步</li><li>说一说NSTimer</li><li>NSDictionary对key和value是强引用吗</li><li>KVO原理</li><li>方法查找链</li><li>NSArray和NSMutableArray的copy和mutableCopy</li><li>如何确定页面已经加载完可交互</li><li>内存泄漏如何检测</li><li>翻转链表一部分</li><li>链表有环的两种方式</li></ol><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><ol><li>KVO原理</li><li>设计一个本地图片云端的方案，有降级的可能</li><li>runloop介绍</li><li>AI的使用</li><li>动态加载动态库</li><li>鸿蒙挑战性</li><li>链表交换第k和倒数第k个节点，单链表、倒数第K个可能在第k个左边</li><li>小程序、rn和web各有什么优缺点，如果推广小程序使用</li></ol><h3 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h3><ol><li>离职原因</li><li>团队规模</li><li>主要职责</li></ol><h2 id="百度网盘"><a href="#百度网盘" class="headerlink" title="百度网盘"></a>百度网盘</h2><ol><li>组件的解耦方式</li><li>说说启动优化和包大小优化</li><li>universalLink有哪些问题</li><li>说说响应链</li><li>runloop</li><li>runtime和应用</li><li>jscore通信使用三方的吗</li><li>NSNotification是异步还是同步的？</li><li>设计一个线程安全的可变数组，会用那些锁？</li><li>判断两个模型是否相同，包括指针和值</li><li>内存泄漏一般出现在什么情况，如何解决和检测</li><li>https建立连接的过程</li><li>数据库用的什么？多线程的问题怎么解决？</li><li>项目中用到了哪些设计模式</li><li>多个任务同步回调有哪些方案</li><li>两个栈实现一个队列</li></ol><h2 id="懂车帝"><a href="#懂车帝" class="headerlink" title="懂车帝"></a>懂车帝</h2><ol><li>跨平台技术对比</li><li>架构做了哪些事情</li><li>如何设计启动任务管理</li><li>评估启动优化对业务的影响</li><li>WebView优化怎么做</li><li>包大小做了哪些事情</li><li>竞品分析有什么效果</li><li>https说一下</li><li>Charles为何能抓包</li><li>网络指标有哪些</li><li>runtime的方法查找和转发链，消息转发用过什么</li><li>runtime用过什么</li><li>runloop可以做什么</li><li>kvo原理</li><li>如何优化图片加载</li><li>按空格翻转字符串</li></ol><h2 id="美团"><a href="#美团" class="headerlink" title="美团"></a>美团</h2><hr><h2 id="title-2024面试题整理date-2024-10-04-16-15-40tags-iOS"><a href="#title-2024面试题整理date-2024-10-04-16-15-40tags-iOS" class="headerlink" title="title: 2024面试题整理date: 2024-10-04 16:15:40tags:- iOS"></a>title: 2024面试题整理<br>date: 2024-10-04 16:15:40<br>tags:<br>- iOS</h2><h2 id="贝壳-1"><a href="#贝壳-1" class="headerlink" title="贝壳"></a>贝壳</h2><h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><ol><li>说一说项目中印象比较深的模块</li><li>NSNotificationCenter实现原理</li><li>view的渲染流程，view的异步绘制在哪一步</li><li>说一说NSTimer</li><li>NSDictionary对key和value是强引用吗</li><li>KVO原理</li><li>方法查找链</li><li>NSArray和NSMutableArray的copy和mutableCopy</li><li>如何确定页面已经加载完可交互</li><li>内存泄漏如何检测</li><li>翻转链表一部分</li><li>链表有环的两种方式</li></ol><h3 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h3><ol><li>KVO原理</li><li>设计一个本地图片云端的方案，有降级的可能</li><li>runloop介绍</li><li>AI的使用</li><li>动态加载动态库</li><li>鸿蒙挑战性</li><li>链表交换第k和倒数第k个节点，单链表、倒数第K个可能在第k个左边</li><li>小程序、rn和web各有什么优缺点，如果推广小程序使用</li></ol><h3 id="三面-1"><a href="#三面-1" class="headerlink" title="三面"></a>三面</h3><ol><li>离职原因</li><li>团队规模</li><li>主要职责</li></ol><h2 id="百度网盘-1"><a href="#百度网盘-1" class="headerlink" title="百度网盘"></a>百度网盘</h2><ol><li>组件的解耦方式</li><li>说说启动优化和包大小优化</li><li>universalLink有哪些问题</li><li>说说响应链</li><li>runloop</li><li>runtime和应用</li><li>jscore通信使用三方的吗</li><li>NSNotification是异步还是同步的？</li><li>设计一个线程安全的可变数组，会用那些锁？</li><li>判断两个模型是否相同，包括指针和值</li><li>内存泄漏一般出现在什么情况，如何解决和检测</li><li>https建立连接的过程</li><li>数据库用的什么？多线程的问题怎么解决？</li><li>项目中用到了哪些设计模式</li><li>多个任务同步回调有哪些方案</li><li>两个栈实现一个队列</li></ol><h2 id="懂车帝-1"><a href="#懂车帝-1" class="headerlink" title="懂车帝"></a>懂车帝</h2><ol><li>跨平台技术对比</li><li>架构做了哪些事情</li><li>如何设计启动任务管理</li><li>评估启动优化对业务的影响</li><li>WebView优化怎么做</li><li>包大小做了哪些事情</li><li>竞品分析有什么效果</li><li>https说一下</li><li>Charles为何能抓包</li><li>网络指标有哪些</li><li>runtime的方法查找和转发链，消息转发用过什么</li><li>runtime用过什么</li><li>runloop可以做什么</li><li>kvo原理</li><li>如何优化图片加载</li><li>按空格翻转字符串</li></ol><h2 id="美团-1"><a href="#美团-1" class="headerlink" title="美团"></a>美团</h2><h3 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h3><p><img src="https://cdn.rencheng.cc/blog/17280303856588.jpg"></p><ol><li>找出上图的错误<ol><li>为什么NSString用copy</li><li>怎么实现给button加block点击事件</li></ol></li><li>JSCore如何进行通信的，通信的原理，JSContext</li><li>如何按钮扩大点击事件范围</li><li>如何实现uilabe&#x2F;自适应宽度</li><li>异步任务同步回调，有哪些方式</li><li>WKWebView hook了哪个手势</li><li>搜索旋转数组</li></ol><h3 id="二面-2"><a href="#二面-2" class="headerlink" title="二面"></a>二面</h3><ol><li>说一下项目的包大小优化<ol><li>有没有编译参数的优化</li><li>怎么防裂化</li></ol></li><li>启动优化<ol><li>任务关联依赖怎么做</li></ol></li><li>删除链表的倒数第n个节点，返回头结点</li></ol><h2 id="头条-豆包"><a href="#头条-豆包" class="headerlink" title="头条-豆包"></a>头条-豆包</h2><ol><li>项目组件解耦怎么做的，怎么拆分的</li><li>启动优化都做了什么</li><li>算法<ol><li>用两个栈实现线程安全的队列</li></ol></li><li>UI卡顿的真正原因</li><li>在浏览器输入地址，到展示出来页面的过程</li><li>block捕获变量的几种形式，为什么要用_block</li><li>多个异步任务完成后统一回调</li><li>锁的类型，自旋锁</li><li>weak变量的释放过程</li></ol><h2 id="去哪儿"><a href="#去哪儿" class="headerlink" title="去哪儿"></a>去哪儿</h2><h3 id="一面-3"><a href="#一面-3" class="headerlink" title="一面"></a>一面</h3><ol><li>网络请求的指标</li><li>如何优化网络</li><li>如何做弱网优化</li><li>http2 和 http3 区别</li><li>如何统计crash数量</li><li>开发栈有哪些</li></ol><h3 id="二面-3"><a href="#二面-3" class="headerlink" title="二面"></a>二面</h3><ol><li>离职原因</li><li>易车离职原因</li><li>做了哪些优化<ol><li>启动</li><li>包体积<ol><li>无用类怎么统计</li></ol></li></ol></li><li>网络指标是多少</li><li>小程序和h5有什么区别和优劣</li><li>小程序做了哪些优化</li><li>在易车最大的提升是什么</li></ol><h2 id="京东物流"><a href="#京东物流" class="headerlink" title="京东物流"></a>京东物流</h2><h3 id="一面-4"><a href="#一面-4" class="headerlink" title="一面"></a>一面</h3><ol><li>主要开发栈</li><li>介绍一下flutter</li><li>介绍一下最近的项目</li><li>category 和 extension区别</li><li>runtime的应用场景</li><li>属性关键字介绍</li><li>nstimer解决循环引用，以及谁在真正引用当前self - runloop</li><li>多线程介绍，以及多读单写的方案，</li><li>设计模式在项目里的应用</li><li>开n方</li></ol><h3 id="二面-4"><a href="#二面-4" class="headerlink" title="二面"></a>二面</h3><ol><li>鸿蒙开发主要做了什么</li><li>鸿蒙APP保活</li><li>鸿蒙APP性能优化</li><li>APP动态化做过哪些</li><li>本地化推荐算法</li><li>如何进行技术选型，flutter和h5怎么选，要做哪些比较</li><li>热修复怎么做的</li><li>强制升级有没有做</li><li>离职原因</li></ol><h3 id="三面-2"><a href="#三面-2" class="headerlink" title="三面"></a>三面</h3><ol><li>在易车做了什么</li><li>有哪些指标，对比过竞品吗</li><li>小程序做过哪些优化</li><li>鸿蒙是怎么做的，如何做动态的容器化东西</li><li>介绍下做过的性能优化</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实践HTTP3/QUIC</title>
      <link href="/2024/09/12/network/%E7%AB%99%E7%82%B9%E6%94%AF%E6%8C%81HTTP3&amp;QUIC/"/>
      <url>/2024/09/12/network/%E7%AB%99%E7%82%B9%E6%94%AF%E6%8C%81HTTP3&amp;QUIC/</url>
      
        <content type="html"><![CDATA[<p>为优化全链路耗时，尽可能缩短建连时间，实践下H3.</p><span id="more"></span><p>H3是否能打通，可以拆分为3块</p><ol><li>服务端支持H3协议</li><li>H3链路是否畅通</li><li>客户端&#x2F;Chrome需要支持H3协议</li></ol><h2 id="服务端支持H3协议"><a href="#服务端支持H3协议" class="headerlink" title="服务端支持H3协议"></a>服务端支持H3协议</h2><p>以 Nginx 为例，其他同理。默认站点已支持H2，且TLS版本支持1.3。</p><p><strong>必要配置</strong></p><ol><li>开启监控<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen 443 quic reuseport;</span><br></pre></td></tr></table></figure></li><li>add_header<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_header alt-svc &#x27;h3=&quot;:443&quot;; ma=2592000, h3-29=&quot;:443&quot;; ma=2592000, h3-Q050=&quot;:443&quot;; ma=2592000, h3-Q046=&quot;:443&quot;; ma=2592000, h3-Q043=&quot;:443&quot;; ma=2592000, quic=&quot;:443&quot;; ma=2592000; v=&quot;43,46&quot;&#x27;;</span><br></pre></td></tr></table></figure></li></ol><p><strong>nginx.conf</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">listen 443 ssl ;</span><br><span class="line">    #listen [::]:443 ssl;</span><br><span class="line">    listen 443 quic reuseport;</span><br><span class="line">    #listen [::]:443 quic reuseport;</span><br><span class="line">    http2 on;</span><br><span class="line">    server_name rencheng.cc www.rencheng.cc;</span><br><span class="line">    index index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">    root /www/wwwroot/rencheng.cc;</span><br><span class="line">    </span><br><span class="line">    #SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则</span><br><span class="line">    #error_page 404/404.html;</span><br><span class="line">    #HTTP_TO_HTTPS_START</span><br><span class="line">    if ($server_port !~ 443)&#123;</span><br><span class="line">        rewrite ^(/.*)$ https://$host$1 permanent;</span><br><span class="line">    &#125;</span><br><span class="line">    #HTTP_TO_HTTPS_END</span><br><span class="line">    ssl_certificate    /www/server/panel/vhost/cert/rencheng.cc/fullchain.pem;</span><br><span class="line">    ssl_certificate_key    /www/server/panel/vhost/cert/rencheng.cc/privkey.pem;</span><br><span class="line">    ssl_protocols TLSv1.3;</span><br><span class="line">    ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    #ssl_early_data on;</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=31536000&quot;;</span><br><span class="line">    add_header alt-svc &#x27;h3=&quot;:443&quot;; ma=2592000, h3-29=&quot;:443&quot;; ma=2592000, h3-Q050=&quot;:443&quot;; ma=2592000, h3-Q046=&quot;:443&quot;; ma=2592000, h3-Q043=&quot;:443&quot;; ma=2592000, quic=&quot;:443&quot;; ma=2592000; v=&quot;43,46&quot;&#x27;;</span><br><span class="line">    error_page 497  https://$host$request_uri;</span><br><span class="line">#SSL-END</span><br><span class="line">    </span><br><span class="line">    #ERROR-PAGE-START  错误页配置，可以注释、删除或修改</span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">    error_page 502 /502.html;</span><br><span class="line">    #ERROR-PAGE-END</span><br><span class="line">    </span><br><span class="line">    #PHP-INFO-START  PHP引用配置，可以注释或修改</span><br><span class="line">    include enable-php-00.conf;</span><br><span class="line">    #PHP-INFO-END</span><br><span class="line">    </span><br><span class="line">    #REWRITE-START URL重写规则引用,修改后将导致面板设置的伪静态规则失效</span><br><span class="line">    include /www/server/panel/vhost/rewrite/rencheng.cc.conf;</span><br><span class="line">    #REWRITE-END</span><br><span class="line">    </span><br><span class="line">    #禁止访问的文件或目录</span><br><span class="line">    location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)</span><br><span class="line">    &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #一键申请SSL证书验证目录相关设置</span><br><span class="line">    location ~ \.well-known&#123;</span><br><span class="line">        allow all;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">    &#123;</span><br><span class="line">        expires      30d;</span><br><span class="line">        error_log /dev/null;</span><br><span class="line">        access_log /dev/null;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location ~ .*\.(js|css)?$</span><br><span class="line">    &#123;</span><br><span class="line">        expires      12h;</span><br><span class="line">        error_log /dev/null;</span><br><span class="line">        access_log /dev/null; </span><br><span class="line">    &#125;</span><br><span class="line">    access_log  /www/wwwlogs/rencheng.cc.log;</span><br><span class="line">    error_log  /www/wwwlogs/rencheng.cc.error.log;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="确保H3链路畅通"><a href="#确保H3链路畅通" class="headerlink" title="确保H3链路畅通"></a>确保H3链路畅通</h2><h3 id="服务侧各节点防火墙开启udp流量"><a href="#服务侧各节点防火墙开启udp流量" class="headerlink" title="服务侧各节点防火墙开启udp流量"></a>服务侧各节点防火墙开启udp流量</h3><ol><li>云实例的安全防火墙<br><img src="https://cdn.rencheng.cc/blog/17261398201361.png"></li><li>服务器内防火墙打开，以宝塔为例<br><img src="https://cdn.rencheng.cc/blog/17261399440994.jpg"></li></ol><h3 id="确保网络中间链路畅通"><a href="#确保网络中间链路畅通" class="headerlink" title="确保网络中间链路畅通"></a>确保网络中间链路畅通</h3><ol><li>路由器支持udp流量</li><li>代理服务器支持udp流量</li><li>本地是否开启了代理（如果开启，需要关闭，目前为止大部分代理工具不支持udp流量转发）</li><li>首次使用流量测试，避免因为不确定WIFI连接的链路是否支持</li></ol><h3 id="测试H3是否连通"><a href="#测试H3是否连通" class="headerlink" title="测试H3是否连通"></a>测试H3是否连通</h3><ol><li><p>使用外部测试站点<a href="https://http3check.net/">http3check.net</a></p></li><li><p>测试通过后，Chrome 需要设置开启 HTTP3，在chrome地址栏输入<code>chrome://flags</code>，搜索<code>Experimental QUIC protocol</code>，将<code>default</code>改为<code>enable</code>后重启即可。<br> <img src="https://cdn.rencheng.cc/blog/17261404223583.jpg"></p></li><li><p>多次清除缓存确认是否支持H3<br> <img src="https://cdn.rencheng.cc/blog/17261404223591.jpg" alt="Xnip2024-09-12_17-48-46"></p></li></ol><h2 id="iOS客户端支持H3"><a href="#iOS客户端支持H3" class="headerlink" title="iOS客户端支持H3"></a>iOS客户端支持H3</h2><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><ol><li>方案一：由于iOS系统URLSession是在<code>iOS 14.5</code>开始支持的，如果仍然想使用URLSession的方式请求，并不能覆盖老系统。推荐等级⭐️⭐️。</li><li>方案二：使用Cronet，该方案的思路是通过URLProtocol的方式拦截到所有请求后，重定向到其内部发送H3请求，但需要研发对源码熟悉后精简功能，以减少对包体积的影响。。推荐等级⭐️⭐️⭐️。<ol><li>无用的内部逻辑，例如 HTTP 模块里包含了很多浏览器才会用到的代码和功能；无</li><li>需用到的的协议，例如 FTP、Websocket 等；</li><li>与 quic 无关的功能模块，例如 tcp 连接池等。</li></ol></li><li>方案三：使用大厂对Cronet精简过的库，优势是可以轻松迁移新版本，且大厂对其增加了很多<a href="https://tquic.net/zh/docs/intro">功能</a>，但是其对客户端支持还不完善，需要后续支撑好再进行接入是最好的。推荐等级⭐️⭐️⭐️⭐️。</li></ol><blockquote><p>架构低成本实践路线</p><ol><li>先使用Apple的API让高版本系统客户端使用</li><li>Cronet接入（缺点：包体积会增大）</li><li>接入成熟的大厂框架（减少包体积，体验一些实用功能）</li></ol></blockquote><h3 id="在iOS上的实践"><a href="#在iOS上的实践" class="headerlink" title="在iOS上的实践"></a>在iOS上的实践</h3><p>详见<a href="https://github.com/cheng-ren/RCQuic">DEMO</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS逆向砸壳</title>
      <link href="/2023/06/07/ios/general/iOS%E9%80%86%E5%90%91%E7%A0%B8%E5%A3%B3/"/>
      <url>/2023/06/07/ios/general/iOS%E9%80%86%E5%90%91%E7%A0%B8%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<p>苹果商店下载的安装包是加壳的，故需要脱壳后才可操作</p><span id="more"></span><p>以下方案只能砸可执行文件，如果包含动态库，需要一个一个砸，比较麻烦。目前我了解的最佳实践是<code>frida-ios-dump</code>方式砸壳，可以直接获取到ipa文件，后续流程维护进来。</p><p><a href="https://rencheng.cc/2018/11/18/ios/general/App%E5%88%86%E6%9E%90/?highlight=apple+con#%E8%8E%B7%E5%8F%96App%E5%AE%89%E8%A3%85%E5%8C%85">如何获取商店的安装包</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>下载<a href="https://github.com/stefanesser/dumpdecrypted">dumpdecrypted</a></li><li>越狱设备</li><li>越狱设备安装插件<code>Apple File Conduit “2”</code></li><li>Mac电脑安装iFunBox</li></ol><h2 id="生成砸壳工具动态库"><a href="#生成砸壳工具动态库" class="headerlink" title="生成砸壳工具动态库"></a>生成砸壳工具动态库</h2><ol><li>将下载的dumpdecrypted-master.zip解压</li><li>终端进入解压后的根目录</li><li>执行<code>make</code>命令</li></ol><blockquote><p>得到一个名为<code>dumpdecrypted.dylib</code>的动态库</p></blockquote><h2 id="将生成的动态库注入至需要砸壳APP的沙盒目录"><a href="#将生成的动态库注入至需要砸壳APP的沙盒目录" class="headerlink" title="将生成的动态库注入至需要砸壳APP的沙盒目录"></a>将生成的动态库注入至需要砸壳APP的沙盒目录</h2><h3 id="SSH进入越狱设备"><a href="#SSH进入越狱设备" class="headerlink" title="SSH进入越狱设备"></a>SSH进入越狱设备</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@ip</span><br></pre></td></tr></table></figure><blockquote><p>如果觉得WIFI慢，可以使用usbmux进行转发</p></blockquote><h3 id="Cycript操作目标APP"><a href="#Cycript操作目标APP" class="headerlink" title="Cycript操作目标APP"></a>Cycript操作目标APP</h3><ol><li>获取目标APP名称 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure><blockquote><p>通过进程列表可以拿到<code>App可执行文件名称</code>以及<code>App可执行文件绝对路径</code></p></blockquote></li><li>进入cycript操作APP的交互环境 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cycript -p App可执行文件名称</span><br></pre></td></tr></table></figure></li></ol><h3 id="通过cycript语言获取沙盒目录"><a href="#通过cycript语言获取沙盒目录" class="headerlink" title="通过cycript语言获取沙盒目录"></a>通过cycript语言获取沙盒目录</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">NSFileManager</span> defaultManager] URLsForDirectory:<span class="built_in">NSDocumentDirectory</span> inDomains:<span class="built_in">NSUserDomainMask</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>如果导入过mjcript，可以使用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@import mjcript</span><br><span class="line">MJDocPath</span><br></pre></td></tr></table></figure><h3 id="将动态库拷贝至沙盒目录下"><a href="#将动态库拷贝至沙盒目录下" class="headerlink" title="将动态库拷贝至沙盒目录下"></a>将动态库拷贝至沙盒目录下</h3><ol><li>使用iFunBox进入设备的沙盒目录（Documents目录下）</li><li>拖拽进去即可</li></ol><h2 id="执行砸壳命令"><a href="#执行砸壳命令" class="headerlink" title="执行砸壳命令"></a>执行砸壳命令</h2><p>先进入沙盒目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Documents目录</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib App可执行文件绝对路径</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/containers/Bundle/Application/D99C9215-D954-4067-BFD8-0F542C086F54/BitAutoPlusStore.app/BitAutoPlusStore</span><br></pre></td></tr></table></figure><p><strong>问题</strong><br>如果出现以下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">could not load inserted library &#x27;dumpdecrypted.dylib&#x27; into hardened process because no suitable image found</span><br></pre></td></tr></table></figure><p>在Mac环境下将dumpdecrypted.dylib进行签名</p><ol><li>获取所有证书，从中选一个 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">security find-identity -v -p codesigning</span><br></pre></td></tr></table></figure></li><li>签名     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codesign --force --verify --verbose --sign &quot;Apple Development: Cheng Ren (A699T56LQP)&quot; dumpdecrypted.dylib</span><br></pre></td></tr></table></figure></li><li>将新的dumpdecrypted.dylib文件拖入至沙盒</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>autoreleasepool底层原理</title>
      <link href="/2022/03/16/ios/general/autoreleasepool%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
      <url>/2022/03/16/ios/general/autoreleasepool%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.apple.com/documentation/foundation/nsautoreleasepool">官方文档介绍</a></p><p>自动释放池存储在池本身排出时发送发布消息的对象。</p><p>如果你使用自动引用计数(ARC)，你不能直接使用自动释放池。相反，你可以使用@autoreleasepool块。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSAutoreleasePool</span> *pool = [[<span class="built_in">NSAutoreleasePool</span> alloc] init];</span><br><span class="line"><span class="comment">// Code benefitting from a local autorelease pool.</span></span><br><span class="line">[pool release]; </span><br></pre></td></tr></table></figure><p>可以写成：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">    <span class="comment">// Code benefitting from a local autorelease pool.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>在我们的ARC模式下，我们不可以直接使用自动释放池，可以用@autoreleasepool的block块代替。@autoreleasepool的block块比直接使用NSAutoreleasePool实例使用更有效。即使不是ARC模式，也可以使用。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><strong>Q：主线程创建临时变量，什么时候会销毁？</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YYDiskCache源码解析</title>
      <link href="/2022/03/05/ios/general/YYDiskCache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2022/03/05/ios/general/YYDiskCache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><code>YYDiskCache</code>是<code>YYCache</code>组件中负责磁盘缓存的。</p><p>涉及知识点：</p><ul><li>磁盘缓存策略的分流优化</li><li>KVStore非关系型数据存储</li><li>线程同步锁（信号量）</li></ul><span id="more"></span><p>由于<code>YYDiskCache</code>是对<code>YYKVStorage</code>的封装调用</p><h2 id="YYKVStorage"><a href="#YYKVStorage" class="headerlink" title="YYKVStorage"></a>YYKVStorage</h2><p><strong>3种存储方式</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, YYKVStorageType) &#123;</span><br><span class="line">    <span class="comment">/// 文件形式存储</span></span><br><span class="line">    YYKVStorageTypeFile = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/// sqlite 的 blob type.</span></span><br><span class="line">    YYKVStorageTypeSQLite = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">/// 根据情况选择文件还是SQLite</span></span><br><span class="line">    YYKVStorageTypeMixed = <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>本地文件路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/path/</span><br><span class="line">  /manifest.sqlite</span><br><span class="line">  /manifest.sqlite-shm</span><br><span class="line">  /manifest.sqlite-wal</span><br><span class="line">  /data/</span><br><span class="line">       /e10adc3949ba59abbe56e057f20f883e</span><br><span class="line">       /e10adc3949ba59abbe56e057f20f883e</span><br><span class="line">  /trash/</span><br><span class="line">        /unused_file_or_folder</span><br></pre></td></tr></table></figure><p><code>YYKVStorage</code>会根据存储方式进行数据的增删改查；</p><blockquote><p><code>YYKVStorage</code> 不是线程安全的</p></blockquote><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> manifest (</span><br><span class="line">key                 text,</span><br><span class="line">filename            text,</span><br><span class="line">size                <span class="type">integer</span>,</span><br><span class="line">inline_data         <span class="type">blob</span>,</span><br><span class="line">modification_time   <span class="type">integer</span>,</span><br><span class="line">last_access_time    <span class="type">integer</span>,</span><br><span class="line">extended_data       <span class="type">blob</span>,</span><br><span class="line"><span class="keyword">primary</span> key(key)</span><br><span class="line">); </span><br><span class="line"><span class="keyword">create</span> index if <span class="keyword">not</span> <span class="keyword">exists</span> last_access_time_idx <span class="keyword">on</span> manifest(last_access_time);</span><br></pre></td></tr></table></figure><blockquote><p>日志模式采用wal方式；sqlite3.7版本之后支持；</p></blockquote><h4 id="检查点"><a href="#检查点" class="headerlink" title="检查点"></a>检查点</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在合适的时机，将 `sqlite-wal` 文件合并到 `sqlite` 文件。因为`sqlite-wal`文件过大会影响性能</span></span><br><span class="line">- (<span class="type">void</span>)_dbCheckpoint &#123;</span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span> _dbCheck]) <span class="keyword">return</span>;</span><br><span class="line">    sqlite3_wal_checkpoint(_db, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="YYKVStorageItem"><a href="#YYKVStorageItem" class="headerlink" title="YYKVStorageItem"></a>YYKVStorageItem</h3><p>数据流context</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YYKVStorageItem</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *key;                <span class="comment">///&lt; key</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSData</span> *value;                <span class="comment">///&lt; value</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *filename; <span class="comment">///&lt; filename (nil if inline)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="type">int</span> size;                             <span class="comment">///&lt; value&#x27;s size in bytes</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="type">int</span> modTime;                          <span class="comment">///&lt; modification unix timestamp</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="type">int</span> accessTime;                       <span class="comment">///&lt; last access unix timestamp</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSData</span> *extendedData; <span class="comment">///&lt; extended data (nil if no extended data)</span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="YYDiskCache"><a href="#YYDiskCache" class="headerlink" title="YYDiskCache"></a>YYDiskCache</h2><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Lock() dispatch_semaphore_wait(self-&gt;_lock, DISPATCH_TIME_FOREVER)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Unlock() dispatch_semaphore_signal(self-&gt;_lock)</span></span><br></pre></td></tr></table></figure><p>读写的时候都用到了该锁</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)setObject:(<span class="type">id</span>&lt;<span class="built_in">NSCoding</span>&gt;)object forKey:(<span class="built_in">NSString</span> *)key</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    Lock();</span><br><span class="line">    [_kv saveItemWithKey:key value:value filename:filename extendedData:extendedData];</span><br><span class="line">    Unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">id</span>&lt;<span class="built_in">NSCoding</span>&gt;)objectForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    Lock();</span><br><span class="line">    YYKVStorageItem *item = [_kv getItemForKey:key];</span><br><span class="line">    Unlock();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动清理"><a href="#自动清理" class="headerlink" title="自动清理"></a>自动清理</h3><p><code>YYDiskCache</code>也使用了LRU的算法，定时清理</p><h2 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h2><ul><li>磁盘缓存的解决方案</li><li>信号量实现线程锁</li><li>数据库wal的存储方式</li><li>封装同步执行和异步执行的思路</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YYMemoryCache源码解析</title>
      <link href="/2022/02/25/ios/general/YYMemoryCache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2022/02/25/ios/general/YYMemoryCache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><code>YYMemoryCache</code>是<code>YYCache</code>组件中负责内存缓存的。</p><p>涉及知识点：</p><ul><li>双向链表</li><li>哈希表</li><li>LRU（算法实现是使用上面两种数据结构）</li><li>线程同步锁</li></ul><span id="more"></span><h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h2><p><code>LRU</code>（Least recently used，最近最少使用）<br>核心思想：如果数据最近被访问过，那么将来被访问的几率也更高”。</p><p>通过上面的思想，整理思路如下</p><ol><li>需要一个有序集合作为队列进行优先级(访问概率)控制；集合使用双向链表</li><li>找到队列中已存在数据，并提高优先级；使用哈希表快速定位</li></ol><blockquote><p><strong>为什么使用链表而不使用顺序表？为什么使用双向链表？</strong></p><ul><li>链表的增加和删除的操作时间复杂度是O(1)，而顺序表涉及到扩容的问题（开新内存，内存拷贝）</li><li>如果我们想删除最后一个元素，链表的操作是拿到最后一个元素的前一个元素，并将它的next设置成null，那怎么拿到最后一个元素的上一个元素呢？如果队列中已经有了元素，需要把它提到队头，那怎么拿到该元素的上一个元素呢？<br>我们可以维护一个链表的头节点和尾节点，但是没办法找到尾节点的上一个节点，所以需要双向链表</li></ul></blockquote><h2 id="YYMemoryCache源码实现"><a href="#YYMemoryCache源码实现" class="headerlink" title="YYMemoryCache源码实现"></a>YYMemoryCache源码实现</h2><h3 id="链表节点封装"><a href="#链表节点封装" class="headerlink" title="链表节点封装"></a>链表节点封装</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">_YYLinkedMapNode</span> : <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在当前module中生效</span></span><br><span class="line">    <span class="keyword">@package</span></span><br><span class="line">    <span class="comment">// 上一个节点</span></span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> _YYLinkedMapNode *_prev; <span class="comment">// retained by dic</span></span><br><span class="line">    <span class="comment">// 下一个节点</span></span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> _YYLinkedMapNode *_next; <span class="comment">// retained by dic</span></span><br><span class="line">    <span class="comment">// 节点key</span></span><br><span class="line">    <span class="type">id</span> _key;</span><br><span class="line">    <span class="comment">// 节点值</span></span><br><span class="line">    <span class="type">id</span> _value;</span><br><span class="line">    <span class="comment">// 花费的内存</span></span><br><span class="line">    <span class="built_in">NSUInteger</span> _cost;</span><br><span class="line">    <span class="comment">// 缓存的时间</span></span><br><span class="line">    <span class="built_in">NSTimeInterval</span> _time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">_YYLinkedMapNode</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="链表的封装-包含增删改查等操作"><a href="#链表的封装-包含增删改查等操作" class="headerlink" title="链表的封装 - 包含增删改查等操作"></a>链表的封装 - 包含增删改查等操作</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">_YYLinkedMap</span> : <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">@package</span></span><br><span class="line">    <span class="comment">// c语言的 NSMutableDictionary - 速度肯定比NSMutableDictionary快</span></span><br><span class="line">    <span class="built_in">CFMutableDictionaryRef</span> _dic; <span class="comment">// do not set object directly</span></span><br><span class="line">    <span class="comment">// 当前链表 总花费的内存</span></span><br><span class="line">    <span class="built_in">NSUInteger</span> _totalCost;</span><br><span class="line">    <span class="comment">// 当前链表长度</span></span><br><span class="line">    <span class="built_in">NSUInteger</span> _totalCount;</span><br><span class="line">    <span class="comment">// 头结点</span></span><br><span class="line">    _YYLinkedMapNode *_head; <span class="comment">// MRU, do not change it directly</span></span><br><span class="line">    <span class="comment">// 尾节点</span></span><br><span class="line">    _YYLinkedMapNode *_tail; <span class="comment">// LRU, do not change it directly</span></span><br><span class="line">    <span class="comment">// 是否在主线程中释放</span></span><br><span class="line">    <span class="type">BOOL</span> _releaseOnMainThread;</span><br><span class="line">    <span class="comment">// 异步释放</span></span><br><span class="line">    <span class="type">BOOL</span> _releaseAsynchronously;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">_YYLinkedMap</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="variable language_">super</span> init];</span><br><span class="line">    _dic = <span class="built_in">CFDictionaryCreateMutable</span>(<span class="built_in">CFAllocatorGetDefault</span>(), <span class="number">0</span>, &amp;kCFTypeDictionaryKeyCallBacks, &amp;kCFTypeDictionaryValueCallBacks);</span><br><span class="line">    _releaseOnMainThread = <span class="literal">NO</span>;</span><br><span class="line">    _releaseAsynchronously = <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)dealloc &#123;</span><br><span class="line">    <span class="built_in">CFRelease</span>(_dic);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 在最头部插入一个node，更新总花费内存和长度</span></span><br><span class="line"><span class="comment">/// Node and node.key 不能为 nil.</span></span><br><span class="line">- (<span class="type">void</span>)insertNodeAtHead:(_YYLinkedMapNode *)node &#123;</span><br><span class="line">    <span class="built_in">CFDictionarySetValue</span>(_dic, (__bridge <span class="keyword">const</span> <span class="type">void</span> *)(node-&gt;_key), (__bridge <span class="keyword">const</span> <span class="type">void</span> *)(node));</span><br><span class="line">    _totalCost += node-&gt;_cost;</span><br><span class="line">    _totalCount++;</span><br><span class="line">    <span class="keyword">if</span> (_head) &#123;</span><br><span class="line">        node-&gt;_next = _head;</span><br><span class="line">        _head-&gt;_prev = node;</span><br><span class="line">        _head = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _head = _tail = node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 如果node已经在链表中，提升某个node优先级</span></span><br><span class="line">- (<span class="type">void</span>)bringNodeToHead:(_YYLinkedMapNode *)node &#123;</span><br><span class="line">    <span class="keyword">if</span> (_head == node) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (_tail == node) &#123;</span><br><span class="line">        _tail = node-&gt;_prev;</span><br><span class="line">        _tail-&gt;_next = <span class="literal">nil</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node-&gt;_next-&gt;_prev = node-&gt;_prev;</span><br><span class="line">        node-&gt;_prev-&gt;_next = node-&gt;_next;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;_next = _head;</span><br><span class="line">    node-&gt;_prev = <span class="literal">nil</span>;</span><br><span class="line">    _head-&gt;_prev = node;</span><br><span class="line">    _head = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 如果node已经在链表中，删除它，更新总花费内存和长度</span></span><br><span class="line">- (<span class="type">void</span>)removeNode:(_YYLinkedMapNode *)node &#123;</span><br><span class="line">    <span class="built_in">CFDictionaryRemoveValue</span>(_dic, (__bridge <span class="keyword">const</span> <span class="type">void</span> *)(node-&gt;_key));</span><br><span class="line">    _totalCost -= node-&gt;_cost;</span><br><span class="line">    _totalCount--;</span><br><span class="line">    <span class="keyword">if</span> (node-&gt;_next) node-&gt;_next-&gt;_prev = node-&gt;_prev;</span><br><span class="line">    <span class="keyword">if</span> (node-&gt;_prev) node-&gt;_prev-&gt;_next = node-&gt;_next;</span><br><span class="line">    <span class="keyword">if</span> (_head == node) _head = node-&gt;_next;</span><br><span class="line">    <span class="keyword">if</span> (_tail == node) _tail = node-&gt;_prev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 如果存在尾部节点，将其删除，更新总花费内存和长度</span></span><br><span class="line">- (_YYLinkedMapNode *)removeTailNode &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_tail) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    _YYLinkedMapNode *tail = _tail;</span><br><span class="line">    <span class="built_in">CFDictionaryRemoveValue</span>(_dic, (__bridge <span class="keyword">const</span> <span class="type">void</span> *)(_tail-&gt;_key));</span><br><span class="line">    _totalCost -= _tail-&gt;_cost;</span><br><span class="line">    _totalCount--;</span><br><span class="line">    <span class="keyword">if</span> (_head == _tail) &#123;</span><br><span class="line">        _head = _tail = <span class="literal">nil</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _tail = _tail-&gt;_prev;</span><br><span class="line">        _tail-&gt;_next = <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 在后台线程中删除所有节点，更新总花费内存和长度</span></span><br><span class="line">- (<span class="type">void</span>)removeAll &#123;</span><br><span class="line">    _totalCost = <span class="number">0</span>;</span><br><span class="line">    _totalCount = <span class="number">0</span>;</span><br><span class="line">    _head = <span class="literal">nil</span>;</span><br><span class="line">    _tail = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">CFDictionaryGetCount</span>(_dic) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">CFMutableDictionaryRef</span> holder = _dic;</span><br><span class="line">        _dic = <span class="built_in">CFDictionaryCreateMutable</span>(<span class="built_in">CFAllocatorGetDefault</span>(), <span class="number">0</span>, &amp;kCFTypeDictionaryKeyCallBacks, &amp;kCFTypeDictionaryValueCallBacks);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (_releaseAsynchronously) &#123;</span><br><span class="line">            <span class="built_in">dispatch_queue_t</span> queue = _releaseOnMainThread ? dispatch_get_main_queue() : YYMemoryCacheGetReleaseQueue();</span><br><span class="line">            <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">                <span class="built_in">CFRelease</span>(holder); <span class="comment">// hold and release in specified queue</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_releaseOnMainThread &amp;&amp; !pthread_main_np()) &#123;</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                <span class="built_in">CFRelease</span>(holder); <span class="comment">// hold and release in specified queue</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">CFRelease</span>(holder);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="YYMemoryCache类解析"><a href="#YYMemoryCache类解析" class="headerlink" title="YYMemoryCache类解析"></a>YYMemoryCache类解析</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YYMemoryCache</span> </span>&#123;</span><br><span class="line">    <span class="comment">// pthread_mutex 锁</span></span><br><span class="line">    pthread_mutex_t _lock;</span><br><span class="line">    <span class="comment">// 封装lru操作的链表</span></span><br><span class="line">    _YYLinkedMap *_lru;</span><br><span class="line">    <span class="comment">// 优先级低的串行的异步队列</span></span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> _queue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时释放</span></span><br><span class="line">- (<span class="type">void</span>)_trimRecursively &#123;</span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) _<span class="keyword">self</span> = <span class="keyword">self</span>;</span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(_autoTrimInterval * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, <span class="number">0</span>), ^&#123;</span><br><span class="line">        __<span class="keyword">strong</span> <span class="keyword">typeof</span>(_<span class="keyword">self</span>) <span class="keyword">self</span> = _<span class="keyword">self</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">self</span>) <span class="keyword">return</span>;</span><br><span class="line">        [<span class="keyword">self</span> _trimInBackground];</span><br><span class="line">        [<span class="keyword">self</span> _trimRecursively];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子线程，缩减资源</span></span><br><span class="line">- (<span class="type">void</span>)_trimInBackground &#123;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(_queue, ^&#123;</span><br><span class="line">        [<span class="keyword">self</span> _trimToCost:<span class="keyword">self</span>-&gt;_costLimit];</span><br><span class="line">        [<span class="keyword">self</span> _trimToCount:<span class="keyword">self</span>-&gt;_countLimit];</span><br><span class="line">        [<span class="keyword">self</span> _trimToAge:<span class="keyword">self</span>-&gt;_ageLimit];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据限制，减少花费</span></span><br><span class="line">- (<span class="type">void</span>)_trimToCost:(<span class="built_in">NSUInteger</span>)costLimit &#123;</span><br><span class="line">    <span class="type">BOOL</span> finish = <span class="literal">NO</span>;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    <span class="keyword">if</span> (costLimit == <span class="number">0</span>) &#123;</span><br><span class="line">        [_lru removeAll];</span><br><span class="line">        finish = <span class="literal">YES</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_lru-&gt;_totalCost &lt;= costLimit) &#123;</span><br><span class="line">        finish = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">    <span class="keyword">if</span> (finish) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 存储被删除的节点</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *holder = [<span class="built_in">NSMutableArray</span> new];</span><br><span class="line">    <span class="keyword">while</span> (!finish) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pthread_mutex_trylock(&amp;_lock) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 链表总消费大于消费限制</span></span><br><span class="line">            <span class="keyword">if</span> (_lru-&gt;_totalCost &gt; costLimit) &#123;</span><br><span class="line">                _YYLinkedMapNode *node = [_lru removeTailNode];</span><br><span class="line">                <span class="keyword">if</span> (node) [holder addObject:node];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                finish = <span class="literal">YES</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            usleep(<span class="number">10</span> * <span class="number">1000</span>); <span class="comment">//10 ms</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (holder.count) &#123;</span><br><span class="line">        <span class="built_in">dispatch_queue_t</span> queue = _lru-&gt;_releaseOnMainThread ? dispatch_get_main_queue() : YYMemoryCacheGetReleaseQueue();</span><br><span class="line">        <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">            [holder count]; <span class="comment">// release in queue</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据限制，减少长度</span></span><br><span class="line">- (<span class="type">void</span>)_trimToCount:(<span class="built_in">NSUInteger</span>)countLimit &#123;</span><br><span class="line">    <span class="type">BOOL</span> finish = <span class="literal">NO</span>;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    <span class="keyword">if</span> (countLimit == <span class="number">0</span>) &#123;</span><br><span class="line">        [_lru removeAll];</span><br><span class="line">        finish = <span class="literal">YES</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_lru-&gt;_totalCount &lt;= countLimit) &#123;</span><br><span class="line">        finish = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">    <span class="keyword">if</span> (finish) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 存储被删除的节点</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *holder = [<span class="built_in">NSMutableArray</span> new];</span><br><span class="line">    <span class="keyword">while</span> (!finish) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pthread_mutex_trylock(&amp;_lock) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 链表总长度大于长度限制</span></span><br><span class="line">            <span class="keyword">if</span> (_lru-&gt;_totalCount &gt; countLimit) &#123;</span><br><span class="line">                _YYLinkedMapNode *node = [_lru removeTailNode];</span><br><span class="line">                <span class="keyword">if</span> (node) [holder addObject:node];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                finish = <span class="literal">YES</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            usleep(<span class="number">10</span> * <span class="number">1000</span>); <span class="comment">//10 ms</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (holder.count) &#123;</span><br><span class="line">        <span class="built_in">dispatch_queue_t</span> queue = _lru-&gt;_releaseOnMainThread ? dispatch_get_main_queue() : YYMemoryCacheGetReleaseQueue();</span><br><span class="line">        <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">            [holder count]; <span class="comment">// release in queue</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放过期的资源</span></span><br><span class="line">- (<span class="type">void</span>)_trimToAge:(<span class="built_in">NSTimeInterval</span>)ageLimit &#123;</span><br><span class="line">    <span class="type">BOOL</span> finish = <span class="literal">NO</span>;</span><br><span class="line">    <span class="built_in">NSTimeInterval</span> now = <span class="built_in">CACurrentMediaTime</span>();</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    <span class="keyword">if</span> (ageLimit &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        [_lru removeAll];</span><br><span class="line">        finish = <span class="literal">YES</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!_lru-&gt;_tail || (now - _lru-&gt;_tail-&gt;_time) &lt;= ageLimit) &#123;</span><br><span class="line">        finish = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">    <span class="keyword">if</span> (finish) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 存储被删除的节点</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *holder = [<span class="built_in">NSMutableArray</span> new];</span><br><span class="line">    <span class="keyword">while</span> (!finish) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pthread_mutex_trylock(&amp;_lock) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 当前时间 - 链表尾节点的时间 &gt; 时间限制</span></span><br><span class="line">            <span class="keyword">if</span> (_lru-&gt;_tail &amp;&amp; (now - _lru-&gt;_tail-&gt;_time) &gt; ageLimit) &#123;</span><br><span class="line">                _YYLinkedMapNode *node = [_lru removeTailNode];</span><br><span class="line">                <span class="keyword">if</span> (node) [holder addObject:node];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                finish = <span class="literal">YES</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            usleep(<span class="number">10</span> * <span class="number">1000</span>); <span class="comment">//10 ms</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (holder.count) &#123;</span><br><span class="line">        <span class="built_in">dispatch_queue_t</span> queue = _lru-&gt;_releaseOnMainThread ? dispatch_get_main_queue() : YYMemoryCacheGetReleaseQueue();</span><br><span class="line">        <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">            [holder count]; <span class="comment">// release in queue</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内存警告监听并回调；如果设置了`收到内存警告后删除所有缓存的属性`为YES，则删除所有元素。</span></span><br><span class="line">- (<span class="type">void</span>)_appDidReceiveMemoryWarningNotification &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.didReceiveMemoryWarningBlock) &#123;</span><br><span class="line">        <span class="keyword">self</span>.didReceiveMemoryWarningBlock(<span class="keyword">self</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.shouldRemoveAllObjectsOnMemoryWarning) &#123;</span><br><span class="line">        [<span class="keyword">self</span> removeAllObjects];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用已经进入后台监听并回调；如果设置了`进入后台后删除所有缓存的属性`为YES，则删除所有元素。</span></span><br><span class="line">- (<span class="type">void</span>)_appDidEnterBackgroundNotification &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.didEnterBackgroundBlock) &#123;</span><br><span class="line">        <span class="keyword">self</span>.didEnterBackgroundBlock(<span class="keyword">self</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.shouldRemoveAllObjectsWhenEnteringBackground) &#123;</span><br><span class="line">        [<span class="keyword">self</span> removeAllObjects];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - public</span></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">self</span> = <span class="variable language_">super</span>.init;</span><br><span class="line">    pthread_mutex_init(&amp;_lock, <span class="literal">NULL</span>);</span><br><span class="line">    _lru = [_YYLinkedMap new];</span><br><span class="line">    _queue = dispatch_queue_create(<span class="string">&quot;com.ibireme.cache.memory&quot;</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    </span><br><span class="line">    _countLimit = <span class="built_in">NSUIntegerMax</span>;</span><br><span class="line">    _costLimit = <span class="built_in">NSUIntegerMax</span>;</span><br><span class="line">    _ageLimit = DBL_MAX;</span><br><span class="line">    _autoTrimInterval = <span class="number">5.0</span>;</span><br><span class="line">    _shouldRemoveAllObjectsOnMemoryWarning = <span class="literal">YES</span>;</span><br><span class="line">    _shouldRemoveAllObjectsWhenEnteringBackground = <span class="literal">YES</span>;</span><br><span class="line">    </span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(_appDidReceiveMemoryWarningNotification) name:<span class="built_in">UIApplicationDidReceiveMemoryWarningNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(_appDidEnterBackgroundNotification) name:<span class="built_in">UIApplicationDidEnterBackgroundNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> _trimRecursively];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放销毁</span></span><br><span class="line">- (<span class="type">void</span>)dealloc &#123;</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">UIApplicationDidReceiveMemoryWarningNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">UIApplicationDidEnterBackgroundNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">    [_lru removeAll];</span><br><span class="line">    pthread_mutex_destroy(&amp;_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setter</span></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)totalCount &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    <span class="built_in">NSUInteger</span> count = _lru-&gt;_totalCount;</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter</span></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)totalCost &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    <span class="built_in">NSUInteger</span> totalCost = _lru-&gt;_totalCost;</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">    <span class="keyword">return</span> totalCost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter</span></span><br><span class="line">- (<span class="type">BOOL</span>)releaseOnMainThread &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    <span class="type">BOOL</span> releaseOnMainThread = _lru-&gt;_releaseOnMainThread;</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">    <span class="keyword">return</span> releaseOnMainThread;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setter</span></span><br><span class="line">- (<span class="type">void</span>)setReleaseOnMainThread:(<span class="type">BOOL</span>)releaseOnMainThread &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    _lru-&gt;_releaseOnMainThread = releaseOnMainThread;</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter</span></span><br><span class="line">- (<span class="type">BOOL</span>)releaseAsynchronously &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    <span class="type">BOOL</span> releaseAsynchronously = _lru-&gt;_releaseAsynchronously;</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">    <span class="keyword">return</span> releaseAsynchronously;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setter</span></span><br><span class="line">- (<span class="type">void</span>)setReleaseAsynchronously:(<span class="type">BOOL</span>)releaseAsynchronously &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    _lru-&gt;_releaseAsynchronously = releaseAsynchronously;</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含</span></span><br><span class="line">- (<span class="type">BOOL</span>)containsObjectForKey:(<span class="type">id</span>)key &#123;</span><br><span class="line">    <span class="keyword">if</span> (!key) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    <span class="type">BOOL</span> contains = <span class="built_in">CFDictionaryContainsKey</span>(_lru-&gt;_dic, (__bridge <span class="keyword">const</span> <span class="type">void</span> *)(key));</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">    <span class="keyword">return</span> contains;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取值 - 将node节点前置</span></span><br><span class="line">- (<span class="type">id</span>)objectForKey:(<span class="type">id</span>)key &#123;</span><br><span class="line">    <span class="keyword">if</span> (!key) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    _YYLinkedMapNode *node = <span class="built_in">CFDictionaryGetValue</span>(_lru-&gt;_dic, (__bridge <span class="keyword">const</span> <span class="type">void</span> *)(key));</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        node-&gt;_time = <span class="built_in">CACurrentMediaTime</span>();</span><br><span class="line">        [_lru bringNodeToHead:node];</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">    <span class="keyword">return</span> node ? node-&gt;_value : <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增键值对</span></span><br><span class="line">- (<span class="type">void</span>)setObject:(<span class="type">id</span>)object forKey:(<span class="type">id</span>)key &#123;</span><br><span class="line">    [<span class="keyword">self</span> setObject:object forKey:key withCost:<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增键值对</span></span><br><span class="line">- (<span class="type">void</span>)setObject:(<span class="type">id</span>)object forKey:(<span class="type">id</span>)key withCost:(<span class="built_in">NSUInteger</span>)cost &#123;</span><br><span class="line">    <span class="keyword">if</span> (!key) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (!object) &#123;</span><br><span class="line">        [<span class="keyword">self</span> removeObjectForKey:key];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    _YYLinkedMapNode *node = <span class="built_in">CFDictionaryGetValue</span>(_lru-&gt;_dic, (__bridge <span class="keyword">const</span> <span class="type">void</span> *)(key));</span><br><span class="line">    <span class="built_in">NSTimeInterval</span> now = <span class="built_in">CACurrentMediaTime</span>();</span><br><span class="line">    <span class="comment">// 如果已经存在，将其提到链表头</span></span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        _lru-&gt;_totalCost -= node-&gt;_cost;</span><br><span class="line">        _lru-&gt;_totalCost += cost;</span><br><span class="line">        node-&gt;_cost = cost;</span><br><span class="line">        node-&gt;_time = now;</span><br><span class="line">        node-&gt;_value = object;</span><br><span class="line">        [_lru bringNodeToHead:node];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 不存在，新建node添加链表头</span></span><br><span class="line">        node = [_YYLinkedMapNode new];</span><br><span class="line">        node-&gt;_cost = cost;</span><br><span class="line">        node-&gt;_time = now;</span><br><span class="line">        node-&gt;_key = key;</span><br><span class="line">        node-&gt;_value = object;</span><br><span class="line">        [_lru insertNodeAtHead:node];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果总花销大于限制，就缩小</span></span><br><span class="line">    <span class="keyword">if</span> (_lru-&gt;_totalCost &gt; _costLimit) &#123;</span><br><span class="line">        <span class="built_in">dispatch_async</span>(_queue, ^&#123;</span><br><span class="line">            [<span class="keyword">self</span> trimToCost:_costLimit];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果总长度大于限制，就缩小</span></span><br><span class="line">    <span class="keyword">if</span> (_lru-&gt;_totalCount &gt; _countLimit) &#123;</span><br><span class="line">        _YYLinkedMapNode *node = [_lru removeTailNode];</span><br><span class="line">        <span class="keyword">if</span> (_lru-&gt;_releaseAsynchronously) &#123;</span><br><span class="line">            <span class="built_in">dispatch_queue_t</span> queue = _lru-&gt;_releaseOnMainThread ? dispatch_get_main_queue() : YYMemoryCacheGetReleaseQueue();</span><br><span class="line">            <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">                [node <span class="keyword">class</span>]; <span class="comment">//hold and release in queue</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_lru-&gt;_releaseOnMainThread &amp;&amp; !pthread_main_np()) &#123;</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                [node <span class="keyword">class</span>]; <span class="comment">//hold and release in queue</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除某个元素；加锁</span></span><br><span class="line">- (<span class="type">void</span>)removeObjectForKey:(<span class="type">id</span>)key &#123;</span><br><span class="line">    <span class="keyword">if</span> (!key) <span class="keyword">return</span>;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    _YYLinkedMapNode *node = <span class="built_in">CFDictionaryGetValue</span>(_lru-&gt;_dic, (__bridge <span class="keyword">const</span> <span class="type">void</span> *)(key));</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        [_lru removeNode:node];</span><br><span class="line">        <span class="keyword">if</span> (_lru-&gt;_releaseAsynchronously) &#123;</span><br><span class="line">            <span class="built_in">dispatch_queue_t</span> queue = _lru-&gt;_releaseOnMainThread ? dispatch_get_main_queue() : YYMemoryCacheGetReleaseQueue();</span><br><span class="line">            <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">                [node <span class="keyword">class</span>]; <span class="comment">//hold and release in queue</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_lru-&gt;_releaseOnMainThread &amp;&amp; !pthread_main_np()) &#123;</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                [node <span class="keyword">class</span>]; <span class="comment">//hold and release in queue</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除所有数据；加锁</span></span><br><span class="line">- (<span class="type">void</span>)removeAllObjects &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    [_lru removeAll];</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)trimToCount:(<span class="built_in">NSUInteger</span>)count &#123;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> removeAllObjects];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span> _trimToCount:count];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)trimToCost:(<span class="built_in">NSUInteger</span>)cost &#123;</span><br><span class="line">    [<span class="keyword">self</span> _trimToCost:cost];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)trimToAge:(<span class="built_in">NSTimeInterval</span>)age &#123;</span><br><span class="line">    [<span class="keyword">self</span> _trimToAge:age];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)description &#123;</span><br><span class="line">    <span class="keyword">if</span> (_name) <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;&lt;%@: %p&gt; (%@)&quot;</span>, <span class="keyword">self</span>.class, <span class="keyword">self</span>, _name];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;&lt;%@: %p&gt;&quot;</span>, <span class="keyword">self</span>.class, <span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h3><ul><li><code>CFMutableDictionaryRef</code>的使用</li><li><code>异步release</code></li><li>线程锁<code>pthread_mutex</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift监听方法耗时</title>
      <link href="/2022/02/20/ios/swift/Swift-%E7%9B%91%E5%90%AC%E6%96%B9%E6%B3%95%E8%80%97%E6%97%B6/"/>
      <url>/2022/02/20/ios/swift/Swift-%E7%9B%91%E5%90%AC%E6%96%B9%E6%B3%95%E8%80%97%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<p>封装监听方法耗时操作<br><em>开始算法练习之旅</em><br><a href="https://github.com/cheng-ren/Leet-code">Swift LeetCode 算法实现（2022持续更新）</a></p><span id="more"></span><p><strong>基类 Core.swift</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Core</span>: <span class="title class_ inherited__">NSObject</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        swizzle_class(clz: object_getClass(<span class="keyword">self</span>), originalSelector: <span class="keyword">#selector</span>(run), swizzledSelector: <span class="keyword">#selector</span>(run_swizzle))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">func</span> <span class="title function_">run</span>() &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;需实现run方法并且不要调用父类方法&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">func</span> <span class="title function_">run_swizzle</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始执行 --&gt; <span class="subst">\(object_getClass(<span class="keyword">self</span>)<span class="operator">!</span>)</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">let</span> startTimeInterval <span class="operator">=</span> <span class="type">Date</span>().timeIntervalSince1970 <span class="operator">*</span> <span class="number">1000</span></span><br><span class="line">        run_swizzle()</span><br><span class="line">        <span class="keyword">let</span> endTimeInterval <span class="operator">=</span> <span class="type">Date</span>().timeIntervalSince1970 <span class="operator">*</span> <span class="number">1000</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="type">String</span>(format: <span class="string">&quot;运行耗时 --&gt; %.3f毫秒&quot;</span>, endTimeInterval <span class="operator">-</span> startTimeInterval))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">run</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> object <span class="operator">=</span> <span class="keyword">self</span>.<span class="keyword">init</span>()</span><br><span class="line">        object.run()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">swizzle_class</span>(<span class="params">clz</span>: <span class="type">AnyClass</span>?, <span class="params">originalSelector</span>: <span class="type">Selector</span>, <span class="params">swizzledSelector</span>: <span class="type">Selector</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> originalMethod <span class="operator">=</span> class_getInstanceMethod(clz, originalSelector)</span><br><span class="line">    <span class="keyword">let</span> swizzledMethod <span class="operator">=</span> class_getInstanceMethod(clz, swizzledSelector)</span><br><span class="line">    <span class="keyword">let</span> didAddMethod: <span class="type">Bool</span> <span class="operator">=</span> class_addMethod(clz, originalSelector, method_getImplementation(swizzledMethod<span class="operator">!</span>), method_getTypeEncoding(swizzledMethod<span class="operator">!</span>))</span><br><span class="line">    <span class="keyword">if</span> didAddMethod &#123;</span><br><span class="line">        class_replaceMethod(clz, swizzledSelector, method_getImplementation(originalMethod<span class="operator">!</span>), method_getTypeEncoding(originalMethod<span class="operator">!</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        method_exchangeImplementations(originalMethod<span class="operator">!</span>, swizzledMethod<span class="operator">!</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用方 main.swift</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">剑指_Offer_09_用两个栈实现队列.run()</span><br></pre></td></tr></table></figure><p><strong>算法实现类</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CQueue</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> stackAdd: [<span class="type">Int</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> stackRemove: [<span class="type">Int</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        stackAdd <span class="operator">=</span> []</span><br><span class="line">        stackRemove <span class="operator">=</span> []</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">appendTail</span>(<span class="keyword">_</span> <span class="params">value</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> stackAdd.count <span class="operator">&gt;</span> <span class="number">10000</span> &#123;</span><br><span class="line">            <span class="comment">// fatalError(&quot;数据太多&quot;)</span></span><br><span class="line">        &#125;</span><br><span class="line">        stackAdd.append(value)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">deleteHead</span>() -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> stackAdd.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stackRemove <span class="operator">=</span> stackAdd.reversed()</span><br><span class="line">        &#125;</span><br><span class="line">        stackAdd.removeFirst()</span><br><span class="line">        <span class="keyword">return</span> stackRemove.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">剑指_Offer_09_用两个栈实现队列</span>: <span class="title class_ inherited__">Core</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">run</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> obj <span class="operator">=</span> <span class="type">CQueue</span>()</span><br><span class="line">        <span class="built_in">print</span>(obj.deleteHead())</span><br><span class="line">        obj.appendTail(<span class="number">5</span>)</span><br><span class="line">        obj.appendTail(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(obj.deleteHead())</span><br><span class="line">        <span class="built_in">print</span>(obj.deleteHead())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>Swift</code>中实现方法交换须满足条件：</p></blockquote><ol><li>类必须继承自<code>NSObject</code></li><li>被交换的两个方法，必须用<code>dynamic</code>关键字标记</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动签到脚本</title>
      <link href="/2022/02/08/crawler/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC/"/>
      <url>/2022/02/08/crawler/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>最近在使用xx流量的时候，发现流量不够用，所以写了一个脚本用来自动签到来获取流量</p><span id="more"></span><p><strong>class FeiniaoSign</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FeiniaoSign</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        url = <span class="string">&#x27;https://xxx/auth/login&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.browser = open_browser(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">input_account</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 输入账号 &quot;&quot;&quot;</span></span><br><span class="line">        account_ele = <span class="variable language_">self</span>.browser.find_element(by=By.ID, value=<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">        account_ele.send_keys(<span class="string">&#x27;renchengqi12@gmail.com&#x27;</span>)</span><br><span class="line">        logging.info(<span class="string">&#x27;账号ele:&#x27;</span> + <span class="variable language_">self</span>.check_element_value(account_ele))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">input_password</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 输入密码 &quot;&quot;&quot;</span></span><br><span class="line">        pwd_ele = <span class="variable language_">self</span>.browser.find_element(by=By.ID, value=<span class="string">&#x27;passwd&#x27;</span>)</span><br><span class="line">        pwd_ele.send_keys(<span class="string">&#x27;NoD7nhA3_Yg&#x27;</span>)</span><br><span class="line">        logging.info(<span class="string">&#x27;密码ele:&#x27;</span> + <span class="variable language_">self</span>.check_element_value(pwd_ele))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">click_login_btn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 点击登录按钮 &quot;&quot;&quot;</span></span><br><span class="line">        submit_btn = <span class="variable language_">self</span>.browser.find_element(by=By.ID, value=<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">        submit_btn.click()</span><br><span class="line">        logging.info(<span class="string">&#x27;submit_btn:&#x27;</span> + <span class="variable language_">self</span>.check_element_value(submit_btn))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">click_sign_btn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 点击签到按钮 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sign_btn = <span class="variable language_">self</span>.browser.find_element(by=By.ID, value=<span class="string">&#x27;checkin&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> sign_btn <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                ActionChains(<span class="variable language_">self</span>.browser).move_to_element(sign_btn).perform()</span><br><span class="line">                sign_btn.click()</span><br><span class="line">                <span class="comment"># js = &#x27;document.getElementById(&quot;checkin&quot;).click()&#x27;</span></span><br><span class="line">                <span class="comment"># self.browser.execute_script(js)</span></span><br><span class="line">            logging.info(<span class="string">&#x27;sign_btn:&#x27;</span> + (<span class="string">&quot;正确&quot;</span> <span class="keyword">if</span> sign_btn <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&quot;错误&quot;</span>))</span><br><span class="line">        <span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">            logging.info(<span class="string">&#x27;sign_btn:&#x27;</span> + <span class="string">&#x27;未找到&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_screenshot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 截图 &quot;&quot;&quot;</span></span><br><span class="line">        path = <span class="string">&#x27;/www/wwwroot/peanuts.rencheng.cc/script/Python.png&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> is_debug:</span><br><span class="line">            path = <span class="string">&#x27;Python.png&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.browser.save_screenshot(path)</span><br><span class="line">        logging.info(<span class="string">&#x27;截图完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_element_value</span>(<span class="params">self, element</span>):</span><br><span class="line">        <span class="keyword">if</span> element <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;正确&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;错误&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">destroy</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.browser.quit()</span><br></pre></td></tr></table></figure><p><strong>.py main</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logger_config</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 打印器配置 &quot;&quot;&quot;</span></span><br><span class="line">    logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open_browser</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 打开浏览器并访问地址</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param url: 网页地址</span></span><br><span class="line"><span class="string">    :return: 浏览器</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    binary_location = <span class="string">&#x27;/usr/bin/google-chrome&#x27;</span></span><br><span class="line">    chrome_driver_binary = <span class="string">&#x27;/usr/bin/chromedriver&#x27;</span></span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">&#x27;打开站点:&#x27;</span> + url)</span><br><span class="line">    options = webdriver.ChromeOptions()</span><br><span class="line">    options.add_argument(</span><br><span class="line">        <span class="string">&#x27;user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">        <span class="string">&#x27;Chrome/98.0.4758.80 Safari/537.36&#x27;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&#x27;window-size=1920,1080&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_debug:</span><br><span class="line">        options.headless = <span class="literal">True</span></span><br><span class="line">        os.environ[<span class="string">&quot;webdriver.chrome.driver&quot;</span>] = chrome_driver_binary</span><br><span class="line">        options.binary_location = binary_location</span><br><span class="line">        options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">        options.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>)</span><br><span class="line">        options.add_argument(<span class="string">&#x27;--disable-dev-shm-usage&#x27;</span>)</span><br><span class="line">    browser = webdriver.Chrome(options=options)</span><br><span class="line">    browser.get(url)</span><br><span class="line">    <span class="keyword">return</span> browser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">is_debug = <span class="literal">False</span></span><br><span class="line">logger_config()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    is_debug = <span class="string">&#x27;debug&#x27;</span> <span class="keyword">in</span> sys.argv</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">&#x27;脚本开始执行: 环境&#x27;</span> + (<span class="string">&#x27;DEBUG&#x27;</span> <span class="keyword">if</span> is_debug <span class="keyword">else</span> <span class="string">&#x27;RELEASE&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    __handler()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 本地执行, 需要执行定时调度</span></span><br><span class="line">    <span class="keyword">if</span> is_debug:</span><br><span class="line">        scheduler = BlockingScheduler()</span><br><span class="line">        scheduler.add_job(__handler, <span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">86400</span>, <span class="built_in">id</span>=<span class="string">&#x27;test_job2&#x27;</span>, timezone=<span class="string">&#x27;Asia/Shanghai&#x27;</span>)</span><br><span class="line">        scheduler.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LLDB操作指令总结</title>
      <link href="/2022/01/14/ios/general/LLDB%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
      <url>/2022/01/14/ios/general/LLDB%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>LLDB全称轻量级的高性能调试器（Low Level Debugger），默认内置于Xcode中。能够很好的运用它会使我们的开发效率事半功倍。</p><span id="more"></span><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><p>LLDB命令语法特性，可简写<br><code>print</code>命令可简写成，<code>p</code>,<code>pr</code>,<code>pri</code>,<code>prin</code>。其他命令以此类推。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="print、po命令"><a href="#print、po命令" class="headerlink" title="print、po命令"></a>print、po命令</h3><p>他们可以输出，可以调用方法，可以写表达式。</p><ul><li><code>print</code>&#x2F;<code>p</code>：打印变量</li><li><code>po</code>: 打印值；如果是对象，打印其description的信息</li></ul><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p 变量名</span><br><span class="line">print 变量名</span><br><span class="line"># 或</span><br><span class="line">po 变量名</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p object</span><br><span class="line">(Person *) <span class="variable">$1</span> = 0x00000001010c7810</span><br><span class="line">(lldb) po object</span><br><span class="line">&lt;Person: 0x1010c7810&gt;</span><br></pre></td></tr></table></figure><h3 id="expression"><a href="#expression" class="headerlink" title="expression"></a>expression</h3><p>执行一个表达式，并将表达式返回的结果输出。<br>可以执行表达式来动态改变程序运行的轨迹。 假如我们在运行过程中，突然想把 self.view 颜色改成红色，看看效果。我们不必写下代码，重新run，只需暂停程序，用expression改变颜色，再刷新一下界面，就能看到效果。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression 变量名 = 数值</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression <span class="variable">$1</span> = 10</span><br></pre></td></tr></table></figure><h3 id="x"><a href="#x" class="headerlink" title="x"></a>x</h3><p>查看内存中读取一个地址的信息</p><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x/数量-格式-字节大小 内存地址</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(lldb) x 0x00000001010c7c70</span><br><span class="line">0x1010c7c70: c9 3f 82 ea 01 00 00 01 00 00 00 00 00 00 00 00  .?..............</span><br><span class="line">0x1010c7c80: 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  P...............</span><br></pre></td></tr></table></figure><blockquote><ul><li>格式 <ul><li>x：16进制；</li><li>f：浮点数；</li><li>d：十进制</li></ul></li><li>字节大小<ul><li>b - byte 1字节</li><li>h - half word 2字节</li><li>w - word 4字节</li><li>giant word 8字节</li></ul></li></ul></blockquote><h3 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h3><p>修改内存中的值<br><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory write 内存地址 数值</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory write 0x0000010 10</span><br></pre></td></tr></table></figure><h2 id="进阶指令"><a href="#进阶指令" class="headerlink" title="进阶指令"></a>进阶指令</h2><h3 id="breakpoint"><a href="#breakpoint" class="headerlink" title="breakpoint"></a>breakpoint</h3><h4 id="列出部分或者所有的断点"><a href="#列出部分或者所有的断点" class="headerlink" title="列出部分或者所有的断点"></a>列出部分或者所有的断点</h4><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">breakpoint list</span><br><span class="line">或者</span><br><span class="line">br l</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看某一组的信息</span></span><br><span class="line">breakpoint list 断点组<span class="built_in">id</span></span><br><span class="line"><span class="comment"># 显示断点信息格式化</span></span><br><span class="line">breakpoint list -v </span><br><span class="line"><span class="comment"># 显示断点摘要</span></span><br><span class="line">breakpoint list -b</span><br></pre></td></tr></table></figure><h4 id="给所有函数名为xxx的都设置断点"><a href="#给所有函数名为xxx的都设置断点" class="headerlink" title="给所有函数名为xxx的都设置断点"></a>给所有函数名为xxx的都设置断点</h4><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">breakpoint <span class="built_in">set</span> –name c函数名/oc方法</span><br><span class="line">br s -n 函数名</span><br><span class="line">b 函数名</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># C</span></span><br><span class="line">breakpoint <span class="built_in">set</span> -n <span class="string">&quot;main&quot;</span></span><br><span class="line"><span class="comment"># OC </span></span><br><span class="line">breakpoint <span class="built_in">set</span> -n <span class="string">&quot;-[ViewController viewDidLoad:]&quot;</span></span><br><span class="line"><span class="comment"># OC 同时设置多个方法</span></span><br><span class="line">breakpoint <span class="built_in">set</span> -n <span class="string">&quot;-[ViewController playGame:]&quot;</span> -n <span class="string">&quot;-[ViewController pauseGame:]&quot;</span> -n <span class="string">&quot;-[ViewController continueGame:]&quot;</span></span><br></pre></td></tr></table></figure><h4 id="给某个文件的行设置断点"><a href="#给某个文件的行设置断点" class="headerlink" title="给某个文件的行设置断点"></a>给某个文件的行设置断点</h4><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">breakpoint <span class="built_in">set</span> –file 文件名 –line 行号</span><br><span class="line">br s -f 文件名 -l 行号</span><br><span class="line">b 文件名:行号</span><br></pre></td></tr></table></figure><h4 id="给某个文件的方法设置断点"><a href="#给某个文件的方法设置断点" class="headerlink" title="给某个文件的方法设置断点"></a>给某个文件的方法设置断点</h4><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">breakpoint <span class="built_in">set</span> --file 文件名 --selector 方法名</span><br><span class="line">br s -f 文件名 -s 方法名</span><br></pre></td></tr></table></figure><h4 id="删除断点某一组"><a href="#删除断点某一组" class="headerlink" title="删除断点某一组"></a>删除断点某一组</h4><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">breakpoint delete 断点组<span class="built_in">id</span></span><br><span class="line">br del 断点组<span class="built_in">id</span></span><br></pre></td></tr></table></figure><h4 id="显示调用栈"><a href="#显示调用栈" class="headerlink" title="显示调用栈"></a>显示调用栈</h4><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="/2022/01/13/network/HTTP/"/>
      <url>/2022/01/13/network/HTTP/</url>
      
        <content type="html"><![CDATA[<p>总结一下最近关于HTTP的理解</p><ul><li>HTTP&#x2F;1.1</li><li>HTTP&#x2F;2</li><li>HTTP&#x2F;3</li></ul><span id="more"></span><h2 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h2><table><thead><tr><th align="left">时间</th><th align="left">版本</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">1991</td><td align="left">0.9</td><td align="left">只支持<code>GET</code>请求方法获取文本数据（比如HTML文档），且不支持请求头、响应头等，无法向服务器传递太多信息</td></tr><tr><td align="left">1996</td><td align="left">1.0</td><td align="left">支持<code>POST</code>、<code>HEAD</code>等请求方法，支持请求头、响应头等，支持更多种数据类型（不再局限于文本数据）</br>浏览器的每次请求都需要与服务器建立-个TCP连接，请求处理完成后立即断开TCP连接</td></tr><tr><td align="left">1997</td><td align="left">1.1</td><td align="left">最经典、使用最广泛的版本</br>支持<code>PUT</code>、<code>DELETE</code>等请求方法</br>采用持久连接 (Connection: keep-alive），多个请求可以共用同一个TCP连接</td></tr><tr><td align="left">2015</td><td align="left">2.0</td><td align="left"></td></tr><tr><td align="left">2018</td><td align="left">3.0</td><td align="left"></td></tr></tbody></table><h2 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h2><p>口由万维网协会 (W3C）、互联网工程任务组 （ETF） 协调制定，最终发布了一系列的<a href="https://www.rfc-editor.org/standards">RFC</a></p><blockquote><p>在RFC 5234中表明：ABNF用作internet中通信协议的定义语言</p></blockquote><p><a href="https://datatracker.ietf.org/doc/html/rfc7230">ABNF</a>是最严谨的HTTP报文格式描述形式</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p><img src="https://cdn.rencheng.cc/blog/4ryrp.png"></p><h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><table><thead><tr><th align="left">方法名</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">常用于读取的操作，请求参数直接拼接在URL的后面（浏览器对URL是有长度限制的）</td></tr><tr><td align="left">POST</td><td align="left">常用于添加、修改、删除的操作，请求参数可以放到请求体中（没有大小限制）</td></tr><tr><td align="left">HEAD</td><td align="left">请求得到与GET请求相同的响应，但没有响应体；</br>使用场景：下载大文件前，先获取其大小，再決定是否要下载。以此可以节约带宽资源</td></tr><tr><td align="left">OPTIONS</td><td align="left">用于获取目的资源所支持的通信选项，比如服务器支持的请求方法</td></tr><tr><td align="left">PUT</td><td align="left">用于对已存在的资源进行整体覆盖</td></tr><tr><td align="left">PATCH</td><td align="left">用于对资源进行部分修改（资源不存在，会创建新的资源）</td></tr><tr><td align="left">DELETE</td><td align="left">用于删除指定的资源</td></tr><tr><td align="left">TRACE</td><td align="left">请求服务器回显其收到的请求信息，主要用于HTTP请求的测试或诊断</td></tr><tr><td align="left">CONNECT</td><td align="left">可以开启一个客户端与所请求资源之间的双向沟通的通道，它可以用来创建隧道 (tunnel)</br>可以用来访问采用了 SSL (HTTPS) 协议的站点</td></tr></tbody></table><h2 id="头部字段"><a href="#头部字段" class="headerlink" title="头部字段"></a>头部字段</h2><h3 id="请求头字段"><a href="#请求头字段" class="headerlink" title="请求头字段"></a>请求头字段</h3><table><thead><tr><th align="left">字段</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">User-Agent</td><td align="left">浏览器的身份标识字符串</td><td align="left">User-Agent: Mozilla&#x2F;5.0 (X11;Linux x86_64; rv:12.0) Gecko&#x2F;20100101 Firefox&#x2F;21.0</td></tr><tr><td align="left">Host</td><td align="left">服务器的域名、端口号</td><td align="left">Host: localhost:80</td></tr><tr><td align="left">Date</td><td align="left">发送该消息的日期和时间</td><td align="left">Date: Tue, 15 Nov 1994 08:12:31 GMT</td></tr><tr><td align="left">Referer</td><td align="left">表示浏览器所访问的前一个页面</br>正是前一个页面的某个链接将浏览器带到了当前这个页面</td><td align="left">Referer: <a href="https://www.baidu.com/">https://www.baidu.com</a></td></tr><tr><td align="left">Content-Type</td><td align="left">请求体的类型</td><td align="left">Content-Type: multipart&#x2F;form-data</td></tr><tr><td align="left">Content-Length</td><td align="left">请求体的长度(字节为单位）</td><td align="left">Content-Length: 232</td></tr><tr><td align="left">Accept</td><td align="left">能够接受的响应内容类型</br>(Content-Types)</td><td align="left">Accept: text&#x2F;plain</td></tr><tr><td align="left">Accept-Charset</td><td align="left">能够接受的符集</td><td align="left">Accept-Charset: GB2312,utf-8;q&#x3D;0.7,*; q&#x3D;0.7</td></tr><tr><td align="left">Accept-Encoding</td><td align="left">能够接受的编码方式列表</td><td align="left">Accept-Encoding: gzip, deflate</td></tr><tr><td align="left">Accept-Language</td><td align="left">能够接受的响应内容的自然语言列表</td><td align="left">Accept-Language: en-US</td></tr><tr><td align="left">Range</td><td align="left">仅请求某个实体的一部分。字节偏移以0开始</td><td align="left">Range: bytes&#x3D;500-999</td></tr><tr><td align="left">Origin</td><td align="left">发起一个针对跨域资源共享的请求</td><td align="left">Origin: <a href="https://www.baidu.com/">https://www.baidu.com</a></td></tr><tr><td align="left">Cookie</td><td align="left">之前由服务器通过set-Cookie发送的cookie</td><td align="left">Cookie: Version&#x3D;1; Skin&#x3D;new;</td></tr><tr><td align="left">Connection</td><td align="left">该浏览器根要优先伅用的连接类型</td><td align="left">Connection: keep-alive</td></tr><tr><td align="left">Cache-Control</td><td align="left">用来指定在这次的请求&#x2F;响应链中的所有缓存机制都必须遵守的指令</td><td align="left">Cache-Control: no-cache</td></tr></tbody></table><blockquote><p>q值越大，优先级越高。默认1.0</p></blockquote><h3 id="响应头字段"><a href="#响应头字段" class="headerlink" title="响应头字段"></a>响应头字段</h3><table><thead><tr><th align="left">字段</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">Content-Type</td><td align="left">响应体的类型</td><td align="left">Content-Type: text&#x2F;html; charset&#x3D;utf-8</td></tr><tr><td align="left">Content-Encoding</td><td align="left">内容所使用的编码类型</td><td align="left">Content-Encoding: gzip</td></tr><tr><td align="left">Content-Length</td><td align="left">响应体的长度(字节为单位）</td><td align="left">Content-Length: 348</td></tr><tr><td align="left">Content-Disposition</td><td align="left">一个可以让客户端下载文件并建议文件名的头部</td><td align="left">Content-Disposition: attachment;filename&#x3D;”fname.ext”</td></tr><tr><td align="left">Accept-Ranges</td><td align="left">服务器支持哪些种类的部分内容范围</td><td align="left">Accept-Ranges: bytes</td></tr><tr><td align="left">Content-Range</td><td align="left">这条部分消息是属于完整消息的哪部分</td><td align="left">Content-Range: bytes 21010-47021&#x2F;47022</td></tr><tr><td align="left">Access-Control-Allow-Origin</td><td align="left">指定哪些网站可参与到跨来源资源共享过程中</td><td align="left">Access-Control-Allow-Origin:*</td></tr><tr><td align="left">Location</td><td align="left">用来进行重定向，或者在创建了某个新资源时使用</td><td align="left">Location: <a href="http://www.w3.org/">http://www.w3.org</a></td></tr><tr><td align="left">Set-Cookie</td><td align="left">返回一个Cookie让客户端去保存</td><td align="left">Set-Cookie: UserID&#x3D;JohnDoe; Max Age&#x3D;3600; Version&#x3D;1</td></tr><tr><td align="left">Connection</td><td align="left">针对该连接所预期的选项</td><td align="left">Connection: close</td></tr><tr><td align="left">Cache-Control</td><td align="left">向从服务器直到客户端在内的所有缓存机制告知，它们是否可以缓存这个对象。单位为秒</td><td align="left">Cache-Control: max-age&#x3D;3600</td></tr></tbody></table><h2 id="HTTP2"><a href="#HTTP2" class="headerlink" title="HTTP2"></a>HTTP2</h2><p><strong>数据流</strong>：已建立的连接内的双向字节流，可以承载一条或多条消息</p><blockquote><p>所有通信都在一个TCP连接上完成，此连接可以承载任意数量的双向数据流</p></blockquote><p><strong>消息</strong>：与逻辑HTTP请求或响应消息对应，由一系列帧组成<br><strong>帧</strong>：<code>HTTP/2</code>通信的最小单位，每个帧都包含帧头 （会标识出当前帧所属的数据流）</p><blockquote><p>来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装</p></blockquote><p><a href="http://www.http2demo.io/"><code>HTTP/1.1</code>与<code>HTTP/2</code>速度对比</a></p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><h4 id="二进制格式"><a href="#二进制格式" class="headerlink" title="二进制格式"></a>二进制格式</h4><p><code>HTTP/2.0</code>采用二进制格式传输数据，而非<code>HTTP/1.1</code>的文本传输</p><blockquote><p>二进制格式在协议的解析和优化扩展上带来更多的优势和可能</p></blockquote><h4 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h4><p>客户端和服务器可以将 HTTP消息分解为互不依赖的帧，然后交错发送，最后再在另一端把它们重新组装起来</p><ul><li>并行交错地发送多个请求，请求之间互不影响</li><li>并行交错地发送多个响应，响应之间互不干扰</li></ul><p><img src="https://cdn.rencheng.cc/blog/3tdd8.jpg"></p><blockquote><p>不必再为绕过 HTTP&#x2F;1.1限制而做很多工作<br>比如image sprites、合并CSS\JS. 内嵌CSS\JS\Bas64图片，城名分片等</p></blockquote><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p><code>HTTP/2</code>标准允许每个数据流都有一个关联的权重和依赖关系</p><ul><li>可以向每个数据流分配一个介于1至256之间的整数</li><li>每个数据流与其他数据流之问可以存在显式依赖关系<br>客户端可以构建和传递“优先级树”，表明它倾向于如何接收响应</li></ul><p>服务器可以使用此信意通过控制CPU，内存和其他资源的分配设定数据流处理的优先级，在资源数据可用之后，确保将高优先级响应以最优方式传输至客户端。</p><h4 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h4><p><code>HTTP/2</code>使用<code>HPACK</code>压缩请求头和响应头，可以极大减少头部开销，进而提高性能。</p><h4 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h4><p>服务器可以对一个客户端请求发送多个响应，除了对最初请求的响应外，服务器还可以向客户端推送额外资源，而无需客户端额外明确地请求。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="队头阻塞"><a href="#队头阻塞" class="headerlink" title="队头阻塞"></a>队头阻塞</h4><p><code>HTTP/2</code>是基于<code>TCP</code>协议的, 传输过程相当于队列，串行发送。如果第一个数据包丢失，为了保证有序性，后续数据要等到队头数据重传后才可继续。</p><h4 id="握手延迟"><a href="#握手延迟" class="headerlink" title="握手延迟"></a>握手延迟</h4><p>由于<code>HTTP/2</code>的连接是基于TCP，并且前身SPDY的原因又做TLS&#x2F;SSL安全套接层，所以握手时间太长。</p><h2 id="HTTP-3"><a href="#HTTP-3" class="headerlink" title="HTTP&#x2F;3"></a>HTTP&#x2F;3</h2><p><img src="https://cdn.rencheng.cc/blog/f515q.jpg"></p><h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3><h4 id="连接迁移"><a href="#连接迁移" class="headerlink" title="连接迁移"></a>连接迁移</h4><p>TCP基于4要素 （源1P、源端口、目标1P、目标端口）,切换网络时至少会有一个要素发生变化，导致连接发生变化。当连接发生变化时，如果还使用原来的TCP连接，则会导致连接失败，就得等原来的连接超时后重新建立连接，所以我们有时候发现切换到一个新网络时，即使新网络状況良好，但内容还是需要加载很久，如果实现得好，当检测到网络变化时立刻建立新的TCP连接，即使这样，建立新的连接还是需要几百毫秒的时间。</p><p>QUIC的连接不受4要素的影响，当4要素发生变化时，原连接依然维持。QUIC连接不以4要素作为标识，而是使用一组Connection 1D（连接D）来标识一个连接。即使IP或者端口发生变化，只要Connection 1D没有变化，那么连接依然可以维持</p><blockquote><p>当设备连接到Wi-Fi时，将进行中的下载从蜂窝网络连接转移到更快速的Wi-Fi连接<br>当Wi-Fi连接不再可用时，将连接转移到蜂窝网络连接</p></blockquote><h4 id="解决了HTTP-2的队头阻塞和握手延迟"><a href="#解决了HTTP-2的队头阻塞和握手延迟" class="headerlink" title="解决了HTTP&#x2F;2的队头阻塞和握手延迟"></a>解决了HTTP&#x2F;2的队头阻塞和握手延迟</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wireshark抓包</title>
      <link href="/2022/01/11/network/Wireshark%E6%8A%93%E5%8C%85/"/>
      <url>/2022/01/11/network/Wireshark%E6%8A%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>记录一下<code>Wireshark</code>使用</p><span id="more"></span><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="捕获过滤器"><a href="#捕获过滤器" class="headerlink" title="捕获过滤器"></a>捕获过滤器</h3><p>捕获过滤器表达式作用在wireshark开始捕获数据包之前，只捕获符合条件的数据包</p><h4 id="表达式语法"><a href="#表达式语法" class="headerlink" title="表达式语法"></a>表达式语法</h4><table><thead><tr><th align="left">协议列表</th></tr></thead><tbody><tr><td align="left">tcp</td></tr><tr><td align="left">udp</td></tr><tr><td align="left">arp</td></tr><tr><td align="left">tcp</td></tr><tr><td align="left">ip</td></tr><tr><td align="left">ip6</td></tr></tbody></table><table><thead><tr><th align="left">逻辑关键字</th></tr></thead><tbody><tr><td align="left">or</td></tr><tr><td align="left">and</td></tr></tbody></table><table><thead><tr><th align="left">取反关键字</th></tr></thead><tbody><tr><td align="left">no</td></tr></tbody></table><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ol><li><p>协议是<code>tcp</code>并且端口号是<code>443</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tcp port 443</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">tcp port https</span><br></pre></td></tr></table></figure></li><li><p>协议是<code>tcp</code>并且端口号<strong>不是</strong><code>443</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp and not port 443</span><br></pre></td></tr></table></figure></li><li><p>域名是<code>baidu.com</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host baidu.com</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">host 220.181.38.148</span><br></pre></td></tr></table></figure></li><li><p>网卡的mac地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ether host 00:00:5e:00:53:10</span><br></pre></td></tr></table></figure></li></ol><h3 id="显示过滤器"><a href="#显示过滤器" class="headerlink" title="显示过滤器"></a>显示过滤器</h3><p>显示过滤器表达式作用在在wireshark捕获数据包之后，从已捕获的所有数据包中显示出符合条件的数据包，隐藏不符合条件的数据包。</p><h4 id="表达式语法-1"><a href="#表达式语法-1" class="headerlink" title="表达式语法"></a>表达式语法</h4><table><thead><tr><th align="left">逻辑关键字</th></tr></thead><tbody><tr><td align="left">||</td></tr><tr><td align="left">&amp;&amp;</td></tr></tbody></table><table><thead><tr><th align="left">取反关键字</th></tr></thead><tbody><tr><td align="left">!</td></tr></tbody></table><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><ol><li>IP地址是<code>106.152.175.199</code>并且端口号是<code>56147</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.addr == 106.152.175.199 &amp;&amp; tcp.port == 56147</span><br></pre></td></tr></table></figure></li><li>IP地址是<code>106.152.175.199</code>并且端口号<strong>不是</strong><code>56147</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.addr == 106.152.175.199 &amp;&amp; tcp.port != 56147</span><br></pre></td></tr></table></figure></li><li>目标IP地址是<code>106.152.175.199</code>并且源IP地址是<code>16.52.175.199</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.dst == 106.52.175.199 &amp;&amp; ip.src == 16.52.175.199</span><br></pre></td></tr></table></figure></li><li>url中包含.js的http数据包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.uri contains <span class="string">&quot;.js&quot;</span></span><br></pre></td></tr></table></figure></li><li>内容包含username的http数据包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains <span class="string">&quot;username&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="捕获HTTPS数据（MacOS）"><a href="#捕获HTTPS数据（MacOS）" class="headerlink" title="捕获HTTPS数据（MacOS）"></a>捕获HTTPS数据（MacOS）</h2><ol><li>命令行启动谷歌浏览器，并指定<code>ssl-key-log-file=/tmp/.ssl-key.log</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --user-data-dir=/tmp/chrome --ssl-key-log-file=/tmp/.ssl-key.log</span><br></pre></td></tr></table></figure></li><li>配置Wireshark，依次打开<code>首选项</code>-&gt;<code>protocol</code>-&gt;<code>TLS</code></li><li>在输入框内输入<code>/tmp/.ssl-key.log</code><br><img src="https://cdn.rencheng.cc/blog/84byj.png"></li><li>在新开启的浏览器窗口，访问要抓取的内容</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022面试题整理</title>
      <link href="/2022/01/03/ios/general/2022%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
      <url>/2022/01/03/ios/general/2022%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>2022面试题整理</p><span id="more"></span><h2 id="字节跳动"><a href="#字节跳动" class="headerlink" title="字节跳动"></a>字节跳动</h2><h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><h3 id="之前项目的亮点，难点，擅长点"><a href="#之前项目的亮点，难点，擅长点" class="headerlink" title="之前项目的亮点，难点，擅长点"></a>之前项目的亮点，难点，擅长点</h3><h3 id="实例对象的内存结构？isa-t包含哪些信息"><a href="#实例对象的内存结构？isa-t包含哪些信息" class="headerlink" title="实例对象的内存结构？isa_t包含哪些信息"></a>实例对象的内存结构？isa_t包含哪些信息</h3><h3 id="block内为什么要实现-strong？"><a href="#block内为什么要实现-strong？" class="headerlink" title="block内为什么要实现__strong？"></a>block内为什么要实现__strong？</h3><h3 id="Swift的方法调度是什么？跟OC的区别？如何强制用消息发送"><a href="#Swift的方法调度是什么？跟OC的区别？如何强制用消息发送" class="headerlink" title="Swift的方法调度是什么？跟OC的区别？如何强制用消息发送"></a>Swift的方法调度是什么？跟OC的区别？如何强制用消息发送</h3><h3 id="Swift的写时复制底层如何实现？"><a href="#Swift的写时复制底层如何实现？" class="headerlink" title="Swift的写时复制底层如何实现？"></a>Swift的写时复制底层如何实现？</h3><h3 id="进程，线程；串行，并行；同步，异步；并行，并发"><a href="#进程，线程；串行，并行；同步，异步；并行，并发" class="headerlink" title="进程，线程；串行，并行；同步，异步；并行，并发"></a>进程，线程；串行，并行；同步，异步；并行，并发</h3><p>进程是资源分配的最小单位，线程是CPU调度的最小单位</p><p>并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔发生。<br>并发的关键是你有处理多个任务的能力，不一定要同时。<br>并行的关键是你有同时处理多个任务的能力。</p><p>串行：一个程序执行没结束前，另一个不能开始，要一个一个的执行。<br>并行：一个程序执行没结束，另一个已经开始。</p><p>同步：当程序1调用程序2时，程序1停下不动，直到程序2完成回到程序1来，程序1才继续执行下去。<br>异步：当程序1调用程序2时，程序1径自继续自己的下一个动作，不受程序2的的影响。</p><h3 id="APP启动流程，启动优化"><a href="#APP启动流程，启动优化" class="headerlink" title="APP启动流程，启动优化"></a>APP启动流程，启动优化</h3><h3 id="字符串为什么用copy"><a href="#字符串为什么用copy" class="headerlink" title="字符串为什么用copy"></a>字符串为什么用copy</h3><h3 id="属性特性内存管理上有哪些关键字"><a href="#属性特性内存管理上有哪些关键字" class="headerlink" title="属性特性内存管理上有哪些关键字"></a>属性特性内存管理上有哪些关键字</h3><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="信号量semaphore初始信号量为0会发生什么？"><a href="#信号量semaphore初始信号量为0会发生什么？" class="headerlink" title="信号量semaphore初始信号量为0会发生什么？"></a>信号量semaphore初始信号量为0会发生什么？</h4><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><h3 id="使用过的设计模式"><a href="#使用过的设计模式" class="headerlink" title="使用过的设计模式"></a>使用过的设计模式</h3><h3 id="静态编译的流程"><a href="#静态编译的流程" class="headerlink" title="静态编译的流程"></a>静态编译的流程</h3><h3 id="LinkMap是如何静态分析无用类的"><a href="#LinkMap是如何静态分析无用类的" class="headerlink" title="LinkMap是如何静态分析无用类的"></a>LinkMap是如何静态分析无用类的</h3><h3 id="runloop"><a href="#runloop" class="headerlink" title="runloop"></a>runloop</h3><h4 id="runloop跟UI渲染有哪些关系"><a href="#runloop跟UI渲染有哪些关系" class="headerlink" title="runloop跟UI渲染有哪些关系"></a>runloop跟UI渲染有哪些关系</h4><h4 id="source0和source1都包含哪些东西"><a href="#source0和source1都包含哪些东西" class="headerlink" title="source0和source1都包含哪些东西"></a>source0和source1都包含哪些东西</h4><h4 id="子线程是如何利用runloop进行线程保活的"><a href="#子线程是如何利用runloop进行线程保活的" class="headerlink" title="子线程是如何利用runloop进行线程保活的"></a>子线程是如何利用runloop进行线程保活的</h4><h3 id="如何hook-C函数"><a href="#如何hook-C函数" class="headerlink" title="如何hook C函数"></a>如何hook C函数</h3><h3 id="上机题"><a href="#上机题" class="headerlink" title="上机题"></a>上机题</h3><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><h4 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h4><p>含有n个数字的圆圈中每次删除第m个元素，求最后剩下的数字</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="LRU算法原理，包含哪些数据结构"><a href="#LRU算法原理，包含哪些数据结构" class="headerlink" title="LRU算法原理，包含哪些数据结构"></a>LRU算法原理，包含哪些数据结构</h4><h4 id="链表反转"><a href="#链表反转" class="headerlink" title="链表反转"></a>链表反转</h4><h2 id="BI安"><a href="#BI安" class="headerlink" title="BI安"></a>BI安</h2><h3 id="栅栏函数的实现细节"><a href="#栅栏函数的实现细节" class="headerlink" title="栅栏函数的实现细节"></a>栅栏函数的实现细节</h3><h2 id="京东"><a href="#京东" class="headerlink" title="京东"></a>京东</h2><h3 id="简述下KVC的处理流程，是否会触发KVO"><a href="#简述下KVC的处理流程，是否会触发KVO" class="headerlink" title="简述下KVC的处理流程，是否会触发KVO"></a>简述下KVC的处理流程，是否会触发KVO</h3><h3 id="启动优化方式"><a href="#启动优化方式" class="headerlink" title="启动优化方式"></a>启动优化方式</h3><h3 id="简述下TCP三次握手流程，为什么2次和4次不行？"><a href="#简述下TCP三次握手流程，为什么2次和4次不行？" class="headerlink" title="简述下TCP三次握手流程，为什么2次和4次不行？"></a>简述下TCP三次握手流程，为什么2次和4次不行？</h3><h3 id="阅读过哪些第三方源码？挑一个介绍一下？"><a href="#阅读过哪些第三方源码？挑一个介绍一下？" class="headerlink" title="阅读过哪些第三方源码？挑一个介绍一下？"></a>阅读过哪些第三方源码？挑一个介绍一下？</h3><h3 id="AutoreleasePool的底层结构"><a href="#AutoreleasePool的底层结构" class="headerlink" title="AutoreleasePool的底层结构"></a>AutoreleasePool的底层结构</h3><p>@autoreleasepool{} 本质上是一个结构体：<br>autoreleasepool会被转换成__AtAutoreleasePool<br>__AtAutoreleasePool 里面有两个函数objc_autoreleasePoolPush(),objc_autoreleasePoolPop().，其实一些列下来之后实际上调用得是AutoreleasePoolPage类中得push 和 pop两个类方法<br>push就是压栈操作，<br>pop就是出栈操作于此同时对其对象发送release消息进行释放</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="如何实现一个哈希表"><a href="#如何实现一个哈希表" class="headerlink" title="如何实现一个哈希表"></a>如何实现一个哈希表</h4><h2 id="快看漫画"><a href="#快看漫画" class="headerlink" title="快看漫画"></a>快看漫画</h2><h3 id="load-和-initilze-的调用情况，以及子类的调用顺序问题？"><a href="#load-和-initilze-的调用情况，以及子类的调用顺序问题？" class="headerlink" title="load 和 initilze 的调用情况，以及子类的调用顺序问题？"></a>load 和 initilze 的调用情况，以及子类的调用顺序问题？</h3><p><code>initialize</code>这个方法是第一次给某给类发送消息的时候调用，并且只会调用一次。 如果某一个类一直没有被用到，此方法也不会执行。<br><code>initialize</code>先初始化父类， 在初始化子类，子类的initialize 会覆盖父类的方法。<br>分类中实现了<code>initialize</code>会覆盖本来的initialize方法，如果多个分类都执行了initialize ，那么只是执行最后编译的那个。<br>load当程序被加载的时候就会调用， 其加载顺序为， 如果子类实现类load 先执行父类 -&gt; 在执行子类，而分类的在最后执行。<br>如果子类不实现load，父类的load就不会被执行。<br>load是线程安全的，其内部使用了锁，所以我们应该避免在load方法中线程阻塞。<br>load在分类中，重写了load方法， 不会影响其主类的方法。即不会覆盖本类的load方法<br>当有多个类的时候，每个类的load的执行顺序和编译顺序一致。</p><h3 id="frame和bounds的区别？UIScrollView滚动的时候bounds会发生变化吗？"><a href="#frame和bounds的区别？UIScrollView滚动的时候bounds会发生变化吗？" class="headerlink" title="frame和bounds的区别？UIScrollView滚动的时候bounds会发生变化吗？"></a>frame和bounds的区别？UIScrollView滚动的时候bounds会发生变化吗？</h3><h3 id="简述下事件传递过程"><a href="#简述下事件传递过程" class="headerlink" title="简述下事件传递过程"></a>简述下事件传递过程</h3><h3 id="weak的内存管理机制？"><a href="#weak的内存管理机制？" class="headerlink" title="weak的内存管理机制？"></a>weak的内存管理机制？</h3><h3 id="手势和触摸事件的优先级谁高？"><a href="#手势和触摸事件的优先级谁高？" class="headerlink" title="手势和触摸事件的优先级谁高？"></a>手势和触摸事件的优先级谁高？</h3><h3 id="如何实现一个内存缓存？如何实现一个磁盘缓存？"><a href="#如何实现一个内存缓存？如何实现一个磁盘缓存？" class="headerlink" title="如何实现一个内存缓存？如何实现一个磁盘缓存？"></a>如何实现一个内存缓存？如何实现一个磁盘缓存？</h3><h3 id="iOS消息转发的流程是什么？"><a href="#iOS消息转发的流程是什么？" class="headerlink" title="iOS消息转发的流程是什么？"></a>iOS消息转发的流程是什么？</h3><h3 id="iOS中定时器有哪些？dispatch-source-t为什么是准时的？"><a href="#iOS中定时器有哪些？dispatch-source-t为什么是准时的？" class="headerlink" title="iOS中定时器有哪些？dispatch_source_t为什么是准时的？"></a>iOS中定时器有哪些？dispatch_source_t为什么是准时的？</h3><h3 id="如何实现限速下载？"><a href="#如何实现限速下载？" class="headerlink" title="如何实现限速下载？"></a>如何实现限速下载？</h3><h2 id="中国婚博会"><a href="#中国婚博会" class="headerlink" title="中国婚博会"></a>中国婚博会</h2><h3 id="介绍下HTTP和HTTPS，HTTPS建立连接的过程"><a href="#介绍下HTTP和HTTPS，HTTPS建立连接的过程" class="headerlink" title="介绍下HTTP和HTTPS，HTTPS建立连接的过程"></a>介绍下HTTP和HTTPS，HTTPS建立连接的过程</h3><h3 id="介绍下pod-install的执行流程"><a href="#介绍下pod-install的执行流程" class="headerlink" title="介绍下pod install的执行流程"></a>介绍下<code>pod install</code>的执行流程</h3><h3 id="SDWebImage的实现原理，它是如何解决tableView的复用时出现图片错乱问题的呢？"><a href="#SDWebImage的实现原理，它是如何解决tableView的复用时出现图片错乱问题的呢？" class="headerlink" title="SDWebImage的实现原理，它是如何解决tableView的复用时出现图片错乱问题的呢？"></a>SDWebImage的实现原理，它是如何解决tableView的复用时出现图片错乱问题的呢？</h3><h2 id="微光"><a href="#微光" class="headerlink" title="微光"></a>微光</h2><h3 id="block和delegate的区别？"><a href="#block和delegate的区别？" class="headerlink" title="block和delegate的区别？"></a>block和delegate的区别？</h3><h3 id="OC的分类是什么设计模式"><a href="#OC的分类是什么设计模式" class="headerlink" title="OC的分类是什么设计模式"></a>OC的分类是什么设计模式</h3><h3 id="介绍下离屏渲染"><a href="#介绍下离屏渲染" class="headerlink" title="介绍下离屏渲染"></a>介绍下离屏渲染</h3><h3 id="两个category中出现同名方法，如何解决优先级问题？"><a href="#两个category中出现同名方法，如何解决优先级问题？" class="headerlink" title="两个category中出现同名方法，如何解决优先级问题？"></a>两个category中出现同名方法，如何解决优先级问题？</h3>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年终总结</title>
      <link href="/2021/12/31/summary/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2021/12/31/summary/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>一转眼，年终总结已经坚持到第5个年头了，这个总结对我来说非常有意义，每年都有收获。今年得到了一次晋升的机会，上升了一个新的高度后心态上的变化，身份上的变化，以及思考方式的变化，让我这一年改变很多。主要体现在几个方面：</p><ul><li>团队管理<ul><li>团队建设</li><li>活动组织</li><li>任务拆解</li><li>任务派发</li></ul></li><li>技术上<ul><li>服务架构</li><li>技术选型</li><li>方案落地</li><li>涉猎新技术</li></ul></li></ul><p>今年总结主要关键词：<strong>成长，管理</strong></p><span id="more"></span><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>今年的工作没有以往的纯粹，以前只需要对相关任务进行拆解开发并提测，今年所做的是挑战性有大幅增强，以前大多面对的事，今年大多面对的是人。因为做项目不是自己可以独立完成的，需要大家通力配合才能有好的结果。所以在不影响现有平台的工作前提下，我大多精力做的就是沟通协调的工作。虽说项目结果不是特别好，但是收获一帮可以为之奋斗的兄弟。👍🏻</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><ul><li>办了婚礼</li><li>长三角旅游</li><li>逛了很多公园</li><li>给老家投资了个卫生间</li></ul><h2 id="反省"><a href="#反省" class="headerlink" title="反省"></a>反省</h2><ul><li>加强韧性：明明再再再坚持下，结果就不一样</li><li>时间规划：今年在抖音上浪费了500个小时，罪过</li></ul><h2 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h2><ul><li>将学到的<code>Swift</code>，<code>Flutter</code>等技术进行落地；</li><li>敏捷迭代，系统分解，人员管理，计算机网络知识深层回顾；</li><li>对后端(Java)微服务架构有基本了解；</li></ul><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>2022年TODO：</p><ol><li>C++达到可开发程度</li><li>数据结构和算法（LeetCode-TOP300题）</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特殊的键值结构</title>
      <link href="/2021/11/16/ios/objc/%E7%89%B9%E6%AE%8A%E7%9A%84%E9%94%AE%E5%80%BC%E7%BB%93%E6%9E%84/"/>
      <url>/2021/11/16/ios/objc/%E7%89%B9%E6%AE%8A%E7%9A%84%E9%94%AE%E5%80%BC%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>平时开发中，大部分使用<code>NSDictionary</code>和<code>NSMutableDictionary</code>。下面介绍个特殊的。</p><ul><li>NSMapTable</li><li>NXMapTable（objc源码）</li></ul><span id="more"></span><h2 id="NSMapTable"><a href="#NSMapTable" class="headerlink" title="NSMapTable"></a>NSMapTable</h2><p><code>NSMapTable</code>是更广泛意义的<code>NSMutableDictionary</code>，区别于<code>NSMutableDictionary</code>，<code>NSMapTable</code>有如下特性：</p><ul><li>NSMapTable 是可变的；</li><li><strong>NSMapTable 可以持有 weak 类型的key和value变量；</strong></li><li>NSMapTable 可以在添加成员变量的时候复制成员；</li><li>NSMapTable 可以随意的存储指针并且利用指针的唯一性来进行 hash 同一性检查（检查成员变量是否有重复）和对比操作（equal）；</li></ul><p>使用方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSObject</span> *object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line"><span class="built_in">NSMapTable</span> *map = [[<span class="built_in">NSMapTable</span> alloc] initWithKeyOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span> valueOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span> capacity:<span class="number">10</span>];</span><br><span class="line">[map setObject:object forKey:<span class="string">@&quot;key&quot;</span>];</span><br><span class="line">[map removeObjectForKey:<span class="string">@&quot;key&quot;</span>];</span><br></pre></td></tr></table></figure><p>NSMapTableOptions介绍（源码中是使用静态常量做关联）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">    <span class="comment">// 默认行为，强引用集合中的对象，等同于NSMutableSet</span></span><br><span class="line">    <span class="built_in">NSMapTableStrongMemory</span>             = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 在将对象添加到集合之前，会拷贝对象</span></span><br><span class="line">    <span class="built_in">NSMapTableCopyIn</span>                   = <span class="built_in">NSPointerFunctionsCopyIn</span>,</span><br><span class="line">    <span class="comment">// 使用移位指针(shifted pointer)来做hash检测和确定两个对象是否相等；</span></span><br><span class="line">    <span class="comment">// 同时使用description方法来做描述字符串</span></span><br><span class="line">    <span class="built_in">NSMapTableObjectPointerPersonality</span> = <span class="built_in">NSPointerFunctionsObjectPointerPersonality</span>,</span><br><span class="line">    <span class="comment">// 弱引用集合中的对象，且在对象被释放后，会被正确的移除。</span></span><br><span class="line">    <span class="built_in">NSMapTableWeakMemory</span>               = <span class="built_in">NSPointerFunctionsWeakMemory</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NSUInteger</span> <span class="built_in">NSMapTableOptions</span>;</span><br></pre></td></tr></table></figure><h2 id="NXMapTable"><a href="#NXMapTable" class="headerlink" title="NXMapTable"></a>NXMapTable</h2><p>在objc源码中，找到了关于NSMapTable的类似实现。可以参考下</p><blockquote><p>Hash冲突解决方案：开放地址法</p></blockquote><p>NXMapTable存储结构（精简过）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NXMapTable</span> &#123;</span></span><br><span class="line">    <span class="comment">// 附属实体</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NXMapTablePrototype</span>* <span class="title">prototype</span>;</span></span><br><span class="line">    <span class="comment">// 真实的长度（存储了多少有效数据）</span></span><br><span class="line">    <span class="type">unsigned</span>count;</span><br><span class="line">    <span class="comment">// buckets实际所占用的空间大小-1；如果count * 4 &gt; numBuckets * 3 就扩容buckets</span></span><br><span class="line">    <span class="type">unsigned</span>nbBucketsMinusOne;</span><br><span class="line">    <span class="comment">// 数据[MapPair?]</span></span><br><span class="line">    <span class="type">void</span>* buckets;</span><br><span class="line">&#125; NXMapTable;</span><br></pre></td></tr></table></figure><p>NXMapTablePrototype存储结构（精简过）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NXMapTablePrototype</span> &#123;</span></span><br><span class="line">    <span class="comment">// hash的函数指针</span></span><br><span class="line">    <span class="type">unsigned</span>(* hash)(NXMapTable *,</span><br><span class="line">                                  <span class="type">const</span> <span class="type">void</span> * key);</span><br><span class="line">    <span class="comment">// 相等的函数指针</span></span><br><span class="line">    <span class="type">int</span>(* isEqual)(NXMapTable *,</span><br><span class="line">                                     <span class="type">const</span> <span class="type">void</span> * key1,</span><br><span class="line">                                     <span class="type">const</span> <span class="type">void</span> * key2);</span><br><span class="line">    <span class="comment">// 释放函数指针</span></span><br><span class="line">    <span class="type">void</span>(* <span class="built_in">free</span>)(NXMapTable *,</span><br><span class="line">                                  <span class="type">void</span> * key,</span><br><span class="line">                                  <span class="type">void</span> * value);</span><br><span class="line">    <span class="comment">// 预留字段</span></span><br><span class="line">    <span class="type">int</span>style;</span><br><span class="line">&#125; NXMapTablePrototype;</span><br></pre></td></tr></table></figure><p>MapPair存储结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">MapPair</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>*key;</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>*value;</span><br><span class="line">&#125; MapPair;</span><br></pre></td></tr></table></figure><p><code>NXMapTable的</code>构造器<code>NXCreateMapTable</code>和<code>NXCreateMapTableFromZone</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">NXMapTable *<span class="title function_">NXCreateMapTable</span><span class="params">(NXMapTablePrototype prototype, <span class="type">unsigned</span> capacity)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> NXCreateMapTableFromZone(prototype, capacity, malloc_default_zone());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NXMapTable *<span class="title function_">NXCreateMapTableFromZone</span><span class="params">(NXMapTablePrototype prototype, <span class="type">unsigned</span> capacity, <span class="type">void</span> *z)</span> &#123;</span><br><span class="line">    NXMapTable*table = (NXMapTable *)malloc_zone_malloc((<span class="type">malloc_zone_t</span> *)z, <span class="keyword">sizeof</span>(NXMapTable));</span><br><span class="line">    NXMapTablePrototype*proto;</span><br><span class="line">    <span class="keyword">if</span> (! prototypes) prototypes = NXCreateHashTable(protoPrototype, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (! prototype.hash || ! prototype.isEqual || ! prototype.<span class="built_in">free</span> || prototype.style) &#123;</span><br><span class="line">_objc_inform(<span class="string">&quot;*** NXCreateMapTable: invalid creation parameters\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    proto = (NXMapTablePrototype *)NXHashGet(prototypes, &amp;prototype); </span><br><span class="line">    <span class="keyword">if</span> (! proto) &#123;</span><br><span class="line">proto = (NXMapTablePrototype *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NXMapTablePrototype));</span><br><span class="line">*proto = prototype;</span><br><span class="line">    (<span class="type">void</span>)NXHashInsert(prototypes, proto);</span><br><span class="line">    &#125;</span><br><span class="line">    table-&gt;prototype = proto; table-&gt;count = <span class="number">0</span>;</span><br><span class="line">    table-&gt;nbBucketsMinusOne = exp2u(log2u(capacity)+<span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">    table-&gt;buckets = allocBuckets(z, table-&gt;nbBucketsMinusOne + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">NXMapGet</span><span class="params">(NXMapTable *table, <span class="type">const</span> <span class="type">void</span> *key)</span> &#123;</span><br><span class="line">    <span class="type">void</span>*value;</span><br><span class="line">    <span class="keyword">return</span> (_NXMapMember(table, key, &amp;value) != NX_MAPNOTAKEY) ? value : <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> *_NXMapMember(NXMapTable *table, <span class="type">const</span> <span class="type">void</span> *key, <span class="type">void</span> **value) &#123;</span><br><span class="line">    MapPair*pairs = (MapPair *)table-&gt;buckets;</span><br><span class="line">    <span class="type">unsigned</span>index = bucketOf(table, key);</span><br><span class="line">    MapPair*<span class="built_in">pair</span> = pairs + index;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pair</span>-&gt;key == NX_MAPNOTAKEY) <span class="keyword">return</span> NX_MAPNOTAKEY;</span><br><span class="line">    validateKey(table, <span class="built_in">pair</span>, index, index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isEqual(table, <span class="built_in">pair</span>-&gt;key, key)) &#123;</span><br><span class="line">*value = (<span class="type">void</span> *)<span class="built_in">pair</span>-&gt;value;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">void</span> *)<span class="built_in">pair</span>-&gt;key;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">unsigned</span>index2 = index;</span><br><span class="line"><span class="keyword">while</span> ((index2 = nextIndex(table, index2)) != index) &#123;</span><br><span class="line">    <span class="built_in">pair</span> = pairs + index2;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pair</span>-&gt;key == NX_MAPNOTAKEY) <span class="keyword">return</span> NX_MAPNOTAKEY;</span><br><span class="line">    validateKey(table, <span class="built_in">pair</span>, index, index2);</span><br><span class="line">    <span class="keyword">if</span> (isEqual(table, <span class="built_in">pair</span>-&gt;key, key)) &#123;</span><br><span class="line">    *value = (<span class="type">void</span> *)<span class="built_in">pair</span>-&gt;value;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">void</span> *)<span class="built_in">pair</span>-&gt;key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> NX_MAPNOTAKEY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">NXMapInsert</span><span class="params">(NXMapTable *table, <span class="type">const</span> <span class="type">void</span> *key, <span class="type">const</span> <span class="type">void</span> *value)</span> &#123;</span><br><span class="line">    MapPair*pairs = (MapPair *)table-&gt;buckets;</span><br><span class="line">    <span class="type">unsigned</span>index = bucketOf(table, key);</span><br><span class="line">    MapPair*<span class="built_in">pair</span> = pairs + index;</span><br><span class="line">    <span class="keyword">if</span> (key == NX_MAPNOTAKEY) &#123;</span><br><span class="line">_objc_inform(<span class="string">&quot;*** NXMapInsert: invalid key: -1\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> numBuckets = table-&gt;nbBucketsMinusOne + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pair</span>-&gt;key == NX_MAPNOTAKEY) &#123;</span><br><span class="line"><span class="built_in">pair</span>-&gt;key = key; <span class="built_in">pair</span>-&gt;value = value;</span><br><span class="line">table-&gt;count++;</span><br><span class="line"><span class="keyword">if</span> (table-&gt;count * <span class="number">4</span> &gt; numBuckets * <span class="number">3</span>) _NXMapRehash(table);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isEqual(table, <span class="built_in">pair</span>-&gt;key, key)) &#123;</span><br><span class="line"><span class="type">const</span> <span class="type">void</span>*old = <span class="built_in">pair</span>-&gt;value;</span><br><span class="line"><span class="keyword">if</span> (old != value) <span class="built_in">pair</span>-&gt;value = value;<span class="comment">/* avoid writing unless needed! */</span></span><br><span class="line"><span class="keyword">return</span> (<span class="type">void</span> *)old;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (table-&gt;count == numBuckets) &#123;</span><br><span class="line"><span class="comment">/* no room: rehash and retry */</span></span><br><span class="line">_NXMapRehash(table);</span><br><span class="line"><span class="keyword">return</span> NXMapInsert(table, key, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">unsigned</span>index2 = index;</span><br><span class="line"><span class="keyword">while</span> ((index2 = nextIndex(table, index2)) != index) &#123;</span><br><span class="line">    <span class="built_in">pair</span> = pairs + index2;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pair</span>-&gt;key == NX_MAPNOTAKEY) &#123;</span><br><span class="line"><span class="built_in">pair</span>-&gt;key = key; <span class="built_in">pair</span>-&gt;value = value;</span><br><span class="line">table-&gt;count++;</span><br><span class="line"><span class="keyword">if</span> (table-&gt;count * <span class="number">4</span> &gt; numBuckets * <span class="number">3</span>) _NXMapRehash(table);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isEqual(table, <span class="built_in">pair</span>-&gt;key, key)) &#123;</span><br><span class="line"><span class="type">const</span> <span class="type">void</span>*old = <span class="built_in">pair</span>-&gt;value;</span><br><span class="line"><span class="keyword">if</span> (old != value) <span class="built_in">pair</span>-&gt;value = value;<span class="comment">/* avoid writing unless needed! */</span></span><br><span class="line"><span class="keyword">return</span> (<span class="type">void</span> *)old;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* no room: can&#x27;t happen! */</span></span><br><span class="line">_objc_inform(<span class="string">&quot;**** NXMapInsert: bug\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">NXMapRemove</span><span class="params">(NXMapTable *table, <span class="type">const</span> <span class="type">void</span> *key)</span> &#123;</span><br><span class="line">    MapPair*pairs = (MapPair *)table-&gt;buckets;</span><br><span class="line">    <span class="type">unsigned</span>index = bucketOf(table, key);</span><br><span class="line">    MapPair*<span class="built_in">pair</span> = pairs + index;</span><br><span class="line">    <span class="type">unsigned</span>chain = <span class="number">1</span>; <span class="comment">/* number of non-nil pairs in a row */</span></span><br><span class="line">    <span class="type">int</span>found = <span class="number">0</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>*old = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pair</span>-&gt;key == NX_MAPNOTAKEY) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">/* compute chain */</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="type">unsigned</span>index2 = index;</span><br><span class="line"><span class="keyword">if</span> (isEqual(table, <span class="built_in">pair</span>-&gt;key, key)) &#123;found ++; old = <span class="built_in">pair</span>-&gt;value; &#125;</span><br><span class="line"><span class="keyword">while</span> ((index2 = nextIndex(table, index2)) != index) &#123;</span><br><span class="line">    <span class="built_in">pair</span> = pairs + index2;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pair</span>-&gt;key == NX_MAPNOTAKEY) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> (isEqual(table, <span class="built_in">pair</span>-&gt;key, key)) &#123;found ++; old = <span class="built_in">pair</span>-&gt;value; &#125;</span><br><span class="line">    chain++;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (! found) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (found != <span class="number">1</span>) _objc_inform(<span class="string">&quot;**** NXMapRemove: incorrect table\n&quot;</span>);</span><br><span class="line">    <span class="comment">/* remove then reinsert */</span></span><br><span class="line">    &#123;</span><br><span class="line">MapPairbuffer[<span class="number">16</span>];</span><br><span class="line">MapPair*aux = (chain &gt; <span class="number">16</span>) ? (MapPair *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MapPair)*(chain<span class="number">-1</span>)) : buffer;</span><br><span class="line"><span class="type">unsigned</span>auxnb = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span>nb = chain;</span><br><span class="line"><span class="type">unsigned</span>index2 = index;</span><br><span class="line"><span class="keyword">while</span> (nb--) &#123;</span><br><span class="line">    <span class="built_in">pair</span> = pairs + index2;</span><br><span class="line">    <span class="keyword">if</span> (! isEqual(table, <span class="built_in">pair</span>-&gt;key, key)) aux[auxnb++] = *<span class="built_in">pair</span>;</span><br><span class="line">    <span class="built_in">pair</span>-&gt;key = NX_MAPNOTAKEY; <span class="built_in">pair</span>-&gt;value = <span class="literal">NULL</span>;</span><br><span class="line">    index2 = nextIndex(table, index2);</span><br><span class="line">&#125;</span><br><span class="line">table-&gt;count -= chain;</span><br><span class="line"><span class="keyword">if</span> (auxnb != chain<span class="number">-1</span>) _objc_inform(<span class="string">&quot;**** NXMapRemove: bug\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (auxnb--) NXMapInsert(table, aux[auxnb].key, aux[auxnb].value);</span><br><span class="line"><span class="keyword">if</span> (chain &gt; <span class="number">16</span>) <span class="built_in">free</span>(aux);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">void</span> *)old;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift-Runtime</title>
      <link href="/2021/04/26/ios/swift/Swift-Runtime/"/>
      <url>/2021/04/26/ios/swift/Swift-Runtime/</url>
      
        <content type="html"><![CDATA[<p>在OC中，因其动态性我们经常会用到<a href="https://rencheng.cc/2018/05/31/ios/objc/OC-Runtime/">Runtime</a>相关的API，探索一下Runtime在Swift中的注意点</p><span id="more"></span><ul><li>对于<code>纯Swift</code>类来说，没有动态特性。方法和属性不加任何修饰符的情况下，这个时候其实已经不具备我们所谓的<code>Runtime</code>特性了，这和C++方法调度(V-Table调度) 是不谋而合的。</li><li>对于<code>纯Swift</code>类，方法和属性添加<code>@objc</code>标识的情况下，当前我们可以通过<code>Runtime API</code>拿到，但是在我们的OC中是没法进行调度的。</li><li>对于继承自<code>NSObject</code>的类，如果我们想要动态的获取当前的属性和方法，必须在其声明前添加<code>@objc</code>关键字。否则也是没有办法通过<code>Runtime</code> API 获取的。</li><li>如果想使用OC的动态转发机制，必须同时加<a href="https://rencheng.cc/2021/02/15/ios/swift/Swift-%E5%87%BD%E6%95%B0%E6%B4%BE%E5%8F%91/#objc-dynamic"><code>@objc</code>和<code>dynamic</code></a>关键字</li></ul><h2 id="获取方法列表和属性列表"><a href="#获取方法列表和属性列表" class="headerlink" title="获取方法列表和属性列表"></a>获取方法列表和属性列表</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>: <span class="title class_ inherited__">NSObject</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">teach</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你好啊&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">func</span> <span class="title function_">teac1</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你好啊&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">traversalMethod</span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> methodCount: <span class="type">UInt32</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> methodList <span class="operator">=</span> class_copyMethodList(<span class="type">Teacher</span>.<span class="keyword">self</span>, <span class="operator">&amp;</span>methodCount)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="built_in">numericCast</span>(methodCount) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> method <span class="operator">=</span> methodList<span class="operator">?</span>[i] &#123;</span><br><span class="line">            <span class="keyword">let</span> methodName <span class="operator">=</span> method_getName(method)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;方法:<span class="subst">\(methodName)</span>&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;未找到方法&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">traversalProperty</span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> propertyCount: <span class="type">UInt32</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> propertyList <span class="operator">=</span> class_copyPropertyList(<span class="type">Teacher</span>.<span class="keyword">self</span>, <span class="operator">&amp;</span>propertyCount)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="built_in">numericCast</span>(propertyCount) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> property <span class="operator">=</span> propertyList<span class="operator">?</span>[i] &#123;</span><br><span class="line">            <span class="keyword">let</span> propertyName <span class="operator">=</span> property_getName(property)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;属性:<span class="subst">\(String(utf8String: propertyName) <span class="operator">??</span> <span class="string">&quot;&quot;</span>)</span>&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;未找到属性&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">traversalMethod()</span><br><span class="line">traversalProperty()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift源码编译</title>
      <link href="/2021/04/25/ios/swift/Swift%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
      <url>/2021/04/25/ios/swift/Swift%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p>最近在网上经常能看到源码编译的文章，整理一下关于源码编译的问题。</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境"></a>硬件环境</h3><ol><li><code>Macbook Pro</code> (Retina, 15-inch, Mid 2015)</li><li>磁盘空间**<code>60G</code>**</li></ol><h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><ol><li>macOS Big Sur 11.2.3</li><li>Xcode 12.4 (12D4e)</li><li>Visual studio Code (1.55.2)</li><li>Python 3.9.4</li><li>cmake 3.20.1</li><li>ninja 1.10.2</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install cmake ninja</span><br></pre></td></tr></table></figure><blockquote><p>macOS，Xcode，swift最好用对应的版本，以防等待半个小时失败后骂骂咧咧</p></blockquote><h2 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a>编译步骤</h2><h3 id="一、克隆-swift-源码"><a href="#一、克隆-swift-源码" class="headerlink" title="一、克隆 swift 源码"></a>一、克隆 swift 源码</h3><ol><li><p>创建文件夹，并进入该文件夹</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> swift-source &amp;&amp; <span class="built_in">cd</span> swift-source</span><br></pre></td></tr></table></figure></li><li><p>开始克隆代码 </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --branch  swift-5.3.2-RELEASE git@github.com:apple/swift.git</span><br></pre></td></tr></table></figure><blockquote><p>5.4版本克隆下来842M</p></blockquote></li></ol><h3 id="二、拉取编译需要的依赖-git-submodule"><a href="#二、拉取编译需要的依赖-git-submodule" class="headerlink" title="二、拉取编译需要的依赖(git submodule)"></a>二、拉取编译需要的依赖(git submodule)</h3><ol><li><p>切换到swift-source文件夹（<strong>注意看</strong>）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果在这个文件夹请忽略</span></span><br><span class="line"><span class="built_in">cd</span> swift-source</span><br></pre></td></tr></table></figure></li><li><p>执行脚本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./swift/utils/update-checkout --tag swift-5.4-RELEASE --<span class="built_in">clone</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>执行结果</strong><br><img src="https://cdn.rencheng.cc/blog/2w1fe.png"></p><blockquote><ol><li>如果出现Git错误请执行如下命令</li></ol></blockquote><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 524288000 &amp;&amp; git config --global http.sslVerify <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure></code></pre><blockquote><ol start="2"><li>文件大小大概3.67G左右(包含开始克隆的Swift源码)</li></ol></blockquote><h3 id="三、编译"><a href="#三、编译" class="headerlink" title="三、编译"></a>三、编译</h3><p>编译的过程中可以使用<code>ninja</code>，也可以使用<code>Xcode</code>。由于<code>Xcode</code>需要和特定版本绑定，并且<code>Xcode</code>编译之后的支持性不是特别好。推荐使用<code>njnja</code>来作为编译工具。</p><p>使用<code>ninja</code>编译（推荐）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./swift/utils/build-script -r --debug-swift-stdlib --lldb</span><br></pre></td></tr></table></figure><p>使用<code>Xcode</code>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./swift/utils/build-script -x -R --debug-swift</span><br></pre></td></tr></table></figure><blockquote><p>输出没有Error代表编译完成</p></blockquote><blockquote><p>编译是挺耗时并且烧设备。我的Mac温度到了95℃</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dictionary原理</title>
      <link href="/2021/04/22/ios/swift/Dictionary%E5%8E%9F%E7%90%86/"/>
      <url>/2021/04/22/ios/swift/Dictionary%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>字典这种数据结构在现代的开发语言中比较常见（PHP叫关联数组）<br>探索一下其底层原理。</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>现在市面上有很多的场景需要Key-Value对存储方式。比如iOS的键值编码，后端的缓存（Redis和Memcached），和一些KVStore配置等都需要这种结构存储。为什么不用数组，链表等其他方式呢？因为它“快”，为什么快呢？下面就来探索一下。</p><h3 id="哈希表（散列表）"><a href="#哈希表（散列表）" class="headerlink" title="哈希表（散列表）"></a>哈希表（散列表）</h3><p>根据关键字（Key Value）而直接访问在内存存储位置的数据结构。也就是说，它通过计算一个关于键值映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称作散列函数，存放记录的数组成为散列表。</p><h3 id="哈希函数（散列函数）"><a href="#哈希函数（散列函数）" class="headerlink" title="哈希函数（散列函数）"></a>哈希函数（散列函数）</h3><ul><li>直接寻址法</li><li>数字分析法</li><li>平方取中法</li><li>折叠法</li><li>随机余数法</li><li>除留余数法</li></ul><h3 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h3><p>当两个Key值通过哈希函数映射的索引为同一位置时，则产生哈希冲突</p><p><strong>解决方法：</strong></p><ul><li>开放地址法</li><li>拉链法</li></ul><h3 id="负载因子"><a href="#负载因子" class="headerlink" title="负载因子"></a>负载因子</h3><p>填入表中的元素个数 &#x2F; 哈希表的长度</p><blockquote><p>注：一般<strong>3&#x2F;4</strong>的时候需要对哈希表扩容</p></blockquote><h2 id="Swift中Dictionary的原理"><a href="#Swift中Dictionary的原理" class="headerlink" title="Swift中Dictionary的原理"></a>Swift中Dictionary的原理</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CI</title>
      <link href="/2021/03/30/ios/general/CI/"/>
      <url>/2021/03/30/ios/general/CI/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>代码检测</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成用于后续代码检测的解析文件</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="built_in">set</span> +e</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> MCShow</span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line"></span><br><span class="line">swiftlint lint --path MCShow &gt; MCShow-swiftlint.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure><p><strong>环境配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> MCShow</span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 操作Jenkins打包环境配置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$Environment</span>&quot;</span> == <span class="string">&quot;ONLINE&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;0&quot;</span> &gt; ./domain_config</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$Environment</span>&quot;</span> == <span class="string">&quot;RELEASE&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt; ./domain_config</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$Environment</span>&quot;</span> == <span class="string">&quot;TEST&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;2&quot;</span> &gt; ./domain_config</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$Environment</span>&quot;</span> == <span class="string">&quot;DEV&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;3&quot;</span> &gt; ./domain_config</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><strong>拷贝依赖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">startInfo=<span class="string">&quot;开始引入依赖库&quot;</span></span><br><span class="line">endInfo=<span class="string">&quot;依赖库引入完成&quot;</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="built_in">cd</span> MCShow</span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://10.0.72.225:7890 http_proxy=http://10.0.72.225:7890 all_proxy=socks5://10.0.72.225:7890</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$startInfo</span></span><br><span class="line">pod install</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$endInfo</span></span><br><span class="line"><span class="comment"># 拷贝资源库</span></span><br><span class="line"><span class="comment"># targetUmdevicePath=&quot;./Pods/UMDevice/UMDevice_1.1.0/UMDevice.framework/&quot;</span></span><br><span class="line"><span class="comment"># srcUmdevicePath=&quot;../Resource/libs/UMDevice.framework/&quot;</span></span><br><span class="line"><span class="comment"># rm -rf $targetUmdevicePath</span></span><br><span class="line"><span class="comment"># cp -r $srcUmdevicePath $targetUmdevicePath</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝融云资源</span></span><br><span class="line">targetRongcloudPath=<span class="string">&quot;./Pods/RongCloudIM/RongCloudIM/RongCloud.bundle/&quot;</span></span><br><span class="line">srcRongcloudPath=<span class="string">&quot;../Resource/RongCloud.bundle/&quot;</span></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$targetRongcloudPath</span></span><br><span class="line"><span class="built_in">cp</span> -r <span class="variable">$srcRongcloudPath</span> <span class="variable">$targetRongcloudPath</span></span><br></pre></td></tr></table></figure><p><strong>分发</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">offical=<span class="string">&quot;Fir.im-Official&quot;</span></span><br><span class="line">standby=<span class="string">&quot;Fir.im-Standby&quot;</span></span><br><span class="line">testflight=<span class="string">&quot;TestFlight&quot;</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="built_in">cd</span> MCShow</span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;授权钥匙串访问权限&quot;</span></span><br><span class="line">security unlock-keychain -p 111111 <span class="variable">$HOME</span>/Library/Keychains/login.keychain</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;开始打包&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">checkIpa</span></span>()&#123;</span><br><span class="line">    fileName=<span class="string">&quot;MCShow.ipa&quot;</span></span><br><span class="line">filePath=<span class="string">&quot;app/<span class="variable">$fileName</span>&quot;</span></span><br><span class="line">fileCreateTimeInterval=`<span class="built_in">date</span> -r <span class="string">&quot;<span class="variable">$filePath</span>&quot;</span> +%s`</span><br><span class="line">    nowTimeInterval=`<span class="built_in">date</span> +%s`</span><br><span class="line">    diff=$((<span class="variable">$fileCreateTimeInterval</span>-<span class="variable">$nowTimeInterval</span>))</span><br><span class="line">    <span class="keyword">if</span> [ 0 -gt <span class="variable">$diff</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">let</span> diff=0-<span class="variable">$diff</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    limitTimeInterval=1800</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$diff</span> -gt <span class="variable">$limitTimeInterval</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;安装包检测有问题&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span> 2005</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">firPublish</span></span>()&#123;</span><br><span class="line">    fir publish app/MCShow.ipa --token=<span class="variable">$1</span> --specify-icon-file=fastlane/logo.jpg --changelog=<span class="variable">$ReleaseNotes</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ShowPlatform</span>&quot;</span> == <span class="string">&quot;<span class="variable">$offical</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$offical</span>;</span><br><span class="line">fastlane archive;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;打包结束&quot;</span></span><br><span class="line">    checkIpa;</span><br><span class="line">firPublish 9e878f3339b1c1efb036ccf17ca96072;</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$ShowPlatform</span>&quot;</span> == <span class="string">&quot;<span class="variable">$standby</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$standby</span>;</span><br><span class="line">fastlane archive;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;打包结束&quot;</span></span><br><span class="line">    checkIpa;</span><br><span class="line">    firPublish 909f3f4743198a622a0540c0685beab7;</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$ShowPlatform</span>&quot;</span> == <span class="string">&quot;<span class="variable">$testflight</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$testflight</span>;</span><br><span class="line">fastlane beta;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;打包结束&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><strong>通知</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> MCShow</span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">appName=<span class="string">&quot;&quot;</span></span><br><span class="line">appVersion=<span class="string">&quot;&quot;</span></span><br><span class="line">appBuild=<span class="string">&quot;&quot;</span></span><br><span class="line">appBundleId=<span class="string">&quot;&quot;</span></span><br><span class="line">platform=<span class="string">&quot;iOS&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">getAppInfo</span></span>()&#123;</span><br><span class="line">basePath=`<span class="built_in">pwd</span>`</span><br><span class="line">ipaFilePath=<span class="string">&quot;<span class="variable">$basePath</span>/app/MCShow.ipa&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$ipaFilePath</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;未找到ipa包 <span class="variable">$ipaFilePath</span>&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 2002</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">temIpaDirName=<span class="string">&quot;TempPayload&quot;</span></span><br><span class="line">temIpaDirPath=<span class="string">&quot;<span class="variable">$&#123;basePath&#125;</span>/<span class="variable">$&#123;temIpaDirName&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$temIpaDirPath</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$&#123;temIpaDirPath&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -f <span class="string">&quot;<span class="variable">$ipaFilePath</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    unzip <span class="string">&quot;<span class="variable">$ipaFilePath</span>&quot;</span> -d <span class="string">&quot;<span class="variable">$temIpaDirPath</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"></span><br><span class="line">appDir=<span class="string">&quot;<span class="variable">$temIpaDirPath</span>/Payload/`ls &quot;</span><span class="variable">$temIpaDirPath</span>/<span class="string">&quot;Payload`&quot;</span></span><br><span class="line">lcmInfoPlist=<span class="string">&quot;<span class="variable">$&#123;appDir&#125;</span>/Info.plist&quot;</span></span><br><span class="line"></span><br><span class="line">appName=`/usr/libexec/PlistBuddy -c <span class="string">&quot;Print :CFBundleDisplayName&quot;</span> <span class="variable">$lcmInfoPlist</span>`</span><br><span class="line">appVersion=`/usr/libexec/PlistBuddy -c <span class="string">&quot;Print :CFBundleShortVersionString&quot;</span> <span class="variable">$lcmInfoPlist</span>`</span><br><span class="line">appBuild=`/usr/libexec/PlistBuddy -c <span class="string">&quot;Print :CFBundleVersion&quot;</span> <span class="variable">$lcmInfoPlist</span>`</span><br><span class="line">appBundleId=`/usr/libexec/PlistBuddy -c <span class="string">&quot;Print :CFBundleIdentifier&quot;</span> <span class="variable">$lcmInfoPlist</span>`</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$temIpaDirPath</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$&#123;temIpaDirPath&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getAppInfo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">offical=<span class="string">&quot;Fir.im-Official&quot;</span></span><br><span class="line">standby=<span class="string">&quot;Fir.im-Standby&quot;</span></span><br><span class="line">testflight=<span class="string">&quot;TestFlight&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ShowPlatform</span>&quot;</span> == <span class="string">&quot;<span class="variable">$testflight</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span> 2001</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#钉钉通知</span></span><br><span class="line">accessToken=<span class="string">&quot;c50924ce66e3f842e454089c2f6e75222892d56e9e7f143ef8c235539a66f984&quot;</span></span><br><span class="line">iconUrl=<span class="string">&quot;https://tva1.sinaimg.cn/large/008eGmZEly1gomwuhsuu7j305k05k748.jpg&quot;</span></span><br><span class="line">downloadUrl=<span class="string">&quot;http://fir.renchengqi.com/showios&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ShowPlatform</span>&quot;</span> == <span class="string">&quot;<span class="variable">$offical</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">downloadUrl=<span class="string">&quot;http://fir.hulai.com/shai&quot;</span></span><br><span class="line">    accessToken=<span class="string">&quot;c50924ce66e3f842e454089c2f6e75222892d56e9e7f143ef8c235539a66f984&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;https://oapi.dingtalk.com/robot/send?access_token=<span class="variable">$accessToken</span>&quot;</span></span><br><span class="line">header=<span class="string">&quot;Content-Type: application/json&quot;</span></span><br><span class="line"></span><br><span class="line">title=<span class="string">&quot;<span class="variable">$appName</span>(<span class="variable">$platform</span>)更新&quot;</span></span><br><span class="line">text=<span class="string">&quot;[<span class="variable">$appName</span>(<span class="variable">$platform</span>)更新](<span class="variable">$downloadUrl</span>)\n\n \</span></span><br><span class="line"><span class="string">![<span class="variable">$appName</span>](<span class="variable">$iconUrl</span>)\n\n \</span></span><br><span class="line"><span class="string">链接:[<span class="variable">$downloadUrl</span>](<span class="variable">$downloadUrl</span>)\n\n \</span></span><br><span class="line"><span class="string">版本: <span class="variable">$appVersion</span> (Build: <span class="variable">$appBuild</span>)\n\n \</span></span><br><span class="line"><span class="string">更新内容: <span class="variable">$ReleaseNotes</span>\n\n \</span></span><br><span class="line"><span class="string">Git记录: [https://jenkins.hulai.com/view/shai/job/shai-ios/<span class="variable">$&#123;BUILD_NUMBER&#125;</span>/changes](https://jenkins.hulai.com/view/shai/job/shai-ios/<span class="variable">$&#123;BUILD_NUMBER&#125;</span>/changes)\n&quot;</span></span><br><span class="line"></span><br><span class="line">rawData=<span class="string">&quot;&#123;  \&quot;msgtype\&quot;:\&quot;actionCard\&quot;,  \</span></span><br><span class="line"><span class="string">            \&quot;actionCard\&quot;: &#123; \</span></span><br><span class="line"><span class="string">                \&quot;title\&quot;: \&quot;<span class="variable">$title</span>\&quot;, \</span></span><br><span class="line"><span class="string">                \&quot;text\&quot;: \&quot;<span class="variable">$text</span>\&quot;,  \</span></span><br><span class="line"><span class="string">                \&quot;hideAvatar\&quot;: \&quot;0\&quot;,  \</span></span><br><span class="line"><span class="string">                \&quot;btnOrientation\&quot;: \&quot;0\&quot;,  \</span></span><br><span class="line"><span class="string">                \&quot;singleTitle\&quot;: \&quot;\&quot; \</span></span><br><span class="line"><span class="string">            &#125; \</span></span><br><span class="line"><span class="string">        &#125;&quot;</span></span><br><span class="line"></span><br><span class="line">curl --request POST <span class="string">&quot;<span class="variable">$url</span>&quot;</span> -H <span class="string">&quot;<span class="variable">$header</span>&quot;</span> --data-raw <span class="string">&quot;<span class="variable">$rawData</span>&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift-指针</title>
      <link href="/2021/03/18/ios/swift/Swift-%E6%8C%87%E9%92%88/"/>
      <url>/2021/03/18/ios/swift/Swift-%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<p>在使用C&#x2F;C++&#x2F;OC语言中，经常会用到指针的语法，也理解指针的意义。<br>在Swift中，将指针包装成<strong>不安全</strong>的<code>指针类型</code>。</p><span id="more"></span><h2 id="定义概念对齐"><a href="#定义概念对齐" class="headerlink" title="定义概念对齐"></a>定义概念对齐</h2><table><thead><tr><th align="left">C</th><th align="left">Swift</th></tr></thead><tbody><tr><td align="left"><code>const Pointee *</code></td><td align="left"><code>UnsafePointer&lt;Pointee&gt;</code></td></tr><tr><td align="left"><code>Pointee *</code></td><td align="left"><code>UnsafeMutablePointer&lt;Pointee&gt;</code></td></tr><tr><td align="left"><code>const void *</code></td><td align="left"><code>UnsafeRawPointer</code></td></tr><tr><td align="left"><code>void *</code></td><td align="left"><code>UnsafeMutableRawPointer</code></td></tr></tbody></table><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">test1</span>(<span class="keyword">_</span> <span class="params">ptr</span>: <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Int</span>&gt;)&#123;</span><br><span class="line">    ptr.pointee <span class="operator">+=</span> <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">test2</span>(<span class="keyword">_</span> <span class="params">ptr</span>: <span class="type">UnsafePointer</span>&lt;<span class="type">Int</span>&gt;) &#123;</span><br><span class="line">    <span class="built_in">print</span>(ptr.pointee)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test1(<span class="operator">&amp;</span>age)</span><br><span class="line">test2(<span class="operator">&amp;</span>age) <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">print</span>(age) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">test3</span>(<span class="keyword">_</span> <span class="params">ptr</span>: <span class="type">UnsafeMutableRawPointer</span>) &#123;</span><br><span class="line">    ptr.storeBytes (of: <span class="number">20</span>, as: <span class="type">Int</span>.<span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">test4</span>(<span class="keyword">_</span> <span class="params">ptr</span>: <span class="type">UnsafeRawPointer</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(ptr.load(as: <span class="type">Int</span>.<span class="keyword">self</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test3(<span class="operator">&amp;</span>age)</span><br><span class="line">test4(<span class="operator">&amp;</span>age) <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">print</span>(age) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift-内存访问冲突</title>
      <link href="/2021/03/17/ios/swift/%E5%86%85%E5%AD%98%E8%AE%BF%E9%97%AE%E5%86%B2%E7%AA%81/"/>
      <url>/2021/03/17/ios/swift/%E5%86%85%E5%AD%98%E8%AE%BF%E9%97%AE%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<p>内存访问冲突产生条件</p><ul><li>至少一个是写入操作</li><li>它们访问的是同一块内存</li><li>它们的访问时间重叠（比如在同一个函数内）</li></ul><span id="more"></span><h2 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h2><p><strong>不存在访问冲突</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">increment</span>(<span class="keyword">_</span> <span class="params">num</span>: <span class="keyword">inout</span> <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    num <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> step <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">step <span class="operator">=</span> increment(<span class="operator">&amp;</span>step)</span><br></pre></td></tr></table></figure><p><strong>存在访问冲突</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> step <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">increment</span>(<span class="keyword">_</span> <span class="params">num</span>: <span class="keyword">inout</span> <span class="type">Int</span>) &#123;</span><br><span class="line">    num <span class="operator">+=</span> step</span><br><span class="line">&#125;</span><br><span class="line">increment(<span class="operator">&amp;</span>step)</span><br></pre></td></tr></table></figure><p>报错<br><img src="https://cdn.rencheng.cc/blog/3h9m8.png"><br>如何解决</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> step <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> copyOfStep <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">increment</span>(<span class="keyword">_</span> <span class="params">num</span>: <span class="keyword">inout</span> <span class="type">Int</span>) &#123;</span><br><span class="line">    num <span class="operator">+=</span> step</span><br><span class="line">&#125;</span><br><span class="line">increment(<span class="operator">&amp;</span>copyOfStep)</span><br></pre></td></tr></table></figure><h2 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h2><p><img src="https://cdn.rencheng.cc/blog/0k2u1.png"><br><img src="https://cdn.rencheng.cc/blog/i0x6v.png"></p><h2 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h2><p>tulpe是一块结构体内存内存，所以修改内部的数据也会报错<br><img src="https://cdn.rencheng.cc/blog/7q2eg.png"></p><p><img src="https://cdn.rencheng.cc/blog/2qlcg.png"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>如果下面的条件可以满足，就说明重叠访问结构体的属性是安全的</p><ul><li>你只访问实例存储属性 ，不是计算属性或者类属性</li><li>结构体是局部变量而非全局变量</li><li>结构体要么没有被闭包捕获要么只被非逃逸闭包捕获</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> tulpe <span class="operator">=</span> (health: <span class="number">10</span>, energy: <span class="number">20</span>)</span><br><span class="line">    balance(<span class="operator">&amp;</span>tulpe. health, <span class="operator">&amp;</span>tulpe.energy)</span><br><span class="line">    <span class="keyword">var</span> holly <span class="operator">=</span> <span class="type">Player</span> (name: <span class="string">&quot;Holly&quot;</span>, health: <span class="number">10</span>, energy: <span class="number">10</span>)</span><br><span class="line">    balance(<span class="operator">&amp;</span>holly.health, <span class="operator">&amp;</span>holly, energy)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift-SIL调试</title>
      <link href="/2021/02/27/ios/swift/Swift-SIL%E8%B0%83%E8%AF%95/"/>
      <url>/2021/02/27/ios/swift/Swift-SIL%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>SIL</p><span id="more"></span><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="生成SIL文件"><a href="#生成SIL文件" class="headerlink" title="生成SIL文件"></a>生成SIL文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swiftc -emit-sil main.swift &gt;&gt; ./main.sil</span><br></pre></td></tr></table></figure><h3 id="阅读SIL"><a href="#阅读SIL" class="headerlink" title="阅读SIL"></a>阅读SIL</h3><p><a href="https://github.com/apple/swift/blob/main/docs/SIL.rst">解释文档</a></p><ul><li>@main这里标识我们当前main.swift的入口函数，SIL 中的标识符名称以@作<br>为前缀</li><li>%0，%1…在SIL也叫做寄存器，这里我们可以理解为我们日常开发中的常量，一旦赋值之后就不可以再修改，如果SIL中还要继续使用，那么就不断的累加数字。同时这里所说的寄存器是虚拟的，最终运行到我们的机器上，会使用真的寄存器。</li><li>alloc_global创建一个全局变量</li><li>global_addr拿到全局变量的地址</li><li>metatype拿到LGTeacher的Metadata</li><li>apply 代表调用方法，类似于objc里面的objc_msgSend函数</li><li>alloc_ref创建某一个类型的实例对象，当前实例对象引用计数为1</li></ul><ol><li>乱码的字符串，执行如下代码恢复 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun swift-demangle s4main7TeacherC3ageSivg</span><br></pre></td></tr></table></figure></li><li>%1， %2<br> 这些可以理解为虚拟的寄存器，或者理解为常量（赋值之后不会改变）</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AVFoundation实践</title>
      <link href="/2021/02/23/ios/general/AVFoundation%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/02/23/ios/general/AVFoundation%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>TODO:</p><p>功能点：</p><ul><li>媒体（图片&#x2F;视频&#x2F;音频）捕捉功能（采集）</li><li>截屏（只支持MacOS）</li></ul><p>捕捉会话：AVCaptureSession<br>捕捉设备：AVCaptureDevice<br>捕捉设备输入：AVCaptureDeviceInput<br>捕捉设备输入：AVCaptureOutput(抽象类)<br>    AVCaptureStillImageOutput<br>    AVCaptureMovieFileOutput<br>    AVCaptureAudioDataOutput<br>    AVCaptureVideoDataOutput<br>捕捉连接：AVCaptureConnection<br>捕捉预览：AVCaptureVideoPreviewLayer</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift-self与Self</title>
      <link href="/2021/02/16/ios/swift/self%E5%92%8CSelf/"/>
      <url>/2021/02/16/ios/swift/self%E5%92%8CSelf/</url>
      
        <content type="html"><![CDATA[<h2 id="self"><a href="#self" class="headerlink" title="self"></a>self</h2><p>代表当前对象</p><h2 id="Self"><a href="#Self" class="headerlink" title="Self"></a>Self</h2><p>代表当前类型</p><span id="more"></span><p>Self一般作为返回值类型，限定返回值和方法调用者必须是同一类型（也可以作为参数类型）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">test</span>() -&gt; <span class="keyword">Self</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>: <span class="title class_ inherited__">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> age <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> count <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="keyword">self</span>.age)</span><br><span class="line">        <span class="built_in">print</span>(<span class="keyword">Self</span>.count)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">test</span>() -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="built_in">type</span>(of: <span class="keyword">self</span>).<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p <span class="operator">=</span> <span class="type">Person</span>()</span><br><span class="line"><span class="built_in">print</span>(p.test())</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">0</span><br><span class="line">10</span><br><span class="line">0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift-函数派发</title>
      <link href="/2021/02/15/ios/swift/Swift-%E5%87%BD%E6%95%B0%E6%B4%BE%E5%8F%91/"/>
      <url>/2021/02/15/ios/swift/Swift-%E5%87%BD%E6%95%B0%E6%B4%BE%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>Swift有三种函数派发方式，总结一下</p><ul><li>静态派发</li><li>函数表派发</li><li>消息派发<span id="more"></span></li></ul><h2 id="派发方式概述"><a href="#派发方式概述" class="headerlink" title="派发方式概述"></a>派发方式概述</h2><h3 id="静态派发"><a href="#静态派发" class="headerlink" title="静态派发"></a>静态派发</h3><p><code>静态派发</code>是三种派发方式中最快的。<code>CPU</code>直接拿到函数地址并进行调用。编译器优化时，也常常将函数进行内联，将其转换为静态派发方式，提升执行速度。<br><code>C++</code>默认使用静态派发；在<code>Swift</code>中给函数加上<code>final</code>关键字，也会变成<code>静态派发</code>。</p><p><strong>优点：</strong><br>使用最少的指令集，办最快的事情。</p><p><strong>缺点：</strong><br>静态派发最大的弊病就是没有动态性，不支持继承。</p><h3 id="函数表派发"><a href="#函数表派发" class="headerlink" title="函数表派发"></a>函数表派发</h3><p>编译型语言中最常见的派发方式，既保证了动态性也兼顾了执行效率。<br>函数所在的类会维护一个“函数表”(虚函数表)，存取了每个函数实现的指针。<br>每个类的 V-Table 在编译时就会被构建，所以与静态派发相比多出了两个读取的工作：</p><ul><li>读取该类的 V-Table</li><li>读取函数的指针</li></ul><p><strong>优点：</strong></p><ul><li>查表是一种简单，易实现，而且性能可预知的方式。</li><li>理论上说，函数表派发也是一种高效的方式。</li></ul><p><strong>缺点：</strong></p><ul><li>与静态派发相比，从字节码角度来看，多了两次读和一次跳转。</li><li>与静态派发相比，编译器对某些含有副作用的函数无法优化。(过度拆解，无法内联)</li><li><code>Swift</code>类扩展里面的函数无法动态加入该类的函数表中，只能使用静态派发的方式。</li></ul><h3 id="消息派发"><a href="#消息派发" class="headerlink" title="消息派发"></a>消息派发</h3><p>消息机制是调用函数最动态的方式。由于<code>Swfit</code>使用的依旧是<code>Objective-C</code>的运行时系统，消息派发其实也就是<code>Objective-C</code>的<code>Message Passing(消息传递)</code>。由于消息传递大家看的文章很多了，这里不做过多赘述。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id returnValue = [obj messageName:param];</span><br><span class="line">// 底层代码</span><br><span class="line">id returnValue = objc_msgSend(obj, @selector(messageName:), param);</span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>动态性高</li><li>Method Swizzling</li><li>isa Swizzling</li><li>…</li></ul><p><strong>缺点：</strong></p><ul><li>执行效率是三种派发方式中最低的</li></ul><blockquote><p>所幸的是<code>objc_msgSend</code>会将匹配的结果缓存到一个映射表中，每个类都有这样一块缓存。若是之后发送相同的消息，执行速率会很快。</p></blockquote><h2 id="Swift的派发机制"><a href="#Swift的派发机制" class="headerlink" title="Swift的派发机制"></a>Swift的派发机制</h2><p>Swift的派发机制受到4个因素的影响：</p><ul><li>数据类型</li><li>函数声明的位置</li><li>指定派发方式</li><li>编译器优化</li></ul><h3 id="数据类型-声明位置"><a href="#数据类型-声明位置" class="headerlink" title="数据类型 &amp;&amp; 声明位置"></a>数据类型 &amp;&amp; 声明位置</h3><table><thead><tr><th align="left">类型\位置</th><th align="left">初始声明</th><th align="left">扩展</th></tr></thead><tbody><tr><td align="left">值类型</td><td align="left">静态派发</td><td align="left">静态派发</td></tr><tr><td align="left">协议</td><td align="left">函数表派发</td><td align="left">静态派发</td></tr><tr><td align="left">类</td><td align="left">函数表派发</td><td align="left">静态派发</td></tr><tr><td align="left">NSObject子类</td><td align="left">函数表派发</td><td align="left">静态派发</td></tr></tbody></table><blockquote><p>声明在 协议 或者 类 中的函数是使用函数表派发的<br>声明在 扩展 中的函数则是静态派发</p></blockquote><h3 id="指定派发方式"><a href="#指定派发方式" class="headerlink" title="指定派发方式"></a>指定派发方式</h3><p>给函数添加<strong>关键字</strong>的修饰也会改变其派发方式。</p><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>添加了<code>final</code>关键字的函数无法被重写，使用静态派发，不会在<code>vtable</code>中出现，且对<code>objc</code>运行时不可见。</p><h4 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h4><p>函数均可添加<code>dynamic</code>关键字，为非objc类和值类型的函数赋予动态性，但派发方式还是函数表派发。</p><h4 id="objc"><a href="#objc" class="headerlink" title="@objc"></a>@objc</h4><p>该关键字可以将Swift函数暴露给Objc运行时，但并不会改变其派发方式，依旧是函数表派发。</p><h4 id="objc-dynamic"><a href="#objc-dynamic" class="headerlink" title="@objc + dynamic"></a>@objc + dynamic</h4><p>这两个关键字组合使用，将采用<code>消息派发</code>的方式</p><h4 id="inline"><a href="#inline" class="headerlink" title="@inline"></a>@inline</h4><p>告诉编译器将此函数静态派发，但将其转换成SIL代码后，依旧是<code>函数表派发</code>。</p><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>static 关键字会将函数变为静态派发，不会在 vtable 中出现。</p><table><thead><tr><th align="left">类型</th><th align="left">静态派发</th><th align="left">函数表派发</th><th align="left">消息派发</th></tr></thead><tbody><tr><td align="left">值类型</td><td align="left">所有方法</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">协议</td><td align="left">extension</td><td align="left">主体创建</td><td align="left">-</td></tr><tr><td align="left">类</td><td align="left">extension&#x2F;final&#x2F;static</td><td align="left">主体创建</td><td align="left">@objc + dynamic</td></tr><tr><td align="left">NSObject子类</td><td align="left">extension&#x2F;final&#x2F;static</td><td align="left">主体创建</td><td align="left">@objc + dynamic</td></tr></tbody></table><blockquote><p>除此之外，编译器可能将某些方法优化为静态派发。例如，私有函数。</p></blockquote><h3 id="编译器优化"><a href="#编译器优化" class="headerlink" title="编译器优化"></a>编译器优化</h3><p><code>Swift</code>会尽可能的去优化函数派发方式。当一个类声明了一个私有函数时，该函数很<em>可能</em>会被优化为静态派发。<br>这也就是为什么在<code>Swift</code>中使用<code>target-action</code>模式时，私有<code>selector</code>会报错的原因(<code>Objective-C</code>无法获取<code>#selector</code>指定的函数)。</p><p>另一个需要注意的是，<code>NSObject子类</code>中的<code>属性</code>，如果没有使用<code>dynamic</code>修饰的话，这个优化会默认让<code>KVO</code>失效。因为，这个属性的<code>getter</code>和<code>setter</code>会被优化为静态派发。虽然，代码可以通过编译，不过动态生成的<code>KVO</code>函数就不会被触发。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift-断言</title>
      <link href="/2021/01/16/ios/swift/%E6%96%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
      <url>/2021/01/16/ios/swift/%E6%96%AD%E8%A8%80%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="断言机制"><a href="#断言机制" class="headerlink" title="断言机制"></a>断言机制</h2><ul><li>很多编程语言都有断言机制 ：不符合指定条件就拋出运行时错误 ，常用于调试（Debug） 阶段的条件判断</li><li>默认情况下，Swift的断言只会在Debug模式下生效，Release模式下会忽略</li></ul><span id="more"></span><p>当判断某段程序在某种状态肯定会出问题后，我们可以增加断言处理，提供很好的提示<br><img src="https://cdn.rencheng.cc/blog/6lepz.png"><br>增加断言之后<br><img src="https://cdn.rencheng.cc/blog/3xojt.png"></p><blockquote><p>ps：Xcode大多数情况是不会给出好的错误提示的，需要我们去增加断言处理</p></blockquote><h2 id="强制启动Release模式断言和强制关掉Debug模式断言"><a href="#强制启动Release模式断言和强制关掉Debug模式断言" class="headerlink" title="强制启动Release模式断言和强制关掉Debug模式断言"></a>强制启动Release模式断言和强制关掉Debug模式断言</h2><p>在<code>build setting</code>增加<code>Other Swift Flags</code>修改断言的默认行为<br><code>-assert-config Release</code>：强制关闭断言<br><code>-assert-config Debug</code> ：强制开启断言<br><img src="https://cdn.rencheng.cc/blog/zkp06.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift-CustomPrint</title>
      <link href="/2021/01/16/ios/swift/%E6%89%93%E5%8D%B0%E5%8D%8F%E8%AE%AE/"/>
      <url>/2021/01/16/ios/swift/%E6%89%93%E5%8D%B0%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>自定义打印协议<code>CustomStringConvertible</code>和<code>CustomDebugStringConvertible</code></p><span id="more"></span><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Person</span>: <span class="title class_ inherited__">CustomStringConvertible</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="string">&quot;person age: <span class="subst">\(age)</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Person</span>: <span class="title class_ inherited__">CustomDebugStringConvertible</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> debugDescription: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="string">&quot;debugPerson age: <span class="subst">\(age)</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p <span class="operator">=</span> <span class="type">Person</span>()</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">debugPrint</span>(p)</span><br></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person age: <span class="number">10</span></span><br><span class="line">debugPerson age: <span class="number">10</span></span><br></pre></td></tr></table></figure><blockquote><p>当处于Release模式的时候，debugPrint也仍然会输出。目前看不出区别  </p><p>当在控制台po的时候，调用的是<code>CustomDebugStringConvertible</code>的<code>debugDescription</code>方法</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年终总结</title>
      <link href="/2020/12/31/summary/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2020/12/31/summary/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>今年工作上有些杂乱无章，没有持久的大目标，一直处于救火的状态。这缺人赶进度，<strong>补上</strong>；那离职需交接，<strong>接住</strong>。这一年看似杂乱无章，但是有很多的零散时间供自己调研，学习，成长，<strong>还好</strong>自己抓住了。要不然这一年干的真的没劲。</p><p>今年总结主要关键词：<strong>自我驱动</strong></p><span id="more"></span><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>今年处在各种救火的路上，也让我学到了很多知识。</p><ul><li><strong>短视频开发</strong> - 视频压缩有了经验</li><li><strong>接手游戏SDK</strong> - 对于SDK打包流程有了新的认识，也对游戏开发有了些了解</li><li><strong>强哥离职沟通</strong> - 学到了很多语言层面的底层原理</li><li><strong>新项目启动</strong> - 这个项目启动了<strong>一年</strong>，但是给自己充分的时间做前期技术储备；使用新语言<strong>Swift</strong>落地开发；使用<strong>Flutter</strong>落地开发</li></ul><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><ul><li>领结婚证</li><li>拍婚纱照</li><li>带父母去旅游</li><li>齐心协力抗疫</li></ul><h2 id="反省"><a href="#反省" class="headerlink" title="反省"></a>反省</h2><h3 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h3><p>今年年初的时候，心里有一股奋斗的力量，到了年底已经感受不到这股力量了，不知道是项目失败或者是救火还是疫情导致的，所有的计划都赶不上变化，变得快，跟不上了就懒得跟了。身边好多同事都有这种感觉。</p><blockquote><p>新的一年2021。给自己的要求：适应变化，及时调整</p></blockquote><h2 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h2><p>今年的收获比较务实，有底层知识的探索，有新语言，新业务的实践，更有跨平台方案的落地。收获不大，但是一步一个脚印。</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>2021年TODO：</p><ol><li>熟悉<code>Flutter</code>开发</li><li>熟悉<code>Swift</code>语言</li><li>深化<code>iOS底层</code>知识</li><li><code>算法</code>和<code>数据结构</code></li><li>有时间继续了解AI</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注册香港苹果开发者账号</title>
      <link href="/2020/12/23/ios/general/%E6%B3%A8%E5%86%8C%E9%A6%99%E6%B8%AF%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7/"/>
      <url>/2020/12/23/ios/general/%E6%B3%A8%E5%86%8C%E9%A6%99%E6%B8%AF%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<ul><li>注册邮箱</li><li>申请邓白氏编码</li><li>申请Apple账号</li></ul><span id="more"></span><h2 id="一、注册QQ及其邮箱"><a href="#一、注册QQ及其邮箱" class="headerlink" title="一、注册QQ及其邮箱"></a>一、注册<a href="https://ssl.zc.qq.com/v3/index-chs.html">QQ</a>及其邮箱</h2><blockquote><p>邓白氏邮件163邮箱可能收不到，建议用<strong>QQ邮箱</strong>统一管理账户（邓白氏&#x2F;AppleId)</p></blockquote><h2 id="二、申请邓白氏编码"><a href="#二、申请邓白氏编码" class="headerlink" title="二、申请邓白氏编码"></a>二、申请邓白氏编码</h2><h3 id="1-拨打电话00852-25161111（香港）"><a href="#1-拨打电话00852-25161111（香港）" class="headerlink" title="1. 拨打电话00852 25161111（香港）"></a>1. 拨打电话<code>00852 25161111</code>（香港）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 对面说英文，你就说`你好`，她会说`你好`，等待帮你转接；</span><br><span class="line">&gt; 说需要用于`申请苹果开发者账号`需要的邓白氏编码；</span><br><span class="line">&gt; 提供邮箱`example@qq.com`；</span><br></pre></td></tr></table></figure><h3 id="2-收取邮件"><a href="#2-收取邮件" class="headerlink" title="2. 收取邮件"></a>2. 收取邮件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Dear Customer,</span><br><span class="line">        </span><br><span class="line">For DUNS number request, please fill the form &quot;D-U-N-S Number Request Form Free20161007.doc&quot;  (Hong Kong and Macau company only)</span><br><span class="line">1) complete the application form with authorized signature and company chop</span><br><span class="line">2) tick the [I declare that the information in this application form is complete and true] box.</span><br><span class="line">3) fill the reason for apply a DUNS number (For example : Apple Developer Program, FDA, etc.)</span><br><span class="line">4) attach your company business registry copy/CI Copy (NNC1/NC1[Incorporation Form] or NAR1[Annual Return])</span><br><span class="line">    and return to us at dbreg.hk@dnb.com</span><br><span class="line">Normally, the processing time for free service is around 30 days.</span><br><span class="line">*Hong Kong D&amp;B accept Hong Kong/Macau fixed landline phone number (excluded mobile phone number) for general phone field only</span><br><span class="line">*The company phone number should be your company general phone number.</span><br><span class="line"></span><br><span class="line">Regards,</span><br><span class="line">DUNSRight Hong Kong</span><br></pre></td></tr></table></figure><h3 id="3-打印附件"><a href="#3-打印附件" class="headerlink" title="3.打印附件"></a>3.打印附件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D-U-N-S Number Request Form Free20161007.doc</span><br></pre></td></tr></table></figure><h3 id="4-书写文档"><a href="#4-书写文档" class="headerlink" title="4. 书写文档"></a>4. 书写文档</h3><p><img src="https://cdn.rencheng.cc/blog/lbr3c.png-thumb100"><br><img src="https://cdn.rencheng.cc/blog/c5z8p.png-thumb100"><br><img src="https://cdn.rencheng.cc/blog/noyvf.png-thumb100"></p><h3 id="5-回复邮件（扫描成PDF）"><a href="#5-回复邮件（扫描成PDF）" class="headerlink" title="5. 回复邮件（扫描成PDF）"></a>5. 回复邮件（扫描成PDF）</h3><h3 id="6-收到邮件回复"><a href="#6-收到邮件回复" class="headerlink" title="6. 收到邮件回复"></a>6. 收到邮件回复</h3><p><img src="https://cdn.rencheng.cc/blog/886mf.png-thumb100"></p><h2 id="三、申请苹果开发者账号"><a href="#三、申请苹果开发者账号" class="headerlink" title="三、申请苹果开发者账号"></a>三、<a href="https://developer.apple.com/account/#/welcome">申请苹果开发者账号</a></h2><p><strong>1. 注册准备物料</strong></p><ul><li>公司英文名</li><li>DNUS编码（9位）</li><li>公司地址</li><li>Web官网</li></ul><blockquote><p>用<strong>香港IP</strong>进行注册<br>注册完成后，苹果会通过邮件回复，索要更多信息<br>邓白氏可能没有那么及时同步，尽量等1-2天再注册。</p></blockquote><p><strong>2. 邮件准备物料</strong></p><ul><li>由政府核發並附有相片的申請人身分證明文件</li><li>商業登記文件</li><li>申請人的在職證明</li><li>申請人的員工識別證或名片</li></ul><blockquote><p>回复邮件后，会让打电话联系他。但是咱们注册的是香港的，打电话是说英文和粤语。那我们找一个国内的账号进行联系就好。</p></blockquote><p><strong>3. 支付准备</strong></p><ul><li>VISA, MasterCard卡</li><li>账单地址（英文）</li><li>卡绑定手机号码</li></ul><blockquote><p>支付费用<code>HK$788</code><br>支付后24h后账号可用</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优化Xcode编译速度</title>
      <link href="/2020/11/29/ios/general/%E4%BC%98%E5%8C%96Xcode%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6/"/>
      <url>/2020/11/29/ios/general/%E4%BC%98%E5%8C%96Xcode%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>随着项目的不断迭代，工程变得越来越庞大。大项目不仅面临着架构调整的问题，还要面对每次编译时长不断增加的问题。现在我们的项目全量编译要半个小时。</p><p>操作环境<br>操作系统：MacOS 11<br>开发工具：Xcode12<br>CPU：i7 2.2GHz 4核8线程<br>内存：16GB</p><blockquote><p>业务驱动技术提升</p></blockquote><span id="more"></span><h2 id="查看编译时长"><a href="#查看编译时长" class="headerlink" title="查看编译时长"></a>查看编译时长</h2><h3 id="查看总时长"><a href="#查看总时长" class="headerlink" title="查看总时长"></a>查看总时长</h3><ol><li>关闭Xcode</li><li>执行如下命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.dt.Xcode ShowBuildOperationDuration YES</span><br></pre></td></tr></table></figure></li><li>启动Xcode<br><img src="https://cdn.rencheng.cc/blog/rauk5.png-thumb100"></li></ol><h3 id="查看单个编译单元的时长"><a href="#查看单个编译单元的时长" class="headerlink" title="查看单个编译单元的时长"></a>查看单个编译单元的时长</h3><p><a href="https://github.com/RobertGummesson/BuildTimeAnalyzer-for-Xcode">BuildTimeAnalyzer-for-Xcode</a></p><blockquote><p>该插件会罗列单个编译单元的时长</p></blockquote><p><img src="https://cdn.rencheng.cc/blog/uyj8k.png-thumb100"></p><blockquote><p>首次启动该工程，根据配置指导走完后，需重新运行。</p></blockquote><h2 id="优化Xcode配置"><a href="#优化Xcode配置" class="headerlink" title="优化Xcode配置"></a>优化Xcode配置</h2><p>以下配置都是在工程对应<code>Target</code>的<code>Build Settings</code>中操作</p><h3 id="全模块编译（Whole-Module-Optimization，WMO）"><a href="#全模块编译（Whole-Module-Optimization，WMO）" class="headerlink" title="全模块编译（Whole-Module Optimization，WMO）"></a>全模块编译（Whole-Module Optimization，WMO）</h3><p>在编译项目时，将同属于一个<code>Module</code>（可以理解为一个 Target、一个 Package）的所有源代码都串起来，进行整体的一个分析与优化，区别于 <code>Single-File Optimizatin</code>（单文件优化，以下简称SFO），<code>WMO</code>可以更好的统筹全局，去<code>inline</code>函数调用、排除死函数（即写了却从不调用的函数）等</p><p>在<code>User-Define</code>中增加<code>SWIFT_WHOLE_MODULE_OPTIMIZATION</code>选项卡，值为<code>Yes</code></p><blockquote><p>在<code>Release</code>模式中，建议打开此选项。</p></blockquote><h3 id="调试信息处理"><a href="#调试信息处理" class="headerlink" title="调试信息处理"></a>调试信息处理</h3><p>将<code>Debug Information Format</code>选项中，</p><ul><li><code>Debug</code>模式的值<code>DWARF with dSYM</code>改为<code>DWARF</code>；</li><li><code>Release</code>模式的值是<code>DWARF with dSYM</code>，因为一般工程都会集成Bugly，而Bugly问题分析是需要<code>.dSYM</code>文件的，如果不生成，线上崩溃是没有办法定位信息的。</li></ul><blockquote><p>DWARF意思是矮小的，不作数的。</p></blockquote><h3 id="架构配置"><a href="#架构配置" class="headerlink" title="架构配置"></a>架构配置</h3><p>将<code>Build Active Architecture Only</code>选项里的<code>Debug</code>模式的值<code>No</code>改为<code>Yes</code></p><blockquote><p><code>Release</code>模式的值必须是<code>No</code>；虽说现在苹果全线都Arm架构了，但是仍然有arm64，armv7，armv7s等区分。</p></blockquote><h3 id="编译优化等级-Optimization-Level"><a href="#编译优化等级-Optimization-Level" class="headerlink" title="编译优化等级(Optimization Level)"></a>编译优化等级(Optimization Level)</h3><p><img src="https://cdn.rencheng.cc/blog/1yb0t.png-thumb100"></p><blockquote><p>在设置编译优化之后，Xcode断点和调试信息会不正常，所以一般静态库或者其他Target可以这样设置。</p></blockquote><h2 id="系统级提升"><a href="#系统级提升" class="headerlink" title="系统级提升"></a>系统级提升</h2><h3 id="增加编译线程数"><a href="#增加编译线程数" class="headerlink" title="增加编译线程数"></a>增加编译线程数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.Xcode PBXNumberOfParallelBuildSubtasks 4</span><br></pre></td></tr></table></figure><h3 id="虚拟盘"><a href="#虚拟盘" class="headerlink" title="虚拟盘"></a>虚拟盘</h3><p>使用虚拟磁盘。编译过程中需要大量的磁盘 IO，这主要发生在<code>Derived Data</code>目录下，因此如果内存足够，可以考虑划出<code>4G</code>左右的内存，建一个虚拟磁盘，这样将会把<code>磁盘IO</code>优化为<code>内存IO</code>，从而提高速度。<br>由于打包机器每次都会重编译，因此不需要担心重启机器后缓存丢失的问题。</p><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><ol><li>去除警告</li><li>三目运算符</li><li>提前计算常量</li><li>宏定义</li><li>类型推断</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> App优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建Framework</title>
      <link href="/2020/11/13/ios/general/%E5%88%9B%E5%BB%BAFramework/"/>
      <url>/2020/11/13/ios/general/%E5%88%9B%E5%BB%BAFramework/</url>
      
        <content type="html"><![CDATA[<p>平时都是用Cocoapods创建私有库。最近技术群有一个小白不想用Cocoapods，给他写一篇教程。</p><ul><li>操作系统：MacOS 11</li><li>Xcode版本号： Xcode12.2</li><li>平台： iOS14.2</li><li>开发语言： Swift</li></ul><span id="more"></span><h2 id="新建-Cocoa-Touch-Framework"><a href="#新建-Cocoa-Touch-Framework" class="headerlink" title="新建 Cocoa Touch Framework"></a>新建 Cocoa Touch Framework</h2><p><strong>第一步：</strong>启动Xcode，依次点击<code>File-&gt;New-&gt;Project</code>。<br><img src="https://cdn.rencheng.cc/blog/7ghuc.png-thumb100"><br><strong>第二步：</strong>双击<code>Framework &amp; Library</code>栏目下的<code>Cocoa Touch Framework</code>项。<br><img src="https://cdn.rencheng.cc/blog/ekd3p.png-thumb100"><br><strong>第三步：</strong>在<code>Choose options for your new project</code>窗口填写Project的相关信息。我们这里的<code>Product Name</code>为<code>ChannelSDK</code>。然后点击<code>Next</code>按钮。<br><strong>第四步：</strong>选择 <code>ChannelSDK</code> Project的保存位置，并单击<code>Create</code>按钮。此时Xcode会打开当前Project窗口。<br><img src="https://cdn.rencheng.cc/blog/b1o3p.png-thumb100"></p><h2 id="新建-Workspace"><a href="#新建-Workspace" class="headerlink" title="新建 Workspace"></a>新建 Workspace</h2><p><strong>第一步：</strong>依次点击<code>File-&gt;New-&gt;Workspace</code>。<br><strong>第二步：</strong>将Workspace的名字填写为 <code>ChannelSDK</code> ，选择存储位置为第一步创建的 <code>ChannelSDK Project</code> 根目录下。<br><img src="https://cdn.rencheng.cc/blog/51mqx.png-thumb100"><br><strong>第三步：</strong>点击保存，此时Xcode会打开<code>ChannelSDK Workspace</code>窗口<br><img src="https://cdn.rencheng.cc/blog/lk5y3.png-thumb100"><br><strong>第四步：</strong>在当前的 <code>ChannelSDK Workspace</code> 窗口，依次点击<code>File-&gt;Add Files to “ChannelSDK”</code>。选择<code>ChannelSDK.xcodeproj</code>文件，将之前创建好的Project添加到当前工作空间中。最后点击<code>Add</code>按钮<br><img src="https://cdn.rencheng.cc/blog/s0u8a.png-thumb100"><br><strong>第五步：</strong>此时，<code>ChannelSDK Workspace</code>的目录结构如下图。如果仅仅只有一个工程文件，那么关掉Xcode，重新打开<code>ChannelSDK Workspace</code>。<code>ChannelSDK Workspace</code>文件名是<code>ChannelSDK.xcworkspace</code></p><h2 id="创建-Example-工程"><a href="#创建-Example-工程" class="headerlink" title="创建 Example 工程"></a>创建 Example 工程</h2><p><strong>第一步：</strong>启动Xcode，依次点击<code>File-&gt;New-&gt;Project</code>。双击<code>App</code>图标。<br><img src="https://cdn.rencheng.cc/blog/otpwz.png-thumb100"><br><strong>第二步：</strong><code>Product Name</code>为<code>Example</code>。然后点击<code>Next</code>按钮。<br><img src="https://cdn.rencheng.cc/blog/n0mvo.png-thumb100"><br><strong>第三步：</strong>选择<code>Example Project</code>的保存位置为<code>ChannelSDK Project</code>同级目录，并单击<code>Create</code>按钮<br><img src="https://cdn.rencheng.cc/blog/ed62t.png-thumb100"><br><strong>第四步：</strong>出现下面窗口后，关闭该窗口<br><img src="https://cdn.rencheng.cc/blog/ww25u.png-thumb100"><br><strong>第五步：</strong>返回到<code>ChannelSDK Workspace</code>窗口，依次点击<code>File-&gt;Add Files to “ChannelSDK”</code>，选择Example.xcodeproj文件。<br><img src="https://cdn.rencheng.cc/blog/q82w8.png-thumb100"><br><strong>第六步：</strong>点击<code>Add</code>按钮，将<code>Example Project</code>添加到<code>ChannelSDK Workspace</code>中。<br><img src="https://cdn.rencheng.cc/blog/033cz.png-thumb100"></p><h2 id="添加依赖关系"><a href="#添加依赖关系" class="headerlink" title="添加依赖关系"></a>添加依赖关系</h2><p><strong>第一步：</strong>在<code>ChannelSDK Workspace</code>窗口中，单击<code>Example Target</code>, 依次点击<code>General-&gt;Embedded Binaries</code>，单击添加（+）按钮。<br><img src="https://cdn.rencheng.cc/blog/4i54j.png-thumb100"><br><strong>第二步：</strong>找到ChannelSDK.framework，单击<code>Add</code>按钮。<br><img src="https://cdn.rencheng.cc/blog/pkmca.png-thumb100"></p><h2 id="ChannelSDK开发"><a href="#ChannelSDK开发" class="headerlink" title="ChannelSDK开发"></a>ChannelSDK开发</h2><p><strong>第一步：</strong>选中<code>ChannelSDK Project</code>中的<code>ChannelSDK Group</code>，依次点击<code>File-&gt;New-&gt;File</code>。选择<code>Cocoa Touch Class</code>，点击<code>Next</code>按钮<br><img src="https://cdn.rencheng.cc/blog/cvcm1.png-thumb100"><br><strong>第二步：</strong>填入Class为<code>ChannelSDK</code>，然后单击<code>Next</code>按钮，选择默认的保存位置<br><img src="https://cdn.rencheng.cc/blog/n0gkt.png-thumb100"><br><strong>第三步：</strong>在ChannelSDK.swift中写个方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">func</span> version() -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;<span class="subst">\(ChannelSDKVersionNumber)</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第四步：</strong>在AppDelegate中调用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(ChannelSDK.version())</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Objective创建Framework"><a href="#Objective创建Framework" class="headerlink" title="Objective创建Framework"></a>Objective创建Framework</h2><p>跟Swift基本相同。但是在开发的时候，要注意</p><blockquote><p>import的方式要用<code>&lt;&gt;</code>而不是<code>&quot;&quot;</code>，<br>在ChannelSDK.h中，声明公开的头文件</p></blockquote><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol><li>ChannelSDK.h中的<code>ChannelSDKVersionString[]</code>值无参考意义，<code>ChannelSDKVersionNumber</code>可以设置</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Support支持库</title>
      <link href="/2020/11/09/android/Android-Support%E6%94%AF%E6%8C%81%E5%BA%93/"/>
      <url>/2020/11/09/android/Android-Support%E6%94%AF%E6%8C%81%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>研究Flutter的时候，看见了AndroidX的概念。<br>顺便了解一下Android支持库</p><span id="more"></span><p>Android跟iOS开发上很大的区别</p><table><thead><tr><th align="left"></th><th align="left">iOS</th><th align="left">Android</th></tr></thead><tbody><tr><td align="left">审核要求</td><td align="left">需兼容很多新特性</td><td align="left">对新特性几乎无要求</td></tr><tr><td align="left">系统更新</td><td align="left">升级体验新系统用户量大</td><td align="left">不升级都卡，升级更卡；设备碎片化严重</td></tr><tr><td align="left">开发层面</td><td align="left">使用新系统特性，</br>工程最小兼容的版本低于新特性兼容版本</br>那么Xcode会报错提示不兼容</br>不会造成运行时崩溃</td><td align="left">使用新系统特性</br>工程最小兼容的版本低于新特性兼容版本</br>那么AS会报错提示不兼容</br>但是有全局开关可关闭这一类型提示</br>会造成运行时崩溃</td></tr></tbody></table><blockquote><p>由于在审核层面的硬性要求，导致iOS开发者的Xcode经常是最新的大版本；而Android则不需要升级。</p></blockquote><p>Google为了让老版本系统用上新版本的特性，就提供了很多的版本支持库，用于兼容。<br>由于兼容库太多，所以Google提供了AndroidX兼容库统一管理，去避免兼容库太多，每个版本的小版本太多导致的开发低效，重复依赖等问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter - Key</title>
      <link href="/2020/10/27/flutter/FlutterKey/"/>
      <url>/2020/10/27/flutter/FlutterKey/</url>
      
        <content type="html"><![CDATA[<p>Flutter中Key非常重要</p><ul><li>解决重用问题，提升性能</li><li>标识Widget，获取State对象</li></ul><span id="more"></span><h3 id="LocalKey"><a href="#LocalKey" class="headerlink" title="LocalKey"></a>LocalKey</h3><p>抽象类</p><ul><li>diff算法的核心所在</li><li>Element和Widget比较</li></ul><h4 id="ValueKey"><a href="#ValueKey" class="headerlink" title="ValueKey"></a>ValueKey</h4><p>以数据作为Key。如：数字，字符</p><h4 id="ObjectKey"><a href="#ObjectKey" class="headerlink" title="ObjectKey"></a>ObjectKey</h4><p>以Object对象作为Key。如：Text()</p><h4 id="UniqueKey"><a href="#UniqueKey" class="headerlink" title="UniqueKey"></a>UniqueKey</h4><p>可以保证Key的唯一性</p><blockquote><p>一旦使用它，就不存在Element复用了</p></blockquote><h3 id="GlobalKey"><a href="#GlobalKey" class="headerlink" title="GlobalKey"></a>GlobalKey</h3><p>抽象类</p><ul><li>帮助我们获取到对应Widget的State对象，然后进行操作。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深究iOS启动图问题</title>
      <link href="/2020/10/09/ios/general/%E6%B7%B1%E7%A9%B6iOS%E5%90%AF%E5%8A%A8%E5%9B%BE%E9%97%AE%E9%A2%98/"/>
      <url>/2020/10/09/ios/general/%E6%B7%B1%E7%A9%B6iOS%E5%90%AF%E5%8A%A8%E5%9B%BE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在开发中遇见如下问题</p><ul><li>应用更新后，启动图没有更新</li><li>启动图渲染失败</li><li>实现动态更换启动图的需求</li></ul><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>应用更新后，启动图没有更新</li><li>启动图渲染失败</li><li>实现动态更换启动图的需求</li></ul><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>首先怀疑是配置方式、编译缓存等导致的问题。针对这些猜测做了以下测试：</p><ul><li>不同系统、不同机型测试，均有复现，排除该问题只发生在特定机型或系统上；</li><li>清空编译缓存，仍旧复现，故排除编译缓存问题；</li><li>给imageView添加背景色，启动时正常显示imageView的背景色，但图片内容未显示，故排除了布局问题；</li><li>将图片从Assets中迁移至工程根目录下，出现空白启动图概率降低，但仍会偶现；</li><li>修改图片名，前几次正常，之后依旧偶现；</li><li>卸载应用重新安装，大概率恢复正常，仍复现；</li><li>将LaunchScreen.storyboard文件复制到新建的空工程中，仍复现；</li></ul><p><strong>结论：系统缓存问题</strong></p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>完全抛弃系统缓存的启动图，由自己生成的启动图替换。</p><blockquote><p>用户安装应用后，系统会自动生成启动图并缓存至沙盒目录，接着用户启动应用时，我们通过代码将沙盒目录下缓存的启动图文件全部替换为我们通过代码生成的启动图。</p></blockquote><h4 id="生成启动图"><a href="#生成启动图" class="headerlink" title="生成启动图"></a>生成启动图</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *launchScreenName = [[[<span class="built_in">NSBundle</span> mainBundle] infoDictionary] objectForKey:<span class="string">@&quot;UILaunchStoryboardName&quot;</span>];</span><br><span class="line"><span class="built_in">UIStoryboard</span> *storyboard = [<span class="built_in">UIStoryboard</span> storyboardWithName:launchScreenName bundle:<span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">UIViewController</span> *vc = storyboard.instantiateInitialViewController;</span><br><span class="line"><span class="built_in">UIGraphicsBeginImageContextWithOptions</span>([<span class="built_in">UIScreen</span> mainScreen].bounds.size, <span class="literal">NO</span>, [<span class="built_in">UIScreen</span> mainScreen].scale);</span><br><span class="line">[vc.view.layer renderInContext:<span class="built_in">UIGraphicsGetCurrentContext</span>()];</span><br><span class="line"><span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br></pre></td></tr></table></figure><h4 id="替换启动图"><a href="#替换启动图" class="headerlink" title="替换启动图"></a>替换启动图</h4><p>通过测试，该方法不会报权限问题</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">BOOL</span>)moveItemAtPath:(<span class="built_in">NSString</span> *)srcPath </span><br><span class="line">                toPath:(<span class="built_in">NSString</span> *)dstPath </span><br><span class="line">                 error:(<span class="built_in">NSError</span> **)error API_AVAILABLE(macos(<span class="number">10.5</span>), ios(<span class="number">2.0</span>), watchos(<span class="number">2.0</span>), tvos(<span class="number">9.0</span>));</span><br></pre></td></tr></table></figure><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A(应用启动)--&gt;B[监听被Kill通知]</span><br><span class="line">B--&gt;C[应用Kill回调]</span><br><span class="line">C--&gt;D[获取当前App版本号]</span><br><span class="line">D--&gt;E&#123;指定目录下&lt;/br&gt;以版本号命名的&lt;/br&gt;启动图是否存在&#125;</span><br><span class="line">E--YES--&gt;F[读取该文件]</span><br><span class="line">E--NO--&gt;G[清空该目录文件]</span><br><span class="line">subgraph 此步骤耗时</span><br><span class="line">    G--&gt;H[生成自定义启动图]</span><br><span class="line">    H--&gt;I[以版本号为名写入指定目录]</span><br><span class="line">end</span><br><span class="line">I--&gt;J[计算默认启动图MD5]</span><br><span class="line">F--&gt;J</span><br><span class="line">J--&gt;K&#123;遍历系统&lt;/br&gt;缓存启动图&lt;/br&gt;目录&#125;</span><br><span class="line">K--遍历中--&gt;L&#123;iPhone &lt;/br&gt;Or iPad&#125;</span><br><span class="line">L--iPad--&gt;M&#123;对比图片&lt;/br&gt;宽高是否&lt;/br&gt;相同&#125;</span><br><span class="line">M--YES--&gt;X&#123;对比图片&lt;/br&gt;md5值是否&lt;/br&gt;相同&#125;</span><br><span class="line">X--&gt;N[替换系统缓存启动图]</span><br><span class="line">K--遍历完成--&gt;S(应用杀死)</span><br><span class="line">N--继续遍历--&gt;K</span><br><span class="line">L--iPhone--&gt;X</span><br><span class="line">X--NO--&gt;K</span><br></pre></td></tr></table></figure><blockquote><p>缓存路径：<br>iOS13.0 及以上：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Library/SplashBoard/Snapshots/$&#123;PRODUCT_BUNDLE_IDENTIFIER&#125; - &#123;DEFAULT GROUP&#125;；</span><br></pre></td></tr></table></figure><p>iOS13.0 以下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Library/Caches/Snapshots/$&#123;PRODUCT_BUNDLE_IDENTIFIER&#125;；</span><br></pre></td></tr></table></figure><blockquote><p>图片格式：<br>iOS10.0 及以上：KTX；<br>iOS10.0 以下：PNG。</p></blockquote><blockquote><p>系统缓存图目录读写权限：<br>iOS10.0 及以上：有权限；<br>iOS10.0 以下：无权限。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS14和Xcode12踩坑</title>
      <link href="/2020/09/21/ios/general/iOS14%E5%92%8CXcode12%E8%B8%A9%E5%9D%91/"/>
      <url>/2020/09/21/ios/general/iOS14%E5%92%8CXcode12%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>今年整体适配强度不大。<br><img src="https://cdn.rencheng.cc/blog/y3ady.jpg"></p><span id="more"></span><h2 id="权限相关"><a href="#权限相关" class="headerlink" title="权限相关"></a>权限相关</h2><p>如果设备开启了本地的服务，会弹出允许本地网络的权限提示框。<br>在Info.plist中增加隐私配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Privacy - Local Network Usage Description</span><br><span class="line">    - 使用本地网络进行数据请求访问，作为视频的预缓存</span><br><span class="line"></span><br><span class="line">Bonjour services</span><br><span class="line">    - _http._tcp</span><br></pre></td></tr></table></figure><blockquote><p>如果不加该配置，提审会被拒。</p></blockquote><h2 id="模拟器报错"><a href="#模拟器报错" class="headerlink" title="模拟器报错"></a>模拟器报错</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">building for iOS Simulator, but linking in object file built for iOS, xxxx for architecture arm64</span><br></pre></td></tr></table></figure><p><strong>原因：</strong></p><ul><li><code>Xcode12</code>以前，我们通过<code>Valid Architectures</code> 选项来配置支持的架构。</li><li><code>Xcode12</code>中， <code>Valid Architectures</code>这一选项被删掉了，改变成了<code>VALID_ARCHS</code>。</li></ul><blockquote><p>在<code>Xcode11</code>中，<code>x86_64</code>的架构支持是默认支持的，就算不写也支持。但<code>Xcode12</code>的时候，苹果将要推出了ARM架构的Mac，看来全面采用ARM架构已经成为苹果的趋势了，这使得Xcode其实就没必要再对<code>x86_64</code>架构默认支持。故需要手动添加上才能跑模拟器。</p></blockquote><p><strong>解决方案：</strong><br>在<code>VALID_ARCHS</code>选项上增加<code>x86_64</code>的架构配置 </p><blockquote><p>如果Cocoapods管理的组件，需要支持模拟器<br>需要手动设置<code>User-Defined</code>的<code>VALID_ARCHS</code></p></blockquote><h2 id="微信-Pasted-from-QQ"><a href="#微信-Pasted-from-QQ" class="headerlink" title="微信 Pasted from QQ"></a>微信 Pasted from QQ</h2><p>打开某款App，频繁提示<code>** Pasted from ***</code></p><blockquote><p>苹果强化了对系统剪切板内容访问的提示，适度减少访问频次吧。不过现在是大家都玩口令的年代，这很难控制住…</p></blockquote><h2 id="UIPageControl-子视图层级变更-及-新增-API"><a href="#UIPageControl-子视图层级变更-及-新增-API" class="headerlink" title="UIPageControl 子视图层级变更 及 新增 API"></a>UIPageControl 子视图层级变更 及 新增 API</h2><p>iOS14中，苹果对<code>UIPageControl</code>控件进行了调整，定制性更强了。可以通过官方的API设置图片了，而且也有几个样式供我们选择。</p><blockquote><p>注意点</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[_pageControl setValue:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;xxx&quot;</span>] forKeyPath:<span class="string">@&quot;pageImage&quot;</span>];</span><br><span class="line">[_pageControl setValue:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;xxx&quot;</span>] forKeyPath:<span class="string">@&quot;currentPageImage&quot;</span>];</span><br></pre></td></tr></table></figure><p>上面代码在iOS14中，会出现崩溃。跟<a href="https://rencheng.cc/2019/07/24/ios/general/iOS13%E5%92%8CXcode11%E8%B8%A9%E5%9D%91/#KVC%E8%AE%BF%E9%97%AE%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7Crash">去年</a>的<code>UITextFlied</code>设置<code>_placeholderLabel.textColor.</code>一样抓狂的感觉。</p><blockquote><p>如果封装SDK，尽可能的不要给系统UI控件通过KVC赋值和访问私有属性。</p></blockquote><h2 id="UITableViewCell-层级调整"><a href="#UITableViewCell-层级调整" class="headerlink" title="UITableViewCell 层级调整"></a>UITableViewCell 层级调整</h2><p>自定义子视图，曾经可以添加在<code>self</code>、<code>self.contentView</code>上均可。 以后需要注意了，必须按照苹果的规范。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Custom subviews should be added to the content view.</span><br><span class="line">@property (nonatomic, readonly, strong) UIView *contentView;</span><br></pre></td></tr></table></figure><p><strong>影响：</strong> 不添加在 contentView 上的子视图，存在点击事件无法响应以及视图被系统默认高亮效果覆盖的问题。</p><h2 id="IDFA访问权限和无线局域网地址调整"><a href="#IDFA访问权限和无线局域网地址调整" class="headerlink" title="IDFA访问权限和无线局域网地址调整"></a>IDFA访问权限和无线局域网地址调整</h2><ul><li>在<code>iOS14</code>之前，IDFA的开关是统一管理的，开启关闭和还原都是针对所有App，但是好歹苹果还是默认开启的，如果要关闭，需要用户自己去设置页面关闭。WIFI地址是所有WIFI共用一个设备地址</li><li>但是iOS14出来后，Apple将IDFA进一步隐私强化，每个App将需要自己申请用户权限来获取<code>IDFA</code>，Apple不再默认开启，用户可以在<code>设置-&gt;隐私-&gt;Tracking</code>或者App的权限管理页面来设置。WIFI地址目前是每个网络都配一个虚拟地址</li></ul><blockquote><p>归因真的是越来越难了</p></blockquote><p><strong>如何应对</strong></p><ol><li>在Info.plist中增加隐私配置<code>Privacy - Tracking Usage Description</code>。</li><li>引入<code>AppTrackingTransparency</code>框架，调用<code>ATTrackingManager.requestTrackingAuthorization</code>方法来请求权限。</li><li>权限开启后，仍然使用<code>ASIdentifierManager.shared().advertisingIdentifier.uuidString</code>来获取IDFA。</li></ol><blockquote><p>在使用时会进行权限访问的申请，如果拒绝，将是一串无意义的0。</p></blockquote><p><strong>影响</strong></p><ol><li>多渠道推广时很难有效归因，从而分辨是哪个平台买量来的用户。</li><li>精准投放范围更小，转化成本上升。</li><li>三方归因平台话语权更强，因为他们可以自定义统一的标识符来供合作的广告主们使用，平台越大，标识符价值越高。</li><li>一旦用户单独关闭，推广时也无法区分老用户了，用户相当于进了黑盒，不过可以通过技术手段处理。</li><li>进一步提高了用户隐私权，IDFA开启率将会降低。尤其是亚洲国家，默认开启率很高，一旦进行安装提示，开启率以预计将收到较大影响。</li><li>一些无法升级更新的App，几乎无法进行有效推广。</li></ol><blockquote><p>可以尝试<a href="https://developer.apple.com/documentation/storekit/skadnetwork/verifying_an_install_validation_postback">SKAdNetwork</a>解决，统计更准确。但是应对场景过于单一。</p></blockquote><h2 id="对象存储结构发生改变"><a href="#对象存储结构发生改变" class="headerlink" title="对象存储结构发生改变"></a>对象存储结构发生改变</h2><ul><li>iOS14以前，类是有<code>MyClass</code>+<code>class_rw_t</code>(dirty memory) + <code>class_ro_t</code>（clean memery）三个数据结构存储信息<br><img src="https://cdn.rencheng.cc/blog/07w06.jpg"></li><li>iOS14，类里面的脏内存得到了优化，<code>class_rw_t</code>拆解成<code>class_rw_t</code>+<code>class_rw_ext_t</code><br><img src="https://cdn.rencheng.cc/blog/ciwxj.jpg"></li></ul><blockquote><p>官方解释：通过统计发现，开发中大多数的类是没有通过Runtime机制为其添加属性，方法等信息的。所以就没必要为每个类都开辟这个一段空间，造成不必要的浪费。。</p></blockquote><p><strong>dirty memory</strong><br>脏内存。指可读可写内存<br><strong>clean memory</strong><br>干净内存。指只读内存</p><p><strong>影响</strong><br>如果App内部没有通过系统API去访问脏内存的数据（属性或方法），那么就会产生错误，甚至崩溃。</p><p><strong>解决</strong><br>官方建议：访问内存信息，请一定要使用官方提供的API，这样在以后不断的迭代优化过程中，才不会出现兼容问题。</p><h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><h3 id="画中画"><a href="#画中画" class="headerlink" title="画中画"></a>画中画</h3><h3 id="PHPicker"><a href="#PHPicker" class="headerlink" title="PHPicker"></a>PHPicker</h3><p>在iOS14中，Apple优化了照片的隐私权限，可以让用户选择为该App共享哪些图片，而不是以前的允许访问（所有）图片。</p><p><strong>影响</strong></p><ul><li>废弃<code>AssetLibrary</code>， 请使用<code>PhotoKit</code></li><li>废弃<code>UIImagePickerController</code>，请使用<code>PHPickerViewController</code></li></ul><p><strong>特性</strong></p><ul><li>支持选择视频或图片</li><li>支持单选或多选</li><li>UI设计风格和操作手势与<code>照片App</code>完全相似</li><li>不需要授权隐私权限</li></ul><p><strong>官方说明</strong></p><blockquote><p>Also please don’t prompt for photo library access before showing the picker and don’t require the user to grant you access before showing the picker. There’s no need to do any of this. And it doesn’t help with the users trust into your app.If your app leverages PhotoKit to access the photos library please reconsider if it really needs to have access to the library or if you can use PHPicker instead.We really hope you like the new picker and API. We’re looking forward to you adopting it in your apps. Thank you.<br>另外，在显示选择器之前，请不要提示对图库的访问权限，也不要要求用户在显示选择器之前授予您访问权限。 无需执行任何操作。 如果您的应用程序利用PhotoKit访问照片库，请重新考虑它是否真的需要访问该库或是否可以使用PHPicker，我们真的希望您喜欢该应用程序。 新的选择器和API。 我们期待您在应用中采用它。 谢谢。</p></blockquote><h3 id="Widget-Extension"><a href="#Widget-Extension" class="headerlink" title="Widget Extension"></a>Widget Extension</h3><p>小组件功能<br>具体开发实现可以参考苹果的官方教程<br><a href="https://developer.apple.com/wwdc20/10028">为您介绍WidgetKit</a><br><a href="https://developer.apple.com/wwdc20/10041">SwiftUI新功能</a><br><a href="https://developer.apple.com/wwdc20/10194">为小组件添加配置和智能</a><br><a href="https://developer.apple.com/wwdc20/10033">为小组件构建SwiftUI视图</a></p><blockquote><p>小组件仅支持SwiftUI开发</p></blockquote><h3 id="App-Clips"><a href="#App-Clips" class="headerlink" title="App Clips"></a>App Clips</h3><h4 id="如何唤醒"><a href="#如何唤醒" class="headerlink" title="如何唤醒?"></a>如何唤醒?</h4><p>苹果对App Clip的使用场景非常明确，系统对调起方式做了严格的过滤，支持的发起入口有如下几种：</p><ul><li>NFC</li><li>QR Codes（也就是二维码，专门的生成工具会在年底开放）</li><li>Maps</li><li>Siri 建议</li><li>Safari链接</li><li>Messages</li></ul><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul><li>10M的限制</li><li>30天不使用，系统自动删除<code>App Clip</code>及<code>数据</code></li><li>支持地理位置，相机，麦克风和蓝牙等权限，限制访问 Health、Fitness、通讯录、信息、照片、文件等个人数据。</li><li>为了避免弹窗授权的糟糕体验，设计了免申请的通知、定位权限。当然还是有限制，免申请的通知只在 8 个小时内有效，地理位置只能获取一次。</li><li>支持Sign in with Apple，也支持ASWebAuthenticationSession来第三方登录，以及使用Apple Pay。</li><li>在使用App Clip的过程中，Apple也会明显提示主App的存在，方便用户直接去下载。</li><li>不会与App一起出现在用户的Setting App里，有单独的App Clips的分组。</li><li>一旦安装了主App，对应的App Clip将会被删除，再点击链接将会直接进入主App。</li></ul><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p><strong>依赖主APP</strong><br>虽然对于用户来说不需要下载主App，但开发者必须使App Clip跟随主App一同提交审核，App Clip并不能够独立开发并提审。（这与Apple设计之初的理念是一致的，目的是为了快速体验功能，而不是替代App）</p><p><strong>独立的Target</strong><br>在开发上，也是完全Native的实现，类似于一个新增的<code>Extension target</code>，例如<code>Keyboard Extension</code>、<code>iMessage Extension</code>等。</p><blockquote><p><code>App Clip</code>不仅支持<code>SwiftUI</code>，也支持<code>UIKit</code>，包括很多人还在坚守的<code>Objective-C</code>，完全都没有问题，并不存在上手难度。</p></blockquote><p><strong>数据共享</strong><br>由于Target依赖于主App，所以Target间的资源共享都是完全OK的，只需要在资源归属上勾选上<code>App Clip</code>就可以了；同时，与Extension一致，<code>App Clip</code>可以通过<code>App Groups</code>来与主App共享数据。</p><p><strong>引导转化</strong><br>Apple建议开发者可以在<code>App Clip</code>的视图中嵌入<code>SKOverlay</code>，当用户在<code>App Clip</code>中完成相关任务后展示<code>SKOverlay</code>，这样可以较好的引导用户</p><blockquote><p>比如可以将其放置在用户的付款确认界面之后。<br>新特性<a href="https://developer.apple.com/videos/play/wwdc2020/10661/">SKOverlay</a></p></blockquote><p><strong>支持一对多</strong><br>同时，主工程支持多个<code>App Clip</code> Target，目前并不清楚Apple对于数量的限制是多少，但是估计能够满足大部分App主要功能的拆分，以某团为例，可以存在多个<code>App Clip</code>：单车、外卖、酒店住宿、打车等等。</p><p><strong>支持不同参数</strong><br>只需要提供不同参数，就可以针对不同场景不同需求来提供不同的 <code>App Clip</code> 体验，例如官方提供的统一连锁下不同咖啡馆举例</p><p><strong>如何处理Universal Link和App Clip URL？</strong></p><p>官方Demo提供的解决方案是通过编译宏<code>APPCLIP</code>来做分支处理，这样能够最大程度共用代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">#if</span> <span class="type">APPCLIP</span></span><br><span class="line"><span class="keyword">import</span> AppClip</span><br><span class="line"><span class="keyword">import</span> CoreLocation</span><br><span class="line"><span class="keyword">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FrutaApp</span>: <span class="title class_ inherited__">App</span> &#123;</span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">private</span> <span class="keyword">var</span> model <span class="operator">=</span> <span class="type">FrutaModel</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">#if</span> <span class="operator">!</span><span class="type">APPCLIP</span></span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">private</span> <span class="keyword">var</span> store <span class="operator">=</span> <span class="type">Store</span>()</span><br><span class="line">    <span class="keyword">#endif</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SceneBuilder</span> <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="keyword">#if</span> <span class="type">APPCLIP</span></span><br><span class="line">            <span class="type">NavigationView</span> &#123;</span><br><span class="line">                <span class="type">SmoothieMenu</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            .environmentObject(model)</span><br><span class="line">            .onContinueUserActivity(<span class="type">NSUserActivityTypeBrowsingWeb</span>, perform: handleUserActivity)</span><br><span class="line">            <span class="keyword">#else</span></span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">                .environmentObject(model)</span><br><span class="line">                .environmentObject(store)</span><br><span class="line">            <span class="keyword">#endif</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">#if</span> <span class="type">APPCLIP</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">handleUserActivity</span>(<span class="keyword">_</span> <span class="params">userActivity</span>: <span class="type">NSUserActivity</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> incomingURL <span class="operator">=</span> userActivity.webpageURL,</span><br><span class="line">              <span class="keyword">let</span> components <span class="operator">=</span> <span class="type">NSURLComponents</span>(url: incomingURL, resolvingAgainstBaseURL: <span class="literal">true</span>),</span><br><span class="line">              <span class="keyword">let</span> queryItems <span class="operator">=</span> components.queryItems <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> smoothieID <span class="operator">=</span> queryItems.first(where: &#123; <span class="variable">$0</span>.name <span class="operator">==</span> <span class="string">&quot;smoothie&quot;</span> &#125;)<span class="operator">?</span>.value &#123;</span><br><span class="line">            model.selectSmoothie(id: smoothieID)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> payload <span class="operator">=</span> userActivity.appClipActivationPayload,</span><br><span class="line">              <span class="keyword">let</span> latitudeValue <span class="operator">=</span> queryItems.first(where: &#123; <span class="variable">$0</span>.name <span class="operator">==</span> <span class="string">&quot;latitude&quot;</span> &#125;)<span class="operator">?</span>.value,</span><br><span class="line">              <span class="keyword">let</span> longitudeValue <span class="operator">=</span> queryItems.first(where: &#123; <span class="variable">$0</span>.name <span class="operator">==</span> <span class="string">&quot;longitude&quot;</span> &#125;)<span class="operator">?</span>.value,</span><br><span class="line">              <span class="keyword">let</span> latitude <span class="operator">=</span> <span class="type">Double</span>(latitudeValue), <span class="keyword">let</span> longitude <span class="operator">=</span> <span class="type">Double</span>(longitudeValue) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> region <span class="operator">=</span> <span class="type">CLCircularRegion</span>(center: <span class="type">CLLocationCoordinate2D</span>(latitude: latitude,</span><br><span class="line">                            longitude: longitude), radius: <span class="number">100</span>, identifier: <span class="string">&quot;smoothie_location&quot;</span>)</span><br><span class="line">        payload.confirmAcquired(in: region) &#123; inRegion, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">                <span class="built_in">print</span>(error.localizedDescription)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                model.applePayAllowed <span class="operator">=</span> inRegion</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>handleUserActivity</code>就是在处理<code>App Clip</code>链接。<br>当然，直接将主App和<code>App Clip</code>的代码分开也是可以的，但是这可能对于两者区别较大的产品更适合，但同时也违反了Apple的初衷，希望<code>App Clip</code>仅仅是主App的一部分，这可能会导致审核遇阻。</p><p><strong>与小程序的异同</strong></p><p>有些人认为<code>App Clip</code>是苹果小程序，像微信一样。如果仅从两者设计之初的理念来比较，确实比较相似，但是从其他方面来讲，两者差异较大：</p><ul><li>入口不同：App Clip支持多种打开方式，微信小程序只支持从微信进入，但是后者支持主动搜索。</li><li>性能不同：App Clip依赖于系统，微信小程序依赖于微信，原生性能会明显优于小程序。</li><li>体验路径不同：微信小程序需要打开微信，下拉小程序列表，找到并打开目标小程序，<code>App Clip</code>一步到位，实施降维打击。</li><li>定位不同：<code>App Clip</code>明确是主App功能的一部分，不能做主App无关的内容，但是微信小程序没有该限制，并且支持独立发布。</li></ul><p>也正是由于定位不同，微信小程序完全可以与<code>App Clip</code>共分天下，微信小程序已经形成生态圈，国内很多开发商专注于小程序的开发，都没有App，自然也就用不上<code>App Clip</code>，虽然<code>App Clip</code>必然会抢占小程序的市场，但是目前看，还是无法从根本上动摇小程序的地位。</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-App瘦身</title>
      <link href="/2020/09/14/ios/general/App%E7%98%A6%E8%BA%AB/"/>
      <url>/2020/09/14/ios/general/App%E7%98%A6%E8%BA%AB/</url>
      
        <content type="html"><![CDATA[<p>关于App瘦身的实践<br><strong>构成</strong></p><ul><li>可执行文件</li><li>资源<span id="more"></span></li></ul><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><img src="https://cdn.rencheng.cc/blog/72mgl.png-thumb100"></p><h2 id="删除无用资源"><a href="#删除无用资源" class="headerlink" title="删除无用资源"></a>删除无用资源</h2><h3 id="未使用的图片"><a href="#未使用的图片" class="headerlink" title="未使用的图片"></a>未使用的图片</h3><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p><a href="https://github.com/tinymind/LSUnusedResources">LSUnusedResources</a></p><blockquote><p>下载后用Xcode运行，会启动一个Mac程序。</p></blockquote><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ul><li>一般都是启动图比较大，往期启动图没有及时清理</li><li>不是特别大的工程，未使用图片没多少。不要灰心</li><li>要选中<code>ignore similar name</code>防止误删</li><li>序列图会误报，一定要检查好。防止误删</li><li>某些动画的资源，也会误报，要检查好</li></ul><blockquote><p>定期检查<br>防止误删</p></blockquote><h3 id="删除重复的资源"><a href="#删除重复的资源" class="headerlink" title="删除重复的资源"></a>删除重复的资源</h3><p>重复资源（主要指图片）不是指命名重复而是内容相同。<br><code>fdupes</code>是Linux下的一个工具，可以在指定的目录及子目录中查找重复的文件。<code>fdupes</code>通过对比文件的MD5签名，以及逐字节比较文件来识别重复内容。</p><p>项目中图片分两处存放，Assets.xcassets和images文件夹，所以在这两个目录查找就可以。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdupes -r xxx/images xxx/Images.xcassets</span><br></pre></td></tr></table></figure><h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><ul><li><p><a href="https://github.com/ImageOptim/ImageOptim">ImageOptim</a></p></li><li><p><a href="https://tinypng.com/">Tinypng</a></p></li><li><p>WebP图片压缩<br>  WebP是Google提供的一种图片编码格式，通常情况下WebP格式的图片是原始JPG&#x2F;PNG图片的1&#x2F;3，所以对于重度依赖图片显示的应用，转换使用WebP可以节省大量的网络传输数据和时间。对于APP瘦身，使用WebP格式可能是一种方式，可以使用WebP格式的图片替代现有的图片资源，可以一定程度的节省空间。</p></li></ul><h2 id="代码瘦身"><a href="#代码瘦身" class="headerlink" title="代码瘦身"></a>代码瘦身</h2><p><strong>AppCode代码静态检查</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">菜单栏 -&gt; code -&gt; Inspect Code</span><br></pre></td></tr></table></figure><h2 id="编译器优化"><a href="#编译器优化" class="headerlink" title="编译器优化"></a>编译器优化</h2><ul><li><code>Strip Linked Product</code>、<code>Make Strings Read-Only</code>、<code>Symbols Hidden by Default</code>设置为YES</li><li>去掉异常支持，Enable C++ Exceptions、Enable Objective-C Exceptions设置为NO， Other C Flags添加-fno-exceptions</li></ul><h2 id="LinkMap分析包大小"><a href="#LinkMap分析包大小" class="headerlink" title="LinkMap分析包大小"></a>LinkMap分析包大小</h2><p>生成LinkMap文件，可以查看可执行文件的具体组成<br><img src="https://cdn.rencheng.cc/blog/asfyo.jpg"><br>可借助第三方工具解析LinkMap文件： <a href="https://github.com/huanxsd/LinkMap">https://github.com/huanxsd/LinkMap</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> App优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>敏捷开发</title>
      <link href="/2020/08/05/manager/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
      <url>/2020/08/05/manager/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>关于软件开发模式的记录</p><span id="more"></span><h2 id="传统软件开发模式"><a href="#传统软件开发模式" class="headerlink" title="传统软件开发模式"></a>传统软件开发模式</h2><ol><li>需要经历问题评估、计划解决方案、设计系统架构、开发代码、测试、部署和使用系统、维护解决方案等过程。</li><li>如瀑布流模式: 它是以文档为驱动，在整个开发过程中，开发人员根据需求文档进行开发，一切以文档为依据。<br> <img src="https://cdn.rencheng.cc/blog/xvod4.jpg"></li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>由于开发模型是线性的，用户只有等到整个过程的末期才能见到开发成果，从而增加了开发的风险；</li><li>早期的错误可能要等到开发后期的测试阶段才能发现，进而带来严重的后果。</li><li>各个软件生命周期衔接花费时间较长，团队人员交流成本大。</li><li>在需求不明并且在项目进行过程中可能变化的情况下基本是不可行的。</li></ol><blockquote><p><a href="https://blog.csdn.net/xi_gua_gua/article/details/53107283">软件开发的11种模式</a></p></blockquote><h2 id="敏捷开发-Agile-Development"><a href="#敏捷开发-Agile-Development" class="headerlink" title="敏捷开发(Agile Development)"></a>敏捷开发(Agile Development)</h2><h3 id="什么是敏捷开发"><a href="#什么是敏捷开发" class="headerlink" title="什么是敏捷开发"></a>什么是敏捷开发</h3><ol><li>敏捷开发(Agile Development)是一种以人为核心、迭代、循序渐进的开发方式。</li><li>在敏捷开发中，软件项目的构建被切分成多个子项目，各个子项目的成果都经过测试，具备集成和可运行的特征。</li><li>它并不是一门技术，而是一种开发方式，是一种软件开发的流程。</li><li>作用指导我们用规定的环节去一步一步完成项目的开发。因为它采用的是迭代式开发，所以这种开发方式的主要驱动核心是人。</li></ol><h3 id="敏捷开发适用于"><a href="#敏捷开发适用于" class="headerlink" title="敏捷开发适用于"></a>敏捷开发适用于</h3><ul><li>客户不知道自己要啥的情况，这样的客户占绝大多数。因为客户不知道要啥，所以你需要不断帮客户弄明白他到底想要啥。换句话说，你需要和客户沟通，合作，倾听反馈，持续改进；</li><li>竞争激烈的市场，这样的情况下，赶在竞争对手前交付一个不完美但至少能用的产品非常重要；</li><li>快速变化的市场，你在埋头造一辆汽车的时候，客户已经想开飞机满天飞了，这就需要你能一步步的把汽车改成飞机，还能按时交付；</li><li>适用于在一个地方办公的小团队，一般 10 个人以内。这样能使敏捷中主要的沟通方式「Face to Face」是可行的。</li></ul><h3 id="敏捷开发流程"><a href="#敏捷开发流程" class="headerlink" title="敏捷开发流程"></a>敏捷开发流程</h3><p><img src="https://cdn.rencheng.cc/blog/umlyp.jpg"></p><h3 id="敏捷开发实现方式"><a href="#敏捷开发实现方式" class="headerlink" title="敏捷开发实现方式"></a>敏捷开发实现方式</h3><ul><li>Scrum</li><li>XP</li></ul><h4 id="Scrum"><a href="#Scrum" class="headerlink" title="Scrum"></a>Scrum</h4><p><img src="https://cdn.rencheng.cc/blog/6m04u.jpg"></p><p><strong>项目角色</strong></p><ul><li>产品负责人（Product Owner）：主要负责确定产品的功能和达到要求的标准，指定软件的发布日期和交付的内容，同时有权力接受或拒绝开发团队的工作成果。</li><li>流程管理员（Scrum Master）：主要负责整个Scrum流程在项目中的顺利实施和进行，以及清除挡在客户和开发工作之间的沟通障碍，使得客户可以直接驱动开发。</li><li>开发团队（Scrum Team）：主要负责软件产品在Scrum规定流程下进行开发工作，人数控制在5~10人左右，每个成员可能负责不同的技术方面，但要求每成员必须要有很强的自我管理能力，同时具有一定的表达能力；成员可以采用任何工作方式，只要能达到Sprint的目标。</li></ul><h4 id="XP（Extreme-Programming）"><a href="#XP（Extreme-Programming）" class="headerlink" title="XP（Extreme Programming）"></a>XP（Extreme Programming）</h4><p><strong>什么是XP</strong></p><ul><li>极限编程（eXtreme Programming），是一种全新的、轻量级的、灵巧的软件开发方法，是一种软件工程方法学。它强调程序设计团队与业务专家之间的紧密协作、面对面的沟通（比书面的文档更有效）、频繁交付新的软件版本、紧凑而自我组织型的团队、能够很好的适应需求变化的代码编写和团队组织方法，更注重软件开发中人的作用。</li><li>XP的核心是沟通（Communication）、简单（Simplicity）、反馈（Feedback）、勇气（Courage）四大价值观，它们是XP的基础，也是XP的灵魂。</li></ul><p><a href="https://blog.csdn.net/happylee6688/article/details/21551065">敏捷开发之XP</a></p><h4 id="敏捷开发中XP与SCRUM的区别"><a href="#敏捷开发中XP与SCRUM的区别" class="headerlink" title="敏捷开发中XP与SCRUM的区别"></a>敏捷开发中XP与SCRUM的区别</h4><ol><li><p>迭代长度的不同</p><ul><li>XP的一个Sprint的迭代长度大致为1<del>2周, 而Scrum的迭代长度一般为 2</del> 4周.</li></ul></li><li><p>在迭代中, 是否允许修改需求</p><ul><li>XP在一个迭代中，如果一个User Story(一个用户需求)还没有实现， 则可以考虑用另外的需求将其替换，替换的原则是需求实现的时间量是相等的。</li><li>而Scrum是不允许这样做的，一旦迭代开工会完毕, 任何需求都不允许添加进来，并有Scrum Master严格把关，不允许开发团队受到干扰</li><li>在迭代中，User Story是否严格按照优先级别来实现</li><li>XP是务必要遵守优先级别的。 但Scrum在这点做得很灵活， 可以不按照优先级别来做</li></ul><blockquote><p>Scrum这样处理的理由是：如果优先问题的解决者，由于其它事情耽搁，不能认领任务，那么整个进度就耽误了。 另外一个原因是，如果按优先级排序的User Story #6和#10，虽然#6优先级高，但是如果#6的实现要依赖于#10，则不得不优先做#10.</p></blockquote></li><li><p>软件的实施过程中，是否采用严格的工程方法，保证进度或者质量</p><ul><li>Scrum没有对软件的整个实施过程开出个工程实践的处方，要求开发者自觉保证。</li><li>但XP对整个流程方法定义非常严格，规定需要采用TDD, 自动测试， 结对编程，简单设计，重构等约束团队的行为。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 团队管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-灰度发布</title>
      <link href="/2020/05/22/ios/general/iOS-%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/"/>
      <url>/2020/05/22/ios/general/iOS-%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<p>打开头条总是让我参加内测，研究一下灰度发布。</p><span id="more"></span><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><img src="https://cdn.rencheng.cc/blog/8wjzx.png-thumb100"></p><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><ul><li>版本控制</li><li>版本回收</li><li>反馈机制</li></ul><h3 id="运营"><a href="#运营" class="headerlink" title="运营"></a>运营</h3><ul><li>A&#x2F;BTest良性分发</li><li>报表统计</li><li>补偿机制</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS高级面试题</title>
      <link href="/2020/04/30/ios/general/iOS%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/04/30/ios/general/iOS%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>以下是通过极客时间《iOS高级课》中总结的面试题，仅供参考。</p><span id="more"></span><ol><li><p>以下关于 objc_msgSend 和 fishhook 的说法中，哪些是正确的？<br> A. objc_msgSend 是使用 C 语言编写的<br> B. objc_msgSend 在运行时根据对象和方法的 selector 找到对应的函数指针，然后执行<br> C. 可以使用 fishhook 来 hook objc_msgSend<br> D. fishhook 通过重新绑定符号，实现对 c 方法的 hook</p><blockquote><p>答案：B, D<br>A 选项，objc_msgSend 是使用汇编语言编写的。<br>C 选项，hook objc_msgSend 还需要用到汇编。</p></blockquote></li><li><p>Auto Layout 的布局工作过程描述，哪些是正确的？<br> A. Layout Engine 在碰到约束变化后不会重新计算布局<br> B. Constraints Change 不会触发约束变化<br> C. Layout Engine 会将视图、约束、优先级、固定大小通过计算转换成最终的大小和位置<br> D. 在 Layout Engine 里，每当约束发生变化，就会触发 Deffered Layout Pass</p><blockquote><p>答案：C, D<br>A 选项，Layout Engine 在碰到约束变化后会重新计算布局，获取到布局后调用 superview.setNeedLayout()，然后进入 Deferred Layout Pass。<br>B 选项，Constraints Change 表示的就是约束变化，添加、删除视图时会触发约束变化。</p></blockquote></li><li><p>链接器对代码做的事情，哪些是正确的？<br> A. 去项目文件里查找目标代码文件里已经定义的变量<br> B. 扫描项目中的不同文件，将所有符号定义和引用地址收集起来，并放到全局符号表中<br> C. 计算合并后长度及位置，生成同类型的段进行合并，建立绑定<br> D. 对项目中不同文件里的变量进行地址重定位</p><blockquote><p>答案：B, C, D<br>A 选项，查找没有定义的变量。</p></blockquote></li><li><p>下面哪些工具可以作为静态分析器？<br> A. OCLint<br> B. Infer<br> C. Injection<br> D. ImageOptim</p><blockquote><p>答案：A, B<br>C 选项，Injection 的工具用来动态地将 Swift 或 Objective-C 的代码在已运行的程序中执行，以加快调试速度，同时保证程序不用重启。<br>D 选项，ImageOptim 是图片压缩工具。</p></blockquote></li><li><p>关于减少 App 包大小，哪些说法是正确的？<br> A. 通过 AppCode 找出无用代码<br> B. LinkMap 结合 Mach-O 找无用代码<br> C. 使用 LSUnusedResources 进行图片压缩<br> D. 使用 App Thining 可以减少包大小</p><blockquote><p>答案：A, B<br>C 选项，LSUnusedResources 是找无用图片的工具，TinyPng 或 ImageOptim 才是图片压缩的工具。</p></blockquote></li><li><p>下面哪些问题是信号可捕获的？<br> A. 内存被打爆<br> B. NSNotification 线程问题<br> C. 后台任务超时<br> D. 野指针</p><blockquote><p>答案：B, D<br>A 选项和 C 选项是无法通过信号捕获的。</p></blockquote></li><li><p>下面哪个异常编码，是表示 App 在一定时间内无响应而被 watchdog 杀掉的？<br> A. 0xdeadfa11<br> B. 0xc00010ff<br> C. 0x8badf00d<br> D. 0xdead10cc</p><blockquote><p>答案：C<br>A 选项，表示 App 被用户强制退出。<br>B 选项，表示 App 因为运行造成设备温度太高而被杀掉。<br>D 选项，表示死锁，当 App 在后台运行时，持有了系统资源。</p></blockquote></li><li><p>导致卡顿的原因，以下说法哪些是正确的？<br> A. 复杂 UI 、图文混排的绘制量过大<br> B. 在主线程上使用锁<br> C. 在主线程做大量的 IO 操作<br> D. 运算量过大，CPU 持续高占用</p><blockquote><p>答案：A, C, D<br>B 选项，主线程上使用锁不一定会导致卡顿，死锁和主子线程抢锁才会。</p></blockquote></li><li><p>以下哪些方法可以获取内存上限值？<br> A. 通过 JetsamEvent 日志计算内存限制值<br> B. 通过 XNU 获取内存限制值<br> C. 通过内存警告获取内存限制值<br> D. 通过 hook malloc_logger 函数来获取内存限制值</p><blockquote><p>答案：A, B, C<br>D 选项，hook malloc_logger 用来定位谁分配的内存。</p></blockquote></li><li><p>关于线程，以下哪些说法是正确的？<br> A. UIKit 是线程安全的<br> B. UIKit 没有使用多线程技术<br> C. 常驻线程一直存在于内存中<br> D. 线程开多了会有内存问题</p><blockquote><p>答案：B, C, D<br>A 选项，UIKit 不是线程安全的。</p></blockquote></li><li><p>以下哪些是可以在 iOS 中使用的 GUI 框架？<br> A. WebKit<br> B. Flutter<br> C. Blink<br> D. Texture</p><blockquote><p>答案：A, B, D<br>C 选项，Blink 是谷歌从 WebKit 中 WebCore 拉出的分支，用于 Chrome 中，无法用在 iOS 中。</p></blockquote></li><li><p>关于 iOS 开发中使用的开源库，下面哪些说法是正确的？<br> A. ReactiveCocoa、RxSwift、React.js 都是 iOS 响应式框架<br> B. Lottie 框架可以解决动画制作与开发隔离，以及多平台统一的问题<br> C. SkyLab 可以用来作 A&#x2F;B 测试<br> D. Promise 可以提高 JSON 解析的性能</p><blockquote><p>答案：B, C<br>A 选项，React.js 是前端响应式框架。<br>D 选项，Promise 是一种专门针对异步数据操作编写的一套统一规则的模式，可以用于事件总线的数据订阅和数据发布事件。</p></blockquote></li><li><p>iOS 系统可以分为哪几层？<br> A. 最一层是 Topaz 层<br> B. 第二层是应用框架层<br> C. 第三层是微内核层<br> D. 第四层是 Darwin 层</p><blockquote><p>答案：B, D<br>A 选项，第一层是户体验层，主要是提供用户界面。这一层包含了 SpringBoard、Spotlight、Accessibility。Topaz 层是 Fuchsia 的系统基础应用层。<br>C 选项，第三层是核心框架层，是系统核心功能的框架层。</p></blockquote></li><li><p>关于 iOS 的 Runtime，以下说法哪些是正确的？<br> A. 可以帮助我们在运行时进行方法交换<br> B. 在原方法执行之前插入自定义方法<br> C. 直接使用 Runtime 方法交换开发很安全，无风险<br> D. Runtime 不光能够进行方法交换，还能够在运行时处理 Objective-C 特性相关（比如类、成员函数、继承）的增删改操作</p><blockquote><p>答案：A, B, D<br>C 选项，直接使用 Runtime 的方法进行方法交换会有很多风险，更安全的是使用 Aspects。</p></blockquote></li><li><p>关于函数调用，以下哪些说法是正确的？<br> A. dlsym() 无法通过函数名字符串获取函数地址<br> B. 编译时需要按照调用惯例针对不同 CPU 架构编译，生成汇编代码，确定好栈和寄存器<br> C. Objective-C 的函数调用采用的是发送消息的方式<br> D. Objective-C 具备动态调用函数的能力</p><blockquote><p>答案：B, C, D<br>选项 A，dlsym() 可以通过函数名字符串拿到函数地址。</p></blockquote></li><li><p>以下关于 libffi 的说法，哪些是正确的？<br> A. libffi 中 ffi 的全称是 Foundation Function Interface<br> B. libffi 还提供了可移植的高级语言接口，可以不使用函数签名间接调用 C 函数<br> C. libffi 通过发送消息的方式来进行函数调用<br> D. libffi 的作用类似于一个动态的编译器，在运行时就能够完成编译时所做的调用惯例函数调用代码生成</p><blockquote><p>答案：B, D<br>A 选项，全称是 Foreign Function Interface。<br>C 选项，libffi 是通过调用 ffi_call（函数调用） 来进行函数调用。</p></blockquote></li><li><p>关于 ffi_call_SYSV 处理过程，以下说法哪些是正确的？<br> A. ffi_call_SYSV 会先分配 stack 和 frame，保存记录 fn、rvalue、closure、flags<br> B. 将向量参数传到寄存器，按照参数放置规则，调整 sp 的位置<br> C. 将参数放入寄存器，存放完毕，就开始释放上下文，留下栈里的参数<br> D. 调用完函数指针，直接保存返回值</p><blockquote><p>答案：A, B, C<br>选项 D，调用完函数指针，保存返回值之前需要重新读取 rvalue 和  flags，析构部分栈指针。</p></blockquote></li><li><p>以下关于 JavaScriptCore 的说法，哪些是正确的？<br> A. JavaScriptCore 框架主要由 JSVirtualMachine 、JSContext、JSValue 类组成<br> B. JSVirtualMachine 里只包含一个 JSContext，一个 JSContext 中可以有多个 JSValue<br> C. JavaScriptCore 内部是由 Parser、Interpreter、Compiler、GC 等部分组成<br> D. 原生线程可以将类方法和属性提供给 JavaScriptCore 使用</p><blockquote><p>答案：A, C, D<br>B 选项，JSVirtualMachine 里可以有多个 JSContext。</p></blockquote></li><li><p>关于渲染原理，下面说法哪些是正确的？<br> A. CPU 内部流水线结构拥有并行计算能力，一般用于显示内容的计算<br> B. GPU 专门用来处理渲染内容的计算，比如视图创建、布局、图片解码等<br> C. GPU 的主要工作是将 3D 坐标转化成 2D 坐标，然后再把 2D 坐标转成实际像素<br> D. CPU 处理完渲染内容的计算，然后将图形结果显示在屏幕像素中</p><blockquote><p>答案：A, C<br>B 选项，GPU 并行计算能力强，通过计算将图形结果显示在屏幕像素中，渲染内容的计算，通常使用 CPU 完成。<br>D 选项，CPU 专门用来处理渲染内容的计算，比如视图创建、布局、图片解码等，内容计算完成后，再传输给 GPU 进行渲染。</p></blockquote></li><li><p>以下动态化方案的说法，哪些是正确的？<br> A. JIT 技术就是在 App 运行时创建机器代码，同时执行这些机器代码<br> B. LLVM IR 是 SSA 形式的<br> C. SSA 主要解决的是，多种数据流分析时种类多、难以维护的问题<br> D. LLVM 里有针对 iOS 系统可用的解释器</p><blockquote><p>答案：A, B, C<br>D 选项，LLVM 没有专门针对 iOS 做解释器，因为 iOS 动态化在 LLVM 所有工作中的优先级并不高。</p></blockquote></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契数列</title>
      <link href="/2020/04/11/algo/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
      <url>/2020/04/11/algo/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">F(0) = 0,   F(1) = 1</span><br><span class="line">F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</span><br><span class="line">给定 N，计算 F(N)。</span><br></pre></td></tr></table></figure><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：2</span><br><span class="line">输出：1</span><br><span class="line">解释：F(2) = F(1) + F(0) = 1 + 0 = 1.</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：3</span><br><span class="line">输出：2</span><br><span class="line">解释：F(3) = F(2) + F(1) = 1 + 1 = 2.</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：4</span><br><span class="line">输出：3</span><br><span class="line">解释：F(4) = F(3) + F(2) = 2 + 1 = 3.</span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 ≤ N ≤ 30</span><br></pre></td></tr></table></figure><p><strong>方法一</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过递归的方式计算 - 有性能问题</span></span><br><span class="line"><span class="comment">// 时间复杂度: O(2^n)</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fib</span>(<span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n <span class="operator">&lt;=</span> <span class="number">1</span> &#123; <span class="keyword">return</span> n &#125;</span><br><span class="line">    <span class="keyword">return</span> fib1(n <span class="operator">-</span> <span class="number">1</span>) <span class="operator">+</span> fib1(n <span class="operator">-</span> <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间复杂度: O(n)</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fib</span>(<span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n <span class="operator">&lt;</span> <span class="number">1</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> left <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> right <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">1</span><span class="operator">..&lt;</span>n &#123;</span><br><span class="line">        <span class="keyword">let</span> sum <span class="operator">=</span> (left <span class="operator">+</span> right) <span class="operator">%</span> <span class="type">Int</span>(<span class="number">1e9</span><span class="operator">+</span><span class="number">7</span>)</span><br><span class="line">        right <span class="operator">=</span> left</span><br><span class="line">        left <span class="operator">=</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间复杂度: O(n)</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">fib</span>(<span class="keyword">_</span> <span class="params">n</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n <span class="operator">&lt;</span> <span class="number">1</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> n <span class="operator">&lt;=</span> <span class="number">2</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">var</span> array: [<span class="type">Int</span>] <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="number">0</span>, count: n<span class="operator">+</span><span class="number">1</span>)</span><br><span class="line">        array[<span class="number">1</span>] <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span><span class="operator">...</span>n &#123;</span><br><span class="line">            array[i] <span class="operator">=</span> (array[i<span class="operator">-</span><span class="number">1</span>] <span class="operator">+</span> array[i<span class="operator">-</span><span class="number">2</span>]) <span class="operator">%</span> <span class="type">Int</span>(<span class="number">1e9</span> <span class="operator">+</span> <span class="number">7</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[n]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>Swift中如果数值越界，会崩溃。建议采用大值数作为容器。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
            <tag> Swift </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter - Widget渲染流程</title>
      <link href="/2020/03/06/flutter/FlutterWidget%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/"/>
      <url>/2020/03/06/flutter/FlutterWidget%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>源码分析Widget渲染原理</p><p>并不是所有的Widget都会被独立渲染!<br>只有继承<code>RenderObjectWidget</code>的才会创建RenderObject对象!<br>在Flutter渲染的流程中，有三颗重要的树!Flutter引擎是针对Render树进行渲染!</p><span id="more"></span><p>每一个Widget都会创建一个Element对象。<br>隐式调用<code>createElement</code>方法，Element加入Element树中。</p><blockquote><p>它会创建三种Element</p></blockquote><ul><li>RenderElement主要是创建RenderObject对象<br>  继承RenderObjectWidget的Widget会创建RenderElement<ul><li>创建RanderElement</li><li>Flutter会凋用mount方法，调用createRanderObject方法</li></ul></li><li>StatefulElement继承ComponentElement<br>  StatefulWidget会创建StatefulElement<ul><li>调用createState方法, 创建State</li><li>将Widget赋值给state</li><li>凋用state的build方法并且將自己(Element)传出去</li><li>build里面的context 就是Widget的Element!</li></ul></li><li>StatelessElement继承ComponentElement<br>  StatelessWidget 会创建StatelessElement<ul><li>主要就是调用build方法并且将自己(Element) 传出去.</li></ul></li></ul><p>Q: Render树用于渲染，Widget用于定义开发。那么Element有什么意义？<br>A: Element持有Widget，同时也持有RenderObject。拿到context就可以更方便做事。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter - iOS通信开发</title>
      <link href="/2020/03/04/flutter/Flutter%E4%B8%8EiOS%E9%80%9A%E4%BF%A1/"/>
      <url>/2020/03/04/flutter/Flutter%E4%B8%8EiOS%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>在做Flutter开发的时候通常离不了Flutter和Native之间的通信，比如：初始化Flutter时Native向Dart传递数据，Dart调用Native的相册选择图片，Dart调用Native的模块进行一些复杂的计算，Native将一些数据(GPS信息，陀螺仪，传感器等)主动传递给Dart等。</p><span id="more"></span><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>接下来我将分场景来介绍<code>Dart</code>和<code>Native</code>之间的通信。</p><p><strong>几种通信场景：</strong></p><ul><li>初始化Flutter时Native向Dart传递数据；</li><li>Native发送数据给Dart；</li><li>Dart发送数据给Native；</li><li>Dart发送数据给Native，然后Native回传数据给Dart；</li></ul><p><img src="https://cdn.rencheng.cc/blog/0srxg.png"></p><p>在讲解 <code>Flutter</code> 与 <code>Native</code> 之间是如何传递数据之前，我们先来了解下 <code>Flutter</code> 与 <code>Native</code> 的通信机制，<code>Flutter</code> 和 <code>Native</code> 的通信是通过Channel来完成的。</p><p>消息使用Channel（平台通道）在客户端（UI）和主机（平台）之间传递，如下图所示：</p><p><img src="https://cdn.rencheng.cc/blog/oz11b.png"></p><blockquote><p>Flutter中消息的传递是完全异步的；</p></blockquote><h2 id="Channel所支持的数据类型对照表："><a href="#Channel所支持的数据类型对照表：" class="headerlink" title="Channel所支持的数据类型对照表："></a>Channel所支持的数据类型对照表：</h2><table><thead><tr><th align="left">Dart</th><th align="left">Android</th><th align="left">iOS</th></tr></thead><tbody><tr><td align="left">null</td><td align="left">null</td><td align="left">nil (NSNull when nested)</td></tr><tr><td align="left">bool</td><td align="left">java.lang.Boolean</td><td align="left">NSNumber numberWithBool:</td></tr><tr><td align="left">int</td><td align="left">java.lang.Integer</td><td align="left">NSNumber numberWithInt:</td></tr><tr><td align="left">int, if 32 bits not enough</td><td align="left">java.lang.Long</td><td align="left">NSNumber numberWithLong:</td></tr><tr><td align="left">double</td><td align="left">java.lang.Double</td><td align="left">NSNumber numberWithDouble:</td></tr><tr><td align="left">String</td><td align="left">java.lang.String</td><td align="left">NSString</td></tr><tr><td align="left">Uint8List</td><td align="left">byte[]</td><td align="left">FlutterStandardTypedData typedDataWithBytes:</td></tr><tr><td align="left">Int32List</td><td align="left">int[]</td><td align="left">FlutterStandardTypedData typedDataWithInt32:</td></tr><tr><td align="left">Int64List</td><td align="left">long[]</td><td align="left">FlutterStandardTypedData typedDataWithInt64:</td></tr><tr><td align="left">Float64List</td><td align="left">double[]</td><td align="left">FlutterStandardTypedData typedDataWithFloat64:</td></tr><tr><td align="left">List</td><td align="left">java.util.ArrayList</td><td align="left">NSArray</td></tr><tr><td align="left">Map</td><td align="left">java.util.HashMap</td><td align="left">NSDictionary</td></tr></tbody></table><h2 id="Flutter定义了三种不同类型的Channel："><a href="#Flutter定义了三种不同类型的Channel：" class="headerlink" title="Flutter定义了三种不同类型的Channel："></a>Flutter定义了三种不同类型的Channel：</h2><ul><li>BasicMessageChannel：用于传递字符串和半结构化的信息，**<code>持续通信</code><strong>，</strong><code>收到消息后可以回复此次消息</code>**，如：Native将遍历到的文件信息陆续传递到Dart，再比如：Flutter将从服务端陆陆续获取到信息交个Native加工，Native处理完返回等；</li><li>MethodChannel：用于传递方法调用（method invocation）**<code>一次性通信</code>**：如Flutter调用Native拍照；</li><li>EventChannel: 用于数据流（event streams）的通信，**<code>持续通信</code><strong>，</strong><code>收到消息后无法回复此次消息</code>**；通过长用于Native向Dart的通信，如：手机电量变化，网络连接变化，陀螺仪，传感器等；</li></ul><p>这三种类型的类型的Channel都是全双工通信，即A &lt;&#x3D;&gt; B，Dart可以主动发送消息给platform端，并且platform接收到消息后可以做出回应，同样，platform端可以主动发送消息给Dart端，dart端接收数后返回给platform端。</p><h3 id="BasicMessageChannel用法"><a href="#BasicMessageChannel用法" class="headerlink" title="BasicMessageChannel用法"></a>BasicMessageChannel用法</h3><h4 id="Native端："><a href="#Native端：" class="headerlink" title="Native端："></a>Native端：</h4><p><strong>构造方法原型</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">instancetype</span>)messageChannelWithName:(<span class="built_in">NSString</span>*)name  binaryMessenger:(<span class="built_in">NSObject</span>&lt;FlutterBinaryMessenger&gt;*)messenger  codec:(<span class="built_in">NSObject</span>&lt;FlutterMessageCodec&gt;*)codec;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">*   `<span class="built_in">NSString</span>* name` - Channel的名字，也是其唯一标识符；</span><br><span class="line">*   `FlutterBinaryMessenger* messenger` - 消息信使，是消息的发送与接收的工具；</span><br><span class="line">*   `FlutterMessageCodec codec` - 消息的编解码器，它有几种不同类型的实现：</span><br><span class="line">    *   `BinaryCodec` - 最为简单的一种Codec，因为其返回值类型和入参的类型相同，均为二进制格式（Android中为ByteBuffer，iOS中为<span class="built_in">NSData</span>）。实际上，BinaryCodec在编解码过程中什么都没做，只是原封不动将二进制数据消息返回而已。或许你会因此觉得BinaryCodec没有意义，但是在某些情况下它非常有用，比如使用BinaryCodec可以使传递内存数据块时在编解码阶段免于内存拷贝；</span><br><span class="line">    *   `FlutterStringCodec` - 用于字符串与二进制数据之间的编解码，其编码格式为UTF<span class="number">-8</span>；</span><br><span class="line">    *   `FlutterJSONMessageCodec` - 用于基础数据与二进制数据之间的编解码，其支持基础数据类型以及列表、字典。其在iOS端使用了<span class="built_in">NSJSONSerialization</span>作为序列化的工具，而在Android端则使用了其自定义的JSONUtil与StringCodec作为序列化工具；</span><br><span class="line">    *   `FlutterBinaryCodec` - 是FlutterBinaryMessenger的默认编解码器，其支持基础数据类型、二进制数据、列表、字典；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**setMessageHandler方法原型**</span><br><span class="line">``` objc</span><br><span class="line">- (<span class="type">void</span>)setMessageHandler:(FlutterMessageHandler _Nullable)handler;</span><br></pre></td></tr></table></figure><ul><li><code>FlutterMessageHandler handler</code> - 消息处理器，配合<code>BinaryMessenger</code>完成消息的处理；</li></ul><p>在创建好<code>BasicMessageChannel</code>后，如果要让其接收Dart发来的消息，则需要调用它的<code>setMessageHandler</code>方法为其设置一个消息处理器。</p><p><strong>BasicMessageChannel.MessageHandler原型</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">void</span> (^FlutterMessageHandler)(<span class="type">id</span> _Nullable message, FlutterReply callback);</span><br></pre></td></tr></table></figure><ul><li><code>^(NSString* message, FlutterReply reply)</code> - 用于接受消息，message是消息内容，reply是回复此消息的回调函数；</li></ul><p><strong>send方法原型</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)sendMessage:(<span class="type">id</span> _Nullable)message;</span><br><span class="line">- (<span class="type">void</span>)sendMessage:(<span class="type">id</span> _Nullable)message reply:(FlutterReply _Nullable)callback;</span><br></pre></td></tr></table></figure><ul><li><code>id message</code> - 要传递给Dart的具体信息；</li><li><code>FlutterReply callback</code> - 消息发出去后，收到Dart的回复的回调函数；</li></ul><p>在创建好<code>BasicMessageChannel</code>后，如果要向Dart发送消息，可以调用它的<code>sendMessage</code>方法向Dart传递数据。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用MessageChannel传递数据</span></span><br><span class="line">- (<span class="type">void</span>)initMessageChannel&#123;</span><br><span class="line">    <span class="keyword">self</span>.messageChannel = [FlutterBasicMessageChannel messageChannelWithName:<span class="string">@&quot;BasicMessageChannelPlugin&quot;</span> binaryMessenger:<span class="keyword">self</span>.flutterViewController codec:[FlutterStringCodec sharedInstance]];</span><br><span class="line">    MainViewController*  __<span class="keyword">weak</span> weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    <span class="comment">//设置消息处理器，处理来自Dart的消息</span></span><br><span class="line">    [<span class="keyword">self</span>.messageChannel setMessageHandler:^(<span class="built_in">NSString</span>* message, FlutterReply reply) &#123;</span><br><span class="line">        reply([<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;BasicMessageChannel收到：%@&quot;</span>,message]);</span><br><span class="line">        [weakSelf sendShow:message];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用MessageChannel传递数据</span></span><br><span class="line">[<span class="keyword">self</span>.messageChannel sendMessage: mesage reply:^(<span class="type">id</span>  _Nullable reply) &#123;</span><br><span class="line">    <span class="keyword">if</span> (reply != <span class="literal">nil</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> sendShow:reply];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h4 id="Dart端："><a href="#Dart端：" class="headerlink" title="Dart端："></a>Dart端：</h4><p><strong>构造方法原型</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BasicMessageChannel(<span class="keyword">this</span>.name, <span class="keyword">this</span>.codec);</span><br></pre></td></tr></table></figure><ul><li><code>String name</code> - Channel的名字，要和Native端保持一致；</li><li><code>MessageCodec&lt;T&gt; codec</code> - 消息的编解码器，要和Native端保持一致，有四种类型的实现具体可以参考Native端的介绍；</li></ul><p><strong>setMessageHandler方法原型</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> setMessageHandler(Future&lt;T&gt; handler(T message))</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">*   `Future&lt;T&gt; handler(T message)` - 消息处理器，配合`BinaryMessenger`完成消息的处理；</span><br><span class="line"></span><br><span class="line">在创建好`BasicMessageChannel`后，如果要让其接收Native发来的消息，则需要调用它的`setMessageHandler`方法为其设置一个消息处理器。</span><br><span class="line"></span><br><span class="line">**send方法原型**</span><br><span class="line">``` dart</span><br><span class="line">Future&lt;T&gt; send(T message)</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">*   `T message` - 要传递给Native的具体信息；</span><br><span class="line">*   `Future&lt;T&gt;` - 消息发出去后，收到Native回复的回调函数；</span><br><span class="line"></span><br><span class="line">在创建好`BasicMessageChannel`后，如果要向Native发送消息，可以调用它的`send`方法向Native传递数据。</span><br><span class="line">``` dart</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> BasicMessageChannel _basicMessageChannel =</span><br><span class="line">      <span class="keyword">const</span> BasicMessageChannel(<span class="string">&#x27;BasicMessageChannelPlugin&#x27;</span>, StringCodec());</span><br><span class="line">...</span><br><span class="line"><span class="comment">//使用BasicMessageChannel接受来自Native的消息，并向Native回复</span></span><br><span class="line">_basicMessageChannel</span><br><span class="line">    .setMessageHandler((<span class="built_in">String</span> message) =&gt; Future&lt;<span class="built_in">String</span>&gt;(() &#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            showMessage = message;</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;收到Native的消息：&quot;</span> + message;</span><br><span class="line">        &#125;));</span><br><span class="line"><span class="comment">//使用BasicMessageChannel向Native发送消息，并接受Native的回复</span></span><br><span class="line"><span class="built_in">String</span> response;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   response = <span class="keyword">await</span> _basicMessageChannel.send(value);</span><br><span class="line">&#125; <span class="keyword">on</span> PlatformException <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">print</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://git.imooc.com/coding-321/flutter_trip">实例源码下载</a></p><h3 id="MethodChannel用法"><a href="#MethodChannel用法" class="headerlink" title="MethodChannel用法"></a>MethodChannel用法</h3><h4 id="Native端：-1"><a href="#Native端：-1" class="headerlink" title="Native端："></a>Native端：</h4><p><strong>构造方法原型</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会构造一个FlutterStandardMethodCodec类型的MethodCodec</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)methodChannelWithName:(<span class="built_in">NSString</span>*)name</span><br><span class="line">                      binaryMessenger:(<span class="built_in">NSObject</span>&lt;FlutterBinaryMessenger&gt;*)messenger;</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)methodChannelWithName:(<span class="built_in">NSString</span>*)name</span><br><span class="line">binaryMessenger:(<span class="built_in">NSObject</span>&lt;FlutterBinaryMessenger&gt;*)messenger</span><br><span class="line">        codec:(<span class="built_in">NSObject</span>&lt;FlutterMethodCodec&gt;*)codec;</span><br></pre></td></tr></table></figure><ul><li><code>FlutterBinaryMessenger* messenger</code> - 消息信使，是消息的发送与接收的工具；</li><li><code>NSString* name</code> - Channel的名字，也是其唯一标识符；</li><li><code>FlutterMethodCodec codec</code> - 用作<code>MethodChannel</code>的编解码器；</li></ul><p><strong>setMethodCallHandler方法原型</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)setMethodCallHandler:(FlutterMethodCallHandler _Nullable)handler;</span><br></pre></td></tr></table></figure><ul><li><code>FlutterMethodCallHandler handler</code> - 消息处理器，配合BinaryMessenger完成消息的处理；</li></ul><p>在创建好MethodChannel后，需要调用它的setMessageHandler方法为其设置一个消息处理器，以便能加收来自Dart的消息。</p><p><strong>FlutterMethodCallHandler原型</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(FlutterMethodCall * _Nonnull call, FlutterResult  _Nonnull result)</span><br></pre></td></tr></table></figure><p>用于接受消息，call是消息内容，它有两个成员变量NSString类型的<code>call.method</code>表示调用的方法名，id 类型的<code>call.arguments</code>表示调用方法所传递的入参；<code>FlutterResult result</code>是回复此消息的回调函数；</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)initMethodChannel&#123;</span><br><span class="line">    <span class="keyword">self</span>.methodChannel = [FlutterMethodChannel methodChannelWithName:<span class="string">@&quot;MethodChannelPlugin&quot;</span> binaryMessenger:<span class="keyword">self</span>.flutterViewController];</span><br><span class="line">    MainViewController*  __<span class="keyword">weak</span> weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    [<span class="keyword">self</span>.methodChannel setMethodCallHandler:^(FlutterMethodCall * _Nonnull call, FlutterResult  _Nonnull result) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([<span class="string">@&quot;send&quot;</span> isEqualToString:call.method]) &#123;</span><br><span class="line">            result([<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;MethodChannelPlugin收到：%@&quot;</span>,call.arguments]);<span class="comment">//返回结果给Dart);</span></span><br><span class="line">            [weakSelf sendShow:call.arguments];</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Dart端：-1"><a href="#Dart端：-1" class="headerlink" title="Dart端："></a>Dart端：</h4><p><strong>构造方法原型</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MethodChannel(<span class="keyword">this</span>.name, [<span class="keyword">this</span>.codec = <span class="keyword">const</span> StandardMethodCodec()])</span><br></pre></td></tr></table></figure><ul><li><code>String name</code> - Channel的名字，要和Native端保持一致；</li><li><code>MethodCodec codec</code> - 消息的编解码器，默认是StandardMethodCodec，要和Native端保持一致；</li></ul><p><strong>invokeMethod方法原型</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;T&gt; invokeMethod&lt;T&gt;(<span class="built_in">String</span> method, [ <span class="built_in">dynamic</span> arguments ])</span><br></pre></td></tr></table></figure><ul><li><code>String method</code>：要调用Native的方法名；</li><li><code>[ dynamic arguments ]</code>：调用Native方法传递的参数，可不传；</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> MethodChannel _methodChannelPlugin =</span><br><span class="line">      <span class="keyword">const</span> MethodChannel(<span class="string">&#x27;MethodChannelPlugin&#x27;</span>);</span><br><span class="line">...</span><br><span class="line"><span class="built_in">String</span> response;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">response = <span class="keyword">await</span> _methodChannelPlugin.invokeMethod(<span class="string">&#x27;send&#x27;</span>, value);</span><br><span class="line">    &#125; <span class="keyword">on</span> PlatformException <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">print</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><a href="https://git.imooc.com/coding-321/flutter_trip">实例源码下载</a></p><h3 id="EventChannel用法"><a href="#EventChannel用法" class="headerlink" title="EventChannel用法"></a>EventChannel用法</h3><h4 id="Native端：-2"><a href="#Native端：-2" class="headerlink" title="Native端："></a>Native端：</h4><p><strong>构造方法原型</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会构造一个FlutterStandardMethodCodec类型的MethodCodec</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)eventChannelWithName:(<span class="built_in">NSString</span>*)name</span><br><span class="line">                     binaryMessenger:(<span class="built_in">NSObject</span>&lt;FlutterBinaryMessenger&gt;*)messenger;</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)eventChannelWithName:(<span class="built_in">NSString</span>*)name</span><br><span class="line">                     binaryMessenger:(<span class="built_in">NSObject</span>&lt;FlutterBinaryMessenger&gt;*)messenger</span><br><span class="line">                               codec:(<span class="built_in">NSObject</span>&lt;FlutterMethodCodec&gt;*)codec;</span><br></pre></td></tr></table></figure><ul><li><code>FlutterBinaryMessenger* messenger</code> - 消息信使，是消息的发送与接收的工具；</li><li><code>NSString* name</code> - Channel的名字，也是其唯一标识符；</li><li><code>FlutterMethodCodec codec</code> - 用作<code>EventChannel</code>的编解码器；</li></ul><p><strong>setStreamHandler方法原型</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)setStreamHandler:(<span class="built_in">NSObject</span>&lt;FlutterStreamHandler&gt;* _Nullable)handler;</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">`FlutterStreamHandler handler` - 消息处理器，配合BinaryMessenger完成消息的处理；  </span><br><span class="line">在创建好EventChannel后，如果要让其接收Dart发来的消息，则需要调用它的`setStreamHandler`方法为其设置一个消息处理器。</span><br><span class="line"></span><br><span class="line">**FlutterStreamHandler**</span><br><span class="line">``` objc</span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">FlutterStreamHandler</span></span></span><br><span class="line">- (FlutterError* _Nullable)onListenWithArguments:(<span class="type">id</span> _Nullable)arguments eventSink:(FlutterEventSink)eventSink;</span><br><span class="line">- (FlutterError* _Nullable)onCancelWithArguments:(<span class="type">id</span> _Nullable)arguments;</span><br></pre></td></tr></table></figure><ul><li><code>(FlutterError* _Nullable)onListenWithArguments:(id _Nullable)arguments eventSink:(FlutterEventSink)eventSink</code> - Flutter Native监听事件时调用，<code>Object args</code>是传递的参数，<code>EventChannel.EventSink eventSink</code>是Native回调Dart时的会回调函数，<code>eventSink</code>提供<code>success</code>、<code>error</code>与<code>endOfStream</code>三个回调方法分别对应事件的不同状态；</li><li><code>(FlutterError* _Nullable)onCancelWithArguments:(id _Nullable)arguments</code> - Flutter取消监听时调用；</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;MainViewController.h&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MainViewController</span> ()&lt;<span class="title">FlutterStreamHandler</span>&gt;</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) FlutterViewController* flutterViewController;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) FlutterEventChannel* eventChannel;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) FlutterEventSink eventSink;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MainViewController</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - sendMessage</span></span><br><span class="line">- (<span class="type">void</span>)sendMessage:(<span class="built_in">NSNotification</span>*)notification&#123;</span><br><span class="line">    <span class="built_in">NSString</span>* mesage = [notification.object valueForKey:<span class="string">@&quot;message&quot;</span>];</span><br><span class="line">    <span class="comment">//用EventChannel传递数据</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.eventSink != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.eventSink(mesage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - naviagor</span></span><br><span class="line">- (<span class="type">void</span>)prepareForSegue:(<span class="built_in">UIStoryboardSegue</span>*)segue sender:(<span class="type">id</span>)sender &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([segue.destinationViewController isKindOfClass:[FlutterViewController <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.flutterViewController = segue.destinationViewController;</span><br><span class="line">        [<span class="keyword">self</span>.flutterViewController setInitialRoute:<span class="keyword">self</span>.inputParams];</span><br><span class="line">        [<span class="keyword">self</span> initChannel];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - init Channel</span></span><br><span class="line">- (<span class="type">void</span>)initChannel&#123;</span><br><span class="line">    [<span class="keyword">self</span> initEventChannel];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)initEventChannel&#123;</span><br><span class="line">    <span class="keyword">self</span>.eventChannel = [FlutterEventChannel eventChannelWithName:<span class="string">@&quot;EventChannelPlugin&quot;</span> binaryMessenger:<span class="keyword">self</span>.flutterViewController];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置消息处理器，处理来自Dart的消息</span></span><br><span class="line">    [<span class="keyword">self</span>.eventChannel setStreamHandler:<span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - <span class="string">&lt;FlutterStreamHandler&gt;</span></span></span><br><span class="line"><span class="comment">//这个onListen是Flutter端开始监听这个channel时的回调，第二个参数 EventSink是用来传数据的载体</span></span><br><span class="line">- (FlutterError* _Nullable)onListenWithArguments:(<span class="type">id</span> _Nullable)arguments eventSink:(FlutterEventSink)eventSink &#123;</span><br><span class="line">    <span class="comment">// arguments flutter给native的参数</span></span><br><span class="line">    <span class="comment">// 回调给flutter， 建议使用实例指向，因为该block可以使用多次</span></span><br><span class="line">    <span class="keyword">self</span>.eventSink = eventSink;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// flutter不再接收</span></span><br><span class="line">- (FlutterError* _Nullable)onCancelWithArguments:(<span class="type">id</span> _Nullable)arguments &#123;</span><br><span class="line">    <span class="comment">// arguments flutter给native的参数</span></span><br><span class="line">    <span class="keyword">self</span>.eventSink = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h4 id="Dart端：-2"><a href="#Dart端：-2" class="headerlink" title="Dart端："></a>Dart端：</h4><p><strong>构造方法原型</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventChannel(<span class="keyword">this</span>.name, [<span class="keyword">this</span>.codec = <span class="keyword">const</span> StandardMethodCodec()]);</span><br></pre></td></tr></table></figure><ul><li><code>String name</code> - Channel的名字，要和Native端保持一致；</li><li><code>MethodCodec codec</code> - 消息的编解码器，默认是StandardMethodCodec，要和Native端保持一致；</li></ul><p><strong>receiveBroadcastStream方法原型</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;<span class="built_in">dynamic</span>&gt; receiveBroadcastStream([ <span class="built_in">dynamic</span> arguments ]) </span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">*   `<span class="built_in">dynamic</span> arguments` - 监听事件时向Native传递的数据；</span><br><span class="line"></span><br><span class="line">初始化一个广播流用于从channel中接收数据，它返回一个Stream接下来需要调用Stream的`listen`方法来完成注册，另外需要在页面销毁时调用Stream的`cancel`方法来取消监听；</span><br><span class="line"></span><br><span class="line">``` dart</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> EventChannel _eventChannelPlugin =</span><br><span class="line">          EventChannel(<span class="string">&#x27;EventChannelPlugin&#x27;</span>);</span><br><span class="line">StreamSubscription _streamSubscription;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  _streamSubscription=_eventChannelPlugin</span><br><span class="line">      .receiveBroadcastStream()</span><br><span class="line">      .listen(_onToDart, onError: _onToDartError);</span><br><span class="line">  <span class="keyword">super</span>.initState();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> dispose() &#123;</span><br><span class="line">  <span class="keyword">if</span> (_streamSubscription != <span class="keyword">null</span>) &#123;</span><br><span class="line">    _streamSubscription.cancel();</span><br><span class="line">    _streamSubscription = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">super</span>.dispose();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> _onToDart(message) &#123;</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    showMessage = message;</span><br><span class="line">  &#125;); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> _onToDartError(error) &#123;</span><br><span class="line">  <span class="built_in">print</span>(error);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="1-初始化Flutter时Native向Dart传递数据"><a href="#1-初始化Flutter时Native向Dart传递数据" class="headerlink" title="1. 初始化Flutter时Native向Dart传递数据"></a>1. 初始化Flutter时Native向Dart传递数据</h2><p><img src="https://cdn.rencheng.cc/blog/fbsog.gif"></p><p>在Flutter的API中提供了Native在初始化Dart页面时传递数据给Dart的方式，这种传递数据的方式比下文中所讲的其他几种传递数据的方式发生的时机都早。</p><p>因为很少有资料介绍这种方式，所以可能有很多同学还不知道这种方式，不过不要紧，接下来我就向大家介绍如何使用这种方式来传递数据给Dart。</p><p>Android向Flutter传递初始化数据<code>initialRoute</code></p><p>Flutter允许我们在初始化Flutter页面时向Flutter传递一个String类型的<code>initialRoute</code>参数，从参数名字它是用作路由名的，但是既然Flutter给我们开了这个口子，那我们是不是可以搞点事情啊，传递点我们想传的其他参数呢，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FragmentTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> getSupportFragmentManager().beginTransaction();</span><br><span class="line">tx.replace(R.id.someContainer, Flutter.createFragment(<span class="string">&quot;&#123;name:&#x27;devio&#x27;,dataList:[&#x27;aa&#x27;,&#x27;bb&#x27;,&#x27;&#x27;cc]&#125;&quot;</span>));</span><br><span class="line">tx.commit();</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="type">View</span> <span class="variable">flutterView</span> <span class="operator">=</span> Flutter.createView(</span><br><span class="line">      MainActivity.<span class="built_in">this</span>,</span><br><span class="line">      getLifecycle(),</span><br><span class="line">      <span class="string">&quot;route1&quot;</span></span><br><span class="line">    );</span><br><span class="line">FrameLayout.<span class="type">LayoutParams</span> <span class="variable">layout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FrameLayout</span>.LayoutParams(<span class="number">600</span>, <span class="number">800</span>);</span><br><span class="line">layout.leftMargin = <span class="number">100</span>;</span><br><span class="line">layout.topMargin = <span class="number">200</span>;</span><br><span class="line">addContentView(flutterView, layout);</span><br></pre></td></tr></table></figure><p>然后在Flutter module通过如下方式获取：</p><pre><code class="dart">import &#39;dart:ui&#39;;//要使用window对象必须引入String initParams=window.defaultRouteName;//序列化成Dart obj 敢你想干的...</code></pre><p>通过上述方案的讲解是不是给大家分享了一个新的思路呢。<br>接下来，我们先来看一下如何在<code>Android</code>上来传递这些初始化数据。</p><h2 id="2-Native到Dart的通信-Native发送数据给Dart"><a href="#2-Native到Dart的通信-Native发送数据给Dart" class="headerlink" title="2. Native到Dart的通信(Native发送数据给Dart)"></a>2. Native到Dart的通信(Native发送数据给Dart)</h2><p>在Flutter 中Native向Dart传递消息可以通过<code>BasicMessageChannel</code>或<code>EventChannel</code>都可以实现：</p><h3 id="通过BasicMessageChannel的方式"><a href="#通过BasicMessageChannel的方式" class="headerlink" title="通过BasicMessageChannel的方式"></a>通过<code>BasicMessageChannel</code>的方式</h3><p><img src="https://cdn.rencheng.cc/blog/ul5ry.gif"></p><blockquote><p>如何实现？</p></blockquote><h3 id="通过EventChannel的方式"><a href="#通过EventChannel的方式" class="headerlink" title="通过EventChannel的方式"></a>通过<code>EventChannel</code>的方式</h3><p><img src="https://cdn.rencheng.cc/blog/ictvj.gif"></p><blockquote><p>如何实现？</p></blockquote><p>以上就是使用不同Channel实现Native到Dart通信的原理及方式，接下来我们来看一下实现Dart到Native之间通信的原理及方式。</p><h2 id="3-Dart到Native的通信-Dart发送数据给Native"><a href="#3-Dart到Native的通信-Dart发送数据给Native" class="headerlink" title="3. Dart到Native的通信(Dart发送数据给Native)"></a>3. Dart到Native的通信(Dart发送数据给Native)</h2><p>在Flutter 中Dart向Native传递消息可以通过<code>BasicMessageChannel</code>或<code>MethodChannel</code>都可以实现：</p><h3 id="通过BasicMessageChannel的方式-1"><a href="#通过BasicMessageChannel的方式-1" class="headerlink" title="通过BasicMessageChannel的方式"></a>通过<code>BasicMessageChannel</code>的方式</h3><p><img src="https://cdn.rencheng.cc/blog/uwndy.gif"></p><h3 id="通过MethodChannel的方式"><a href="#通过MethodChannel的方式" class="headerlink" title="通过MethodChannel的方式"></a>通过<code>MethodChannel</code>的方式</h3><p><img src="https://cdn.rencheng.cc/blog/d1dv3.gif"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter - iOS集成开发</title>
      <link href="/2020/03/02/flutter/Flutter%E4%B8%8EiOS%E9%9B%86%E6%88%90/"/>
      <url>/2020/03/02/flutter/Flutter%E4%B8%8EiOS%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>在Flutter的应用场景中，有时候一个APP只有部分页面是由Flutter实现的，比如：我们常用的闲鱼App，它宝贝详情页面是由Flutter实现的，这种开发模式被称为混合开发。</p><span id="more"></span><p><strong>混合开发的一些其他应用场景：</strong></p><ul><li><p>在原有项目中加入Flutter页面，在Flutter项目中加入原生页面</p><p>  <img src="https://cdn.rencheng.cc/blog/oxz8q.png"></p></li><li><p>原生页面中嵌入Flutter模块</p><p>  <img src="https://cdn.rencheng.cc/blog/ve7f0.png" alt="FlutterHybrid"></p></li><li><p>Flutter页面中嵌入原生模块</p><p>  <img src="https://cdn.rencheng.cc/blog/fw7be.png"></p></li></ul><h2 id="Flutter-混编方案介绍"><a href="#Flutter-混编方案介绍" class="headerlink" title="Flutter 混编方案介绍"></a>Flutter 混编方案介绍</h2><p>如果你想要在已有的原生 App 里嵌入一些 Flutter 页面，有两个办法：</p><ul><li>将原生工程作为 Flutter 工程的子工程，由 Flutter 统一管理。这种模式，就是统一管理模式。</li><li>将 Flutter 工程作为原生工程共用的子模块，维持原有的原生工程管理方式不变。这种模式，就是三端分离模式。<br><img src="https://cdn.rencheng.cc/blog/mj1jq.jpg"><br>由于 Flutter 早期提供的混编方式能力及相关资料有限，国内较早使用 Flutter 混合开发的团队大多使用的是统一管理模式。但是，随着功能迭代的深入，这种方案的弊端也随之显露，不仅三端（Android、iOS、Flutter）代码耦合严重，相关工具链耗时也随之大幅增长，导致开发效率降低。<br>所以，后续使用 Flutter 混合开发的团队陆续按照三端代码分离的模式来进行依赖治理，实现了 Flutter 工程的轻量级接入。<br>除了可以轻量级接入，<strong>三端代码分离模式</strong>把 Flutter 模块作为原生工程的子模块，还可以快速实现 Flutter 功能的“热插拔”，降低原生工程的改造成本。而 Flutter 工程通过 Android Studio 进行管理，无需打开原生工程，可直接进行 Dart 代码和原生代码的开发调试。<br>三端工程分离模式的关键是抽离 Flutter 工程，将不同平台的构建产物依照标准组件化的形式进行管理，即 Android 使用 aar、iOS 使用 pod。换句话说，接下来介绍的混编方案会将 Flutter 模块打包成 aar 和 pod，这样原生工程就可以像引用其他第三方原生组件库那样快速接入 Flutter 了。</li></ul><p><strong>将Flutter集成到现有的iOS应用中需要如下几个主要步骤：</strong></p><ul><li>创建Flutter module；</li><li>为已存在的iOS应用添加Flutter module依赖；</li><li>在Object-c中调用Flutter module；</li><li>编写Dart代码；</li><li>运行项目；</li><li>热重启&#x2F;重新加载；</li><li>调试Dart代码；</li><li>发布应用；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- flutter_hybrid</span><br><span class="line">    - flutter_module</span><br><span class="line">    - FlutterHybridAndroid </span><br><span class="line">    - FlutterHybridiOS</span><br></pre></td></tr></table></figure><p><code>flutter_hybrid</code>下面分别是<code>flutter模块</code>，<code>原生Android模块</code>，与<code>原生iOS模块</code>，并且这三个模块时并列结构</p><h3 id="创建Flutter-module"><a href="#创建Flutter-module" class="headerlink" title="创建Flutter module"></a>创建Flutter module</h3><p>在做混合开发之前我们首先需要创建一个Flutter module。</p><p>假如你的Native项目是这样的：<code>xxx/flutter_hybrid/FlutterHybridiOS</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> xxx/flutter_hybrid/</span><br><span class="line">$ flutter create -t module flutter_module</span><br></pre></td></tr></table></figure><p>上面代码会切换到你的iOS项目的上一级目录，并创建一个flutter模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.android</span><br><span class="line">.gitignore</span><br><span class="line">.idea</span><br><span class="line">.ios</span><br><span class="line">.metadata</span><br><span class="line">.packages</span><br><span class="line">build</span><br><span class="line">flutter_module_android.iml</span><br><span class="line">flutter_module.iml</span><br><span class="line">lib</span><br><span class="line">pubspec.lock</span><br><span class="line">pubspec.yaml</span><br><span class="line">README.md</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>上面是<code>flutter_module</code>中的文件结构，你会发现它里面包含<code>.android</code>与<code>.ios</code>，这两个文件夹是隐藏文件，也是这个<code>flutter_module</code>宿主工程：</p><ul><li><code>.android</code> - <code>flutter_module</code>的Android宿主工程；</li><li><code>.ios</code> - <code>flutter_module</code>的iOS宿主工程；</li><li><code>lib</code> - <code>flutter_module</code>的Dart部分的代码；</li><li><code>pubspec.yaml</code> - <code>flutter_module</code>的项目依赖配置文件；</li></ul><blockquote><p>因为宿主工程的存在，我们这个<code>flutter_module</code>在不加额外的配置的情况下是可以独立运行的，通过安装了Flutter与Dart插件的AndroidStudio打开这个<code>flutter_module</code>项目，通过运行按钮是可以直接运行它的。</p></blockquote><h3 id="为已存在的iOS应用添加Flutter-module依赖"><a href="#为已存在的iOS应用添加Flutter-module依赖" class="headerlink" title="为已存在的iOS应用添加Flutter module依赖"></a>为已存在的iOS应用添加Flutter module依赖</h3><p>接下来我们需要配置我们iOS项目的Flutter module依赖，接下来的配置需要用到CocoaPods，如果你还没有用到CocoaPods，可以参考<a href="https://cocoapods.org/">https://cocoapods.org/</a>上面的说明来安装CocoaPods。</p><h4 id="在Podfile文件中添加flutter依赖"><a href="#在Podfile文件中添加flutter依赖" class="headerlink" title="在Podfile文件中添加flutter依赖"></a>在<code>Podfile</code>文件中添加<code>flutter</code>依赖</h4><ol><li>如果你的iOS项目中没有<code>Podfile</code>文件可以通过： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure></li><li>找到<code>Podfile</code>文件，填入依赖信息<br> 版本的新旧，依赖信息引入的方式也不同<ol><li><p>Flutter &gt;&#x3D; v1.10.14 版本添加的配置：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flutter_application_path = <span class="string">&#x27;path/to/my_flutter/&#x27;</span></span><br><span class="line">load <span class="title class_">File</span>.join(flutter_application_path, <span class="string">&#x27;.ios&#x27;</span>, <span class="string">&#x27;Flutter&#x27;</span>, <span class="string">&#x27;podhelper.rb&#x27;</span>)</span><br><span class="line">install_all_flutter_pods(flutter_application_path)</span><br></pre></td></tr></table></figure><p> 下面是博主的配置：请参考</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">flutter_application_path = <span class="string">&#x27;../flutter_module/&#x27;</span></span><br><span class="line">load <span class="title class_">File</span>.join(flutter_application_path, <span class="string">&#x27;.ios&#x27;</span>, <span class="string">&#x27;Flutter&#x27;</span>, <span class="string">&#x27;podhelper.rb&#x27;</span>)</span><br><span class="line">target <span class="string">&#x27;FlutterHybridiOS&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># Step2 添加</span></span><br><span class="line">  install_all_flutter_pods(flutter_application_path)</span><br><span class="line"></span><br><span class="line">  target <span class="string">&#x27;FlutterHybridiOSTests&#x27;</span> <span class="keyword">do</span></span><br><span class="line">    inherit! <span class="symbol">:search_paths</span></span><br><span class="line">    <span class="comment"># Pods for testing</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  target <span class="string">&#x27;FlutterHybridiOSUITests&#x27;</span> <span class="keyword">do</span></span><br><span class="line">    inherit! <span class="symbol">:search_paths</span></span><br><span class="line">    <span class="comment"># Pods for testing</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>老版本Flutter,<code>Podfile</code>配置</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flutter_application_path = <span class="string">&#x27;path/to/my_flutter/&#x27;</span></span><br><span class="line">  eval(<span class="title class_">File</span>.read(<span class="title class_">File</span>.join(flutter_application_path, <span class="string">&#x27;.ios&#x27;</span>, <span class="string">&#x27;Flutter&#x27;</span>, <span class="string">&#x27;podhelper.rb&#x27;</span>)), binding)</span><br></pre></td></tr></table></figure><p> 下面是博主的配置：请参考</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">target <span class="string">&#x27;FlutterHybridiOS&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  flutter_application_path = <span class="string">&#x27;../flutter_module/&#x27;</span></span><br><span class="line">  eval(<span class="title class_">File</span>.read(<span class="title class_">File</span>.join(flutter_application_path, <span class="string">&#x27;.ios&#x27;</span>, <span class="string">&#x27;Flutter&#x27;</span>, <span class="string">&#x27;podhelper.rb&#x27;</span>)), binding)</span><br><span class="line"></span><br><span class="line">  target <span class="string">&#x27;FlutterHybridiOSTests&#x27;</span> <span class="keyword">do</span></span><br><span class="line">    inherit! <span class="symbol">:search_paths</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  target <span class="string">&#x27;FlutterHybridiOSUITests&#x27;</span> <span class="keyword">do</span></span><br><span class="line">    inherit! <span class="symbol">:search_paths</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><p><strong>除此之外，老版本flutter还需要添加 build phase以构建Dart代码</strong></p><p><img src="https://cdn.rencheng.cc/blog/1dl8f.png"></p><p>根据上图的提示创建一个<code>build phase</code>，然后展开<code>Run Script</code>并添加下面配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;<span class="variable">$FLUTTER_ROOT</span>/packages/flutter_tools/bin/xcode_backend.sh&quot;</span> build</span><br><span class="line"><span class="string">&quot;<span class="variable">$FLUTTER_ROOT</span>/packages/flutter_tools/bin/xcode_backend.sh&quot;</span> embed</span><br></pre></td></tr></table></figure><p><img src="https://cdn.rencheng.cc/blog/arrk0.png"></p><p>最后记得根据上图的提示，将<code>Run Script</code>到<strong>紧挨着</strong><code>Target Dependencies phase</code>的下面，接下来就可以通过<code>⌘B</code>构建你的项目了。</p><blockquote><p>通过<code>flutter doctor</code>命令查看你的Flutter版本，不同Flutter版本需要添加的配置是不同的：</p></blockquote><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p>在iOS项目的根目录运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p>你会看到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pod install </span><br><span class="line">Analyzing dependencies</span><br><span class="line">Fetching podspec <span class="keyword">for</span> `Flutter` from `../flutter_module/.ios/Flutter/engine`</span><br><span class="line">Fetching podspec <span class="keyword">for</span> `FlutterPluginRegistrant` from `../flutter_module/.ios/Flutter/FlutterPluginRegistrant`</span><br><span class="line">Downloading dependencies</span><br><span class="line">Installing Flutter (1.0.0)</span><br><span class="line">Installing FlutterPluginRegistrant (0.0.1)</span><br><span class="line">Generating Pods project</span><br><span class="line">Integrating client project</span><br><span class="line"></span><br><span class="line">[!] Please close any current Xcode sessions and use `FlutterHybridiOS.xcworkspace` <span class="keyword">for</span> this project from now on.</span><br><span class="line">Sending stats</span><br><span class="line">Pod installation complete! There are 2 dependencies from the Podfile and 2 total pods installed.</span><br><span class="line"></span><br><span class="line">[!] Automatically assigning platform `ios` with version `12.1` on target `FlutterHybridiOS` because no platform was specified. Please specify a platform <span class="keyword">for</span> this target <span class="keyword">in</span> your Podfile. See `https://guides.cocoapods.org/syntax/podfile.html#platform`.</span><br></pre></td></tr></table></figure><p>当你在<code>flutter_module/pubspec.yaml</code>添加一个Flutter插件时，需要在<code>flutter_module</code>目录下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter packages get</span><br></pre></td></tr></table></figure><p>来刷新<code>podhelper.rb</code>脚本中插件列表，然后在iOS目录下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p>这样以来<code>podhelper.rb</code>脚本才能确保你的插件和Flutter.framework能够添加到你的iOS项目中。</p><h4 id="禁用Bitcode"><a href="#禁用Bitcode" class="headerlink" title="禁用Bitcode"></a>禁用Bitcode</h4><p>目前Flutter还不支持Bitcode，所以集成了Flutter的iOS项目需要禁用Bitcode：</p><p>用XCode打开你的项目如：<code>xxx.xcworkspace</code>：</p><p>然后在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Build Settings-&gt;Build Options-&gt;Enable Bitcode</span><br></pre></td></tr></table></figure><p>目录下中禁用Bitcode：</p><p><img src="https://cdn.rencheng.cc/blog/uzrrv.png"></p><blockquote><p>如果在这个过程中遇到问题可以查看<a href="https://github.com/flutter/flutter/wiki/Add-Flutter-to-existing-apps#under-the-hood">Under the hood</a>文档。</p></blockquote><h3 id="在Object-c中调用Flutter-module"><a href="#在Object-c中调用Flutter-module" class="headerlink" title="在Object-c中调用Flutter module"></a>在Object-c中调用Flutter module</h3><p>至此，我们已经为我们的iOS项目添加了Flutter所必须的依赖，接下来我们来看如何在Object-c中调用Flutter模块：</p><p>在Object-c中调用Flutter模块有两种方式：</p><ul><li>直接使用<code>FlutterViewController</code>的方式；</li><li>使用<code>FlutterEngine</code>的方式；</li></ul><h4 id="FlutterViewController"><a href="#FlutterViewController" class="headerlink" title="FlutterViewController"></a>FlutterViewController</h4><pre><code>// ⁨flutter_hybrid⁩ ▸ ⁨FlutterHybridiOS⁩ ▸ ⁨FlutterHybridiOS⁩ ▸ ViewController.m #import &lt;Flutter/Flutter.h&gt;#import &quot;AppDelegate.h&quot;#import &quot;ViewController.h&quot;#import &lt;FlutterPluginRegistrant/GeneratedPluginRegistrant.h&gt; // 如果你需要用到Flutter插件时FlutterViewController *flutterViewController = [FlutterViewController new];GeneratedPluginRegistrant.register(with: flutterViewController);//如果你需要用到Flutter插件时[flutterViewController setInitialRoute:@&quot;route1&quot;];    [self presentViewController:flutterViewController animated:true completion:nil];</code></pre><p><a href="https://git.imooc.com/coding-321/flutter_trip/src/master/demo/flutter_hybrid">实例源码下载</a></p><p>通过这种方式我们可以使用<code>flutterViewController setInitialRoute</code>的方法为传递了字符串“route1”来告诉Dart代码在Flutter视图中显示哪个小部件。 Flutter模块项目的<code>lib/main.dart</code>文件需要通过<code>window.defaultRouteName</code>来获取Native指定要显示的路由名，以确定要创建哪个窗口小部件并传递给runApp：</p><pre><code>import &#39;dart:ui&#39;;import &#39;package:flutter/material.dart&#39;;void main() =&gt; runApp(_widgetForRoute(window.defaultRouteName));Widget _widgetForRoute(String route) &#123;  switch (route) &#123;    case &#39;route1&#39;:      return SomeWidget(...);    case &#39;route2&#39;:      return SomeOtherWidget(...);    default:      return Center(        child: Text(&#39;Unknown route: $route&#39;, textDirection: TextDirection.ltr),      );  &#125;&#125;</code></pre><p><a href="https://git.imooc.com/coding-321/flutter_trip/src/master/demo/flutter_hybrid">实例源码下载</a></p><h4 id="FlutterEngine"><a href="#FlutterEngine" class="headerlink" title="FlutterEngine"></a>FlutterEngine</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AppDelegate.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;Flutter/Flutter.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AppDelegate</span> : <span class="title">FlutterAppDelegate</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) FlutterEngine *flutterEngine;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AppDelegate.m</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="string">&lt;FlutterPluginRegistrant/GeneratedPluginRegistrant.h&gt; // 如果你需要用到Flutter插件时</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AppDelegate.h&quot;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AppDelegate</span></span></span><br><span class="line">- (<span class="type">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="keyword">self</span>.flutterEngine = [[FlutterEngine alloc] initWithName:<span class="string">@&quot;io.flutter&quot;</span> project:<span class="literal">nil</span>];</span><br><span class="line">    [<span class="keyword">self</span>.flutterEngine runWithEntrypoint:<span class="literal">nil</span>];</span><br><span class="line">    [GeneratedPluginRegistrant registerWithRegistry:<span class="keyword">self</span>.flutterEngine]; <span class="comment">//如果你需要用到Flutter插件时</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="variable language_">super</span> application:application didFinishLaunchingWithOptions:launchOptions];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>如果你的项目的AppDelegate.h已经有了别的集成，那么可惨参考<a href="https://github.com/flutter/flutter/wiki/Add-Flutter-to-existing-apps#write-code-to-use-flutterviewcontroller-from-your-host-app">实现FlutterAppLifeCycleProvider的方式</a>进行配置。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ⁨flutter_hybrid⁩ ▸ ⁨FlutterHybridiOS⁩ ▸ ⁨FlutterHybridiOS⁩ ▸ ViewController.m </span></span><br><span class="line">    </span><br><span class="line">FlutterEngine *flutterEngine = [(AppDelegate *)[[<span class="built_in">UIApplication</span> sharedApplication] delegate] flutterEngine];</span><br><span class="line">FlutterViewController *flutterViewController = [[FlutterViewController alloc] initWithEngine:flutterEngine nibName:<span class="literal">nil</span> bundle:<span class="literal">nil</span>];</span><br><span class="line">[<span class="keyword">self</span> presentViewController:flutterViewController animated:<span class="literal">false</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><blockquote><p>因为我们在AppDelegate.m中提前初始化了<code>FlutterEngine</code>，所以这种方式打开一个Flutter模块的速度要比第一种方式要快一些。</p></blockquote><h4 id="调用Flutter-module时传递数据"><a href="#调用Flutter-module时传递数据" class="headerlink" title="调用Flutter module时传递数据"></a>调用Flutter module时传递数据</h4><p>在上文中，我们无论是通过直接使用<code>FlutterViewController</code>的方式还是通过<code>FlutterEngine</code>的方式，都允许我们在加载Flutter module时传递一个String类型的<code>initialRoute</code>参数，从参数名字它是用作路由名的，但是既然Flutter给我们开了这个口子，那我们是不是可以搞点事情啊，传递点我们想传的其他参数呢，比如：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[flutterViewController setInitialRoute:<span class="string">@&quot;&#123;name:&#x27;devio&#x27;,dataList:[&#x27;aa&#x27;,&#x27;bb&#x27;,&#x27;&#x27;cc]&#125;&quot;</span>];</span><br></pre></td></tr></table></figure><p>然后在Flutter module通过如下方式获取：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:ui&#x27;</span>;<span class="comment">//要使用window对象必须引入</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> initParams=<span class="built_in">window</span>.defaultRouteName;</span><br><span class="line"><span class="comment">//序列化成Dart obj 敢你想干的</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通过上述方案的讲解是不是给大家分享了一个新的思路呢。</p><blockquote><p>注意使用<code>FlutterEngine</code>的方式中调用<code>setInitialRoute</code>会无效，你会发现Dart拿到的永远是“&#x2F;”，这个是Fltter SDK的一个<a href="https://github.com/flutter/flutter/issues/27216">Bug</a>，所以如果必须依赖<code>setInitialRoute</code>那么请使用方式一的形式；</p></blockquote><h4 id="编写Dart代码"><a href="#编写Dart代码" class="headerlink" title="编写Dart代码"></a>编写Dart代码</h4><p>接下来就是在编写Flutter module中的lib下编写Dart带了，快去<code>Enjoy Coding</code>吧！！！</p><h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><p>接下来，我们就可以运行它了，经过上述步骤，我们就可以以运行普通iOS项目的方式来通过XCode运行一个集成了Flutter的iOS项目了。</p><p><img src="https://cdn.rencheng.cc/blog/au9nm.png"></p><h3 id="热重启-重新加载"><a href="#热重启-重新加载" class="headerlink" title="热重启&#x2F;重新加载"></a>热重启&#x2F;重新加载</h3><p>大家知道我们在做Flutter开发的时候，它带有热重启&#x2F;重新加载的功能，但是你可能会发现，混合开发中在iOS项目中集成了Flutter项目，Flutter的热重启&#x2F;重新加载功能好像失效了，那怎么启用混合开发汇总Flutter的热重启&#x2F;重新加载呢：</p><ul><li>打开一个模拟器，或连接一个设备到电脑上；</li><li><strong>关闭我们的APP</strong>，然后运行<code>flutter attach</code>；</li></ul><p><img src="https://cdn.rencheng.cc/blog/sjte9.gif"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cd flutter_hybrid/flutter_module</span><br><span class="line">$ flutter attach</span><br><span class="line"></span><br><span class="line">Checking for advertised Dart observatories...</span><br><span class="line">Waiting for a connection from Flutter on iPhone X...</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 注意 </span><br><span class="line">如果，你同时有多个模拟器或连接的设备，运行`flutter attach`会提示你选择一个设备：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Android SDK built for x86 • emulator-5554                        • android-x86 • Android 8.1.0 (API 27) (emulator)<br>iPhone X                  • 3E3FA943-715F-482F-B003-D46F5902C56C • ios         • iOS 12.1 (simulator)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">接下来我们需要`flutter attach -d`来指定一个设备：</span><br><span class="line">``` bash</span><br><span class="line">flutter attach -d &#x27;emulator-5554&#x27;</span><br></pre></td></tr></table></figure><p>注意<code>-d</code>后面跟的设备ID。</p><p>运行APP，然后你会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ flutter attach</span><br><span class="line">More than one device connected; please specify a device with the &#x27;-d &lt;deviceId&gt;&#x27; flag, or use &#x27;-d all&#x27; to act on all devices.</span><br><span class="line">    </span><br><span class="line">Android SDK built for x86 • emulator-5554                        • android-x86 • Android 8.1.0 (API 27) (emulator)</span><br><span class="line">iPhone X                  • 3E3FA943-715F-482F-B003-D46F5902C56C • ios         • iOS 12.1 (simulator)</span><br><span class="line">renchengdeMacBook-Pro:flutter_module jph$ flutter attach -d &#x27;3E3FA943-715F-482F-B003-D46F5902C56C&#x27;</span><br><span class="line">Checking for advertised Dart observatories...</span><br><span class="line">Waiting for a connection from Flutter on iPhone X...</span><br><span class="line">Done.</span><br><span class="line">Syncing files to device iPhone X...                              1,613ms</span><br><span class="line">    </span><br><span class="line">?  To hot reload changes while running, press &quot;r&quot;. To hot restart (and rebuild state), press &quot;R&quot;.</span><br><span class="line">An Observatory debugger and profiler on iPhone X is available at: http://127.0.0.1:64108/</span><br><span class="line">For a more detailed help message, press &quot;h&quot;. To detach, press &quot;d&quot;; to quit, press &quot;q&quot;.</span><br></pre></td></tr></table></figure><p>说明连接成功了，接下来就可以通过上面的提示来进行热加载&#x2F;热重启了，在终端输入：</p><ul><li>r : 热加载；</li><li>R : 热重启；</li><li>h : 获取帮助；</li><li>d : 断开连接；</li></ul><h3 id="调试Dart代码"><a href="#调试Dart代码" class="headerlink" title="调试Dart代码"></a>调试Dart代码</h3><p>混合开发的模式下，如何更好更高效的调试我们的代码呢，接下来我就跟大家分享一种混合开发模式下高效调试代码的方式：</p><ul><li><p><strong>关闭APP</strong>(这步很关键)</p></li><li><p>点击AndroidStudio的<code>Flutter Attach</code>按钮(需要首先安装Flutter与Dart插件)</p></li><li><p>启动APP</p><p><img src="https://cdn.rencheng.cc/blog/uyu3j.png"></p></li></ul><p>接下来就可以像调试普通Flutter项目一样来调试混合开发的模式下的Dart代码了。</p><blockquote><p>除了以上步骤不同之外，接下来的调试和我们之前课程中的Flutter调试技巧都是通用的。<br>大家在运行iOS工程时一定要用Xcode运行，因为Flutter模式下的AndroidStudio运行的是Flutter module下的<code>.ios</code>中的iOS工程。</p></blockquote><h3 id="发布应用"><a href="#发布应用" class="headerlink" title="发布应用"></a>发布应用</h3><p>发布iOS应用我们需要有一个99美元的账号用于将App上传到AppStore，或者是299美元的企业级账号用于将App发布到自己公司的服务器或第三方公司的服务器。</p><p>接下来我们就需要:</p><ol><li>申请APPID</li><li>在Tunes Connect创建应用</li><li>打包程序</li><li>将应用提交到app store</li><li>等步骤。</li></ol><p>因为<a href="https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/About.html#//apple_ref/doc/uid/TP40011225-CH1-SW1">官方文档</a>中有详细的说明，在这我就不再重复了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter - 列表实现</title>
      <link href="/2020/02/27/flutter/Flutter%E5%88%97%E8%A1%A8/"/>
      <url>/2020/02/27/flutter/Flutter%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>列表布局在手机上是最最常用的控件了。iOS的UITableView和Android上的RecycleView尤其的强大。<br>Flutter中也给我们提供了ListView，就目前的体验来看，流畅度跟原生的比还是有一点差距的，滑动起来还是丢帧。</p><span id="more"></span><h2 id="基于ListView实现水平和垂直方式滚动的列表"><a href="#基于ListView实现水平和垂直方式滚动的列表" class="headerlink" title="基于ListView实现水平和垂直方式滚动的列表"></a>基于ListView实现水平和垂直方式滚动的列表</h2><ul><li>如何实现垂直滚动的列表？</li><li>如何实现水平滚动列表？</li></ul><h3 id="如何实现垂直滚动列表？"><a href="#如何实现垂直滚动列表？" class="headerlink" title="如何实现垂直滚动列表？"></a>如何实现垂直滚动列表？</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"><span class="keyword">const</span> CITY_NAMES = [ <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;广州&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>, <span class="string">&#x27;苏州&#x27;</span>, <span class="string">&#x27;成都&#x27;</span>, <span class="string">&#x27;武汉&#x27;</span>, <span class="string">&#x27;郑州&#x27;</span>, <span class="string">&#x27;洛阳&#x27;</span>, <span class="string">&#x27;厦门&#x27;</span>, <span class="string">&#x27;青岛&#x27;</span>, <span class="string">&#x27;拉萨&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> title = <span class="string">&#x27;Basic List&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: title,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(title),</span><br><span class="line">        ),</span><br><span class="line">        body: ListView(</span><br><span class="line">          children: _buildList(),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _buildList() &#123;</span><br><span class="line">    <span class="keyword">return</span> CITY_NAMES.map((city) =&gt; _item(city)).toList();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _item(<span class="built_in">String</span> city) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      height: <span class="number">80</span>,</span><br><span class="line">      margin: EdgeInsets.only(bottom: <span class="number">5</span>),</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      decoration: BoxDecoration(color: Colors.teal),</span><br><span class="line">      child: Text(</span><br><span class="line">        city,</span><br><span class="line">        style: TextStyle(color: Colors.white, fontSize: <span class="number">20</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何实现水平滚动列表？"><a href="#如何实现水平滚动列表？" class="headerlink" title="如何实现水平滚动列表？"></a>如何实现水平滚动列表？</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"><span class="keyword">const</span> CITY_NAMES = [ <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;广州&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>, <span class="string">&#x27;苏州&#x27;</span>, <span class="string">&#x27;成都&#x27;</span>, <span class="string">&#x27;武汉&#x27;</span>, <span class="string">&#x27;郑州&#x27;</span>, <span class="string">&#x27;洛阳&#x27;</span>, <span class="string">&#x27;厦门&#x27;</span>, <span class="string">&#x27;青岛&#x27;</span>, <span class="string">&#x27;拉萨&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> title = <span class="string">&#x27;水平&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: title,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(title),</span><br><span class="line">        ),</span><br><span class="line">        body: Container(</span><br><span class="line">          height: <span class="number">200</span>,</span><br><span class="line">          child: ListView(</span><br><span class="line">            scrollDirection: Axis.horizontal,</span><br><span class="line">            children: _buildList(),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _buildList() &#123;</span><br><span class="line">    <span class="keyword">return</span> CITY_NAMES.map((city) =&gt; _item(city)).toList();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _item(<span class="built_in">String</span> city) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">160</span>,</span><br><span class="line">      margin: EdgeInsets.only(right: <span class="number">5</span>),</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      decoration: BoxDecoration(color: Colors.teal),</span><br><span class="line">      child: Text(</span><br><span class="line">        city,</span><br><span class="line">        style: TextStyle(color: Colors.white, fontSize: <span class="number">20</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下拉刷新与上拉加载"><a href="#下拉刷新与上拉加载" class="headerlink" title="下拉刷新与上拉加载"></a>下拉刷新与上拉加载</h2><ul><li>如何实现列表下拉刷新？</li><li>如何实现上拉加载更多？</li></ul><h3 id="如何实现列表下拉刷新？"><a href="#如何实现列表下拉刷新？" class="headerlink" title="如何实现列表下拉刷新？"></a>如何实现列表下拉刷新？</h3><p>在Flutter中有一个<code>RefreshIndicator</code>，它是一个下拉刷新的widget，通过它我们可以实现列表的下拉刷新。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; cityNames = [ <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;广州&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>, <span class="string">&#x27;苏州&#x27;</span>, <span class="string">&#x27;成都&#x27;</span>, <span class="string">&#x27;武汉&#x27;</span>, <span class="string">&#x27;郑州&#x27;</span>, <span class="string">&#x27;洛阳&#x27;</span>, <span class="string">&#x27;厦门&#x27;</span>, <span class="string">&#x27;青岛&#x27;</span>, <span class="string">&#x27;拉萨&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyAppState createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> title = <span class="string">&#x27;高级功能列表下拉刷新与上拉加载更多功能实现&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: title,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(title),</span><br><span class="line">        ),</span><br><span class="line">        body: RefreshIndicator(</span><br><span class="line">          onRefresh: _handleRefresh,</span><br><span class="line">          child: ListView(</span><br><span class="line">            children: _buildList(),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="built_in">Null</span>&gt; _handleRefresh() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(seconds: <span class="number">2</span>));</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      cityNames = cityNames.reversed.toList();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _buildList() &#123;</span><br><span class="line">    <span class="keyword">return</span> cityNames.map((city) =&gt; _item(city)).toList();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _item(<span class="built_in">String</span> city) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      height: <span class="number">80</span>,</span><br><span class="line">      margin: EdgeInsets.only(bottom: <span class="number">5</span>),</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      decoration: BoxDecoration(color: Colors.teal),</span><br><span class="line">      child: Text(</span><br><span class="line">        city,</span><br><span class="line">        style: TextStyle(color: Colors.white, fontSize: <span class="number">20</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何实现上拉加载更多？<br>为了给列表添加上了加载更多的功能，我们可以借助<code>ScrollController</code>，列表支持设置<code>controller</code>参数，通过<code>ScrollController</code>监听列表滚动的位置，来实现加载更多的功能。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; cityNames = [ <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;广州&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>, <span class="string">&#x27;苏州&#x27;</span>, <span class="string">&#x27;成都&#x27;</span>, <span class="string">&#x27;武汉&#x27;</span>, <span class="string">&#x27;郑州&#x27;</span>, <span class="string">&#x27;洛阳&#x27;</span>, <span class="string">&#x27;厦门&#x27;</span>, <span class="string">&#x27;青岛&#x27;</span>, <span class="string">&#x27;拉萨&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyAppState createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  ScrollController _scrollController = ScrollController();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    _scrollController.addListener(() &#123;</span><br><span class="line">      <span class="keyword">if</span> (_scrollController.position.pixels ==</span><br><span class="line">          _scrollController.position.maxScrollExtent) &#123;</span><br><span class="line">        _loadData();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _scrollController.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> title = <span class="string">&#x27;高级功能列表下拉刷新与上拉加载更多功能实现&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: title,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(title),</span><br><span class="line">        ),</span><br><span class="line">        body: RefreshIndicator(</span><br><span class="line">          onRefresh: _handleRefresh,</span><br><span class="line">          child: ListView(</span><br><span class="line">            controller: _scrollController,</span><br><span class="line">            children: _buildList(),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _loadData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(milliseconds: <span class="number">200</span>));</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; list = <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;.from(cityNames);</span><br><span class="line">      list.addAll(cityNames);</span><br><span class="line">      cityNames = list;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="built_in">Null</span>&gt; _handleRefresh() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(seconds: <span class="number">2</span>));</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      cityNames = cityNames.reversed.toList();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _buildList() &#123;</span><br><span class="line">    <span class="keyword">return</span> cityNames.map((city) =&gt; _item(city)).toList();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _item(<span class="built_in">String</span> city) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      height: <span class="number">80</span>,</span><br><span class="line">      margin: EdgeInsets.only(bottom: <span class="number">5</span>),</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      decoration: BoxDecoration(color: Colors.teal),</span><br><span class="line">      child: Text(</span><br><span class="line">        city,</span><br><span class="line">        style: TextStyle(color: Colors.white, fontSize: <span class="number">20</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter - 异步编程</title>
      <link href="/2020/02/25/flutter/Flutter%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/02/25/flutter/Flutter%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>首先<code>Dart</code>是一门单线程的语言，那么Dart对异步操作对支持，可以使我们在编写Dart程序时可以异步的来执行耗时操作。从而可以在等待一个操作完成的同时进行别的操作以下是一些常见的异步操作：</p><ul><li>通过网络获取数据。</li><li>写入数据库。</li><li>从文件读取数据。</li></ul><p>要在Dart中执行异步操作，可以使用Future类和async&#x2F;await关键字。</p><span id="more"></span><h2 id="Dart的事件循环-event-loop"><a href="#Dart的事件循环-event-loop" class="headerlink" title="Dart的事件循环(event loop)"></a>Dart的事件循环(event loop)</h2><p>在Dart中，实际上有两种队列：</p><ol><li>事件队列(event queue)，包含所有的外来事件：I&#x2F;O、mouse events、drawing events、timers、isolate之间的信息传递。</li><li>微任务队列(microtask queue)，表示一个短时间内就会完成的异步任务。它的优先级最高，高于event queue，只要队列中还有任务，就可以一直霸占着事件循环。microtask queue添加的任务主要是由Dart内部产生。</li></ol><blockquote><p>因为<code>microtask queue</code>的优先级高于<code>event queue</code>，所以如果<code>microtask queue</code>有太多的微任务， 那么就可能会霸占住当前的<code>event loop</code>。从而对event queue中的触摸、绘制等外部事件造成阻塞卡顿。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter - Future与FutureBuilder实用技巧</title>
      <link href="/2020/02/24/flutter/Flutter%E5%BC%82%E6%AD%A5/"/>
      <url>/2020/02/24/flutter/Flutter%E5%BC%82%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>我们知道Dart语言的执行环境是”单线程”。也就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务。</p><p>为了解决这个问题，Dart语言将任务的执行模式分成两种：同步和异步。</p><span id="more"></span><h1 id="异步：Future与FutureBuilder实用技巧"><a href="#异步：Future与FutureBuilder实用技巧" class="headerlink" title="异步：Future与FutureBuilder实用技巧"></a>异步：Future与FutureBuilder实用技巧</h1><ul><li>什么是Future？</li><li>Future的常见用法？<ul><li>获取Future的结果？</li><li>捕获Future的异常？</li><li>结合async，await？</li><li>future.whenComplete？</li><li>future.timeout？</li></ul></li><li>什么是FutureBuilder？</li><li>FutureBuilder常见的用法？</li></ul><h2 id="什么是Future？"><a href="#什么是Future？" class="headerlink" title="什么是Future？"></a>什么是Future？</h2><p><code>Future</code>表示在接下来的某个时间的值或错误，借助<code>Future</code>我们可以在Flutter实现异步操作。</p><blockquote><p>它类似于ES6中的Promise，提供<code>then</code>和<code>catchError</code>的链式调用；</p></blockquote><p><code>Future</code>是<code>dart:async</code>包中的一个类，使用它时需要导入<code>dart:async</code>包，Future有两种状态：</p><ul><li>pending - 执行中；</li><li>completed - 执行结束，分两种情况要么成功要么失败；</li></ul><h2 id="Future的常见用法？"><a href="#Future的常见用法？" class="headerlink" title="Future的常见用法？"></a>Future的常见用法？</h2><ul><li>使用<code>future.then</code>获取future的值与捕获future的异常</li><li>结合<code>async</code>,<code>await</code></li><li><code>future.whenComplete</code></li><li><code>future.timeout</code></li></ul><h3 id="使用future-then获取future的值与捕获future的异常"><a href="#使用future-then获取future的值与捕获future的异常" class="headerlink" title="使用future.then获取future的值与捕获future的异常"></a>使用<code>future.then</code>获取future的值与捕获future的异常</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; testFuture() &#123;</span><br><span class="line"><span class="comment">//   throw new Error();</span></span><br><span class="line">  <span class="keyword">return</span> Future.value(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line"><span class="comment">//   return Future.error(&#x27;error&#x27;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  testFuture().then((s) &#123;</span><br><span class="line">    <span class="built_in">print</span>(s);</span><br><span class="line">  &#125;, onError: (e) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;onError:&#x27;</span>);</span><br><span class="line">    <span class="built_in">print</span>(e);</span><br><span class="line">  &#125;).catchError((e) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;catchError:&#x27;</span>);</span><br><span class="line">    <span class="built_in">print</span>(e);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果catchError与onError同时存在，则会只调用onError；</p></blockquote><p><strong><code>Future</code>的then&#96;的原型：</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;R&gt; then&lt;R&gt;(FutureOr&lt;R&gt; onValue(T value), &#123;<span class="built_in">Function</span> onError&#125;);</span><br></pre></td></tr></table></figure><p>第一个参数会成功的结果回调，第二个参数onError可选表示执行出现异常。</p><h3 id="结合async-await"><a href="#结合async-await" class="headerlink" title="结合async await"></a>结合async await</h3><p><code>Future</code>是异步的，如果我们要将异步转同步，那么可以借助<code>async await</code>来完成。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"></span><br><span class="line">test() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">int</span> result = <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(milliseconds: <span class="number">2000</span>), () &#123;</span><br><span class="line">    <span class="keyword">return</span> Future.value(<span class="number">123</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;t3:&#x27;</span> + <span class="built_in">DateTime</span>.now().toString());</span><br><span class="line">  <span class="built_in">print</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;t1:&#x27;</span> + <span class="built_in">DateTime</span>.now().toString());</span><br><span class="line">  test();</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;t2:&#x27;</span> + <span class="built_in">DateTime</span>.now().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="future-whenComplete"><a href="#future-whenComplete" class="headerlink" title="future.whenComplete"></a>future.whenComplete</h3><p>有时候我们需要在<code>Future</code>结束的时候做些事情，我们知道<code>then().catchError()</code>的模式类似于<code>try-catch</code>，<code>try-catch</code>有个<code>finally</code>代码块，而<code>future.whenComplete</code>就是<code>Future</code>的finally。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> random = Random();</span><br><span class="line">  Future.delayed(<span class="built_in">Duration</span>(seconds: <span class="number">3</span>), () &#123;</span><br><span class="line">    <span class="keyword">if</span> (random.nextBool()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&#x27;boom!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).then(<span class="built_in">print</span>).catchError(<span class="built_in">print</span>).whenComplete(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;done!&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="future-timeout"><a href="#future-timeout" class="headerlink" title="future.timeout"></a>future.timeout</h3><p>完成一个异步操作可能需要很长的时间，比如：网络请求，但有时我们需要为异步操作设置一个超时时间，那么，如何为<code>Future</code>设置超时时间呢？</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">new</span> Future.delayed(<span class="keyword">new</span> <span class="built_in">Duration</span>(seconds: <span class="number">3</span>), () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;).timeout(<span class="keyword">new</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>)).then(<span class="built_in">print</span>).catchError(<span class="built_in">print</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码会看到：<code>TimeoutException after 0:00:02.000000: Future not completed</code>。</p><h2 id="什么是FutureBuilder？"><a href="#什么是FutureBuilder？" class="headerlink" title="什么是FutureBuilder？"></a>什么是FutureBuilder？</h2><p><code>FutureBuilder</code>是一个将异步操作和异步UI更新结合在一起的类，通过它我们可以将网络请求，数据库读取等的结果更新的页面上。</p><p><strong>FutureBuilder的构造方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FutureBuilder(&#123;Key key, Future&lt;T&gt; future, T initialData, @required AsyncWidgetBuilder&lt;T&gt; builder &#125;)</span><br></pre></td></tr></table></figure><ul><li>future： Future对象表示此构建器当前连接的异步计算；</li><li>initialData： 表示一个非空的Future完成前的初始化数据；</li><li>builder： AsyncWidgetBuilder类型的回到函数，是一个基于异步交互构建widget的函数；</li></ul><p>这个builder函数接受两个参数BuildContext context 与 AsyncSnapshot<T> snapshot，它返回一个widget。AsyncSnapshot包含异步计算的信息，它具有以下属性：</p><ul><li>connectionState - 枚举ConnectionState的值，表示与异步计算的连接状态，ConnectionState有四个值：none，waiting，active和done；</li><li>data - 异步计算接收的最新数据；</li><li>error - 异步计算接收的最新错误对象；</li></ul><p>AsyncSnapshot还具有hasData和hasError属性，以分别检查它是否包含非空数据值或错误值。</p><p>现在我们可以看到使用FutureBuilder的基本模式。 在创建新的FutureBuilder对象时，我们将Future对象作为要处理的异步计算传递。 在构建器函数中，我们检查connectionState的值，并使用AsyncSnapshot中的数据或错误返回不同的窗口小部件。</p><p><a href="https://flutter-academy.com/async-in-flutter-futurebuilder/">https://flutter-academy.com/async-in-flutter-futurebuilder/</a><br>FutureBuilder的使用？</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span> <span class="keyword">as</span> http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> showResult = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  Future&lt;CommonModel&gt; fetchPost() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> response = <span class="keyword">await</span> http</span><br><span class="line">        .<span class="keyword">get</span>(<span class="string">&#x27;http://www.devio.org/io/flutter_app/json/test_common_model.json&#x27;</span>);</span><br><span class="line">    Utf8Decoder utf8decoder = Utf8Decoder(); <span class="comment">//fix 中文乱码</span></span><br><span class="line">    <span class="keyword">var</span> result = json.decode(utf8decoder.convert(response.bodyBytes));</span><br><span class="line">    <span class="keyword">return</span> CommonModel.fromJson(result);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;Future与FutureBuilder实用技巧&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: FutureBuilder&lt;CommonModel&gt;(</span><br><span class="line">            future: fetchPost(),</span><br><span class="line">            builder:</span><br><span class="line">                (BuildContext context, AsyncSnapshot&lt;CommonModel&gt; snapshot) &#123;</span><br><span class="line">              <span class="keyword">switch</span> (snapshot.connectionState) &#123;</span><br><span class="line">                <span class="keyword">case</span> ConnectionState.none:</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> Text(<span class="string">&#x27;Input a URL to start&#x27;</span>);</span><br><span class="line">                <span class="keyword">case</span> ConnectionState.waiting:</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> Center(child: <span class="keyword">new</span> CircularProgressIndicator());</span><br><span class="line">                <span class="keyword">case</span> ConnectionState.active:</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> Text(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                <span class="keyword">case</span> ConnectionState.done:</span><br><span class="line">                  <span class="keyword">if</span> (snapshot.hasError) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Text(</span><br><span class="line">                      <span class="string">&#x27;<span class="subst">$&#123;snapshot.error&#125;</span>&#x27;</span>,</span><br><span class="line">                      style: TextStyle(color: Colors.red),</span><br><span class="line">                    );</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Column(children: &lt;Widget&gt;[</span><br><span class="line">                      Text(<span class="string">&#x27;icon:<span class="subst">$&#123;snapshot.data.icon&#125;</span>&#x27;</span>),</span><br><span class="line">                      Text(<span class="string">&#x27;statusBarColor:<span class="subst">$&#123;snapshot.data.statusBarColor&#125;</span>&#x27;</span>),</span><br><span class="line">                      Text(<span class="string">&#x27;title:<span class="subst">$&#123;snapshot.data.title&#125;</span>&#x27;</span>),</span><br><span class="line">                      Text(<span class="string">&#x27;url:<span class="subst">$&#123;snapshot.data.url&#125;</span>&#x27;</span>)</span><br><span class="line">                    ]);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonModel</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> icon;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> url;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> statusBarColor;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> hideAppBar;</span><br><span class="line"></span><br><span class="line">  CommonModel(</span><br><span class="line">      &#123;<span class="keyword">this</span>.icon, <span class="keyword">this</span>.title, <span class="keyword">this</span>.url, <span class="keyword">this</span>.statusBarColor, <span class="keyword">this</span>.hideAppBar&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> CommonModel.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">    <span class="keyword">return</span> CommonModel(</span><br><span class="line">      icon: json[<span class="string">&#x27;icon&#x27;</span>],</span><br><span class="line">      title: json[<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">      url: json[<span class="string">&#x27;url&#x27;</span>],</span><br><span class="line">      statusBarColor: json[<span class="string">&#x27;statusBarColor&#x27;</span>],</span><br><span class="line">      hideAppBar: json[<span class="string">&#x27;hideAppBar&#x27;</span>],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://flutter-academy.com/async-in-flutter-futurebuilder/">https://flutter-academy.com/async-in-flutter-futurebuilder/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter - Http库</title>
      <link href="/2020/02/20/flutter/Flutter%E8%AF%B7%E6%B1%82%E5%BA%93Http/"/>
      <url>/2020/02/20/flutter/Flutter%E8%AF%B7%E6%B1%82%E5%BA%93Http/</url>
      
        <content type="html"><![CDATA[<p>网络请求是开发APP必不可少的一部分，比如获取用户订单数据，获取商品列表，提交表单等等都离不了网络请求，那么在Flutter中如何进行网络请求呢？</p><span id="more"></span><h1 id="基于Http实现网络操作"><a href="#基于Http实现网络操作" class="headerlink" title="基于Http实现网络操作"></a>基于Http实现网络操作</h1><ul><li>如何用Http库做get请求？</li><li>如何用Http库做post请求？</li><li>如何将Response转换成Dart object？</li><li>如何将请求结果展示在界面上？</li></ul><blockquote><p>Flutter官方推荐我们在Flutter中用Http进行网络请求。</p></blockquote><h2 id="什么是Http？"><a href="#什么是Http？" class="headerlink" title="什么是Http？"></a>什么是Http？</h2><p><code>Http</code>是Flutter社区开发的一个可组合的、跨平台的用于Flutter的网络请求插件。</p><h3 id="如何用http库做get请求？"><a href="#如何用http库做get请求？" class="headerlink" title="如何用http库做get请求？"></a>如何用http库做get请求？</h3><ul><li>在<code>pubspec.yaml</code>中引入<a href="https://pub.dartlang.org/packages/http">http</a>插件；</li><li>调用<code>http.get</code>发送请求；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  http: &lt;latest_version&gt;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;http.Response&gt; fetchPost() &#123;</span><br><span class="line">  <span class="keyword">return</span> http.<span class="keyword">get</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>http.get()</code>返回一个包含<code>http.Response</code>的<code>Future</code>：</p><ul><li><a href="https://docs.flutter.io/flutter/dart-async/Future-class.html">Future</a>：是与异步操作一起工作的核心Dart类。它用于表示未来某个时间可能会出现的可用值或错误；</li><li><code>http.Response</code>：类包含一个成功的HTTP请求接收到的数据；</li></ul><h2 id="如何将Response转换成Dart-object？"><a href="#如何将Response转换成Dart-object？" class="headerlink" title="如何将Response转换成Dart object？"></a>如何将Response转换成Dart object？</h2><p>虽然发出网络请求很简单，但如果要使用原始的<code>Future&lt;http.Response&gt;</code>并不简单。为了让我们可以开开心心的写代码，我们可以将<code>http.Response</code>转换成我们自己的Dart对象。</p><p><strong>创建一个CommonModel类</strong><br>首先，我们需要创建一个CommonModel类，它包含我们网络请求的数据。它还将包括一个工厂构造函数，它允许我们可以通过json创建一个CommonModel对象。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonModel</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> icon;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> url;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> statusBarColor;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> hideAppBar;</span><br><span class="line"></span><br><span class="line">  CommonModel(&#123;<span class="keyword">this</span>.icon, <span class="keyword">this</span>.title, <span class="keyword">this</span>.url, <span class="keyword">this</span>.statusBarColor, <span class="keyword">this</span>.hideAppBar&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> CommonModel.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">    <span class="keyword">return</span> CommonModel(</span><br><span class="line">      icon: json[<span class="string">&#x27;icon&#x27;</span>],</span><br><span class="line">      title: json[<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">      url: json[<span class="string">&#x27;url&#x27;</span>],</span><br><span class="line">      statusBarColor: json[<span class="string">&#x27;statusBarColor&#x27;</span>],</span><br><span class="line">      hideAppBar: json[<span class="string">&#x27;hideAppBar&#x27;</span>],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>http.Response</code>转换成一个<code>CommonModel</code>对象<br>现在，我们将更新fetchPost函数以返回一个Future<Post>。为此，我们需要：</p><ol><li>使用dart:convert package将响应内容转化为一个json Map；</li><li>使用fromJson工厂函数，将json Map 转化为一个CommonModel对象；</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;CommonModel&gt; fetchPost() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> response = <span class="keyword">await</span> http.<span class="keyword">get</span>(<span class="string">&#x27;http://www.devio.org/io/flutter_app/json/test_common_model.json&#x27;</span>);</span><br><span class="line">    <span class="keyword">final</span> result = json.decode(response.body);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonModel.fromJson(result);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="如何将请求结果展示在界面上？"><a href="#如何将请求结果展示在界面上？" class="headerlink" title="如何将请求结果展示在界面上？"></a>如何将请求结果展示在界面上？</h2><p><img src="http://www.devio.org/io/flutter_app/img/blog/http_get_test.gif"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span> <span class="keyword">as</span> http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> showResult = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  Future&lt;CommonModel&gt; fetchPost() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> response = <span class="keyword">await</span> http</span><br><span class="line">        .<span class="keyword">get</span>(<span class="string">&#x27;http://www.devio.org/io/flutter_app/json/test_common_model.json&#x27;</span>);</span><br><span class="line">    <span class="keyword">final</span> result = json.decode(response.body);</span><br><span class="line">    <span class="keyword">return</span> CommonModel.fromJson(result);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;Http&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Column(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            InkWell(</span><br><span class="line">              onTap: () &#123;</span><br><span class="line">                fetchPost().then((CommonModel value) &#123;</span><br><span class="line">                  setState(() &#123;</span><br><span class="line">                    showResult =</span><br><span class="line">                        <span class="string">&#x27;请求结果：\nhideAppBar：<span class="subst">$&#123;value.hideAppBar&#125;</span>\nicon：<span class="subst">$&#123;value.icon&#125;</span>&#x27;</span>;</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">              &#125;,</span><br><span class="line">              child: Text(</span><br><span class="line">                <span class="string">&#x27;点我&#x27;</span>,</span><br><span class="line">                style: TextStyle(fontSize: <span class="number">26</span>),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Text(showResult)</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonModel</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> icon;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> url;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> statusBarColor;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> hideAppBar;</span><br><span class="line"></span><br><span class="line">  CommonModel(</span><br><span class="line">      &#123;<span class="keyword">this</span>.icon, <span class="keyword">this</span>.title, <span class="keyword">this</span>.url, <span class="keyword">this</span>.statusBarColor, <span class="keyword">this</span>.hideAppBar&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> CommonModel.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">    <span class="keyword">return</span> CommonModel(</span><br><span class="line">      icon: json[<span class="string">&#x27;icon&#x27;</span>],</span><br><span class="line">      title: json[<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">      url: json[<span class="string">&#x27;url&#x27;</span>],</span><br><span class="line">      statusBarColor: json[<span class="string">&#x27;statusBarColor&#x27;</span>],</span><br><span class="line">      hideAppBar: json[<span class="string">&#x27;hideAppBar&#x27;</span>],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在上述代码中我们通过<code>fetchPost().then</code>获取Fluter的返回结果，其实<code>Future</code>可以理解为ES5中的Promise。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Connect问题汇总</title>
      <link href="/2020/02/14/ios/general/Connect%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2020/02/14/ios/general/Connect%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>Connect问题汇总</p><span id="more"></span><h2 id="App已经上线，解决方案中心没有入口"><a href="#App已经上线，解决方案中心没有入口" class="headerlink" title="App已经上线，解决方案中心没有入口"></a>App已经上线，解决方案中心没有入口</h2><p>可直接访问站点页面。<code>appid</code><strong>必须</strong>替换！！！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://itunesconnect.apple.com/apps/appid/appstore/platform/ios/resolutioncenter</span><br></pre></td></tr></table></figure><blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 提审 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提审被拒解决方案</title>
      <link href="/2020/02/14/ios/general/%E6%8F%90%E5%AE%A1%E8%A2%AB%E6%8B%92%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2020/02/14/ios/general/%E6%8F%90%E5%AE%A1%E8%A2%AB%E6%8B%92%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>汇总提审被拒解决方案</p><span id="more"></span><h2 id="支付"><a href="#支付" class="headerlink" title="支付"></a>支付</h2><h3 id="商品定价"><a href="#商品定价" class="headerlink" title="商品定价"></a>商品定价</h3><ol><li>苹果反馈</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Guideline 3.0 - Business</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Your game app includes in-app purchase products for consumable credits priced over $99.99, Tier 60.</span><br><span class="line"></span><br><span class="line">Next Steps</span><br><span class="line"></span><br><span class="line">To resolve this issue, please revise your app to ensure that a single in-app purchase product for consumable credits is priced at nothing more than $99.99, Tier 60.</span><br><span class="line"></span><br><span class="line">To edit in-app purchases:</span><br><span class="line"></span><br><span class="line">- Log in to App Store Connect</span><br><span class="line">- Click on &quot;My Apps&quot;</span><br><span class="line">- Select your app</span><br><span class="line">- Click on &quot;Features&quot; to view your in-app purchases</span><br><span class="line">- Click &quot;Edit In-App Purchase Details&quot;</span><br><span class="line">- Make the desired changes</span><br><span class="line">- Click Save</span><br><span class="line">- Once you&#x27;ve completed all changes, click the &quot;Submit for Review&quot; button at the top of the App Version Information page.</span><br><span class="line"></span><br><span class="line">Note: When an in-app purchase is in the &quot;Developer Action Needed&quot; state, you must make some change to it before it can move to Waiting for Review.</span><br></pre></td></tr></table></figure><ol start="2"><li>排查问题</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">App内是否有大约$99美元的商品</span><br></pre></td></tr></table></figure><ol start="3"><li>解决方案</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除定价过高的商品，重新配置</span><br></pre></td></tr></table></figure><h3 id="有混淆，有三方支付"><a href="#有混淆，有三方支付" class="headerlink" title="有混淆，有三方支付"></a>有混淆，有三方支付</h3><ol><li>苹果反馈</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Guideline 2.3.1 - Performance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">We discovered that your app contains obfuscated code, selector mangling, or features meant to subvert the App Review process by changing this app&#x27;s concept after approval to the App Store.</span><br><span class="line"></span><br><span class="line">The next submission of this app may require a longer review time, and this app will not be eligible for an expedited review until this issue is resolved.</span><br><span class="line"></span><br><span class="line">Next Steps</span><br><span class="line"></span><br><span class="line">- Review the Performance section of the App Store Review Guidelines.</span><br><span class="line">- Ensure your app is compliant with all sections of the App Store Review Guidelines and the Terms &amp; Conditions of the Apple Developer Program.</span><br><span class="line">- Once your app is fully compliant, resubmit your app for review.</span><br><span class="line"></span><br><span class="line">Submitting apps designed to mislead or harm customers or evade the review process may result in the termination of your Apple Developer Program account. Review the Terms &amp; Conditions of the Apple Developer Program to learn more about our policies regarding termination.</span><br><span class="line"></span><br><span class="line">Guideline 3.1.1 - Business - Payments - In-App Purchase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">We still noticed that your app provides access to external payment mechanisms for purchases or subscriptions to be used in the app, which is not appropriate for the App Store.</span><br><span class="line"></span><br><span class="line">Specifically, we found that your app includes code for alternative payment mechanisms.</span><br><span class="line"></span><br><span class="line">Next Steps</span><br><span class="line"></span><br><span class="line">To resolve this issue, please remove any external payment mechanisms from this app. If you feel that we have misunderstood how your app uses this payment mechanism, please respond to this message and explain what users are able to purchase via this payment mechanism and how we can locate the purchases in your app.</span><br></pre></td></tr></table></figure><ol><li>排查问题</li></ol><p><strong>2.3.1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.App本身是否使用混淆技术</span><br><span class="line">2.检查集成的SDK是否使用混淆技术</span><br><span class="line">3.是否有一些代码是需要保护的，不希望别人看到的话，需要在Connect备注中说明。</span><br><span class="line">3.给苹果提交反馈，让其提供相关混淆变量或方法名</span><br></pre></td></tr></table></figure><p><strong>3.1.1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.可能是接入了支付宝或其它支付sdk</span><br><span class="line">2.可能检查到App跳转网站进行外部支付的入口</span><br><span class="line">3.可能是plist里面有alipay或wechat相关选项残留</span><br><span class="line">4.代码中或文件中有`支付宝，alipay，wechatPay`字样的文本</span><br><span class="line">5.有发送针对支付宝或者淘宝域名的HTTP请求</span><br><span class="line">6.用到的第三方sdk或者软件曾经因为类似原因被拉入了“宁杀错不放过”的名单，比如anysdk</span><br><span class="line">7.该账号曾经因为接入微信或者支付宝请求被拒绝过</span><br><span class="line">8.打包的苹果设备曾经因为接入微信或者支付宝请求被拒绝过</span><br><span class="line">9.创建苹果开发者账号支付所采用的信用卡曾经用于创建另一个因为接入微信或者支付宝请求被拒绝过开发者账号</span><br><span class="line">10.运气不好，被苹果误判；这个概率极小，要验证很简单，再提审一次就知道了</span><br></pre></td></tr></table></figure><p><strong>软文</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">通过跟审核人员的电话沟通，我方已经了解App存在的问题。</span><br><span class="line">承诺：</span><br><span class="line">1. XXXX非常希望与苹果公司合作，共同盈利。所以我们不会在iOS平台为用户提供任何第三方以及外部支付的环境和入口。</span><br><span class="line">2. XXXX在审核期间，没有任何功能是隐瞒的，更不会刻意的混淆代码以通过审核。</span><br><span class="line"></span><br><span class="line">通过问题排查</span><br><span class="line">1. XXXX项目代码中有关于“charge”关键字的接口和变量名称。为了避免误解，我们将iap功能剥离成独立的支付系统，以及关闭跳转外部浏览器的业务。</span><br><span class="line">2. XXXX在初始化的时候获取了一些动态配置，我们已经删除了所有产品业务显隐开关。（注：之前版本的开关，并没有在审核过程中隐藏任何功能）</span><br><span class="line">3. XXXX是采用U3D游戏引擎开发，导出的资源名称基本都是md5，会不会因为这些文件让审核人员误认为是混淆了？亦或者是我们的变量名称不规范的问题呢？如果审核人员仍认为我们代码存在混淆，请一定帮忙指出具体的混淆代码给我们做出提示。</span><br></pre></td></tr></table></figure><p><strong>电话预留</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Dear Reviewer，</span><br><span class="line">We need your help. In order to determine the problem as soon as possible, please contact us by telephone.</span><br><span class="line">Technician: Ren Cheng</span><br><span class="line">Contact information: +86 13681105571</span><br><span class="line">Communication language: Chinese</span><br><span class="line">Thank you and Regards,</span><br><span class="line"></span><br><span class="line">亲爱的审核:</span><br><span class="line">我们需要你们的帮助，为尽快确定问题，可否麻烦电话沟通。</span><br><span class="line">技术人员：任成</span><br><span class="line">联系方式：+8613681105571</span><br><span class="line">沟通语言：中文</span><br><span class="line">谢谢！</span><br></pre></td></tr></table></figure><h3 id="提示有AliPaySDK"><a href="#提示有AliPaySDK" class="headerlink" title="提示有AliPaySDK"></a>提示有AliPaySDK</h3><ol><li>苹果反馈</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Guideline 2.3.1 - Performance</span><br><span class="line"></span><br><span class="line">We discovered that your app contains hidden features. Attempting to hide features, functionality or content in your app is considered egregious behavior and can lead to removal from the Apple Developer Program.</span><br><span class="line"></span><br><span class="line">Specifically, we found that your app includes AliPay (支付寶), which provides access to external payment mechanisms and enables the purchase of content, services, or functionality by means other than the in-app purchase API.</span><br></pre></td></tr></table></figure><ol start="2"><li>排查问题</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.可能是接入了支付宝SDK</span><br><span class="line">2.可能是plist里面有alipay相关选项残留</span><br><span class="line">3.代码中或文件中有支付宝，alipay字样的文本</span><br><span class="line">4.有发送针对支付宝或者淘宝域名的HTTP请求</span><br><span class="line">5.用到的第三方sdk或者软件曾经因为类似原因被拉入了“宁杀错不放过”的名单，比如anysdk</span><br><span class="line">6.该账号曾经因为接入微信或者支付宝请求被拒绝过</span><br><span class="line">7.打包的苹果设备曾经因为接入微信或者支付宝请求被拒绝过</span><br><span class="line">8.创建苹果开发者账号支付所采用的信用卡曾经用于创建另一个因为接入微信或者支付宝请求被拒绝过开发者账号</span><br><span class="line">9.运气不好，被苹果误判；这个概率极小，要验证很简单，再提审一次就知道了</span><br></pre></td></tr></table></figure><h2 id="UI设计不规范"><a href="#UI设计不规范" class="headerlink" title="UI设计不规范"></a>UI设计不规范</h2><ol><li>苹果反馈</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">10.6 – Apple and our customers place a high value on simple, refined, creative, well thought through interfaces. They take more work but are worth it. Apple sets a high bar. If your user interface is complex or less than very good, it may be rejected</span><br><span class="line"></span><br><span class="line">10.6 Details  </span><br><span class="line"></span><br><span class="line">Your app includes an update button or alerts the user to update the app. To avoid user confusion, app version updates must utilize the iOS built-in update mechanism. </span><br></pre></td></tr></table></figure><ol start="2"><li>排查问题</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. 移除检测App更新的按钮和提示</span><br></pre></td></tr></table></figure><h2 id="审核预计耗时很久"><a href="#审核预计耗时很久" class="headerlink" title="审核预计耗时很久"></a>审核预计耗时很久</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Other - Other</span><br><span class="line"></span><br><span class="line">Hello,</span><br><span class="line"></span><br><span class="line">The review of your app is taking longer than expected. Once we have completed our review, we will notify you via Resolution Center.</span><br><span class="line"></span><br><span class="line">If you would like to inquire about the status of this review, you may file a request via the Apple Developer Contact Us page.</span><br><span class="line"></span><br><span class="line">Best regards,</span><br><span class="line"></span><br><span class="line">App Store Review</span><br></pre></td></tr></table></figure><ol start="2"><li>问题排查</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. App第一个版本审核就会很慢</span><br><span class="line">2. App内有一些业务是否违反规则，审核人员暂时断定不了。</span><br><span class="line">3. 之前提交的版本跟目前提交的版本有很大差异（包大小，应用名，logo等关键信息）</span><br><span class="line">4. 账号出现问题，账号下其他App出现违规行为等</span><br><span class="line">5. 苹果太忙了，先给一个 reject，等有空再说。</span><br><span class="line">6. 审核机制有变化</span><br></pre></td></tr></table></figure><ol start="3"><li>解决方案</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 耐心等待就好了</span><br><span class="line">2. 如果3天没有回复，那就`Apple Developer Contact Us`联系苹果</span><br><span class="line">3. 等待回复就好，别病急乱投医。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 提审 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取文件后缀</title>
      <link href="/2020/02/12/ios/general/%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E5%90%8E%E7%BC%80/"/>
      <url>/2020/02/12/ios/general/%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E5%90%8E%E7%BC%80/</url>
      
        <content type="html"><![CDATA[<p>项目中有一个需求：<br>给定一个<code>NSData *</code>类型的数据，从中解析出文件类型。</p><span id="more"></span><h2 id="图片后缀判断"><a href="#图片后缀判断" class="headerlink" title="图片后缀判断"></a>图片后缀判断</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NSInteger</span> ImageFormat <span class="built_in">NS_TYPED_EXTENSIBLE_ENUM</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> ImageFormat ImageFormatUndefined = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> ImageFormat ImageFormatJPEG      = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> ImageFormat ImageFormatPNG       = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> ImageFormat ImageFormatGIF       = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> ImageFormat ImageFormatTIFF      = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> ImageFormat ImageFormatWebP      = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> ImageFormat ImageFormatHEIC      = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> ImageFormat ImageFormatHEIF      = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">+ (ImageFormat)imageFormatForImageData:(<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)data &#123;</span><br><span class="line">    <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">        <span class="keyword">return</span> ImageFormatUndefined;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// File signatures table: http://www.garykessler.net/library/file_sigs.html</span></span><br><span class="line">    uint8_t c;</span><br><span class="line">    [data getBytes:&amp;c length:<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xFF</span>:</span><br><span class="line">            <span class="keyword">return</span> ImageFormatJPEG;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x89</span>:</span><br><span class="line">            <span class="keyword">return</span> ImageFormatPNG;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x47</span>:</span><br><span class="line">            <span class="keyword">return</span> ImageFormatGIF;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x49</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x4D</span>:</span><br><span class="line">            <span class="keyword">return</span> ImageFormatTIFF;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x52</span>: &#123;</span><br><span class="line">            <span class="keyword">if</span> (data.length &gt;= <span class="number">12</span>) &#123;</span><br><span class="line">                <span class="comment">//RIFF....WEBP</span></span><br><span class="line">                <span class="built_in">NSString</span> *testString = [[<span class="built_in">NSString</span> alloc] initWithData:[data subdataWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">12</span>)] encoding:<span class="built_in">NSASCIIStringEncoding</span>];</span><br><span class="line">                <span class="keyword">if</span> ([testString hasPrefix:<span class="string">@&quot;RIFF&quot;</span>] &amp;&amp; [testString hasSuffix:<span class="string">@&quot;WEBP&quot;</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ImageFormatWebP;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x00</span>: &#123;</span><br><span class="line">            <span class="keyword">if</span> (data.length &gt;= <span class="number">12</span>) &#123;</span><br><span class="line">                <span class="comment">//....ftypheic ....ftypheix ....ftyphevc ....ftyphevx</span></span><br><span class="line">                <span class="built_in">NSString</span> *testString = [[<span class="built_in">NSString</span> alloc] initWithData:[data subdataWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">4</span>, <span class="number">8</span>)] encoding:<span class="built_in">NSASCIIStringEncoding</span>];</span><br><span class="line">                <span class="keyword">if</span> ([testString isEqualToString:<span class="string">@&quot;ftypheic&quot;</span>]</span><br><span class="line">                    || [testString isEqualToString:<span class="string">@&quot;ftypheix&quot;</span>]</span><br><span class="line">                    || [testString isEqualToString:<span class="string">@&quot;ftyphevc&quot;</span>]</span><br><span class="line">                    || [testString isEqualToString:<span class="string">@&quot;ftyphevx&quot;</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ImageFormatHEIC;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//....ftypmif1 ....ftypmsf1</span></span><br><span class="line">                <span class="keyword">if</span> ([testString isEqualToString:<span class="string">@&quot;ftypmif1&quot;</span>] || [testString isEqualToString:<span class="string">@&quot;ftypmsf1&quot;</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ImageFormatHEIF;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ImageFormatUndefined;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件后缀判断"><a href="#文件后缀判断" class="headerlink" title="文件后缀判断"></a>文件后缀判断</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="type">void</span>)getFileExtension &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@&quot;2019工资单 (1)&quot;</span> ofType:<span class="string">@&quot;docx&quot;</span>];</span><br><span class="line">    <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:path];</span><br><span class="line">    <span class="built_in">NSString</span> *extension = [<span class="keyword">self</span> contentTypeForImageData:data];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, extension);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)contentTypeForImageData:(<span class="built_in">NSData</span> *)data &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">NSInteger</span> maxLength = <span class="number">28</span>;</span><br><span class="line">    Byte headBytes[maxLength];</span><br><span class="line">    [data getBytes:headBytes length:maxLength];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *headStr = [<span class="keyword">self</span> hexStringFromByte:headBytes];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSDictionary</span> *dict = [<span class="keyword">self</span> dict];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *key <span class="keyword">in</span> dict) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([headStr hasPrefix:[key uppercaseString]]) &#123;</span><br><span class="line">            <span class="keyword">return</span> dict[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)hexStringFromByte:(Byte *)byta &#123;</span><br><span class="line">    <span class="comment">// 转16进制</span></span><br><span class="line">    <span class="built_in">NSString</span> *hexStr = <span class="string">@&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">28</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *newHexStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%x&quot;</span>,byta[i]&amp;<span class="number">0xff</span>];<span class="comment">///16进制数</span></span><br><span class="line">        <span class="keyword">if</span>([newHexStr length]==<span class="number">1</span>)</span><br><span class="line">            hexStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@0%@&quot;</span>,hexStr,newHexStr];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            hexStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@%@&quot;</span>,hexStr,newHexStr];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [hexStr uppercaseString];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSDictionary</span> *)dict &#123;</span><br><span class="line">    <span class="keyword">return</span> @&#123;</span><br><span class="line">        <span class="string">@&quot;FFD8FF&quot;</span> : <span class="string">@&quot;JPEG&quot;</span> ,</span><br><span class="line">        <span class="string">@&quot;89504E47&quot;</span> : <span class="string">@&quot;PNG&quot;</span>,</span><br><span class="line">        <span class="string">@&quot;47494638&quot;</span> : <span class="string">@&quot;GIF&quot;</span>,</span><br><span class="line">        <span class="string">@&quot;49492A00&quot;</span> : <span class="string">@&quot;TIFF&quot;</span>,</span><br><span class="line">        <span class="string">@&quot;424D&quot;</span> : <span class="string">@&quot;BMP&quot;</span>,</span><br><span class="line">        <span class="string">@&quot;41433130&quot;</span> : <span class="string">@&quot;DWG&quot;</span>, <span class="comment">// CAD</span></span><br><span class="line">        <span class="string">@&quot;38425053&quot;</span> : <span class="string">@&quot;PSD&quot;</span>, <span class="comment">// Adobe Photoshop</span></span><br><span class="line">        <span class="string">@&quot;7B5C727466&quot;</span> : <span class="string">@&quot;RTF&quot;</span>, <span class="comment">// Rich Text Format</span></span><br><span class="line">        <span class="string">@&quot;3C3F786D6C&quot;</span> : <span class="string">@&quot;XML&quot;</span>, <span class="comment">// XML</span></span><br><span class="line">        <span class="string">@&quot;68746D6C3E&quot;</span> : <span class="string">@&quot;HTML&quot;</span>, <span class="comment">// HTML</span></span><br><span class="line">        <span class="string">@&quot;48544D4C207B0D0A0942&quot;</span> : <span class="string">@&quot;CSS&quot;</span>, <span class="comment">// CSS</span></span><br><span class="line">        <span class="string">@&quot;696B2E71623D696B2E71&quot;</span> : <span class="string">@&quot;JS&quot;</span>, <span class="comment">// JS</span></span><br><span class="line">        <span class="string">@&quot;44656C69766572792D646174653A&quot;</span> : <span class="string">@&quot;EML&quot;</span>, <span class="comment">//Email [thorough only].</span></span><br><span class="line">        <span class="string">@&quot;CFAD12FEC5FD746F&quot;</span> : <span class="string">@&quot;DBX&quot;</span>, <span class="comment">// Outlook Express.</span></span><br><span class="line">        <span class="string">@&quot;2142444E&quot;</span> : <span class="string">@&quot;PST&quot;</span>, <span class="comment">// Outlook (pst).</span></span><br><span class="line">        <span class="string">@&quot;D0CF11E0&quot;</span> : <span class="string">@&quot;XLS_DOC&quot;</span>, <span class="comment">// MS Word/Excel</span></span><br><span class="line">        <span class="string">@&quot;504B0304&quot;</span> : <span class="string">@&quot;XLSX_DOCX&quot;</span>, <span class="comment">// MS Word/Excel</span></span><br><span class="line">        <span class="string">@&quot;255044462D&quot;</span> : <span class="string">@&quot;PDF&quot;</span>, <span class="comment">// PDF</span></span><br><span class="line">        <span class="string">@&quot;5374616E64617264204A&quot;</span> : <span class="string">@&quot;MDB&quot;</span>, <span class="comment">// MS Access.</span></span><br><span class="line">        <span class="string">@&quot;d0cf11e0a1b11ae10000&quot;</span> : <span class="string">@&quot;WPS&quot;</span>, <span class="comment">// WPS文字wps、表格et、演示dps都是一样的</span></span><br><span class="line">        <span class="string">@&quot;504B0304&quot;</span> : <span class="string">@&quot;ZIP&quot;</span>,</span><br><span class="line">        <span class="string">@&quot;52617221&quot;</span> : <span class="string">@&quot;RAR&quot;</span>,</span><br><span class="line">        <span class="string">@&quot;4D5A9000030000000400&quot;</span> : <span class="string">@&quot;EXE&quot;</span>,</span><br><span class="line">        <span class="string">@&quot;57415645&quot;</span> : <span class="string">@&quot;WAV&quot;</span>,</span><br><span class="line">        <span class="string">@&quot;41564920&quot;</span> : <span class="string">@&quot;AVI&quot;</span>,</span><br><span class="line">        <span class="string">@&quot;000001BA&quot;</span> : <span class="string">@&quot;MPG&quot;</span>,</span><br><span class="line">        <span class="string">@&quot;6D6F6F76&quot;</span> : <span class="string">@&quot;MOV&quot;</span>,</span><br><span class="line">        <span class="string">@&quot;00000020667479706d70&quot;</span> : <span class="string">@&quot;MP4&quot;</span>,</span><br><span class="line">        <span class="string">@&quot;49443303000000002176&quot;</span> : <span class="string">@&quot;MP3&quot;</span>,</span><br><span class="line">        <span class="string">@&quot;464C5601050000000900&quot;</span> : <span class="string">@&quot;FLV&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter - 动画Animation开发指南</title>
      <link href="/2020/02/11/flutter/Flutter%E5%8A%A8%E7%94%BB/"/>
      <url>/2020/02/11/flutter/Flutter%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>精心设计的动画会让用户界面感觉更直观、流畅，能改善用户体验。 Flutter的动画支持可以轻松实现各种动画类型。许多widget，特别是Material Design widgets， 都带有在其设计规范中定义的标准动画效果，但也可以自定义这些效果。</p><span id="more"></span><h2 id="动画Animation开发指南"><a href="#动画Animation开发指南" class="headerlink" title="动画Animation开发指南"></a>动画Animation开发指南</h2><ul><li>在Flutter中有哪些类型的动画？</li><li>如何使用动画库中的基础类给widget添加动画？</li><li>如何为动画添加监听器？</li><li>该什么时候使用AnimatedWidget与AnimatedBuilder?</li><li>如何使用Hero动画？</li></ul><h3 id="在Flutter中有哪些类型的动画？"><a href="#在Flutter中有哪些类型的动画？" class="headerlink" title="在Flutter中有哪些类型的动画？"></a>在Flutter中有哪些类型的动画？</h3><p>在Flutter中动画分为两类：基于tween或基于物理的。</p><ul><li>补间(Tween)动画：在补间动画中，定义了开始点和结束点、时间线以及定义转换时间和速度的曲线。然后由框架计算如何从开始点过渡到结束点。</li><li>基于物理的动画：在基于物理的动画中，运动被模拟为与真实世界的行为相似。例如，当你掷球时，它在何处落地，取决于抛球速度有多快、球有多重、距离地面有多远。 类似地，将连接在弹簧上的球落下（并弹起）与连接到绳子上的球放下的方式也是不同。</li></ul><h3 id="如何使用动画库中的基础类给widget添加动画？"><a href="#如何使用动画库中的基础类给widget添加动画？" class="headerlink" title="如何使用动画库中的基础类给widget添加动画？"></a>如何使用动画库中的基础类给widget添加动画？</h3><p>在为widget添加动画之前，先让我们认识下动画的几个朋友：</p><ul><li><a href="https://docs.flutter.io/flutter/animation/Animation-class.html">Animation</a>：是Flutter动画库中的一个核心类，它生成指导动画的值；</li><li><a href="https://docs.flutter.io/flutter/animation/CurvedAnimation-class.html">CurvedAnimation</a>：Animation的一个子类，将过程抽象为一个非线性曲线；</li><li><a href="https://docs.flutter.io/flutter/animation/AnimationController-class.html">AnimationController</a>：Animation的一个子类，用来管理Animation；</li><li><a href="https://docs.flutter.io/flutter/animation/Tween-class.html">Tween</a>：在正在执行动画的对象所使用的数据范围之间生成值。例如，Tween可生成从红到蓝之间的色值，或者从0到255；</li></ul><h4 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h4><p>在Flutter中，<code>Animation</code>对象本身和UI渲染没有任何关系。<code>Animation</code>是一个抽象类，它拥有其当前值和状态（完成或停止）。其中一个比较常用的<code>Animation</code>类是<code>Animation&lt;double&gt;</code>。<br>Flutter中的Animation对象是一个在一段时间内依次生成一个区间之间值的类。Animation对象的输出可以是线性的、曲线的、一个步进函数或者任何其他可以设计的映射。 根据<code>Animation</code>对象的控制方式，动画可以反向运行，甚至可以在中间切换方向。</p><ul><li><code>Animation</code>还可以生成除<code>double</code>之外的其他类型值，如：<code>Animation&lt;Color&gt;</code> 或 <code>Animation&lt;Size&gt;</code>；</li><li><code>Animation</code>对象有状态。可以通过访问其value属性获取动画的当前值；</li><li><code>Animation</code>对象本身和UI渲染没有任何关系；</li></ul><h4 id="CurvedAnimation"><a href="#CurvedAnimation" class="headerlink" title="CurvedAnimation"></a>CurvedAnimation</h4><p><code>CurvedAnimation</code>将动画过程定义为一个非线性曲线。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> CurvedAnimation curve =</span><br><span class="line">    <span class="keyword">new</span> CurvedAnimation(parent: controller, curve: Curves.easeIn);</span><br></pre></td></tr></table></figure><blockquote><p>注: <a href="https://docs.flutter.io/flutter/animation/Curves-class.html">Curves</a> 类定义了许多常用的曲线，也可以创建自己的，例如：</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShakeCurve</span> <span class="keyword">extends</span> <span class="title">Curve</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">double</span> transform(<span class="built_in">double</span> t) &#123;</span><br><span class="line">    <span class="keyword">return</span> math.sin(t * math.PI * <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AnimationController"><a href="#AnimationController" class="headerlink" title="AnimationController"></a>AnimationController</h4><p><code>AnimationController</code>是一个特殊的<code>Animation</code>对象，在屏幕刷新的每一帧，就会生成一个新的值。默认情况下，AnimationController在给定的时间段内会线性的生成从0.0到1.0的数字。 例如，下面代码创建一个Animation对象：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> AnimationController controller = <span class="keyword">new</span> AnimationController(</span><br><span class="line">    duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">2000</span>), vsync: <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p><code>AnimationController</code>派生自<code>Animation&lt;double&gt;</code>，因此可以在需要<code>Animation</code>对象的任何地方使用。 但是，<code>AnimationController</code>具有控制动画的其他方法：</p><ul><li><code>forward()</code>：启动动画；</li><li><code>reverse(&#123;double from&#125;)</code>：倒放动画；</li><li><code>reset()</code>：重置动画，将其设置到动画的开始位置；</li><li><code>stop(&#123; bool canceled = true &#125;)</code>：停止动画；</li></ul><p>当创建一个AnimationController时，需要传递一个vsync参数，存在vsync时会防止屏幕外动画消耗不必要的资源，可以将stateful对象作为vsync的值。</p><blockquote><p>注意： 在某些情况下，值(position，值动画的当前值)可能会超出AnimationController的0.0-1.0的范围。例如，fling()函数允许您提供速度(velocity)、力量(force)、position(通过Force对象)。位置(position)可以是任何东西，因此可以在0.0到1.0范围之外。 CurvedAnimation生成的值也可以超出0.0到1.0的范围。根据选择的曲线，CurvedAnimation的输出可以具有比输入更大的范围。例如，Curves.elasticIn等弹性曲线会生成大于或小于默认范围的值。</p></blockquote><h4 id="Tween"><a href="#Tween" class="headerlink" title="Tween"></a>Tween</h4><p>默认情况下，AnimationController对象的范围从0.0到1.0。如果您需要不同的范围或不同的数据类型，则可以使用Tween来配置动画以生成不同的范围或数据类型的值。例如，以下示例，Tween生成从-200.0到0.0的值：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Tween doubleTween = <span class="keyword">new</span> Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">-200.0</span>, end: <span class="number">0.0</span>);</span><br></pre></td></tr></table></figure><p>Tween是一个无状态(stateless)对象，需要begin和end值。Tween的唯一职责就是定义从输入范围到输出范围的映射。输入范围通常为0.0到1.0，但这不是必须的。<br>Tween继承自<code>Animatable&lt;T&gt;</code>，而不是继承自<code>Animation&lt;T&gt;</code>。Animatable与Animation相似，不是必须输出double值。例如，ColorTween指定两种颜色之间的过渡。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Tween colorTween =</span><br><span class="line">    <span class="keyword">new</span> ColorTween(begin: Colors.transparent, end: Colors.black54);</span><br></pre></td></tr></table></figure><p>Tween对象不存储任何状态。相反，它提供了<code>evaluate(Animation&lt;double&gt; animation)</code>方法将映射函数应用于动画当前值。 Animation对象的当前值可以通过<code>value()</code>方法取到。evaluate函数还执行一些其它处理，例如分别确保在动画值为0.0和1.0时返回开始和结束状态。</p><p><strong>Tween.animate</strong><br>要使用Tween对象，可调用它的animate()方法，传入一个控制器对象。例如，以下代码在500毫秒内生成从0到255的整数值。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> AnimationController controller = <span class="keyword">new</span> AnimationController(</span><br><span class="line">    duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">500</span>), vsync: <span class="keyword">this</span>);</span><br><span class="line">Animation&lt;<span class="built_in">int</span>&gt; alpha = <span class="keyword">new</span> IntTween(begin: <span class="number">0</span>, end: <span class="number">255</span>).animate(controller);</span><br></pre></td></tr></table></figure><p>注意<code>animate()</code>返回的是一个Animation，而不是一个Animatable。<br>以下示例构建了一个控制器、一条曲线和一个Tween：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> AnimationController controller = <span class="keyword">new</span> AnimationController(</span><br><span class="line">    duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">500</span>), vsync: <span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">final</span> Animation curve =</span><br><span class="line">    <span class="keyword">new</span> CurvedAnimation(parent: controller, curve: Curves.easeOut);</span><br><span class="line">Animation&lt;<span class="built_in">int</span>&gt; alpha = <span class="keyword">new</span> IntTween(begin: <span class="number">0</span>, end: <span class="number">255</span>).animate(curve);</span><br></pre></td></tr></table></figure><h3 id="为widget添加动画"><a href="#为widget添加动画" class="headerlink" title="为widget添加动画"></a>为widget添加动画</h3><p>在下面的实例中我们为一个logo添加了一个从小放大的动画：<br><img src="http://www.devio.org/io/flutter_app/img/blog/zoom.gif"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(LogoApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogoApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  _LogoAppState createState() =&gt; _LogoAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_LogoAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">LogoApp</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; animation;</span><br><span class="line">  AnimationController controller;</span><br><span class="line">  AnimationStatus animationState;</span><br><span class="line">  <span class="built_in">double</span> animationValue;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    controller =</span><br><span class="line">        AnimationController(duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>), vsync: <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// #docregion addListener</span></span><br><span class="line">    animation = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0</span>, end: <span class="number">300</span>).animate(controller)</span><br><span class="line">      ..addListener(() &#123;</span><br><span class="line">        <span class="comment">// #enddocregion addListener</span></span><br><span class="line">        setState(() &#123;</span><br><span class="line">          animationValue = animation.value;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// #docregion addListener</span></span><br><span class="line">      &#125;)</span><br><span class="line">      ..addStatusListener((AnimationStatus state) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          animationState = state;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="comment">// #enddocregion addListener</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      margin: EdgeInsets.only(top: <span class="number">50</span>),</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          GestureDetector(</span><br><span class="line">            onTap: () &#123;</span><br><span class="line">              controller.reset();</span><br><span class="line">              controller.forward();</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Text(<span class="string">&#x27;Start&#x27;</span>, textDirection: TextDirection.ltr),</span><br><span class="line">          ),</span><br><span class="line">          Text(<span class="string">&#x27;State:&#x27;</span> + animationState.toString(),</span><br><span class="line">              textDirection: TextDirection.ltr),</span><br><span class="line">          Text(<span class="string">&#x27;Value:&#x27;</span> + animationValue.toString(),</span><br><span class="line">              textDirection: TextDirection.ltr),</span><br><span class="line">          Container(</span><br><span class="line">            height: animation.value,</span><br><span class="line">            width: animation.value,</span><br><span class="line">            child: FlutterLogo(),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，在上述代码中要实现这个动画的关键一步是在addListener()的回调中添加setState的调用这样才能触发页面重新渲染，动画才能有效，另外也可以通过AnimatedWidget来实现，在下文中会讲到。</p><h3 id="如何为动画添加监听器？"><a href="#如何为动画添加监听器？" class="headerlink" title="如何为动画添加监听器？"></a>如何为动画添加监听器？</h3><p>有时我们需要知道动画执行的进度和状态，在Flutter中我们可以通过<code>Animation的addListener</code>与<code>addStatusListener</code>方法为动画添加监听器：</p><ul><li>addListener：动画的值发生变化时被调用；</li><li>addStatusListener：动画状态发生变化时被调用；</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"> <span class="keyword">void</span> initState() &#123;</span><br><span class="line">   <span class="keyword">super</span>.initState();</span><br><span class="line">   controller =</span><br><span class="line">       AnimationController(duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>), vsync: <span class="keyword">this</span>);</span><br><span class="line">   animation = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0</span>, end: <span class="number">300</span>).animate(controller)</span><br><span class="line">     <span class="comment">// #enddocregion print-state</span></span><br><span class="line">     ..addStatusListener((status) &#123;</span><br><span class="line">       <span class="keyword">if</span> (status == AnimationStatus.completed) &#123;</span><br><span class="line">         controller.reverse();</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == AnimationStatus.dismissed) &#123;</span><br><span class="line">         controller.forward();</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="comment">// #docregion print-state</span></span><br><span class="line">     ..addStatusListener((state) =&gt; <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$state</span>&#x27;</span>));</span><br><span class="line">     ..addListener(() &#123;</span><br><span class="line">       <span class="comment">// #enddocregion addListener</span></span><br><span class="line">       setState(() &#123;</span><br><span class="line">         <span class="comment">// The state that has changed here is the animation object’s value.</span></span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">// #docregion addListener</span></span><br><span class="line">     &#125;);</span><br><span class="line">   controller.forward();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>可对照学习<a href="https://coding.imooc.com/lesson/321.html#%E4%B8%BAwidget%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB">为widget添加动画</a>的例子；</p></blockquote><h3 id="用AnimatedWidget与AnimatedBuilder简化和重构我们对动画的使用"><a href="#用AnimatedWidget与AnimatedBuilder简化和重构我们对动画的使用" class="headerlink" title="用AnimatedWidget与AnimatedBuilder简化和重构我们对动画的使用"></a>用AnimatedWidget与AnimatedBuilder简化和重构我们对动画的使用</h3><h4 id="什么是AnimatedWidget？"><a href="#什么是AnimatedWidget？" class="headerlink" title="什么是AnimatedWidget？"></a>什么是AnimatedWidget？</h4><p>我们可以将AnimatedWidget理解为Animation的助手，使用它可以简化我们对动画的使用，在为widget添加动画的学习中我们不难发现，在不使用AnimatedWidget的情况下需要手动调用动画的addListener()并在回调中添加setState才能看到动画效果，AnimatedWidget将为我们简化这一操作。<br>在下面的重构示例中，LogoApp现在继承自AnimatedWidget而不是StatefulWidget。AnimatedWidget在绘制时使用动画的当前值。LogoApp仍然管理着AnimationController和Tween。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Demonstrate a simple animation with AnimatedWidget</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/animation.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimatedLogo</span> <span class="keyword">extends</span> <span class="title">AnimatedWidget</span> </span>&#123;</span><br><span class="line">  AnimatedLogo(&#123;Key key, Animation&lt;<span class="built_in">double</span>&gt; animation&#125;)</span><br><span class="line">      : <span class="keyword">super</span>(key: key, listenable: animation);</span><br><span class="line"></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> Animation&lt;<span class="built_in">double</span>&gt; animation = listenable;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Center(</span><br><span class="line">      child: <span class="keyword">new</span> Container(</span><br><span class="line">        margin: <span class="keyword">new</span> EdgeInsets.symmetric(vertical: <span class="number">10.0</span>),</span><br><span class="line">        height: animation.value,</span><br><span class="line">        width: animation.value,</span><br><span class="line">        child: <span class="keyword">new</span> FlutterLogo(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogoApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  _LogoAppState createState() =&gt; <span class="keyword">new</span> _LogoAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_LogoAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">LogoApp</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  AnimationController controller;</span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; animation;</span><br><span class="line"></span><br><span class="line">  initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    controller = <span class="keyword">new</span> AnimationController(</span><br><span class="line">        duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">2000</span>), vsync: <span class="keyword">this</span>);</span><br><span class="line">    animation = <span class="keyword">new</span> Tween(begin: <span class="number">0.0</span>, end: <span class="number">300.0</span>).animate(controller);</span><br><span class="line">    controller.forward();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AnimatedLogo(animation: animation);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dispose() &#123;</span><br><span class="line">    controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> LogoApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>什么是AnimatedBuilder？<br>AnimatedBuilder是用于构建动画的通用widget，AnimatedBuilder对于希望将动画作为更大构建函数的一部分包含在内的更复杂的widget时非常有用，其实你可以这样理解：AnimatedBuilder是拆分动画的一个工具类，借助它我们可以将动画和widget进行分离：<br>在上面的实例中我们的代码存在的一个问题： 更改动画需要更改显示logo的widget。更好的解决方案是将职责分离：</p><ul><li>显示logo</li><li>定义Animation对象</li><li>渲染过渡效果</li></ul><p>接下来我们就借助<code>AnimatedBuilder</code>类来完成此分离。<code>AnimatedBuilder</code>是渲染树中的一个独立的类， 与AnimatedWidget类似，<code>AnimatedBuilder</code>自动监听来自Animation对象的通知，不需要手动调用<code>addListener()</code>。<br>我们根据下图的 widget 树来创建我们的代码：</p><p><img src="http://www.devio.org/io/flutter_app/img/blog/AnimatedBuilder-WidgetTree.png"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/animation.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(LogoApp());</span><br><span class="line"></span><br><span class="line"><span class="comment">// #docregion LogoWidget</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogoWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Leave out the height and width so it fills the animating parent</span></span><br><span class="line">  Widget build(BuildContext context) =&gt; Container(</span><br><span class="line">        margin: EdgeInsets.symmetric(vertical: <span class="number">10</span>),</span><br><span class="line">        child: FlutterLogo(),</span><br><span class="line">      );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #enddocregion LogoWidget</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #docregion GrowTransition</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrowTransition</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  GrowTransition(&#123;<span class="keyword">this</span>.child, <span class="keyword">this</span>.animation&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> Widget child;</span><br><span class="line">  <span class="keyword">final</span> Animation&lt;<span class="built_in">double</span>&gt; animation;</span><br><span class="line"></span><br><span class="line">  Widget build(BuildContext context) =&gt; Center(</span><br><span class="line">        child: AnimatedBuilder(</span><br><span class="line">            animation: animation,</span><br><span class="line">            builder: (context, child) =&gt; Container(</span><br><span class="line">                  height: animation.value,</span><br><span class="line">                  width: animation.value,</span><br><span class="line">                  child: child,</span><br><span class="line">                ),</span><br><span class="line">            child: child),</span><br><span class="line">      );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #enddocregion GrowTransition</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogoApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  _LogoAppState createState() =&gt; _LogoAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #docregion print-state</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_LogoAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">LogoApp</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; animation;</span><br><span class="line">  AnimationController controller;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    controller =</span><br><span class="line">        AnimationController(duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>), vsync: <span class="keyword">this</span>);</span><br><span class="line">    animation = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0</span>, end: <span class="number">300</span>).animate(controller);</span><br><span class="line">    controller.forward();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// #enddocregion print-state</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) =&gt; GrowTransition(</span><br><span class="line">        child: LogoWidget(),</span><br><span class="line">        animation: animation,</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// #docregion print-state</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何使用Hero动画？<br>什么是Hero动画？<br><img src="http://www.devio.org/io/flutter_app/img/blog/Standard-Hero-Animation.gif"><br><img src="http://www.devio.org/io/flutter_app/img/blog/Radial-Hero-Animation.gif"></p><p>在 Flutter中可以用 Hero widget创建这个动画。当 hero 通过动画从源页面飞到目标页面时，目标页面逐渐淡入视野。通常， hero 是用户界面的一小部分，如图片，它通常在两个页面都有。从用户的角度来看， hero 在页面之间“飞翔”。接下来我们一起来学习如何创建Hero动画：<br>实现标准hero动画</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/scheduler.dart&#x27;</span> <span class="keyword">show</span> timeDilation;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhotoHero</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> PhotoHero(&#123; Key key, <span class="keyword">this</span>.photo, <span class="keyword">this</span>.onTap, <span class="keyword">this</span>.width &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> photo;</span><br><span class="line">  <span class="keyword">final</span> VoidCallback onTap;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> width;</span><br><span class="line"></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> SizedBox(</span><br><span class="line">      width: width,</span><br><span class="line">      child: Hero(</span><br><span class="line">        tag: photo,</span><br><span class="line">        child: Material(</span><br><span class="line">          color: Colors.transparent,</span><br><span class="line">          child: InkWell(</span><br><span class="line">            onTap: onTap,</span><br><span class="line">            child: Image.network(</span><br><span class="line">              photo,</span><br><span class="line">              fit: BoxFit.contain,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroAnimation</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    timeDilation = <span class="number">10.0</span>; <span class="comment">// 1.0 means normal animation speed.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&#x27;Basic Hero Animation&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: PhotoHero(</span><br><span class="line">          photo: <span class="string">&#x27;https://raw.githubusercontent.com/flutter/website/master/examples/_animation/hero_animation/images/flippers-alpha.png&#x27;</span>,</span><br><span class="line">          width: <span class="number">300.0</span>,</span><br><span class="line">          onTap: () &#123;</span><br><span class="line">            Navigator.of(context).push(MaterialPageRoute&lt;<span class="keyword">void</span>&gt;(</span><br><span class="line">                builder: (BuildContext context) &#123;</span><br><span class="line">                  <span class="keyword">return</span> Scaffold(</span><br><span class="line">                    appBar: AppBar(</span><br><span class="line">                      title: <span class="keyword">const</span> Text(<span class="string">&#x27;Flippers Page&#x27;</span>),</span><br><span class="line">                    ),</span><br><span class="line">                    body: Container(</span><br><span class="line">                      <span class="comment">// Set background to blue to emphasize that it&#x27;s a new route.</span></span><br><span class="line">                      color: Colors.lightBlueAccent,</span><br><span class="line">                      padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">                      alignment: Alignment.topLeft,</span><br><span class="line">                      child: PhotoHero(</span><br><span class="line">                        photo: <span class="string">&#x27;https://raw.githubusercontent.com/flutter/website/master/examples/_animation/hero_animation/images/flippers-alpha.png&#x27;</span>,</span><br><span class="line">                        width: <span class="number">100.0</span>,</span><br><span class="line">                        onTap: () &#123;</span><br><span class="line">                          Navigator.of(context).pop();</span><br><span class="line">                        &#125;,</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  );</span><br><span class="line">                &#125;</span><br><span class="line">            ));</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(home: HeroAnimation()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hero的函数原型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const Hero(&#123;</span><br><span class="line">   Key key,</span><br><span class="line">   @required this.tag,</span><br><span class="line">   this.createRectTween,</span><br><span class="line">   this.flightShuttleBuilder,</span><br><span class="line">   this.placeholderBuilder,</span><br><span class="line">   this.transitionOnUserGestures = false,</span><br><span class="line">   @required this.child,</span><br><span class="line"> &#125;) : assert(tag != null),</span><br><span class="line">      assert(transitionOnUserGestures != null),</span><br><span class="line">      assert(child != null),</span><br><span class="line">      super(key: key);</span><br></pre></td></tr></table></figure><ul><li>tag：[必须]用于关联两个Hero动画的标识；</li><li>createRectTween：[可选]定义目标Hero的边界，在从起始位置到目的位置的“飞行”过程中该如何变化；</li><li>child：[必须]定义动画所呈现的widget；</li></ul><p>实现径向hero动画</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span> <span class="keyword">as</span> math;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/scheduler.dart&#x27;</span> <span class="keyword">show</span> timeDilation;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  Photo(&#123; Key key, <span class="keyword">this</span>.photo, <span class="keyword">this</span>.color, <span class="keyword">this</span>.onTap &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> photo;</span><br><span class="line">  <span class="keyword">final</span> Color color;</span><br><span class="line">  <span class="keyword">final</span> VoidCallback onTap;</span><br><span class="line"></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Material(</span><br><span class="line">      <span class="comment">// Slightly opaque color appears where the image has transparency.</span></span><br><span class="line">      color: Theme.of(context).primaryColor.withOpacity(<span class="number">0.25</span>),</span><br><span class="line">      child: InkWell(</span><br><span class="line">        onTap: onTap,</span><br><span class="line">        child: LayoutBuilder(</span><br><span class="line">          builder: (BuildContext context, BoxConstraints size) &#123;</span><br><span class="line">            <span class="keyword">return</span> Image.network(</span><br><span class="line">              photo,</span><br><span class="line">              fit: BoxFit.contain,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RadialExpansion</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  RadialExpansion(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.maxRadius,</span><br><span class="line">    <span class="keyword">this</span>.child,</span><br><span class="line">  &#125;) : clipRectSize = <span class="number">2.0</span> * (maxRadius / math.sqrt2),</span><br><span class="line">        <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> maxRadius;</span><br><span class="line">  <span class="keyword">final</span> clipRectSize;</span><br><span class="line">  <span class="keyword">final</span> Widget child;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ClipOval(</span><br><span class="line">      child: Center(</span><br><span class="line">        child: SizedBox(</span><br><span class="line">          width: clipRectSize,</span><br><span class="line">          height: clipRectSize,</span><br><span class="line">          child: ClipRect(</span><br><span class="line">            child: child,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RadialExpansionDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">double</span> kMinRadius = <span class="number">32.0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">double</span> kMaxRadius = <span class="number">128.0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> opacityCurve = <span class="keyword">const</span> Interval(<span class="number">0.0</span>, <span class="number">0.75</span>, curve: Curves.fastOutSlowIn);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> RectTween _createRectTween(Rect begin, Rect end) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialRectCenterArcTween(begin: begin, end: end);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Widget _buildPage(BuildContext context, <span class="built_in">String</span> imageName, <span class="built_in">String</span> description) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: Theme.of(context).canvasColor,</span><br><span class="line">      child: Center(</span><br><span class="line">        child: Card(</span><br><span class="line">          elevation: <span class="number">8.0</span>,</span><br><span class="line">          child: Column(</span><br><span class="line">            mainAxisSize: MainAxisSize.min,</span><br><span class="line">            children: [</span><br><span class="line">              SizedBox(</span><br><span class="line">                width: kMaxRadius * <span class="number">2.0</span>,</span><br><span class="line">                height: kMaxRadius * <span class="number">2.0</span>,</span><br><span class="line">                child: Hero(</span><br><span class="line">                  createRectTween: _createRectTween,</span><br><span class="line">                  tag: imageName,</span><br><span class="line">                  child: RadialExpansion(</span><br><span class="line">                    maxRadius: kMaxRadius,</span><br><span class="line">                    child: Photo(</span><br><span class="line">                      photo: imageName,</span><br><span class="line">                      onTap: () &#123;</span><br><span class="line">                        Navigator.of(context).pop();</span><br><span class="line">                      &#125;,</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              Text(</span><br><span class="line">                description,</span><br><span class="line">                style: TextStyle(fontWeight: FontWeight.bold),</span><br><span class="line">                textScaleFactor: <span class="number">3.0</span>,</span><br><span class="line">              ),</span><br><span class="line">              <span class="keyword">const</span> SizedBox(height: <span class="number">16.0</span>),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildHero(BuildContext context, <span class="built_in">String</span> imageName, <span class="built_in">String</span> description) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: kMinRadius * <span class="number">2.0</span>,</span><br><span class="line">      height: kMinRadius * <span class="number">2.0</span>,</span><br><span class="line">      child: Hero(</span><br><span class="line">        createRectTween: _createRectTween,</span><br><span class="line">        tag: imageName,</span><br><span class="line">        child: RadialExpansion(</span><br><span class="line">          maxRadius: kMaxRadius,</span><br><span class="line">          child: Photo(</span><br><span class="line">            photo: imageName,</span><br><span class="line">            onTap: () &#123;</span><br><span class="line">              Navigator.of(context).push(</span><br><span class="line">                PageRouteBuilder&lt;<span class="keyword">void</span>&gt;(</span><br><span class="line">                  pageBuilder: (BuildContext context, Animation&lt;<span class="built_in">double</span>&gt; animation, Animation&lt;<span class="built_in">double</span>&gt; secondaryAnimation) &#123;</span><br><span class="line">                    <span class="keyword">return</span> AnimatedBuilder(</span><br><span class="line">                        animation: animation,</span><br><span class="line">                        builder: (BuildContext context, Widget child) &#123;</span><br><span class="line">                          <span class="keyword">return</span> Opacity(</span><br><span class="line">                            opacity: opacityCurve.transform(animation.value),</span><br><span class="line">                            child: _buildPage(context, imageName, description),</span><br><span class="line">                          );</span><br><span class="line">                        &#125;</span><br><span class="line">                    );</span><br><span class="line">                  &#125;,</span><br><span class="line">                ),</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    timeDilation = <span class="number">5.0</span>; <span class="comment">// 1.0 is normal animation speed.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&#x27;Radial Transition Demo&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">32.0</span>),</span><br><span class="line">        alignment: FractionalOffset.bottomLeft,</span><br><span class="line">        child: Row(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.spaceBetween,</span><br><span class="line">          children: [</span><br><span class="line">            _buildHero(context, <span class="string">&#x27;https://raw.githubusercontent.com/flutter/website/master/examples/_animation/radial_hero_animation/images/chair-alpha.png&#x27;</span>, <span class="string">&#x27;Chair&#x27;</span>),</span><br><span class="line">            _buildHero(context, <span class="string">&#x27;https://raw.githubusercontent.com/flutter/website/master/examples/_animation/radial_hero_animation/images/binoculars-alpha.png&#x27;</span>, <span class="string">&#x27;Binoculars&#x27;</span>),</span><br><span class="line">            _buildHero(context, <span class="string">&#x27;https://raw.githubusercontent.com/flutter/website/master/examples/_animation/radial_hero_animation/images/beachball-alpha.png&#x27;</span>, <span class="string">&#x27;Beach ball&#x27;</span>),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(home: RadialExpansionDemo()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter - 图片控件开发详解</title>
      <link href="/2020/02/10/flutter/Flutter%E5%9B%BE%E7%89%87/"/>
      <url>/2020/02/10/flutter/Flutter%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>Flutter 图片组件开发详解</p><span id="more"></span><h2 id="图片控件开发详解"><a href="#图片控件开发详解" class="headerlink" title="图片控件开发详解"></a>图片控件开发详解</h2><ul><li>Image widget</li><li>如何加载网络图片？</li><li>如何加载静态图片？</li><li>如何加载本地图片？</li><li>如何设置Placeholder?</li><li>如何配置图片缓存？</li><li>如何加载Icon？</li></ul><h3 id="Image-widget"><a href="#Image-widget" class="headerlink" title="Image widget"></a>Image widget</h3><p>Flutter中一个用来展示图片的widget。</p><h4 id="Image支持如下几种类型的构造函数："><a href="#Image支持如下几种类型的构造函数：" class="headerlink" title="Image支持如下几种类型的构造函数："></a><strong>Image</strong>支持如下几种类型的构造函数：</h4><ul><li><a href="https://docs.flutter.io/flutter/widgets/Image/Image.html">new Image</a> - 用于从ImageProvider获取图像；</li><li><a href="https://docs.flutter.io/flutter/widgets/Image/Image.asset.html">new Image.asset</a> - 使用key 从AssetBundle获得的图像；</li><li><a href="https://docs.flutter.io/flutter/widgets/Image/Image.network.html">new Image.network</a> -  从网络URL中获取图片；</li><li><a href="https://docs.flutter.io/flutter/widgets/Image/Image.file.html">new Image.file</a> -  从本地文件中获取图片；</li><li><a href="https://docs.flutter.io/flutter/widgets/Image/Image.memory.html">new Image.memory</a> - 用于从Uint8List获取图像；</li></ul><blockquote><p>在加载项目中的图片资源时，为了让Image能够根据像素密度自动适配不同分辨率的图片，请使用<code>AssetImage</code>指定图像，并确保在widget树中的“Image” widget上方存在<code>MaterialApp</code>，<code>WidgetsApp</code>或<code>MediaQuery</code>窗口widget。</p></blockquote><h4 id="Image支持的图片格式"><a href="#Image支持的图片格式" class="headerlink" title="Image支持的图片格式"></a>Image支持的图片格式</h4><p>Image 支持以下类型的图片：<code>JPEG</code>, <code>PNG</code>, <code>GIF</code>, <code>Animated GIF</code>, <code>WebP</code>, <code>Animated WebP</code>, <code>BMP</code>, 和 <code>WBMP</code>。</p><h3 id="如何加载网络图片？"><a href="#如何加载网络图片？" class="headerlink" title="如何加载网络图片？"></a>如何加载网络图片？</h3><p>要加载网络图片，我们需要使用<code>Image.network</code>构造方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Image.network(</span><br><span class="line">  <span class="string">&#x27;http://www.devio.org/img/avatar.png&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>demo:</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter bottomNavigationBar&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData.fallback(),</span><br><span class="line">      home: Image.network(</span><br><span class="line">        <span class="string">&#x27;http://www.devio.org/img/avatar.png&#x27;</span>,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何加载静态图片，以及处理不同分辨率的图片？"><a href="#如何加载静态图片，以及处理不同分辨率的图片？" class="headerlink" title="如何加载静态图片，以及处理不同分辨率的图片？"></a>如何加载静态图片，以及处理不同分辨率的图片？</h3><p>要加载项目中的静态图片，需要一些两步：</p><ul><li>在 <code>pubspec.yaml</code> 文件中声明图片资源的路径；</li><li>使用 <code>AssetImage</code> 访问图片；</li></ul><p><code>pubspec.yaml</code> 声明图片路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assets:</span><br><span class="line"> - images/my_icon.png</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 代表images文件夹下所有资源</span><br><span class="line">assets:</span><br><span class="line"> - images/</span><br></pre></td></tr></table></figure><p>使用<code>AssetImage</code>访问图片图片：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Image(</span><br><span class="line">  height: <span class="number">26</span>,</span><br><span class="line">  width: <span class="number">26</span>,</span><br><span class="line">  image: AssetImage(my_icon.png),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>除了我们使用<code>Image</code>的构造方法手动指定<code>AssetImage</code>之外，还可通过<code>Image.asset</code>来加载静态图片：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Image.asset(my_icon.png,</span><br><span class="line">width: 26,</span><br><span class="line">height: 26,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>两者是等效的。</p><h3 id="如何加载本地图片？"><a href="#如何加载本地图片？" class="headerlink" title="如何加载本地图片？"></a>如何加载本地图片？</h3><h4 id="加载完整路径的本地图片"><a href="#加载完整路径的本地图片" class="headerlink" title="加载完整路径的本地图片"></a>加载完整路径的本地图片</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:io&#x27;</span>;</span><br><span class="line">Image.file(File(<span class="string">&#x27;/sdcard/Download/Stack.png&#x27;</span>)),</span><br></pre></td></tr></table></figure><h4 id="加载相对路径的本地图片"><a href="#加载相对路径的本地图片" class="headerlink" title="加载相对路径的本地图片"></a>加载相对路径的本地图片</h4><p><strong>第一步：</strong><br>在pubspec.yaml中添加<a href="https://pub.dartlang.org/packages/path_provider">path_provider</a>插件；</p><p><strong>第二步：导入头文件</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:io&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:path_provider/path_provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Image.file(File(&#x27;/sdcard/Download/Stack.png&#x27;)),</span></span><br><span class="line">FutureBuilder(future: _getLocalFile(<span class="string">&quot;Download/Stack.png&quot;</span>),</span><br><span class="line">  builder:  (BuildContext context, AsyncSnapshot&lt;File&gt; snapshot) &#123;</span><br><span class="line">    <span class="keyword">return</span> snapshot.data != <span class="keyword">null</span> ? Image.file(snapshot.data) : Container();</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"><span class="comment">//获取SDCard的路径：</span></span><br><span class="line">Future&lt;File&gt; _getLocalFile(<span class="built_in">String</span> filename) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">String</span> dir = (<span class="keyword">await</span> getExternalStorageDirectory()).path;</span><br><span class="line">    File f = <span class="keyword">new</span> File(<span class="string">&#x27;<span class="subst">$dir</span>/<span class="subst">$filename</span>&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="如何设置placeholder"><a href="#如何设置placeholder" class="headerlink" title="如何设置placeholder?"></a>如何设置placeholder?</h3><p>为了设置Placeholder我们需要借助<a href="https://docs.flutter.io/flutter/widgets/FadeInImage-class.html">FadeInImage</a>，它能够从内存，本地资源中加载placeholder。</p><h4 id="从内存中加载placeholder"><a href="#从内存中加载placeholder" class="headerlink" title="从内存中加载placeholder"></a>从内存中加载placeholder</h4><p><strong>第一步：</strong></p><p>安装<a href="https://pub.dartlang.org/packages/transparent_image">transparent_image</a>插件。</p><p><strong>第二步：</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:transparent_image/transparent_image.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> title = <span class="string">&#x27;Fade in images&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: title,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(title),</span><br><span class="line">        ),</span><br><span class="line">        body: Stack(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Center(child: CircularProgressIndicator()),</span><br><span class="line">            Center(</span><br><span class="line">              child: FadeInImage.memoryNetwork(</span><br><span class="line">                placeholder: kTransparentImage,</span><br><span class="line">                image: <span class="string">&#x27;http://www.devio.org/img/avatar.png&#x27;</span>,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="从本地资源中加载placeholder"><a href="#从本地资源中加载placeholder" class="headerlink" title="从本地资源中加载placeholder"></a>从本地资源中加载placeholder</h4><p><strong>第一步</strong></p><p>配置本地资源图片：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flutter:</span><br><span class="line">  assets:</span><br><span class="line">    - assets/loading.gif</span><br></pre></td></tr></table></figure><p><strong>第二步</strong></p><p>加载本地资源图片作为placeholder：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FadeInImage.assetNetwork(</span><br><span class="line">  placeholder: <span class="string">&#x27;assets/loading.gif&#x27;</span>,</span><br><span class="line">  image: <span class="string">&#x27;http://www.devio.org/img/avatar.png&#x27;</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="如何配置图片缓存？"><a href="#如何配置图片缓存？" class="headerlink" title="如何配置图片缓存？"></a>如何配置图片缓存？</h3><p>在Flutter中我们可以借助<a href="https://pub.dartlang.org/packages/cached_network_image">cached_network_image</a>插件，来从网络上加载图片，并且将其缓存到本地，以供下次使用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:cached_network_image/cached_network_image.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> title = <span class="string">&#x27;Cached Images&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: title,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(title),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: CachedNetworkImage(</span><br><span class="line">            placeholder: (context, url) =&gt; <span class="keyword">new</span> CircularProgressIndicator(),</span><br><span class="line">            imageUrl:</span><br><span class="line">                <span class="string">&#x27;https://picsum.photos/250?image=9&#x27;</span>,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何加载Icon？"><a href="#如何加载Icon？" class="headerlink" title="如何加载Icon？"></a>如何加载Icon？</h3><p>在Flutter中我们可以借助<a href="https://docs.flutter.io/flutter/widgets/Icon-class.html">Icon</a>来加载icon：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Icon(<span class="keyword">this</span>.icon<span class="comment">//IconDate, &#123;</span></span><br><span class="line">   Key key,</span><br><span class="line">   <span class="keyword">this</span>.size,<span class="comment">//大小</span></span><br><span class="line">   <span class="keyword">this</span>.color,<span class="comment">//颜色</span></span><br><span class="line">   <span class="keyword">this</span>.semanticLabel,<span class="comment">//标志位</span></span><br><span class="line">   <span class="keyword">this</span>.textDirection,<span class="comment">//绘制方向，一般使用不到</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>从Icon的构造方法可以很清楚的看出Icon构造方法需要一个默认的类型为IconData类型的参数，我们可以构造一个自己的IconData，也可以使用Flutter提供的<a href="https://design.google.com/icons/">material_fonts</a>。</p><h4 id="使用Icons"><a href="#使用Icons" class="headerlink" title="使用Icons"></a>使用Icons</h4><p>通过如下代码我们可以使用Flutter内置的material_fonts：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> MaterialApp(home: <span class="keyword">new</span> MyApp()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">&quot;Icons&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Center(</span><br><span class="line">        child: <span class="keyword">new</span> Icon(Icons.android,size: <span class="number">100.0</span>),</span><br><span class="line">      ),</span><br><span class="line">        );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用自定义的Icon"><a href="#使用自定义的Icon" class="headerlink" title="使用自定义的Icon"></a>使用自定义的Icon</h4><p>使用自定义的我们需要构造一个：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> IconData(</span><br><span class="line">  <span class="keyword">this</span>.codePoint,<span class="comment">//必填参数，fonticon对应的16进制Unicode &#123;</span></span><br><span class="line">  <span class="keyword">this</span>.fontFamily,<span class="comment">//字体库系列</span></span><br><span class="line">  <span class="keyword">this</span>.fontPackage,<span class="comment">//字体在那个包中，不填仅在自己程序包中查找</span></span><br><span class="line">  <span class="keyword">this</span>.matchTextDirection: <span class="keyword">false</span>,图标是否按照图标绘制方向显示</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>首先我我们需要向使用字体一样，在pubspec.yaml中配置我们的icon：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fonts:</span><br><span class="line">- family: devio</span><br><span class="line">  fonts:</span><br><span class="line">    - asset: fonts/devio.ttf</span><br></pre></td></tr></table></figure><p>接下来就可以使用了：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">child: <span class="keyword">new</span> Icon(<span class="keyword">new</span> IconData(<span class="number">0xf5566</span>,fontFamily: <span class="string">&quot;devio&quot;</span>),size: <span class="number">100.0</span>,color: Colors.blueAccent,)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter - 常用组件</title>
      <link href="/2020/02/05/flutter/Flutter%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/"/>
      <url>/2020/02/05/flutter/Flutter%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>一切皆组件。Flutter所有的元素都是由组件组成。比如一个布局元素、一个动画、一个装饰效果等。</p><span id="more"></span><h2 id="Container-容器组件"><a href="#Container-容器组件" class="headerlink" title="Container(容器组件)"></a>Container(容器组件)</h2><p><strong><code>Container</code><strong>包含</strong><em>一个</em></strong><code>子widget</code>，自身具备<code>alignment</code>、<code>padding</code>等属性，方便布局过程中摆放<code>child</code></p><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><table><thead><tr><th align="left">属性名</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">key</td><td align="left">key</td><td align="left">Container唯一标识符，用于查找更新</td></tr><tr><td align="left">alignment</td><td align="left">AlignmentGeometry</td><td align="left">控制child的对齐方式，如果Container或者Container的父节点尺寸大于child的尺寸，该属性设置会起作用，有很多种对齐方式</td></tr><tr><td align="left">padding</td><td align="left">EdgeInsetsGeometry</td><td align="left">Decoration内部的空白区，如果有child，child位于padding内部</td></tr><tr><td align="left">color</td><td align="left">Color</td><td align="left">用来设置Container背景色，如果foregroudDecoration设置的话，可能会覆盖color效果</td></tr><tr><td align="left">decoration</td><td align="left">Decoration</td><td align="left">绘制在child后面的修饰，设置了Decoration的话，就不能设置color属性，否则会报错，此时应该在Decoration中进行颜色的设置</td></tr><tr><td align="left">foregroundDecoration</td><td align="left">Decoration</td><td align="left">绘制在child前面的装饰</td></tr><tr><td align="left">width</td><td align="left">double</td><td align="left">Container的宽度，设置为double.infinity可以强制在宽度上撑满，不设置，则根据child和父节点两者一起布局</td></tr><tr><td align="left">height</td><td align="left">double</td><td align="left">Container的高度，设置为double.infinity可以强制在高度上撑满</td></tr><tr><td align="left">constraints</td><td align="left">BoxConstraints</td><td align="left">添加到child上额外的约束条件</td></tr><tr><td align="left">margin</td><td align="left">EdgeInsetsGeometry</td><td align="left">围绕在Decoration和child之外的空白区域，不属于内容区域</td></tr><tr><td align="left">transform</td><td align="left">Matrix4</td><td align="left">设置Container的变换矩阵，类型为Matrix4</td></tr><tr><td align="left">child</td><td align="left">Widget</td><td align="left">Container中的内容Widget</td></tr></tbody></table><blockquote><p>padding与margin的不同之处：padding是包含在Content内，而margin是外部边界。设置点击事件的话，padding区域会响应，而margin区域不会响应。</p></blockquote><h2 id="Text-文本"><a href="#Text-文本" class="headerlink" title="Text(文本)"></a>Text(文本)</h2><p>文本组件Text负责显示文本和定义显示样式。</p><h3 id="常用属性-1"><a href="#常用属性-1" class="headerlink" title="常用属性"></a>常用属性</h3><table><thead><tr><th align="left">属性名</th><th align="left">类型</th><th align="left">默认值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">data</td><td align="left">String</td><td align="left"></td><td align="left">数据为要显示的文本</td></tr><tr><td align="left">maxLines</td><td align="left">int</td><td align="left">0</td><td align="left">文本显示的最大行数</td></tr><tr><td align="left">style</td><td align="left">TextStyle</td><td align="left">null</td><td align="left">文本样式，可定义文本的字体大小、颜色、粗细等</td></tr><tr><td align="left">textAlign</td><td align="left">TextAlign</td><td align="left">TextAlign.center</td><td align="left">文本水平方向对齐方式，取值右center、end、justify、left、right、start、values</td></tr><tr><td align="left">textDirection</td><td align="left">TextDirection</td><td align="left">TextDirection.ltr</td><td align="left">有些文本书写方向从左到右，如英语、中文，有些则是从右到左，比如乌尔都语。</br>从左到右使用TextDirection.ltr</br>从右到左使用TextDirection.rtl</td></tr><tr><td align="left">textScaleFactor</td><td align="left">double</td><td align="left">1.0</td><td align="left">字体缩放系数，比如设置为1.5，那么字体会放大1.5倍</td></tr><tr><td align="left">textSpan</td><td align="left">TextSpan</td><td align="left">null</td><td align="left">文本块，TextSpan里可以包含文本内容及样式</td></tr></tbody></table><h2 id="RichText-富文本"><a href="#RichText-富文本" class="headerlink" title="RichText(富文本)"></a>RichText(富文本)</h2><p>富文本组件RichText使用多个不同风格的widget显示文本，要显示的文本使用TextSpan对象树来描述，每个对象都有一个用于该子树的关联样式。文本可能多行，也可能显示在同一行，取决于布局约束。</p><h3 id="常用属性-2"><a href="#常用属性-2" class="headerlink" title="常用属性"></a>常用属性</h3><table><thead><tr><th align="left">属性名</th><th align="left">类型</th><th align="left">默认值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">text</td><td align="left">TextSpan</td><td align="left">-</td><td align="left">要显示的的文本</td></tr><tr><td align="left">textAlign</td><td align="left">TextAlign</td><td align="left">TextAlign.start</td><td align="left">文本水平方向对齐方式，取值右center、end、justify、left、right、start、values</td></tr><tr><td align="left">textDirection</td><td align="left">TextDirection</td><td align="left">TextDirection.ltr</td><td align="left">有些文本书写方向从左到右，如英语、中文，有些则是从右到左，比如乌尔都语。</br>从左到右使用TextDirection.ltr</br>从右到左使用TextDirection.rtl</td></tr><tr><td align="left">softWrap</td><td align="left">bool</td><td align="left">true</td><td align="left">是否自动换行</td></tr><tr><td align="left">overflow</td><td align="left">TextOverflow</td><td align="left">TextOverflow.clip</td><td align="left">内容超出文本范围处理方式，默认截断处理</td></tr><tr><td align="left">textScaleFactor</td><td align="left">double</td><td align="left">1.0</td><td align="left">文本缩放比例，默认100%比例显示</td></tr><tr><td align="left">maxLines</td><td align="left">int</td><td align="left">-</td><td align="left">最大显示行数</td></tr></tbody></table><h2 id="Image-图片组件"><a href="#Image-图片组件" class="headerlink" title="Image(图片组件)"></a>Image(图片组件)</h2><p><a href="https://rencheng.cc/2020/02/10/flutter/Flutter%E5%9B%BE%E7%89%87/">详细介绍</a><br>图片组件Image显示图像的组件，有多种构造函数：</p><ul><li><code>new Image</code>：从ImageProvider获取图像</li><li><code>new Image.asset</code>：加载资源图片</li><li><code>new Image.file</code>：加载本地图片文件</li><li><code>new Image.network</code>：加载网络图片</li><li><code>new Image.memory</code>：加载Uint8List资源图片</li></ul><h3 id="常用属性-3"><a href="#常用属性-3" class="headerlink" title="常用属性"></a>常用属性</h3><table><thead><tr><th align="left">属性名</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">image</td><td align="left">ImageProvider</td><td align="left">抽象类，需要自己实现获取图片数据的操作</td></tr><tr><td align="left">width&#x2F;height</td><td align="left">double</td><td align="left">Image显示区域的宽度和高度设置，这里需要把Image和图片两个区分开。图片本身有大小，Image Widget是图片的容器，本身也有大小。宽度和高度的配置经常和fit属性搭配</td></tr><tr><td align="left">fit</td><td align="left">BoxFit</td><td align="left">图片填充模式，具体取值见 BoxFit取值表</td></tr><tr><td align="left">color</td><td align="left">Color</td><td align="left">图片颜色</td></tr><tr><td align="left">colorBlendMode</td><td align="left">BlendMode</td><td align="left">在对图片进行手动处理的时候，可能用到图层混合，如改变图片颜色，此属性可以对颜色进行混合处理，有多种模式</td></tr><tr><td align="left">alignment</td><td align="left">Alignment</td><td align="left">控制图片的摆放位置，比如图片放置在右下角则为Alignment.bottomRight</td></tr><tr><td align="left">repeat</td><td align="left">ImageRepeat</td><td align="left">此属性可以设置图片的重复模式。moRepeat为不重复，Repeat为x和y方向重复，repeatX为x方向重复，repeatY为y方向重复</td></tr><tr><td align="left">centerSlice</td><td align="left">Rect</td><td align="left">当图片需要被拉伸显示时，centerSlice定义的矩形区域会被拉伸，可以理解为我们在图片内部定义9个点用作拉伸，9个点为”上”,”下”,”左”,”右”,”上中”,”下中”,”左中”,”右中”,”正中”</td></tr><tr><td align="left">matchTextDirection</td><td align="left">bool</td><td align="left">matchTextDirection与Derection配合使用。TextDirectio有两个值分别为：TextDirection.ltr从左到右展示图片，TextDirection.rtl为从右到左展示图片</td></tr><tr><td align="left">gaplessPlayback</td><td align="left">bool</td><td align="left">当ImageProvider发生变化后，重新加载图片的过程中，原图片的展示是否保留。值为true则保留，值为false则不保留，直接等待下一张图片加载</td></tr></tbody></table><h3 id="BoxFit取值及描述"><a href="#BoxFit取值及描述" class="headerlink" title="BoxFit取值及描述"></a>BoxFit取值及描述</h3><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">BoxFit.fill</td><td align="left">全图显示，显示可能拉伸，充满</td></tr><tr><td align="left">BoxFit.contain</td><td align="left">全图显示，显示原比例，不需充满</td></tr><tr><td align="left">BoxFit.cover</td><td align="left">显示可能拉伸，可能裁剪，充满</td></tr><tr><td align="left">BoxFit.fitWidth</td><td align="left">显示可能拉伸，可能裁剪，宽度充满</td></tr><tr><td align="left">BoxFit.fitHeight</td><td align="left">显示可能拉伸，可能裁剪，高度充满</td></tr><tr><td align="left">BoxFit.none</td><td align="left">原始大小</td></tr><tr><td align="left">BoxFit.scaleDown</td><td align="left">效果和BoxFit.contain差不多，但是该属性不允许显示超过原图大小(可小不可大)</td></tr></tbody></table><h2 id="Icon-图标"><a href="#Icon-图标" class="headerlink" title="Icon(图标)"></a>Icon(图标)</h2><p>Flutter中，可以像web开发一样使用iconfont，iconfont即<code>字体图标</code>，它是将图标做成字体文件，然后通过指定不同的字符而显示不同的图片。</p><p><strong>在Flutter开发中，iconfont和图片相比有如下优势：</strong></p><ol><li>体积小：可以减小安装包大小。</li><li>矢量的：iconfont 都是矢量图标，放大不会影响其清晰度。</li><li>可以应用文本样式：可以像文本一样改变字体图标的颜色、大小对齐等。</li><li>可以通过 TextSpan 和文本混用。</li></ol><h3 id="常用属性-4"><a href="#常用属性-4" class="headerlink" title="常用属性"></a>常用属性</h3><table><thead><tr><th align="left">属性名</th><th align="left">类型</th><th align="left">默认值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">icon</td><td align="left">IconData</td><td align="left">null</td><td align="left">展示的具体图标，可使用Icons图标列表中的任意一个图标即可，如Icons.phone表示一个电话的图标</td></tr><tr><td align="left">color</td><td align="left">Color</td><td align="left">null</td><td align="left">图标的颜色</td></tr><tr><td align="left">style</td><td align="left">TextStyle</td><td align="left">null</td><td align="left">文本样式，可定义文本的字体大小、颜色、粗细等</td></tr><tr><td align="left">size</td><td align="left">Double</td><td align="left">24.0</td><td align="left">图标的大小，注意需要带上小数位</td></tr><tr><td align="left">textDirection</td><td align="left">TextDirection</td><td align="left">TextDirection.ltr</td><td align="left">Icon组件里也可以添加文本内容。有些文本书写的方向是从左到右，有些则是从右到左。</br>从左到右使用TextDirection.ltr</br>从右到左使用TextDirection.rtl</td></tr></tbody></table><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><h3 id="IconButton（图标按钮）"><a href="#IconButton（图标按钮）" class="headerlink" title="IconButton（图标按钮）"></a>IconButton（图标按钮）</h3><p>图标按钮组件IconButton是基于<code>Meterial Design</code>风格的组件，可以响应按下的事件，并且按下时带水波纹效果。如果它的<code>onPressed</code>回调函数为<code>null</code>，那么这个按钮处于禁用状态，并且不可按下。</p><h4 id="常用属性-5"><a href="#常用属性-5" class="headerlink" title="常用属性"></a>常用属性</h4><table><thead><tr><th align="left">属性名</th><th align="left">类型</th><th align="left">默认值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">alignment</td><td align="left">AlignmentGeometry</td><td align="left">Alignment.center</td><td align="left">定义IconButton的Icon对齐方式，默认为居中。Alignment可以设置x，y的偏移量</td></tr><tr><td align="left">icon</td><td align="left">Widget</td><td align="left">null</td><td align="left">展示的具体图标，可以使用Icons图标列表中任意一个图标即可，如Icons.phone表示一个电话图标</td></tr><tr><td align="left">color</td><td align="left">Color</td><td align="left">null</td><td align="left">图标组件的颜色</td></tr><tr><td align="left">disabledColor</td><td align="left">Color</td><td align="left">ThemeData.disabledColor</td><td align="left">图标组件禁用状态的颜色，默认为主题里的禁用颜色，也可以设置为其他颜色</td></tr><tr><td align="left">iconSize</td><td align="left">double</td><td align="left">24.0</td><td align="left">图标的大小，注意需要带上小数点</td></tr><tr><td align="left">onPressed</td><td align="left">VoidCallback</td><td align="left">null</td><td align="left">当按钮按下时会触发此回调事件</td></tr><tr><td align="left">tooltip</td><td align="left">String</td><td align="left">“”</td><td align="left">当按钮长按下时的提示语句</td></tr></tbody></table><h3 id="RaisedButton-凸起按钮"><a href="#RaisedButton-凸起按钮" class="headerlink" title="RaisedButton(凸起按钮)"></a>RaisedButton(凸起按钮)</h3><p>RaisedButton是<code>Material Design</code>中的button，一个凸起的材质矩形按钮，它可以响应按下事件，并且按下时会带一个触摸效果。</p><h3 id="FlatButton-扁平化的按钮"><a href="#FlatButton-扁平化的按钮" class="headerlink" title="FlatButton(扁平化的按钮)"></a>FlatButton(扁平化的按钮)</h3><h3 id="OutlineButton-外边框的按钮"><a href="#OutlineButton-外边框的按钮" class="headerlink" title="OutlineButton(外边框的按钮)"></a>OutlineButton(外边框的按钮)</h3><h4 id="常用属性-6"><a href="#常用属性-6" class="headerlink" title="常用属性"></a>常用属性</h4><table><thead><tr><th align="left">属性名</th><th align="left">类型</th><th align="left">默认值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">color</td><td align="left">Color</td><td align="left">null</td><td align="left">组件的颜色</td></tr><tr><td align="left">disabledColor</td><td align="left">Color</td><td align="left">ThemeData.disabledColor</td><td align="left">组件禁用状态的颜色，默认为主题里的禁用颜色，也可以设置为其他颜色</td></tr><tr><td align="left">onPressed</td><td align="left">VoidCallback</td><td align="left">null</td><td align="left">当按钮按下时会触发此回调事件</td></tr><tr><td align="left">child</td><td align="left">Widget</td><td align="left">-</td><td align="left">按钮的child通常为一个Text文本组件，用来显示按钮的文本</td></tr><tr><td align="left">enable</td><td align="left">bool</td><td align="left">true</td><td align="left">按钮是否为禁用状态</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter - 环境配置</title>
      <link href="/2020/02/01/flutter/Flutter%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/02/01/flutter/Flutter%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>主要记录一下Mac上安装的步骤<br>这里的步骤和官方的差不多，直接参考<a href="https://flutter.dev/">官网</a></p><span id="more"></span><h2 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title="安装Flutter"></a>安装Flutter</h2><h3 id="下载FlutterSDK"><a href="#下载FlutterSDK" class="headerlink" title="下载FlutterSDK"></a>下载FlutterSDK</h3><ol><li>进入<a href="https://flutter.dev/docs/get-started/install">官网下载页面</a></li><li>选择操作系统</li><li>下载最新版本压缩包</li><li>解压压缩包</li><li>拷贝到家目录下Library文件夹下，文件夹名称更改为Flutter（仅供参考）</li></ol><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ol><li><p>配置镜像</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Flutter</span></span><br><span class="line"><span class="built_in">export</span> PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure><blockquote><p>来到你对应Shell的配置文件进行配置。<br> 如果你使用默认的bash那么配置<code>~/.bash_profile</code><br> 如果你使用zsh (Mac新 系统默认是zsh)那么配置<code>~/.zshrc</code></p></blockquote></li><li><p>配置Flutter环境变量（将Flutter命令行工具的路径配置到Shell的配置文件中）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Flutter</span></span><br><span class="line"><span class="built_in">export</span> FLUTTER=~/Library/Flutter/bin $ <span class="built_in">export</span> PATH=<span class="variable">$FLUTTER</span>:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#􏲒 重载配置文件</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></li><li><p>检查Flutter环境</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p> 出现如下结果就完成了环境配置<br> <img src="https://cdn.rencheng.cc/blog/3ta0l.jpg-thumb100"><br> 如果出现错误，请把下面Android环境安装完成</p></li></ol><h2 id="配置安卓环境"><a href="#配置安卓环境" class="headerlink" title="配置安卓环境"></a>配置安卓环境</h2><h3 id="安装Android-Studio"><a href="#安装Android-Studio" class="headerlink" title="安装Android Studio"></a>安装Android Studio</h3><p><a href="https://developer.android.google.cn/studio">下载安装</a><br><img src="https://cdn.rencheng.cc/blog/sg06f.jpg-thumb100"></p><h3 id="配置SDK"><a href="#配置SDK" class="headerlink" title="配置SDK"></a>配置SDK</h3><p>网上搜索吧</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p><code>Flutter</code><br>安装后重启</p><h3 id="修改项目下的-build-gradle文件"><a href="#修改项目下的-build-gradle文件" class="headerlink" title="修改项目下的 build.gradle文件"></a>修改项目下的 build.gradle文件</h3><ul><li>文件路径：项目 –&gt; Android –&gt;build.gradle 文件</li><li>修改内容：找到buildscript 和allprojects 将里面的：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">google()</span><br><span class="line">jcenter()</span><br></pre></td></tr></table></figure>修改为阿里云镜像<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">maven &#123; url &#x27;https://maven.aliyun.com/repository/google&#x27; &#125;</span><br><span class="line">maven &#123; url &#x27;https://maven.aliyun.com/repository/jcenter&#x27; &#125;</span><br><span class="line">maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27; &#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.rencheng.cc/blog/imkyg.png"></li></ul><h3 id="修改Flutter安装目录中的flutter-gradle文件"><a href="#修改Flutter安装目录中的flutter-gradle文件" class="headerlink" title="修改Flutter安装目录中的flutter.gradle文件"></a>修改Flutter安装目录中的flutter.gradle文件</h3><ul><li>文件路径：flutter&#x2F;packages&#x2F;flutter_tools&#x2F;gradle&#x2F;flutter.gradle</li><li>修改内容（加入阿里镜像）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        // google()</span><br><span class="line">        // jcenter()</span><br><span class="line">        maven &#123; url &#x27;https://maven.aliyun.com/repository/google&#x27; &#125;</span><br><span class="line">    maven &#123; url &#x27;https://maven.aliyun.com/repository/jcenter&#x27; &#125;</span><br><span class="line">    maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &#x27;com.android.tools.build:gradle:3.5.0&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table><thead><tr><th align="left">快捷键</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">Ctrl + option + O</td><td align="left">删除未使用的import</td></tr><tr><td align="left">option + Enter</td><td align="left">自动import未导入的文件</td></tr><tr><td align="left">Shift + F6</td><td align="left">重命名（如果是Touch Bar就是Shift + Rename…）</td></tr><tr><td align="left">CMD + -&#x2F;+</td><td align="left">折起&#x2F;展开代码块</td></tr><tr><td align="left">CMD + .</td><td align="left">折起&#x2F;展开选中代码</td></tr><tr><td align="left">CMD + ,</td><td align="left">进入设置页面</td></tr><tr><td align="left">CMD + [</td><td align="left">光标回到上一次编辑的位置</td></tr><tr><td align="left">CMD + ]</td><td align="left">光标回到下一次编辑的位置</td></tr><tr><td align="left">CMD + L</td><td align="left">定位某一行，甚至某一个字符</td></tr><tr><td align="left">CMD + &#x2F;</td><td align="left">注释</td></tr><tr><td align="left">CMD + Y</td><td align="left">查看选中类的属性</td></tr><tr><td align="left">CMD + O</td><td align="left">快速打开（一般用于快速打开某个文件）</td></tr><tr><td align="left">option + Enter</td><td align="left">扩展功能(很重要！)</td></tr><tr><td align="left">Option + up(↑)</td><td align="left">选中上一层代码（比如选中当前光标的单词，选中当前小部件的所有代码，自己试~）</td></tr><tr><td align="left">CMD + option + M</td><td align="left">将选中代码提取到某个方法中</td></tr><tr><td align="left">CMD + option + L</td><td align="left">格式化代码</td></tr><tr><td align="left">CMD + Shift + -&#x2F;+</td><td align="left">折起&#x2F;展开所有代码块</td></tr><tr><td align="left">Option + Shift + Up&#x2F;Down</td><td align="left">上下移动行</td></tr><tr><td align="left">Command + Shift + Up&#x2F;Down</td><td align="left">上下移动方法</td></tr></tbody></table><p><strong>查看小部件源码</strong></p><ul><li>CMD + Click(鼠标左键)</li><li>CMD + B</li><li>CMD + Down（小键盘↓）</li><li>F4（非Touch Bar键盘）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter - 从入门到放弃</title>
      <link href="/2020/01/20/flutter/Flutter%E5%AD%A6%E4%B9%A0%E9%A1%B9%E7%9B%AE/"/>
      <url>/2020/01/20/flutter/Flutter%E5%AD%A6%E4%B9%A0%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>列出一些Flutter项目的案例，在你考虑学习之前，先看看里面博主对Flutter的理解；<br>😌。。。，还不是最终的解决方案，但它是目前最优的解决方案；当然也要结合各团队的情况</p><span id="more"></span><h2 id="尝试Flutter的理由"><a href="#尝试Flutter的理由" class="headerlink" title="尝试Flutter的理由"></a>尝试Flutter的理由</h2><ul><li><strong>Dart 语言</strong><br>Flutter 是基于 Dart 设计的，Dart 语言从一开始就被设计为构建客户端应用程序的绝佳工具，并针对 UI 开发工作做了调整和优化。<br>Dart 有着干净且极为强大的语法，加之易于维护的特性，促进了强大的应用程序架构和设计。它与其他流行语言（例如 C#、Java 和 TypeScript）相似，这意味着有相关经验的开发人员很容易快速上手并开始使用 Dart。</li></ul><ol start="2"><li><strong>开发人员的广泛采用</strong><br>在短短的一年时间里，Flutter 在 GitHub 和 StackOverflow 上都取得了比 React Native（之前最流行的框架）更高的流行度。对你的应用程序来说，这意味着有更多的资源可供学习，可以找到更多熟练的开发人员来开发你的应用。此外，Flutter 技术本身的迭代速度更快。</li><li><strong>它特别快</strong><br>Flutter 应用程序可编译为原生二进制文件，这些文件依赖于 C&#x2F;C++ 内置的图形和渲染引擎，因此可生成非常快速且性能出众的应用程序。Flutter 应用程序能够在大多数设备上实现稳定的 60fps 输出，并在支持高刷新率的设备上实现令人难以置信的 120fps 帧率。<br>许多开发人员已经注意到，Flutter 的性能表现与其他跨平台框架相比有了极大的提升，这也是移动应用开发人员迅速而广泛地采用这一技术的驱动力。确实，在性能表现和流畅的渲染方面，真正的原生构建应用是很难被击败的，但在跨平台框架领域，Flutter 在这些指标的竞争中具有明显的优势。</li><li><strong>它相对易学</strong><br>除了性能表现之外，Flutter 之所以获得如此广泛的使用率，另一大因素就是它提供的出色文档和可供参考的大批高质量示例。对于有兴趣学习新的框架、工具包或语言的开发人员来说，这一切都让 Flutter 与众不同。对于经验丰富的程序员而言这一点尤其重要，因为他们更有可能发现语言或工具包本身的设计问题。<br>Flutter 因其清晰的文档资料以及由新手和专家组成的支持社区而倍受赞誉，社区成员经常渴望分享他们的经验，并提供设计出色、开发模式出众的可靠实践示例，为他人带去福音。一般来说，易学易用，面向大众的技术往往没有那么重的精英主义氛围，所以对新人也更加友好。</li><li><strong>它的设计精良</strong><br>Flutter 是基于出色的语言 Dart 和快速的高性能渲染引擎 Skia 从头开始设计出来的。这样的路线诞生了一个高水平的框架，能鼓励不同技能水平的开发人员基于良好的设计模式和最佳实践来构建应用，而不会因为标准冲突或糟糕的语言实践导致内部技术债。拥有多年经验，能熟练跨各种设备构建应用程序的开发人员开始上手 Flutter 几分钟时间，就能意识到 Flutter 带来的明显优势，新手也不太容易陷入困境，因为互联网上有很多很棒的示例可以用来学习最佳实践。</li></ol><h2 id="学习项目"><a href="#学习项目" class="headerlink" title="学习项目"></a>学习项目</h2><p><a href="https://github.com/flutter/flutter/tree/master/examples">官方示例</a><br><a href="https://github.com/flutter/samples">官方示例</a></p><p><a href="https://github.com/nisrulz/flutter-examples">基础教程</a></p><blockquote><p>项目都是独立的，可单独运行</p></blockquote><p><a href="https://github.com/iampawan/FlutterExampleApps">收集Flutter实例的App</a></p><h2 id="快速开发"><a href="#快速开发" class="headerlink" title="快速开发"></a>快速开发</h2><p><a href="https://app.quicktype.io/">jsontomodel</a></p><h2 id="Flutter-的技术栈"><a href="#Flutter-的技术栈" class="headerlink" title="Flutter 的技术栈"></a>Flutter 的技术栈</h2><p><img src="https://cdn.rencheng.cc/blog/hve50.png"></p><h2 id="Flutter-优势"><a href="#Flutter-优势" class="headerlink" title="Flutter 优势"></a>Flutter 优势</h2><ul><li>跨平台，性能强大</li><li>热重载功能</li><li>免费，开源</li><li>高度可定制</li></ul><h2 id="Flutter-缺点"><a href="#Flutter-缺点" class="headerlink" title="Flutter 缺点"></a>Flutter 缺点</h2><ul><li>双端熟悉</li><li>Dart编程；声明式语法上会发生嵌套地狱</li><li>包体积增大</li></ul><h2 id="Flutter-感受"><a href="#Flutter-感受" class="headerlink" title="Flutter 感受"></a>Flutter 感受</h2><p>作为iOS开发工程师，在学习Flutter过程中，要对Android系统开发也要有些了解，要不然处处是坑；如果想开发一个项目，至少需要iOS和Android两个高级工程师来做，因为Flutter毕竟是跨平台UI的解决方案，它不是原生，在处理底层事件和高性能需求的时候离不开原生，需要制定通讯协议和解决方案；</p><h2 id="对Flutter未来的看法"><a href="#对Flutter未来的看法" class="headerlink" title="对Flutter未来的看法"></a>对Flutter未来的看法</h2><p>个人觉得全量开发的可能性非常非常小，苹果也不允许的，而且目前很多公司的产品改造成Flutter的成本太大，ROI不高，不过flutter确实越来越完善了，如果swiftUI没发力，原生开发肯定会被严重蚕食</p><blockquote><p>你愿意在下一个项目中尝试 Flutter 吗？</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter - 架构</title>
      <link href="/2020/01/16/flutter/Flutter%E6%9E%B6%E6%9E%84/"/>
      <url>/2020/01/16/flutter/Flutter%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>Flutter 架构图<br><img src="https://cdn.rencheng.cc/blog/whz3d.png"></p><span id="more"></span><h2 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h2><p><img src="https://cdn.rencheng.cc/blog/oz4iy.png"></p><ul><li>高性能渲染引擎（Engine 层）是最核心的部分。Flutter不使用浏览器技术，也不使用Native的原生控件，它使用自己的渲染引擎来绘制widget。<ul><li>在Android平台，Flutter引擎的C&#x2F;C++代码是由NDK编译</li><li>在iOS平台，则是由LLVM编译</li><li>两个平台的Dart代码都是AOT编译为本地代码</li><li>Flutter应用程序使用本机指令集运行。</li><li>Flutter正是是通过使用相同的渲染器、框架和一组widget，来同时构建iOS和Android应用，而无需维护两套独立的代码库。</li></ul></li><li><code>Foundation</code>层由<code>dart:ui</code>实现。 <code>dart:ui</code>提供了<code>Framework</code>能够运行的最基础功能，比如绘图，界面刷新，触屏，鼠标等事件的原始信息等。</li><li><code>Rendering</code>层由几个子模块组成：<code>Animation</code>, <code>Painting</code>, <code>Gestures</code>. 在这一层，Flutter提供<code>RenderObject</code>，实现完整的布局，绘制功能。</li><li><code>Widgets</code>层是开发者最常接触到的一层。 <code>Widget</code>是对<code>RenderObject</code>的封装。在<code>Widget</code>层，Flutter实现了响应式开发框架。</li><li><code>Material</code>,<code>Cupertino</code>层: 在这一层，Flutter提供了一系列的<code>Widget</code>，其中<code>Material Widget</code>实现了<code>Material Design</code>。<code>Cupertino</code>提供了一系列的<code>iOS-Style</code>的控件。</li></ul><h2 id="图形管道"><a href="#图形管道" class="headerlink" title="图形管道"></a>图形管道</h2><p><img src="https://cdn.rencheng.cc/blog/f3cdp.png"></p><ol><li>GPU的Vsync信号同步到UI线程</li><li>UI线程使用Dart来构建抽象的视图结构</li><li>视图结构在GPU线程中进行图层合成</li><li>合成后的视图数据提供给Skia图形引擎处理成GPU数据</li><li>数据再通过OpenGL或Vulkan提供给GPU进行渲染</li></ol><h2 id="Widget生命周期"><a href="#Widget生命周期" class="headerlink" title="Widget生命周期"></a>Widget生命周期</h2><p><img src="https://cdn.rencheng.cc/blog/tc801.png"></p><h2 id="State生命周期"><a href="#State生命周期" class="headerlink" title="State生命周期"></a>State<T>生命周期</h2><p><img src="https://cdn.rencheng.cc/blog/z68lu.png"></p><blockquote><p>转载自<a href="https://docs.google.com/presentation/d/1cw7A4HbvM_Abv320rVgPVGiUP2msVs7tfGbkgdrTy0I/edit#slide=id.gbb3c3233b_0_187">Google官方文档</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特殊的集合结构</title>
      <link href="/2020/01/15/ios/objc/%E7%89%B9%E6%AE%8A%E7%9A%84%E9%9B%86%E5%90%88%E7%BB%93%E6%9E%84/"/>
      <url>/2020/01/15/ios/objc/%E7%89%B9%E6%AE%8A%E7%9A%84%E9%9B%86%E5%90%88%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>平时开发中，大部分使用<code>NSSet</code>和<code>NSMutableSet</code>。下面介绍个特殊的。</p><ul><li>NSHashTable</li><li>NXHashTable（objc源码）</li></ul><span id="more"></span><h2 id="NSHashTable"><a href="#NSHashTable" class="headerlink" title="NSHashTable"></a>NSHashTable</h2><p><code>NSHashTable</code>是更广泛意义的<code>NSSet</code>，区别于<code>NSSet/NSMutableSet</code>，<code>NSHashTable</code>有如下特性：</p><ul><li>NSHashTable 是可变的；</li><li><strong>NSHashTable 可以持有 weak 类型的成员变量；</strong></li><li>NSHashTable 可以在添加成员变量的时候复制成员；</li><li>NSHashTable 可以随意的存储指针并且利用指针的唯一性来进行 hash 同一性检查（检查成员变量是否有重复）和对比操作（equal）；</li></ul><blockquote><p>参考： <a href="https://nshipster.com/nshashtable-and-nsmaptable/">https://nshipster.com/nshashtable-and-nsmaptable/</a></p></blockquote><blockquote><p>Hash冲突解决方案：拉链法</p></blockquote><p>使用方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *str = <span class="string">@&quot;10&quot;</span>;</span><br><span class="line"><span class="built_in">NSHashTable</span> *table = [[<span class="built_in">NSHashTable</span> alloc] initWithOptions:<span class="built_in">NSHashTableCopyIn</span> capacity:<span class="number">0</span>];</span><br><span class="line">[table addObject:str];</span><br><span class="line">[table removeObject:str];</span><br></pre></td></tr></table></figure><p>NSHashTableOptions介绍（源码中是使用静态常量做关联）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">    <span class="comment">// 默认行为，强引用集合中的对象，等同于NSMutableSet</span></span><br><span class="line">    <span class="built_in">NSHashTableStrongMemory</span>             = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 在将对象添加到集合之前，会拷贝对象</span></span><br><span class="line">    <span class="built_in">NSHashTableCopyIn</span>                   = <span class="built_in">NSPointerFunctionsCopyIn</span>,</span><br><span class="line">    <span class="comment">// 使用移位指针(shifted pointer)来做hash检测和确定两个对象是否相等；</span></span><br><span class="line">    <span class="comment">// 同时使用description方法来做描述字符串</span></span><br><span class="line">    <span class="built_in">NSHashTableObjectPointerPersonality</span> = <span class="built_in">NSPointerFunctionsObjectPointerPersonality</span>,</span><br><span class="line">    <span class="comment">// 弱引用集合中的对象，且在对象被释放后，会被正确的移除。</span></span><br><span class="line">    <span class="built_in">NSHashTableWeakMemory</span>               = <span class="built_in">NSPointerFunctionsWeakMemory</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NSUInteger</span> <span class="built_in">NSHashTableOptions</span>;</span><br></pre></td></tr></table></figure><h2 id="NXHashTable"><a href="#NXHashTable" class="headerlink" title="NXHashTable"></a>NXHashTable</h2><p>在objc源码中，找到了关于NSHashTable的类似实现。可以参考下</p><p>NXHashTable存储结构（精简过）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">// 附属实体</span></span><br><span class="line">    <span class="type">const</span> NXHashTablePrototype*prototype;</span><br><span class="line">    <span class="comment">// 真实的长度（存储了多少有效数据）</span></span><br><span class="line">    <span class="type">unsigned</span>  count;</span><br><span class="line">    <span class="comment">// buckets实际所占用的空间大小（比理论高，2^n，不够会扩容）</span></span><br><span class="line">    <span class="type">unsigned</span>  nbBuckets;</span><br><span class="line">    <span class="comment">// 数据[HashBucket?]</span></span><br><span class="line">    <span class="type">void</span> *buckets;</span><br><span class="line">    <span class="comment">// 信息</span></span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>     *info;</span><br><span class="line">&#125; NXHashTable;</span><br></pre></td></tr></table></figure><p>NXHashTablePrototype存储结构（精简过）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">// hash方法的函数指针</span></span><br><span class="line">    <span class="type">uintptr_t</span>(* hash)(<span class="type">const</span> <span class="type">void</span> * info,</span><br><span class="line">                                  <span class="type">const</span> <span class="type">void</span> * data);</span><br><span class="line">    <span class="comment">// isEqual方法的函数指针</span></span><br><span class="line">    <span class="type">int</span>(* isEqual)(<span class="type">const</span> <span class="type">void</span> * info, <span class="type">const</span> <span class="type">void</span> * data1, <span class="type">const</span> <span class="type">void</span> * data2);</span><br><span class="line">    <span class="comment">// free方法的函数指针</span></span><br><span class="line">    <span class="type">void</span>(* <span class="built_in">free</span>)(<span class="type">const</span> <span class="type">void</span> * info, <span class="type">void</span> * data);</span><br><span class="line">    <span class="comment">// 保留字段</span></span><br><span class="line">    <span class="type">int</span>style;</span><br><span class="line">&#125; NXHashTablePrototype;</span><br></pre></td></tr></table></figure><p>HashBucket存储结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    <span class="comment">// 存储的数据</span></span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>*one;</span><br><span class="line">    <span class="comment">// 存储数据的集合[x, x]，新数据在前面</span></span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>**many;</span><br><span class="line">&#125; oneOrMany;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> count; </span><br><span class="line">    <span class="comment">// 如果count == 1，则取elements.one</span></span><br><span class="line">    <span class="comment">// 如果count &gt;  1，则取elements.many</span></span><br><span class="line">    oneOrManyelements;</span><br><span class="line">&#125; HashBucket;</span><br></pre></td></tr></table></figure><p>NXHashTable的构造器<code>NXCreateHashTable</code>和<code>NXCreateHashTableFromZone</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">NXHashTable *NXCreateHashTable (NXHashTablePrototype prototype, <span class="type">unsigned</span> capacity, <span class="keyword">const</span> <span class="type">void</span> *info) &#123;</span><br><span class="line">    <span class="keyword">return</span> NXCreateHashTableFromZone(prototype, capacity, info, DEFAULT_ZONE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NXHashTable *NXCreateHashTableFromZone (NXHashTablePrototype prototype, <span class="type">unsigned</span> capacity, <span class="keyword">const</span> <span class="type">void</span> *info, <span class="type">void</span> *z) &#123;</span><br><span class="line">    NXHashTable*table;</span><br><span class="line">    NXHashTablePrototype*proto;</span><br><span class="line">    </span><br><span class="line">    table = ALLOCTABLE(z);</span><br><span class="line">    <span class="keyword">if</span> (! prototypes) bootstrap ();</span><br><span class="line">    <span class="keyword">if</span> (! prototype.hash) prototype.hash = NXPtrHash;</span><br><span class="line">    <span class="keyword">if</span> (! prototype.isEqual) prototype.isEqual = NXPtrIsEqual;</span><br><span class="line">    <span class="keyword">if</span> (! prototype.free) prototype.free = NXNoEffectFree;</span><br><span class="line">    <span class="keyword">if</span> (prototype.style) &#123;</span><br><span class="line">_objc_inform (<span class="string">&quot;*** NXCreateHashTable: invalid style\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;;</span><br><span class="line">    proto = (NXHashTablePrototype *)NXHashGet (prototypes, &amp;prototype); </span><br><span class="line">    <span class="keyword">if</span> (! proto) &#123;</span><br><span class="line">proto</span><br><span class="line">            = (NXHashTablePrototype *) malloc(<span class="keyword">sizeof</span> (NXHashTablePrototype));</span><br><span class="line">bcopy ((<span class="keyword">const</span> <span class="type">char</span>*)&amp;prototype, (<span class="type">char</span>*)proto, <span class="keyword">sizeof</span> (NXHashTablePrototype));</span><br><span class="line">    (<span class="type">void</span>) NXHashInsert (prototypes, proto);</span><br><span class="line">proto = (NXHashTablePrototype *)NXHashGet (prototypes, &amp;prototype);</span><br><span class="line"><span class="keyword">if</span> (! proto) &#123;</span><br><span class="line">    _objc_inform (<span class="string">&quot;*** NXCreateHashTable: bug\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">    table-&gt;prototype = proto; table-&gt;count = <span class="number">0</span>; table-&gt;info = info;</span><br><span class="line">    table-&gt;nbBuckets = GOOD_CAPACITY(capacity);</span><br><span class="line">    table-&gt;buckets = ALLOCBUCKETS(z, table-&gt;nbBuckets);</span><br><span class="line">    <span class="keyword">return</span> table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过hash函数（data指针位运算得到的散列数）-&gt;取模（得到下标）-&gt; 加上头指针（得到数据的具体地址）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>BUCKETOF(table, data) (((HashBucket *)table-&gt;buckets)+((*table-&gt;prototype-&gt;hash)(table-&gt;info, data) % table-&gt;nbBuckets))</span></span><br><span class="line"><span class="comment">// 判断数据指针是否一致</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ISEQUAL(table, data1, data2) ((data1 == data2) || (*table-&gt;prototype-&gt;isEqual)(table-&gt;info, data1, data2))</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">NXHashGet</span> <span class="params">(NXHashTable *table, <span class="type">const</span> <span class="type">void</span> *data)</span> &#123;</span><br><span class="line">    HashBucket*bucket = BUCKETOF(table, data);</span><br><span class="line">    <span class="type">unsigned</span>j = bucket-&gt;count;</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>**pairs;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (! j) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (j == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ISEQUAL(table, data, bucket-&gt;elements.one)</span><br><span class="line">    ? (<span class="type">void</span> *) bucket-&gt;elements.one : <span class="literal">NULL</span>; </span><br><span class="line">&#125;;</span><br><span class="line">    pairs = bucket-&gt;elements.many;</span><br><span class="line">    <span class="comment">// 从列表中遍历寻找元素</span></span><br><span class="line">    <span class="keyword">while</span> (j--) &#123;</span><br><span class="line"><span class="comment">/* we don&#x27;t cache isEqual because lists are short */</span></span><br><span class="line">    <span class="keyword">if</span> (ISEQUAL(table, data, *pairs)) <span class="keyword">return</span> (<span class="type">void</span> *) *pairs; </span><br><span class="line">pairs ++;</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">NXHashInsert</span> <span class="params">(NXHashTable *table, <span class="type">const</span> <span class="type">void</span> *data)</span> &#123;</span><br><span class="line">    HashBucket*bucket = BUCKETOF(table, data);</span><br><span class="line">    <span class="type">unsigned</span>j = bucket-&gt;count;</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>**pairs;</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>**newt;</span><br><span class="line">    __unused <span class="type">void</span> *z = ZONE_FROM_PTR(table);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (! j) &#123;</span><br><span class="line">bucket-&gt;count++; bucket-&gt;elements.one = data; </span><br><span class="line">table-&gt;count++; </span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="keyword">if</span> (j == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ISEQUAL(table, data, bucket-&gt;elements.one)) &#123;</span><br><span class="line">       <span class="type">const</span> <span class="type">void</span>*old = bucket-&gt;elements.one;</span><br><span class="line">       bucket-&gt;elements.one = data;</span><br><span class="line">       <span class="keyword">return</span> (<span class="type">void</span> *) old;</span><br><span class="line">   &#125;;</span><br><span class="line">        <span class="comment">// 数据迁移one-&gt;many</span></span><br><span class="line">   newt = ALLOCPAIRS(z, <span class="number">2</span>);</span><br><span class="line">   newt[<span class="number">1</span>] = bucket-&gt;elements.one;</span><br><span class="line">   *newt = data;</span><br><span class="line">   bucket-&gt;count++; bucket-&gt;elements.many = newt; </span><br><span class="line">   table-&gt;count++; </span><br><span class="line">   <span class="comment">// 如果列表的实际长度大于物理长度，就扩容buckets</span></span><br><span class="line">   <span class="keyword">if</span> (table-&gt;count &gt; table-&gt;nbBuckets) _NXHashRehash (table);</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;;</span><br><span class="line">    pairs = bucket-&gt;elements.many;</span><br><span class="line">    <span class="comment">// 遍历先有的列表，如果数据已经存在，就返回</span></span><br><span class="line">    <span class="keyword">while</span> (j--) &#123;</span><br><span class="line"><span class="comment">/* we don&#x27;t cache isEqual because lists are short */</span></span><br><span class="line">    <span class="keyword">if</span> (ISEQUAL(table, data, *pairs)) &#123;</span><br><span class="line">       <span class="type">const</span> <span class="type">void</span>*old = *pairs;</span><br><span class="line">       *pairs = data;</span><br><span class="line">       <span class="keyword">return</span> (<span class="type">void</span> *) old;</span><br><span class="line">    &#125;;</span><br><span class="line">   pairs ++;</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="comment">/* 我们扩大这个buckets里面的many；并将新数据放在前面 */</span></span><br><span class="line">    newt = ALLOCPAIRS(z, bucket-&gt;count+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (bucket-&gt;count) bcopy ((<span class="type">const</span> <span class="type">char</span>*)bucket-&gt;elements.many, (<span class="type">char</span>*)(newt+<span class="number">1</span>), bucket-&gt;count * PTRSIZE);</span><br><span class="line">    *newt = data;</span><br><span class="line">    FREEPAIRS (bucket-&gt;elements.many);</span><br><span class="line">    bucket-&gt;count++; bucket-&gt;elements.many = newt; </span><br><span class="line">    table-&gt;count++; </span><br><span class="line">    <span class="keyword">if</span> (table-&gt;count &gt; table-&gt;nbBuckets) _NXHashRehash (table);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>扩容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思路：</span></span><br><span class="line"><span class="comment">// 将table的信息缓存到一个临时的table中</span></span><br><span class="line"><span class="comment">// 将table内的信息更新成最新</span></span><br><span class="line"><span class="comment">// 将table内的buckets数据仓重新分配大的内存</span></span><br><span class="line"><span class="comment">// 遍历将临时table中的数据依次再插入到新的buckets中</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MORE_CAPACITY(b) (b*2+1)</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> _NXHashRehash (NXHashTable *table) &#123;</span><br><span class="line">    _NXHashRehashToCapacity (table, MORE_CAPACITY(table-&gt;nbBuckets));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> _NXHashRehashToCapacity (NXHashTable *table, <span class="type">unsigned</span> newCapacity) &#123;</span><br><span class="line">    <span class="comment">/* Rehash: we create a pseudo table pointing really to the old guys,</span></span><br><span class="line"><span class="comment">    extend self, copy the old pairs, and free the pseudo table */</span></span><br><span class="line">    NXHashTable*old;</span><br><span class="line">    NXHashStatestate;</span><br><span class="line">    <span class="type">void</span>*aux;</span><br><span class="line">    __unused <span class="type">void</span> *z = ZONE_FROM_PTR(table);</span><br><span class="line">    </span><br><span class="line">    old = ALLOCTABLE(z);</span><br><span class="line">    old-&gt;prototype = table-&gt;prototype; old-&gt;count = table-&gt;count; </span><br><span class="line">    old-&gt;nbBuckets = table-&gt;nbBuckets; old-&gt;buckets = table-&gt;buckets;</span><br><span class="line">    table-&gt;nbBuckets = newCapacity;</span><br><span class="line">    table-&gt;count = <span class="number">0</span>; table-&gt;buckets = ALLOCBUCKETS(z, table-&gt;nbBuckets);</span><br><span class="line">    state = NXInitHashState (old);</span><br><span class="line">    <span class="keyword">while</span> (NXNextHashState (old, &amp;state, &amp;aux))</span><br><span class="line">(<span class="type">void</span>) NXHashInsert (table, aux);</span><br><span class="line">    freeBuckets (old, NO);</span><br><span class="line">    <span class="keyword">if</span> (old-&gt;count != table-&gt;count)</span><br><span class="line">_objc_inform(<span class="string">&quot;*** hashtable: count differs after rehashing; probably indicates a broken invariant: there are x and y such as isEqual(x, y) is TRUE but hash(x) != hash (y)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span> (old-&gt;buckets); </span><br><span class="line">    <span class="built_in">free</span> (old);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除某个元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">NXHashRemove</span> <span class="params">(NXHashTable *table, <span class="type">const</span> <span class="type">void</span> *data)</span> &#123;</span><br><span class="line">    HashBucket*bucket = BUCKETOF(table, data);</span><br><span class="line">    <span class="type">unsigned</span>j = bucket-&gt;count;</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>**pairs;</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>**newt;</span><br><span class="line">    __unused <span class="type">void</span> *z = ZONE_FROM_PTR(table);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (! j) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (j == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (! ISEQUAL(table, data, bucket-&gt;elements.one)) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">data = bucket-&gt;elements.one;</span><br><span class="line">table-&gt;count--; bucket-&gt;count--; bucket-&gt;elements.one = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">void</span> *) data;</span><br><span class="line">&#125;;</span><br><span class="line">    pairs = bucket-&gt;elements.many;</span><br><span class="line">    <span class="keyword">if</span> (j == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ISEQUAL(table, data, pairs[<span class="number">0</span>])) &#123;</span><br><span class="line">    bucket-&gt;elements.one = pairs[<span class="number">1</span>]; data = pairs[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ISEQUAL(table, data, pairs[<span class="number">1</span>])) &#123;</span><br><span class="line">    bucket-&gt;elements.one = pairs[<span class="number">0</span>]; data = pairs[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">FREEPAIRS (pairs);</span><br><span class="line">table-&gt;count--; bucket-&gt;count--;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">void</span> *) data;</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="keyword">while</span> (j--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ISEQUAL(table, data, *pairs)) &#123;</span><br><span class="line">    data = *pairs;</span><br><span class="line">    <span class="comment">/* we shrink this bucket */</span></span><br><span class="line">    newt = (bucket-&gt;count<span class="number">-1</span>) </span><br><span class="line">? ALLOCPAIRS(z, bucket-&gt;count<span class="number">-1</span>) : <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (bucket-&gt;count<span class="number">-1</span> != j)</span><br><span class="line">    bcopy ((<span class="type">const</span> <span class="type">char</span>*)bucket-&gt;elements.many, (<span class="type">char</span>*)newt, PTRSIZE*(bucket-&gt;count-j<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">if</span> (j)</span><br><span class="line">    bcopy ((<span class="type">const</span> <span class="type">char</span>*)(bucket-&gt;elements.many + bucket-&gt;count-j), (<span class="type">char</span>*)(newt+bucket-&gt;count-j<span class="number">-1</span>), PTRSIZE*j);</span><br><span class="line">    FREEPAIRS (bucket-&gt;elements.many);</span><br><span class="line">    table-&gt;count--; bucket-&gt;count--; bucket-&gt;elements.many = newt;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">void</span> *) data;</span><br><span class="line">    &#125;;</span><br><span class="line">pairs ++;</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神策SDK调研</title>
      <link href="/2020/01/13/search/%E7%A5%9E%E7%AD%96SDK%E8%B0%83%E7%A0%94/"/>
      <url>/2020/01/13/search/%E7%A5%9E%E7%AD%96SDK%E8%B0%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<h2 id="神策"><a href="#神策" class="headerlink" title="神策"></a>神策</h2><p><a href="https://manual.sensorsdata.cn/sa/latest/page-4751623.html">神策文档</a></p><p><a href="https://github.com/sensorsdata/sa-sdk-ios">开源代码</a></p><h2 id="基础参数"><a href="#基础参数" class="headerlink" title="基础参数"></a>基础参数</h2><p><a href="https://manual.sensorsdata.cn/sa/latest/page-1573610.html">神策文档</a></p><h2 id="标识用户"><a href="#标识用户" class="headerlink" title="标识用户"></a>标识用户</h2><p><a href="https://manual.sensorsdata.cn/sa/latest/page-1573777.html">神策文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术调研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建MacOS的U盘安装器</title>
      <link href="/2020/01/04/tools/macos/%E5%88%9B%E5%BB%BAMacOS%E7%9A%84U%E7%9B%98%E5%AE%89%E8%A3%85%E5%99%A8/"/>
      <url>/2020/01/04/tools/macos/%E5%88%9B%E5%BB%BAMacOS%E7%9A%84U%E7%9B%98%E5%AE%89%E8%A3%85%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>MacOS的OTA更新和恢复做的非常完善了，但是有洁癖的我，总想彻底的重装<br>如果想把MacOS恢复到指定版本，那么就一定需要安装U盘启动器。因为OTA只支持恢复最新版本的系统和恢复出厂的系统。</p><span id="more"></span><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p><strong><a href="https://support.apple.com/zh-cn/HT201475">macOS Catalina</a>、<a href="https://support.apple.com/zh-cn/HT210190">macOS Mojave</a> 或 <a href="https://support.apple.com/zh-cn/HT208969">macOS High Sierra</a></strong><br>这些 macOS 版本的安装器都会以名为<code>Install macOS Catalina</code>、<code>Install macOS Mojave</code>或<code>Install macOS High Sierra</code>的 <code>App</code> 的形式直接下载到您的“应用程序”文件夹。如果安装器在下载后打开，请退出而不要继续安装。</p><blockquote><p>要获取正确的安装器，请从运行<code>macOS Sierra 10.12.5</code>或更高版本或者<code>El Capitan 10.11.6</code>的 Mac 中进行下载。</p></blockquote><p><strong><a href="https://support.apple.com/zh-cn/HT206886">OS X El Capitan</a></strong><br><code>El Capitan</code> 会以磁盘映像形式下载。在与<code>El Capitan</code>兼容的 Mac 上，打开磁盘映像，并运行其中名为<code>InstallMacOSX.pkg</code>的安装器。随即会在您的“应用程序”文件夹中安装一个名为<code>Install OS X El Capitan</code>的<code> App</code>。您将通过这个 App（而不是磁盘映像或 .pkg 安装器）创建可引导安装器。</p><blockquote><p>如果需要恢复<code>macOS Sierra</code>(10.12)版本，需要先恢复到<code>OS X El Capitan</code>(10.11)，然后在AppStore中找到<code>macOS Sierra</code>(10.12)的镜像进行升级。</p></blockquote><h2 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h2><ol><li><p>连接要用于可引导安装器的 USB 闪存驱动器或其他宗卷。确保这个驱动器或宗卷至少有 12GB 可用储存空间，并<a href="https://support.apple.com/zh-cn/HT208496">已格式化为 Mac OS 扩展格式</a>。</p></li><li><p>打开<code>应用程序</code>文件夹内<code>实用工具</code>文件夹中的<code>终端</code>。</p></li><li><p>在<code>终端</code>中键入或粘贴以下命令之一。这些命令假设安装器仍位于您的<code>“应用程序</code>文件夹中，并且 <code>MyVolume</code> 是 <code>USB 闪存驱动器</code>或您正在使用的其他<code>宗卷的名称</code>。如果不是这个名称，请将命令中的 <code>MyVolume</code> 相应地替换为您的<code>宗卷名称</code>。</p><p> <strong>Catalina：</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/Install\ macOS\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume</span><br></pre></td></tr></table></figure><p> <strong>Mojave：</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/Install\ macOS\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume</span><br></pre></td></tr></table></figure><p> <strong>High Sierra：</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/Install\ macOS\ High\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume</span><br></pre></td></tr></table></figure><p> <strong>El Capitan：</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/Install\ OS\ X\ El\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume --applicationpath /Applications/Install\ OS\ X\ El\ Capitan.app</span><br></pre></td></tr></table></figure></li><li><p>键入相应的命令后，请按下 <code>Return</code> 键。</p></li><li><p>出现提示时，请键入您的管理员密码，然后再次按下 <code>Return</code> 键。在您键入密码时，<code>终端</code>不会显示任何字符。</p></li><li><p>出现提示时，请键入<code>Y</code>以确认您要抹掉宗卷，然后按下 <code>Return</code> 键。创建可引导安装器过程中，<code>终端</code>将显示进度。 </p></li><li><p>当<code>终端</code>提示操作已完成时，宗卷的名称将与您下载的安装器名称相同，例如<code>Install macOS Catalina</code>。您现在可以退出<code>终端</code>并弹出宗卷。<br> <img src="https://cdn.rencheng.cc/blog/qbecy.png-thumb100"></p></li></ol><blockquote><p>如果您的 Mac 运行的是 <code>macOS Sierra</code> 或<code>更低版本</code>，请使用 <code>--applicationpath </code>参数，具体方法与在适用于 El Capitan 的命令中使用这个参数的方法类似。</p></blockquote><h2 id="使用可引导安装器"><a href="#使用可引导安装器" class="headerlink" title="使用可引导安装器"></a>使用可引导安装器</h2><ol><li>将<code>U盘</code>插入兼容的 Mac。</li><li>开机按住<code>option</code>键</li><li>选择<code>U盘</code>，进入等待</li><li>选择<code>磁盘工具``抹掉</code>硬盘，完成后退出该工具</li><li>进入<code>重新安装MacOS</code>, 一路Next</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年终总结</title>
      <link href="/2019/12/31/summary/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2019/12/31/summary/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>经过了一年AI的学习，这门技术带给我无限的惊叹和崇拜。最近我也逐渐看清了这门技术与我而言在职业发展上的定位。对于我个人来讲，特别渴望吸取新技术。这也是我的缺点，这一年我盲目的拓展自己，忽略了自己的专业。<br>今年总结主要关键词：<strong>认清形势</strong></p><span id="more"></span><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>经过了一年AI的学习，这门技术带给我无限的惊叹和崇拜。最近我也逐渐看清了这门技术与我而言在职业发展上的定位。<br>经过了这一年，我真的特别累，自己学新知识，自己学算法，因为我身边的朋友给不了我任何的帮助，孤独注定是痛苦的。</p><h2 id="反省"><a href="#反省" class="headerlink" title="反省"></a>反省</h2><p>对于我个人来讲，特别渴望吸取新技术。这也是我的缺点，这一年我盲目的扩张自己的技术，忽略了自己的专业。当身边的朋友从工程师爬到了移动架构的层级，而我还停留在工程师，我慕了；这种差距对于我而言，打击挺大的。之前我一直对自己说，你也在不断的学习，只要自己学到了，就不要管其他的，因为专注的方向不一样。<br>最近我开始研究AI工程师在市场上的需求和要求，我发现这个行业对学历要求高，对经验要求也高。而且这个技术现在已经到达了瓶颈期，如果要想玩点儿新潮的，高精尖，要阅读国外的论文，趁论文没有被框架化，找机会实现它，来达到技术高逼格。如果真的想自己去研究算法，说实话，我没那天赋，资金和时间。</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>未来我不会花费太多的时间去搞机器学习的东西，吃饭优先吧。</p><p>2020年TODO：</p><ol><li>熟悉<code>Flutter</code>框架</li><li>深化<code>iOS底层</code>知识</li><li>看得懂<code>汇编</code></li><li><code>算法</code>和<code>数据结构</code></li><li>有时间继续了解AI</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue快速上手</title>
      <link href="/2019/12/23/web/vue%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
      <url>/2019/12/23/web/vue%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<p>最近由于我们前端老大离职，他所负责的H5需要有人接手，我也不知道为啥会选中我来接手，我对Web只是停留在爬虫的阶段，<code>css</code>和<code>js</code>不能说不懂，能看懂，但是开发起来有些费劲，所以我给他的承诺就是我接口也就能改改Bug，如果指着我开发很困难。</p><span id="more"></span><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>前端框架是<a href="https://vuejs.bootcss.com/">Vue</a>；</li><li>JavaScript（ES6）</li><li>CSS</li><li>HTML</li></ul><blockquote><p>我能简单的看懂Html、css、js，所以我花费几天时间把Vue看一下</p></blockquote><h2 id="了解Vue"><a href="#了解Vue" class="headerlink" title="了解Vue"></a>了解Vue</h2><p><a href="https://vuejs.bootcss.com/">官网教程</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Vue是渐进式框架，只需要花费1到2天的时间就可以开发了，我只要能达到修bug的能力就可以。<br>了解<code>生命周期</code>，<code>引用流程</code>，<code>声明式编程</code>，<code>v-if/v-for语法</code>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas</title>
      <link href="/2019/11/25/datascience/pandas/"/>
      <url>/2019/11/25/datascience/pandas/</url>
      
        <content type="html"><![CDATA[<p>pandas 是基于 NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。Pandas 纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具。pandas提供了大量能使我们快速便捷地处理数据的函数和方法。你很快就会发现，它是使Python成为强大而高效的数据分析环境的重要因素之一。</p><span id="more"></span><h2 id="pandas基础"><a href="#pandas基础" class="headerlink" title="pandas基础"></a>pandas基础</h2><h3 id="pandas介绍"><a href="#pandas介绍" class="headerlink" title="pandas介绍"></a>pandas介绍</h3><p>Python Data Analysis Library</p><p>pandas是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。Pandas 纳入 了大量库和一些标准的数据模型，提供了高效地操作大型结构化数据集所需的工具。</p><h3 id="pandas核心数据结构"><a href="#pandas核心数据结构" class="headerlink" title="pandas核心数据结构"></a>pandas核心数据结构</h3><p>数据结构是计算机存储、组织数据的方式。 通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。数据结构往往同高效的检索算法和索引技术有关。</p><h4 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h4><p>Series可以理解为一个一维的数组，只是index名称可以自己改动。类似于定长的有序字典，有Index和 value。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个空的系列</span></span><br><span class="line">s = pd.Series()</span><br><span class="line"><span class="comment"># 从ndarray创建一个系列</span></span><br><span class="line">data = np.array([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">s = pd.Series(data)</span><br><span class="line">s = pd.Series(data,index=[<span class="number">100</span>,<span class="number">101</span>,<span class="number">102</span>,<span class="number">103</span>])</span><br><span class="line"><span class="comment"># 从字典创建一个系列</span></span><br><span class="line">data = &#123;<span class="string">&#x27;a&#x27;</span> : <span class="number">0.</span>, <span class="string">&#x27;b&#x27;</span> : <span class="number">1.</span>, <span class="string">&#x27;c&#x27;</span> : <span class="number">2.</span>&#125;</span><br><span class="line">s = pd.Series(data)</span><br><span class="line"><span class="comment"># 从标量创建一个系列</span></span><br><span class="line">s = pd.Series(<span class="number">5</span>, index=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>访问Series中的数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用索引检索元素</span></span><br><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],index = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>], s[:<span class="number">3</span>], s[-<span class="number">3</span>:])</span><br><span class="line"><span class="comment"># 使用标签检索数据</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="string">&#x27;a&#x27;</span>], s[[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]])</span><br></pre></td></tr></table></figure><p><strong>pandas日期处理</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pandas识别的日期字符串格式</span></span><br><span class="line">dates = pd.Series([<span class="string">&#x27;2011&#x27;</span>, <span class="string">&#x27;2011-02&#x27;</span>, <span class="string">&#x27;2011-03-01&#x27;</span>, <span class="string">&#x27;2011/04/01&#x27;</span>, </span><br><span class="line">                   <span class="string">&#x27;2011/05/01 01:01:01&#x27;</span>, <span class="string">&#x27;01 Jun 2011&#x27;</span>])</span><br><span class="line"><span class="comment"># to_datetime() 转换日期数据类型</span></span><br><span class="line">dates = pd.to_datetime(dates)</span><br><span class="line"><span class="built_in">print</span>(dates, dates.dtype, <span class="built_in">type</span>(dates))</span><br><span class="line"><span class="comment"># datetime类型数据支持日期运算</span></span><br><span class="line">delta = dates - pd.to_datetime(<span class="string">&#x27;1970-01-01&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取天数数值</span></span><br><span class="line"><span class="built_in">print</span>(delta.dt.days)</span><br></pre></td></tr></table></figure><p>Series.dt提供了很多日期相关操作，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Series.dt.yearThe year of the datetime.</span><br><span class="line">Series.dt.monthThe month <span class="keyword">as</span> January=<span class="number">1</span>, December=<span class="number">12.</span></span><br><span class="line">Series.dt.dayThe days of the datetime.</span><br><span class="line">Series.dt.hourThe hours of the datetime.</span><br><span class="line">Series.dt.minuteThe minutes of the datetime.</span><br><span class="line">Series.dt.secondThe seconds of the datetime.</span><br><span class="line">Series.dt.microsecondThe microseconds of the datetime.</span><br><span class="line">Series.dt.weekThe week ordinal of the year.</span><br><span class="line">Series.dt.weekofyearThe week ordinal of the year.</span><br><span class="line">Series.dt.dayofweekThe day of the week <span class="keyword">with</span> Monday=<span class="number">0</span>, Sunday=<span class="number">6.</span></span><br><span class="line">Series.dt.weekdayThe day of the week <span class="keyword">with</span> Monday=<span class="number">0</span>, Sunday=<span class="number">6.</span></span><br><span class="line">Series.dt.dayofyearThe ordinal day of the year.</span><br><span class="line">Series.dt.quarterThe quarter of the date.</span><br><span class="line">Series.dt.is_month_startIndicates whether the date <span class="keyword">is</span> the first day of the month.</span><br><span class="line">Series.dt.is_month_endIndicates whether the date <span class="keyword">is</span> the last day of the month.</span><br><span class="line">Series.dt.is_quarter_startIndicator <span class="keyword">for</span> whether the date <span class="keyword">is</span> the first day of a quarter.</span><br><span class="line">Series.dt.is_quarter_endIndicator <span class="keyword">for</span> whether the date <span class="keyword">is</span> the last day of a quarter.</span><br><span class="line">Series.dt.is_year_startIndicate whether the date <span class="keyword">is</span> the first day of a year.</span><br><span class="line">Series.dt.is_year_endIndicate whether the date <span class="keyword">is</span> the last day of the year.</span><br><span class="line">Series.dt.is_leap_yearBoolean indicator <span class="keyword">if</span> the date belongs to a leap year.</span><br><span class="line">Series.dt.days_in_monthThe number of days <span class="keyword">in</span> the month.</span><br></pre></td></tr></table></figure><h4 id="DateTimeIndex"><a href="#DateTimeIndex" class="headerlink" title="DateTimeIndex"></a>DateTimeIndex</h4><p>通过指定周期和频率，使用<code>date.range()</code>函数就可以创建日期序列。 默认情况下，范围的频率是天。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 以日为频率</span></span><br><span class="line">datelist = pd.date_range(<span class="string">&#x27;2019/08/21&#x27;</span>, periods=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(datelist)</span><br><span class="line"><span class="comment"># 以月为频率</span></span><br><span class="line">datelist = pd.date_range(<span class="string">&#x27;2019/08/21&#x27;</span>, periods=<span class="number">5</span>,freq=<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(datelist)</span><br><span class="line"><span class="comment"># 构建某个区间的时间序列</span></span><br><span class="line">start = pd.datetime(<span class="number">2017</span>, <span class="number">11</span>, <span class="number">1</span>)</span><br><span class="line">end = pd.datetime(<span class="number">2017</span>, <span class="number">11</span>, <span class="number">5</span>)</span><br><span class="line">dates = pd.date_range(start, end)</span><br><span class="line"><span class="built_in">print</span>(dates)</span><br></pre></td></tr></table></figure><p><code>bdate_range()</code>用来表示商业日期范围，不同于<code>date_range()</code>，它不包括星期六和星期天。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">datelist = pd.bdate_range(<span class="string">&#x27;2011/11/03&#x27;</span>, periods=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(datelist)</span><br></pre></td></tr></table></figure><h4 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h4><p>DataFrame是一个类似于表格的数据类型，可以理解为一个二维数组，索引有两个维度，可更改。DataFrame具有以下特点：</p><ul><li>潜在的列是不同的类型</li><li>大小可变</li><li>标记轴(行和列)</li><li>可以对行和列执行算术运算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个空的DataFrame</span></span><br><span class="line">df = pd.DataFrame()</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从列表创建DataFrame</span></span><br><span class="line">data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">data = [[<span class="string">&#x27;Alex&#x27;</span>,<span class="number">10</span>],[<span class="string">&#x27;Bob&#x27;</span>,<span class="number">12</span>],[<span class="string">&#x27;Clarke&#x27;</span>,<span class="number">13</span>]]</span><br><span class="line">df = pd.DataFrame(data,columns=[<span class="string">&#x27;Name&#x27;</span>,<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">data = [[<span class="string">&#x27;Alex&#x27;</span>,<span class="number">10</span>],[<span class="string">&#x27;Bob&#x27;</span>,<span class="number">12</span>],[<span class="string">&#x27;Clarke&#x27;</span>,<span class="number">13</span>]]</span><br><span class="line">df = pd.DataFrame(data,columns=[<span class="string">&#x27;Name&#x27;</span>,<span class="string">&#x27;Age&#x27;</span>],dtype=<span class="built_in">float</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">data = [&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;,&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">20</span>&#125;]</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从字典来创建DataFrame</span></span><br><span class="line">data = &#123;<span class="string">&#x27;Name&#x27;</span>:[<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Steve&#x27;</span>, <span class="string">&#x27;Ricky&#x27;</span>],<span class="string">&#x27;Age&#x27;</span>:[<span class="number">28</span>,<span class="number">34</span>,<span class="number">29</span>,<span class="number">42</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data, index=[<span class="string">&#x27;s1&#x27;</span>,<span class="string">&#x27;s2&#x27;</span>,<span class="string">&#x27;s3&#x27;</span>,<span class="string">&#x27;s4&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">data = &#123;<span class="string">&#x27;one&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]),</span><br><span class="line">        <span class="string">&#x27;two&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><h4 id="核心数据结构操作"><a href="#核心数据结构操作" class="headerlink" title="核心数据结构操作"></a>核心数据结构操作</h4><p><strong>列访问</strong></p><p>DataFrame的单列数据为一个Series。根据DataFrame的定义可以 知晓DataFrame是一个带有标签的二维数组，每个标签相当每一列的列名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;one&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]),</span><br><span class="line">     <span class="string">&#x27;two&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(d)</span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;one&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df[[<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>]])</span><br></pre></td></tr></table></figure><p><strong>列添加</strong></p><p>DataFrame添加一列的方法非常简单，只需要新建一个列索引。并对该索引下的数据进行赋值操作即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;Name&#x27;</span>:[<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Steve&#x27;</span>, <span class="string">&#x27;Ricky&#x27;</span>],<span class="string">&#x27;Age&#x27;</span>:[<span class="number">28</span>,<span class="number">34</span>,<span class="number">29</span>,<span class="number">42</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data, index=[<span class="string">&#x27;s1&#x27;</span>,<span class="string">&#x27;s2&#x27;</span>,<span class="string">&#x27;s3&#x27;</span>,<span class="string">&#x27;s4&#x27;</span>])</span><br><span class="line">df[<span class="string">&#x27;score&#x27;</span>]=pd.Series([<span class="number">90</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">60</span>], index=[<span class="string">&#x27;s1&#x27;</span>,<span class="string">&#x27;s2&#x27;</span>,<span class="string">&#x27;s3&#x27;</span>,<span class="string">&#x27;s4&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p><strong>列删除</strong> </p><p>删除某列数据需要用到pandas提供的方法pop，pop方法的用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;one&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]), </span><br><span class="line">     <span class="string">&#x27;two&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]), </span><br><span class="line">     <span class="string">&#x27;three&#x27;</span> : pd.Series([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])&#125;</span><br><span class="line">df = pd.DataFrame(d)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dataframe is:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一列： one</span></span><br><span class="line"><span class="keyword">del</span>(df[<span class="string">&#x27;one&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用pop方法删除一列</span></span><br><span class="line">df.pop(<span class="string">&#x27;two&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p><strong>行访问</strong></p><p>如果只是需要访问DataFrame某几行数据的实现方式则采用数组的选取方式，使用 “:” 即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;one&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]), </span><br><span class="line">    <span class="string">&#x27;two&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(d)</span><br><span class="line"><span class="built_in">print</span>(df[<span class="number">2</span>:<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p><strong>loc</strong>方法是针对DataFrame索引名称的切片方法。loc方法使用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;one&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]), </span><br><span class="line">     <span class="string">&#x27;two&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(d)</span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df.loc[[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]])</span><br></pre></td></tr></table></figure><p><strong>iloc</strong>和loc区别是iloc接收的必须是行索引和列索引的位置。iloc方法的使用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;one&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]),</span><br><span class="line">     <span class="string">&#x27;two&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(d)</span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(df.iloc[[<span class="number">2</span>, <span class="number">3</span>]])</span><br></pre></td></tr></table></figure><p><strong>行添加</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame([[<span class="string">&#x27;zs&#x27;</span>, <span class="number">12</span>], [<span class="string">&#x27;ls&#x27;</span>, <span class="number">4</span>]], columns = [<span class="string">&#x27;Name&#x27;</span>,<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line">df2 = pd.DataFrame([[<span class="string">&#x27;ww&#x27;</span>, <span class="number">16</span>], [<span class="string">&#x27;zl&#x27;</span>, <span class="number">8</span>]], columns = [<span class="string">&#x27;Name&#x27;</span>,<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line"></span><br><span class="line">df = df.append(df2)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p><strong>行删除</strong></p><p>使用索引标签从DataFrame中删除或删除行。 如果标签重复，则会删除多行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame([[<span class="string">&#x27;zs&#x27;</span>, <span class="number">12</span>], [<span class="string">&#x27;ls&#x27;</span>, <span class="number">4</span>]], columns = [<span class="string">&#x27;Name&#x27;</span>,<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line">df2 = pd.DataFrame([[<span class="string">&#x27;ww&#x27;</span>, <span class="number">16</span>], [<span class="string">&#x27;zl&#x27;</span>, <span class="number">8</span>]], columns = [<span class="string">&#x27;Name&#x27;</span>,<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line">df = df.append(df2)</span><br><span class="line"><span class="comment"># 删除index为0的行</span></span><br><span class="line">df = df.drop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p><strong>修改DataFrame中的数据</strong></p><p>更改DataFrame中的数据，原理是将这部分数据提取出来，重新赋值为新的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame([[<span class="string">&#x27;zs&#x27;</span>, <span class="number">12</span>], [<span class="string">&#x27;ls&#x27;</span>, <span class="number">4</span>]], columns = [<span class="string">&#x27;Name&#x27;</span>,<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line">df2 = pd.DataFrame([[<span class="string">&#x27;ww&#x27;</span>, <span class="number">16</span>], [<span class="string">&#x27;zl&#x27;</span>, <span class="number">8</span>]], columns = [<span class="string">&#x27;Name&#x27;</span>,<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line">df = df.append(df2)</span><br><span class="line">df[<span class="string">&#x27;Name&#x27;</span>][<span class="number">0</span>] = <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p><strong>DataFrame常用属性</strong></p><table><thead><tr><th>编号</th><th>属性或方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>axes</code></td><td>返回 行&#x2F;列 标签（index）列表。</td></tr><tr><td>2</td><td><code>dtype</code></td><td>返回对象的数据类型(<code>dtype</code>)。</td></tr><tr><td>3</td><td><code>empty</code></td><td>如果系列为空，则返回<code>True</code>。</td></tr><tr><td>4</td><td><code>ndim</code></td><td>返回底层数据的维数，默认定义：<code>1</code>。</td></tr><tr><td>5</td><td><code>size</code></td><td>返回基础数据中的元素数。</td></tr><tr><td>6</td><td><code>values</code></td><td>将系列作为<code>ndarray</code>返回。</td></tr><tr><td>7</td><td><code>head()</code></td><td>返回前<code>n</code>行。</td></tr><tr><td>8</td><td><code>tail()</code></td><td>返回最后<code>n</code>行。</td></tr></tbody></table><p>实例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;Name&#x27;</span>:[<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Steve&#x27;</span>, <span class="string">&#x27;Ricky&#x27;</span>],<span class="string">&#x27;Age&#x27;</span>:[<span class="number">28</span>,<span class="number">34</span>,<span class="number">29</span>,<span class="number">42</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data, index=[<span class="string">&#x27;s1&#x27;</span>,<span class="string">&#x27;s2&#x27;</span>,<span class="string">&#x27;s3&#x27;</span>,<span class="string">&#x27;s4&#x27;</span>])</span><br><span class="line">df[<span class="string">&#x27;score&#x27;</span>]=pd.Series([<span class="number">90</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">60</span>], index=[<span class="string">&#x27;s1&#x27;</span>,<span class="string">&#x27;s2&#x27;</span>,<span class="string">&#x27;s3&#x27;</span>,<span class="string">&#x27;s4&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="built_in">print</span>(df.axes)</span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;Age&#x27;</span>].dtype)</span><br><span class="line"><span class="built_in">print</span>(df.empty)</span><br><span class="line"><span class="built_in">print</span>(df.ndim)</span><br><span class="line"><span class="built_in">print</span>(df.size)</span><br><span class="line"><span class="built_in">print</span>(df.values)</span><br><span class="line"><span class="built_in">print</span>(df.head(<span class="number">3</span>)) <span class="comment"># df的前三行</span></span><br><span class="line"><span class="built_in">print</span>(df.tail(<span class="number">3</span>)) <span class="comment"># df的后三行</span></span><br></pre></td></tr></table></figure><h2 id="Jupyter-notebook"><a href="#Jupyter-notebook" class="headerlink" title="Jupyter notebook"></a>Jupyter notebook</h2><p>Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。使用浏览器作为界面，向后台的IPython服务器发送请求，并显示结果。 Jupyter Notebook 的本质是一个 Web 应用程序，便于创建和共享文学化程序文档，支持实时代码，数学方程，可视化和 markdown。 </p><p>IPython 是一个 python 的交互式 shell，比默认的python shell 好用得多，支持变量自动补全，自动缩进，支持 bash shell 命令，内置了许多很有用的功能和函数。</p><p><strong>安装ipython</strong></p><p><strong>windows：</strong> 前提是有numpy，matplotlib  pandas </p><p>​采用pip安装  <code>pip install ipython</code></p><p><strong>OS X：</strong>AppStore下载安装苹果开发工具Xcode。</p><p>​使用easy_install或pip安装IPython，或者从源文件安装。</p><p><strong>安装Jupyter notebook</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install jupyter</span><br></pre></td></tr></table></figure><h2 id="pandas核心"><a href="#pandas核心" class="headerlink" title="pandas核心"></a>pandas核心</h2><h3 id="pandas描述性统计"><a href="#pandas描述性统计" class="headerlink" title="pandas描述性统计"></a>pandas描述性统计</h3><p>数值型数据的描述性统计主要包括了计算数值型数据的完整情况、最小值、均值、中位 数、最大值、四分位数、极差、标准差、方差、协方差等。在NumPy库中一些常用的统计学函数也可用于对数据框进行描述性统计。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">np.<span class="built_in">min</span>最小值 </span><br><span class="line">np.<span class="built_in">max</span>最大值 </span><br><span class="line">np.mean均值 </span><br><span class="line">np.ptp极差 </span><br><span class="line">np.median中位数 </span><br><span class="line">np.std标准差 </span><br><span class="line">np.var方差 </span><br><span class="line">np.cov协方差</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建DF</span></span><br><span class="line">d = &#123;<span class="string">&#x27;Name&#x27;</span>:pd.Series([<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;James&#x27;</span>,<span class="string">&#x27;Ricky&#x27;</span>,<span class="string">&#x27;Vin&#x27;</span>,<span class="string">&#x27;Steve&#x27;</span>,<span class="string">&#x27;Minsu&#x27;</span>,<span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;Lee&#x27;</span>,<span class="string">&#x27;David&#x27;</span>,<span class="string">&#x27;Gasper&#x27;</span>,<span class="string">&#x27;Betina&#x27;</span>,<span class="string">&#x27;Andres&#x27;</span>]),</span><br><span class="line">   <span class="string">&#x27;Age&#x27;</span>:pd.Series([<span class="number">25</span>,<span class="number">26</span>,<span class="number">25</span>,<span class="number">23</span>,<span class="number">30</span>,<span class="number">29</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">51</span>,<span class="number">46</span>]),</span><br><span class="line">   <span class="string">&#x27;Rating&#x27;</span>:pd.Series([<span class="number">4.23</span>,<span class="number">3.24</span>,<span class="number">3.98</span>,<span class="number">2.56</span>,<span class="number">3.20</span>,<span class="number">4.6</span>,<span class="number">3.8</span>,<span class="number">3.78</span>,<span class="number">2.98</span>,<span class="number">4.80</span>,<span class="number">4.10</span>,<span class="number">3.65</span>])&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(d)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="comment"># 测试描述性统计函数</span></span><br><span class="line"><span class="built_in">print</span>(df.<span class="built_in">sum</span>())</span><br><span class="line"><span class="built_in">print</span>(df.<span class="built_in">sum</span>(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(df.mean())</span><br><span class="line"><span class="built_in">print</span>(df.mean(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>pandas提供了统计相关函数：</p><table><thead><tr><th>1</th><th><code>count()</code></th><th>非空观测数量</th></tr></thead><tbody><tr><td>2</td><td><code>sum()</code></td><td>所有值之和</td></tr><tr><td>3</td><td><code>mean()</code></td><td>所有值的平均值</td></tr><tr><td>4</td><td><code>median()</code></td><td>所有值的中位数</td></tr><tr><td>5</td><td><code>std()</code></td><td>值的标准偏差</td></tr><tr><td>6</td><td><code>min()</code></td><td>所有值中的最小值</td></tr><tr><td>7</td><td><code>max()</code></td><td>所有值中的最大值</td></tr><tr><td>8</td><td><code>abs()</code></td><td>绝对值</td></tr><tr><td>9</td><td><code>prod()</code></td><td>数组元素的乘积</td></tr><tr><td>10</td><td><code>cumsum()</code></td><td>累计总和</td></tr><tr><td>11</td><td><code>cumprod()</code></td><td>累计乘积</td></tr></tbody></table><p>pandas还提供了一个方法叫作describe，能够一次性得出数据框所有数值型特征的非空值数目、均值、标准差等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#Create a Dictionary of series</span></span><br><span class="line">d = &#123;<span class="string">&#x27;Name&#x27;</span>:pd.Series([<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;James&#x27;</span>,<span class="string">&#x27;Ricky&#x27;</span>,<span class="string">&#x27;Vin&#x27;</span>,<span class="string">&#x27;Steve&#x27;</span>,<span class="string">&#x27;Minsu&#x27;</span>,<span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;Lee&#x27;</span>,<span class="string">&#x27;David&#x27;</span>,<span class="string">&#x27;Gasper&#x27;</span>,<span class="string">&#x27;Betina&#x27;</span>,<span class="string">&#x27;Andres&#x27;</span>]),</span><br><span class="line">   <span class="string">&#x27;Age&#x27;</span>:pd.Series([<span class="number">25</span>,<span class="number">26</span>,<span class="number">25</span>,<span class="number">23</span>,<span class="number">30</span>,<span class="number">29</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">51</span>,<span class="number">46</span>]),</span><br><span class="line">   <span class="string">&#x27;Rating&#x27;</span>:pd.Series([<span class="number">4.23</span>,<span class="number">3.24</span>,<span class="number">3.98</span>,<span class="number">2.56</span>,<span class="number">3.20</span>,<span class="number">4.6</span>,<span class="number">3.8</span>,<span class="number">3.78</span>,<span class="number">2.98</span>,<span class="number">4.80</span>,<span class="number">4.10</span>,<span class="number">3.65</span>])&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#Create a DataFrame</span></span><br><span class="line">df = pd.DataFrame(d)</span><br><span class="line"><span class="built_in">print</span>(df.describe())</span><br><span class="line"><span class="built_in">print</span>(df.describe(include=[<span class="string">&#x27;object&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(df.describe(include=[<span class="string">&#x27;number&#x27;</span>]))</span><br></pre></td></tr></table></figure><h3 id="pandas排序"><a href="#pandas排序" class="headerlink" title="pandas排序"></a>pandas排序</h3><p><em>Pandas</em>有两种排序方式，它们分别是按标签与按实际值排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">unsorted_df=pd.DataFrame(np.random.randn(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">                         index=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">7</span>],columns=[<span class="string">&#x27;col2&#x27;</span>,<span class="string">&#x27;col1&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(unsorted_df)</span><br></pre></td></tr></table></figure><p><strong>按行标签排序</strong></p><p>使用<code>sort_index()</code>方法，通过传递<code>axis</code>参数和排序顺序，可以对<code>DataFrame</code>进行排序。 默认情况下，按照升序对行标签进行排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;Name&#x27;</span>:pd.Series([<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;James&#x27;</span>,<span class="string">&#x27;Ricky&#x27;</span>,<span class="string">&#x27;Vin&#x27;</span>,<span class="string">&#x27;Steve&#x27;</span>,<span class="string">&#x27;Minsu&#x27;</span>,<span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;Lee&#x27;</span>,<span class="string">&#x27;David&#x27;</span>,<span class="string">&#x27;Gasper&#x27;</span>,<span class="string">&#x27;Betina&#x27;</span>,<span class="string">&#x27;Andres&#x27;</span>]),</span><br><span class="line">   <span class="string">&#x27;Age&#x27;</span>:pd.Series([<span class="number">25</span>,<span class="number">26</span>,<span class="number">25</span>,<span class="number">23</span>,<span class="number">30</span>,<span class="number">29</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">51</span>,<span class="number">46</span>]),</span><br><span class="line">   <span class="string">&#x27;Rating&#x27;</span>:pd.Series([<span class="number">4.23</span>,<span class="number">3.24</span>,<span class="number">3.98</span>,<span class="number">2.56</span>,<span class="number">3.20</span>,<span class="number">4.6</span>,<span class="number">3.8</span>,<span class="number">3.78</span>,<span class="number">2.98</span>,<span class="number">4.80</span>,<span class="number">4.10</span>,<span class="number">3.65</span>])&#125;</span><br><span class="line">unsorted_df = pd.DataFrame(d)</span><br><span class="line"><span class="comment"># 按照行标进行排序</span></span><br><span class="line">sorted_df=unsorted_df.sort_index()</span><br><span class="line"><span class="built_in">print</span> (sorted_df)</span><br><span class="line"><span class="comment"># 控制排序顺序</span></span><br><span class="line">sorted_df = unsorted_df.sort_index(ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span> (sorted_df)</span><br></pre></td></tr></table></figure><p><strong>按列标签排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;Name&#x27;</span>:pd.Series([<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;James&#x27;</span>,<span class="string">&#x27;Ricky&#x27;</span>,<span class="string">&#x27;Vin&#x27;</span>,<span class="string">&#x27;Steve&#x27;</span>,<span class="string">&#x27;Minsu&#x27;</span>,<span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;Lee&#x27;</span>,<span class="string">&#x27;David&#x27;</span>,<span class="string">&#x27;Gasper&#x27;</span>,<span class="string">&#x27;Betina&#x27;</span>,<span class="string">&#x27;Andres&#x27;</span>]),</span><br><span class="line">   <span class="string">&#x27;Age&#x27;</span>:pd.Series([<span class="number">25</span>,<span class="number">26</span>,<span class="number">25</span>,<span class="number">23</span>,<span class="number">30</span>,<span class="number">29</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">51</span>,<span class="number">46</span>]),</span><br><span class="line">   <span class="string">&#x27;Rating&#x27;</span>:pd.Series([<span class="number">4.23</span>,<span class="number">3.24</span>,<span class="number">3.98</span>,<span class="number">2.56</span>,<span class="number">3.20</span>,<span class="number">4.6</span>,<span class="number">3.8</span>,<span class="number">3.78</span>,<span class="number">2.98</span>,<span class="number">4.80</span>,<span class="number">4.10</span>,<span class="number">3.65</span>])&#125;</span><br><span class="line">unsorted_df = pd.DataFrame(d)</span><br><span class="line"><span class="comment"># 按照列标签进行排序</span></span><br><span class="line">sorted_df=unsorted_df.sort_index(axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span> (sorted_df)</span><br></pre></td></tr></table></figure><p><strong>按某列值排序</strong></p><p>像索引排序一样，<code>sort_values()</code>是按值排序的方法。它接受一个<code>by</code>参数，它将使用要与其排序值的<code>DataFrame</code>的列名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;Name&#x27;</span>:pd.Series([<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;James&#x27;</span>,<span class="string">&#x27;Ricky&#x27;</span>,<span class="string">&#x27;Vin&#x27;</span>,<span class="string">&#x27;Steve&#x27;</span>,<span class="string">&#x27;Minsu&#x27;</span>,<span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;Lee&#x27;</span>,<span class="string">&#x27;David&#x27;</span>,<span class="string">&#x27;Gasper&#x27;</span>,<span class="string">&#x27;Betina&#x27;</span>,<span class="string">&#x27;Andres&#x27;</span>]),</span><br><span class="line">   <span class="string">&#x27;Age&#x27;</span>:pd.Series([<span class="number">25</span>,<span class="number">26</span>,<span class="number">25</span>,<span class="number">23</span>,<span class="number">30</span>,<span class="number">29</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">51</span>,<span class="number">46</span>]),</span><br><span class="line">   <span class="string">&#x27;Rating&#x27;</span>:pd.Series([<span class="number">4.23</span>,<span class="number">3.24</span>,<span class="number">3.98</span>,<span class="number">2.56</span>,<span class="number">3.20</span>,<span class="number">4.6</span>,<span class="number">3.8</span>,<span class="number">3.78</span>,<span class="number">2.98</span>,<span class="number">4.80</span>,<span class="number">4.10</span>,<span class="number">3.65</span>])&#125;</span><br><span class="line">unsorted_df = pd.DataFrame(d)</span><br><span class="line"><span class="comment"># 按照年龄进行排序</span></span><br><span class="line">sorted_df = unsorted_df.sort_values(by=<span class="string">&#x27;Age&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (sorted_df)</span><br><span class="line"><span class="comment"># 先按Age进行升序排序，然后按Rating降序排序</span></span><br><span class="line">sorted_df = unsorted_df.sort_values(by=[<span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Rating&#x27;</span>], ascending=[<span class="literal">True</span>, <span class="literal">False</span>])</span><br><span class="line"><span class="built_in">print</span> (sorted_df)</span><br></pre></td></tr></table></figure><h3 id="pandas分组"><a href="#pandas分组" class="headerlink" title="pandas分组"></a>pandas分组</h3><p>在许多情况下，我们将数据分成多个集合，并在每个子集上应用一些函数。在应用函数中，可以执行以下操作 :</p><ul><li><em>聚合</em> - 计算汇总统计</li><li><em>转换</em> - 执行一些特定于组的操作</li><li><em>过滤</em> - 在某些情况下丢弃数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ipl_data = &#123;<span class="string">&#x27;Team&#x27;</span>: [<span class="string">&#x27;Riders&#x27;</span>, <span class="string">&#x27;Riders&#x27;</span>, <span class="string">&#x27;Devils&#x27;</span>, <span class="string">&#x27;Devils&#x27;</span>, <span class="string">&#x27;Kings&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;kings&#x27;</span>, <span class="string">&#x27;Kings&#x27;</span>, <span class="string">&#x27;Kings&#x27;</span>, <span class="string">&#x27;Riders&#x27;</span>, <span class="string">&#x27;Royals&#x27;</span>, <span class="string">&#x27;Royals&#x27;</span>, <span class="string">&#x27;Riders&#x27;</span>],</span><br><span class="line">         <span class="string">&#x27;Rank&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>,<span class="number">4</span> ,<span class="number">1</span> ,<span class="number">1</span>,<span class="number">2</span> , <span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">         <span class="string">&#x27;Year&#x27;</span>: [<span class="number">2014</span>,<span class="number">2015</span>,<span class="number">2014</span>,<span class="number">2015</span>,<span class="number">2014</span>,<span class="number">2015</span>,<span class="number">2016</span>,<span class="number">2017</span>,<span class="number">2016</span>,<span class="number">2014</span>,<span class="number">2015</span>,<span class="number">2017</span>],</span><br><span class="line">         <span class="string">&#x27;Points&#x27;</span>:[<span class="number">876</span>,<span class="number">789</span>,<span class="number">863</span>,<span class="number">673</span>,<span class="number">741</span>,<span class="number">812</span>,<span class="number">756</span>,<span class="number">788</span>,<span class="number">694</span>,<span class="number">701</span>,<span class="number">804</span>,<span class="number">690</span>]&#125;</span><br><span class="line">df = pd.DataFrame(ipl_data)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><h4 id="将数据拆分成组"><a href="#将数据拆分成组" class="headerlink" title="将数据拆分成组"></a>将数据拆分成组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照年份Year字段分组</span></span><br><span class="line"><span class="built_in">print</span> (df.groupby(<span class="string">&#x27;Year&#x27;</span>))</span><br><span class="line"><span class="comment"># 查看分组结果</span></span><br><span class="line"><span class="built_in">print</span> (df.groupby(<span class="string">&#x27;Year&#x27;</span>).groups)</span><br></pre></td></tr></table></figure><h4 id="迭代遍历分组"><a href="#迭代遍历分组" class="headerlink" title="迭代遍历分组"></a>迭代遍历分组</h4><p>groupby返回可迭代对象，可以使用for循环遍历：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grouped = df.groupby(<span class="string">&#x27;Year&#x27;</span>)</span><br><span class="line"><span class="comment"># 遍历每个分组</span></span><br><span class="line"><span class="keyword">for</span> year,group <span class="keyword">in</span> grouped:</span><br><span class="line">    <span class="built_in">print</span> (year)</span><br><span class="line">    <span class="built_in">print</span> (group)</span><br></pre></td></tr></table></figure><h4 id="获得一个分组细节"><a href="#获得一个分组细节" class="headerlink" title="获得一个分组细节"></a>获得一个分组细节</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grouped = df.groupby(<span class="string">&#x27;Year&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (grouped.get_group(<span class="number">2014</span>))</span><br></pre></td></tr></table></figure><h4 id="分组聚合"><a href="#分组聚合" class="headerlink" title="分组聚合"></a>分组聚合</h4><p>聚合函数为每个组返回聚合值。当创建了分组(<em>group by</em>)对象，就可以对每个分组数据执行求和、求标准差等操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 聚合每一年的平均的分</span></span><br><span class="line">grouped = df.groupby(<span class="string">&#x27;Year&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (grouped[<span class="string">&#x27;Points&#x27;</span>].agg(np.mean))</span><br><span class="line"><span class="comment"># 聚合每一年的分数之和、平均分、标准差</span></span><br><span class="line">grouped = df.groupby(<span class="string">&#x27;Year&#x27;</span>)</span><br><span class="line">agg = grouped[<span class="string">&#x27;Points&#x27;</span>].agg([np.<span class="built_in">sum</span>, np.mean, np.std])</span><br><span class="line"><span class="built_in">print</span> (agg)</span><br></pre></td></tr></table></figure><h3 id="pandas数据表关联操作"><a href="#pandas数据表关联操作" class="headerlink" title="pandas数据表关联操作"></a>pandas数据表关联操作</h3><p>Pandas具有功能全面的高性能内存中连接操作，与SQL等关系数据库非常相似。<br>Pandas提供了一个单独的<code>merge()</code>函数，作为DataFrame对象之间所有标准数据库连接操作的入口。</p><p><strong>合并两个DataFrame：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">left = pd.DataFrame(&#123;</span><br><span class="line">         <span class="string">&#x27;student_id&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>],</span><br><span class="line">         <span class="string">&#x27;student_name&#x27;</span>: [<span class="string">&#x27;Alex&#x27;</span>, <span class="string">&#x27;Amy&#x27;</span>, <span class="string">&#x27;Allen&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Ayoung&#x27;</span>, <span class="string">&#x27;Billy&#x27;</span>, <span class="string">&#x27;Brian&#x27;</span>, <span class="string">&#x27;Bran&#x27;</span>, <span class="string">&#x27;Bryce&#x27;</span>, <span class="string">&#x27;Betty&#x27;</span>, <span class="string">&#x27;Emma&#x27;</span>, <span class="string">&#x27;Marry&#x27;</span>, <span class="string">&#x27;Allen&#x27;</span>, <span class="string">&#x27;Jean&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;David&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Daniel&#x27;</span>, <span class="string">&#x27;Andrew&#x27;</span>],</span><br><span class="line">         <span class="string">&#x27;class_id&#x27;</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>], </span><br><span class="line">         <span class="string">&#x27;gender&#x27;</span>:[<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;F&#x27;</span>], </span><br><span class="line">         <span class="string">&#x27;age&#x27;</span>:[<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>], </span><br><span class="line">         <span class="string">&#x27;score&#x27;</span>:[<span class="number">98</span>,<span class="number">74</span>,<span class="number">67</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">29</span>,<span class="number">32</span>,<span class="number">34</span>,<span class="number">85</span>,<span class="number">64</span>,<span class="number">52</span>,<span class="number">38</span>,<span class="number">26</span>,<span class="number">89</span>,<span class="number">68</span>,<span class="number">46</span>,<span class="number">32</span>,<span class="number">78</span>,<span class="number">79</span>,<span class="number">87</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(</span><br><span class="line">         &#123;<span class="string">&#x27;class_id&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>],</span><br><span class="line">         <span class="string">&#x27;class_name&#x27;</span>: [<span class="string">&#x27;ClassA&#x27;</span>, <span class="string">&#x27;ClassB&#x27;</span>, <span class="string">&#x27;ClassC&#x27;</span>, <span class="string">&#x27;ClassE&#x27;</span>]&#125;)</span><br><span class="line"><span class="comment"># 合并两个DataFrame</span></span><br><span class="line">data = pd.merge(left,right)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p><strong>使用“how”参数合并DataFrame：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并两个DataFrame (左连接)</span></span><br><span class="line">rs = pd.merge(left, right, how=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(rs)</span><br></pre></td></tr></table></figure><p>其他合并方法同数据库相同：</p><table><thead><tr><th>合并方法</th><th>SQL等效</th><th>描述</th></tr></thead><tbody><tr><td><code>left</code></td><td><code>LEFT OUTER JOIN</code></td><td>使用左侧对象的键</td></tr><tr><td><code>right</code></td><td><code>RIGHT OUTER JOIN</code></td><td>使用右侧对象的键</td></tr><tr><td><code>outer</code></td><td><code>FULL OUTER JOIN</code></td><td>使用键的联合</td></tr><tr><td><code>inner</code></td><td><code>INNER JOIN</code></td><td>使用键的交集</td></tr></tbody></table><p>试验：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并两个DataFrame (左连接)</span></span><br><span class="line">rs = pd.merge(left,right,on=<span class="string">&#x27;subject_id&#x27;</span>, how=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(rs)</span><br><span class="line"><span class="comment"># 合并两个DataFrame (左连接)</span></span><br><span class="line">rs = pd.merge(left,right,on=<span class="string">&#x27;subject_id&#x27;</span>, how=<span class="string">&#x27;outer&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(rs)</span><br><span class="line"><span class="comment"># 合并两个DataFrame (左连接)</span></span><br><span class="line">rs = pd.merge(left,right,on=<span class="string">&#x27;subject_id&#x27;</span>, how=<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(rs)</span><br></pre></td></tr></table></figure><h3 id="pandas透视表与交叉表"><a href="#pandas透视表与交叉表" class="headerlink" title="pandas透视表与交叉表"></a>pandas透视表与交叉表</h3><p>有如下数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">left = pd.DataFrame(&#123;</span><br><span class="line">         <span class="string">&#x27;student_id&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>],</span><br><span class="line">         <span class="string">&#x27;student_name&#x27;</span>: [<span class="string">&#x27;Alex&#x27;</span>, <span class="string">&#x27;Amy&#x27;</span>, <span class="string">&#x27;Allen&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Ayoung&#x27;</span>, <span class="string">&#x27;Billy&#x27;</span>, <span class="string">&#x27;Brian&#x27;</span>, <span class="string">&#x27;Bran&#x27;</span>, <span class="string">&#x27;Bryce&#x27;</span>, <span class="string">&#x27;Betty&#x27;</span>, <span class="string">&#x27;Emma&#x27;</span>, <span class="string">&#x27;Marry&#x27;</span>, <span class="string">&#x27;Allen&#x27;</span>, <span class="string">&#x27;Jean&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;David&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Daniel&#x27;</span>, <span class="string">&#x27;Andrew&#x27;</span>],</span><br><span class="line">         <span class="string">&#x27;class_id&#x27;</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>], </span><br><span class="line">         <span class="string">&#x27;gender&#x27;</span>:[<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;F&#x27;</span>], </span><br><span class="line">         <span class="string">&#x27;age&#x27;</span>:[<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>], </span><br><span class="line">         <span class="string">&#x27;score&#x27;</span>:[<span class="number">98</span>,<span class="number">74</span>,<span class="number">67</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">29</span>,<span class="number">32</span>,<span class="number">34</span>,<span class="number">85</span>,<span class="number">64</span>,<span class="number">52</span>,<span class="number">38</span>,<span class="number">26</span>,<span class="number">89</span>,<span class="number">68</span>,<span class="number">46</span>,<span class="number">32</span>,<span class="number">78</span>,<span class="number">79</span>,<span class="number">87</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(</span><br><span class="line">         &#123;<span class="string">&#x27;class_id&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>],</span><br><span class="line">         <span class="string">&#x27;class_name&#x27;</span>: [<span class="string">&#x27;ClassA&#x27;</span>, <span class="string">&#x27;ClassB&#x27;</span>, <span class="string">&#x27;ClassC&#x27;</span>, <span class="string">&#x27;ClassE&#x27;</span>]&#125;)</span><br><span class="line"><span class="comment"># 合并两个DataFrame</span></span><br><span class="line">data = pd.merge(left,right)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p><strong>透视表</strong></p><p>透视表(pivot table)是各种电子表格程序和其他数据分析软件中一种常见的数据汇总工具。<strong>它根据一个或多个键对数据进行分组聚合，并根据每个分组进行数据汇总</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以class_id与gender做分组汇总数据，默认聚合统计所有列</span></span><br><span class="line"><span class="built_in">print</span>(data.pivot_table(index=[<span class="string">&#x27;class_id&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以class_id与gender做分组汇总数据，聚合统计score列</span></span><br><span class="line"><span class="built_in">print</span>(data.pivot_table(index=[<span class="string">&#x27;class_id&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>], values=[<span class="string">&#x27;score&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以class_id与gender做分组汇总数据，聚合统计score列，针对age的每个值列级分组统计</span></span><br><span class="line"><span class="built_in">print</span>(data.pivot_table(index=[<span class="string">&#x27;class_id&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>], values=[<span class="string">&#x27;score&#x27;</span>], </span><br><span class="line">                       columns=[<span class="string">&#x27;age&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以class_id与gender做分组汇总数据，聚合统计score列，针对age的每个值列级分组统计，添加行、列小计</span></span><br><span class="line"><span class="built_in">print</span>(data.pivot_table(index=[<span class="string">&#x27;class_id&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>], values=[<span class="string">&#x27;score&#x27;</span>], </span><br><span class="line">                       columns=[<span class="string">&#x27;age&#x27;</span>], margins=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以class_id与gender做分组汇总数据，聚合统计score列，针对age的每个值列级分组统计，添加行、列小计</span></span><br><span class="line"><span class="built_in">print</span>(data.pivot_table(index=[<span class="string">&#x27;class_id&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>], values=[<span class="string">&#x27;score&#x27;</span>], </span><br><span class="line">                       columns=[<span class="string">&#x27;age&#x27;</span>], margins=<span class="literal">True</span>, aggfunc=<span class="string">&#x27;max&#x27;</span>))</span><br></pre></td></tr></table></figure><p><strong>交叉表</strong></p><p>交叉表(cross-tabulation, 简称crosstab)是一种用于<strong>计算分组频率的特殊透视表</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照class_id分组，针对不同的gender，统计数量</span></span><br><span class="line"><span class="built_in">print</span>(pd.crosstab(data.class_id, data.gender, margins=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure><h3 id="pandas可视化"><a href="#pandas可视化" class="headerlink" title="pandas可视化"></a>pandas可视化</h3><p><strong>基本绘图：绘图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">10</span>,<span class="number">4</span>),index=pd.date_range(<span class="string">&#x27;2018/12/18&#x27;</span>,</span><br><span class="line">   periods=<span class="number">10</span>), columns=<span class="built_in">list</span>(<span class="string">&#x27;ABCD&#x27;</span>))</span><br><span class="line">df.plot()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p>plot方法允许除默认线图之外的少数绘图样式。 这些方法可以作为<code>plot()</code>的<code>kind</code>关键字参数。这些包括 ：</p><ul><li><code>bar</code>或<code>barh</code>为条形</li><li><code>hist</code>为直方图</li><li><code>scatter</code>为散点图</li></ul><p><strong>条形图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">10</span>,<span class="number">4</span>),columns=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">df.plot.bar()</span><br><span class="line"><span class="comment"># df.plot.bar(stacked=True)</span></span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p><strong>直方图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame()</span><br><span class="line">df[<span class="string">&#x27;a&#x27;</span>] = pd.Series(np.random.normal(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1000</span>)-<span class="number">1</span>)</span><br><span class="line">df[<span class="string">&#x27;b&#x27;</span>] = pd.Series(np.random.normal(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1000</span>))</span><br><span class="line">df[<span class="string">&#x27;c&#x27;</span>] = pd.Series(np.random.normal(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1000</span>)+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df.plot.hist(bins=<span class="number">20</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p><strong>散点图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">50</span>, <span class="number">4</span>), columns=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">df.plot.scatter(x=<span class="string">&#x27;a&#x27;</span>, y=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p><strong>饼状图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(<span class="number">3</span> * np.random.rand(<span class="number">4</span>), index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], columns=[<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line">df.plot.pie(subplots=<span class="literal">True</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h4 id="数据读取与存储"><a href="#数据读取与存储" class="headerlink" title="数据读取与存储"></a>数据读取与存储</h4><p><strong>读取与存储csv：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filepath 文件路径。该字符串可以是一个URL。有效的URL方案包括http，ftp和file </span></span><br><span class="line"><span class="comment"># sep 分隔符。read_csv默认为“,”，read_table默认为制表符“[Tab]”。</span></span><br><span class="line"><span class="comment"># header 接收int或sequence。表示将某行数据作为列名。默认为infer，表示自动识别。</span></span><br><span class="line"><span class="comment"># names 接收array。表示列名。</span></span><br><span class="line"><span class="comment"># index_col 表示索引列的位置，取值为sequence则代表多重索引。 </span></span><br><span class="line"><span class="comment"># dtype 代表写入的数据类型（列名为key，数据格式为values）。</span></span><br><span class="line"><span class="comment"># engine 接收c或者python。代表数据解析引擎。默认为c。</span></span><br><span class="line"><span class="comment"># nrows 接收int。表示读取前n行。</span></span><br><span class="line"></span><br><span class="line">pd.read_table(</span><br><span class="line">    filepath_or_buffer, sep=<span class="string">&#x27;\t&#x27;</span>, header=<span class="string">&#x27;infer&#x27;</span>, names=<span class="literal">None</span>, </span><br><span class="line">    index_col=<span class="literal">None</span>, dtype=<span class="literal">None</span>, engine=<span class="literal">None</span>, nrows=<span class="literal">None</span>) </span><br><span class="line">pd.read_csv(</span><br><span class="line">    filepath_or_buffer, sep=<span class="string">&#x27;,&#x27;</span>, header=<span class="string">&#x27;infer&#x27;</span>, names=<span class="literal">None</span>, </span><br><span class="line">    index_col=<span class="literal">None</span>, dtype=<span class="literal">None</span>, engine=<span class="literal">None</span>, nrows=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.to_csv(excel_writer=<span class="literal">None</span>, sheetname=<span class="literal">None</span>, header=<span class="literal">True</span>, index=<span class="literal">True</span>, index_label=<span class="literal">None</span>, mode=’w’, encoding=<span class="literal">None</span>) </span><br></pre></td></tr></table></figure><p><strong>读取与存储excel：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># io 表示文件路径。</span></span><br><span class="line"><span class="comment"># sheetname 代表excel表内数据的分表位置。默认为0。 </span></span><br><span class="line"><span class="comment"># header 接收int或sequence。表示将某行数据作为列名。默认为infer，表示自动识别。</span></span><br><span class="line"><span class="comment"># names 表示索引列的位置，取值为sequence则代表多重索引。</span></span><br><span class="line"><span class="comment"># index_col 表示索引列的位置，取值为sequence则代表多重索引。</span></span><br><span class="line"><span class="comment"># dtype 接收dict。数据类型。</span></span><br><span class="line">pandas.read_excel(io, sheetname=<span class="number">0</span>, header=<span class="number">0</span>, index_col=<span class="literal">None</span>, names=<span class="literal">None</span>, dtype=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.to_excel(excel_writer=<span class="literal">None</span>, sheetname=<span class="literal">None</span>, header=<span class="literal">True</span>, index=<span class="literal">True</span>, index_label=<span class="literal">None</span>, mode=’w’, encoding=<span class="literal">None</span>) </span><br></pre></td></tr></table></figure><p><strong>读取与存储JSON：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过json模块转换为字典，再转换为DataFrame</span></span><br><span class="line">pd.read_json(<span class="string">&#x27;../ratings.json&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="movielens电影评分数据分析"><a href="#movielens电影评分数据分析" class="headerlink" title="movielens电影评分数据分析"></a>movielens电影评分数据分析</h2><p>需求如下：</p><ol><li><p>读取数据，从用户表读取用户信息、同样方法，导入电影评分表、电影数据表。</p></li><li><p>合并数据表</p></li><li><p>对数据初步描述分析</p></li><li><p>查看每一部电影不同性别的平均评分并计算分歧差值，之后排序</p></li><li><p>算出每部电影平均得分并对其进行排序</p></li><li><p>查看评分次数多的电影并进行排序 </p></li><li><p>过滤掉评分条目数不足250条的电影</p></li><li><p>评分最高的十部电影</p></li><li><p>查看不同年龄的分布情况并且采用直方图进行可视化</p></li><li><p>在原数据中标记出用户位于的年龄分组</p></li><li><p>可视化显示movies_ratings中不同类型电影的频数</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> AI进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习</title>
      <link href="/2019/11/14/ml/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/11/14/ml/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.rencheng.cc/blog/fb5iw.jpg"><br>这个世界正在发生一些不可思议的事，而且完全超出你的想象</p><span id="more"></span><h2 id="深度学习概述"><a href="#深度学习概述" class="headerlink" title="深度学习概述"></a>深度学习概述</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>早期的深度学习受到了神经科学的启发，它们之间有着非常密切的联系。深度学习方法能够具备提取抽象特征的能力，也可以看作是从生物神经网络中获得了灵感。</p><h3 id="机器学习与深度学习对比"><a href="#机器学习与深度学习对比" class="headerlink" title="机器学习与深度学习对比"></a>机器学习与深度学习对比</h3><p><strong>传统机器学习过程</strong></p><ol><li>特征提取与人工整理</li><li>选择机器学习模型</li><li>针对训练集进行模型训练，得到最优模型参数</li><li>针对测试集进行测试，得到预测结果</li></ol><p><strong>深度学习过程（以图像数据为例）</strong></p><ol><li>输入（原始图片数据）</li><li>提取基础特征（灰度处理，整理基础图片特征数据，图像像素）</li><li>提取复杂特征（可以有多个步骤，每次提取获取不同的图像信息：线条、简单形状、复杂形状）</li><li>模型训练，得到最优模型参数      </li><li>得到预测结果</li></ol><p>传统机器学习算法需要在样本数据输入模型前经历一个人工特征提取的步骤，之后通过算法更新模型的权重参数。经过这样的步骤后，当在有一批符合样本特征的数据输入到模型中时，模型就能得到一个可以接受的预测结果。</p><p>而深度学习算法不需要在样本数据输入模型前经历一个人工特征提取的步骤，将样本数据输入到算法模型中后，模型会从样本中提取基本的特征（图像的像素）。之后，随着模型的逐步深入，从这些基本特征中组合出了更高层的特征，比如线条，简单形状（如汽车轮毂边缘）等。此时的特征还是抽象的，我们无法形象这些特征组合起来会得到什么，简单形状可以被进一步组合，在模型越深入的地方，这些简单的形状也逐步地转化成更加复杂的特征（特征开始具体化，比如看起来更像一个轮毂而不是车身），这就使得不同类别的图像更加可分。这时，将这些提取到的特征再经历类似的机器学习算法中的更新模型权重参数等步骤，也就可以得到一个令人满意的结果。</p><h2 id="神经网络简介"><a href="#神经网络简介" class="headerlink" title="神经网络简介"></a>神经网络简介</h2><h3 id="神经元"><a href="#神经元" class="headerlink" title="神经元"></a>神经元</h3><p>生物学神经元简单介绍</p><p>1904年生物学家就已经知晓了神经元的组成结构。</p><p><img src="https://cdn.rencheng.cc/blog/ewcub.png"></p><ol><li><p>每个神经元都是一个信息处理单元，且具有多输入但输出特性。</p></li><li><p>神经元的输入可分为兴奋性输入和抑制性输入两种类型。</p></li><li><p>神经元阈值特性，当细胞体膜内外电位差（由突触输入信号总和）超过阈值时产生脉冲，神经细胞进入兴奋状态。</p></li><li><p>信息在突触结构间的传递存在延迟，神经元的输入与输出之间也具有一定的延时。</p></li></ol><h3 id="突触"><a href="#突触" class="headerlink" title="突触"></a>突触</h3><p><img src="https://cdn.rencheng.cc/blog/4rsqz.jpg"></p><p>突触是由突触前膜，突触间隙和突触后膜三部分构成，一个神经元的轴突末梢经过多次分支，最后每一小支的末端膨大呈杯状或球状，叫做突触小体。这些突触小体可以与多个神经元的细胞体或树突相接触而形成突触（一个神经元可以与多个突触小体进行连接）。</p><p>化学突触指的是突触前膜借助化学信号（即递质）将信息转送到突触后细胞；而电突触则借助电信号。化学突触和电突触都又相应地被分为兴奋性突触和抑制性突触。使下一个神经元产生兴奋效应的为兴奋性突触，使下一个神经元禅师抑制效应的为抑制性突触。因此看来，突触的主要作用是在神经元细胞传递信息。</p><h3 id="人工神经网络"><a href="#人工神经网络" class="headerlink" title="人工神经网络"></a>人工神经网络</h3><p>接下来我们仿照神经元模型建立一个人工神经网络，简称神经网络或连接模型。这是一种模仿动物神经网络行为特征，进行分布式信息处理的数学算法模型，本质就是按照生物神经圆的结构和工作原理构造出来一个抽象和简化了的数学模型。</p><p>这个模型不必模拟生物神经元的所有属性和行为，但要足以模拟它执行计算的过程。处理简单易表达的目的，我们忽略了不太相关的复杂因素。我们的人工神经网络模型是一个包含输入，输出与计算功能的模型。输入可以类比为神经元的树突，而输出可以类比为神经元的轴突，计算则可以类比为细胞核。</p><p>下图是一个典型的神经元模型：包含有2个输入，1个阈值，1个输出，以及2个计算功能。这些线称为“连接”。每个上有一个“权值”。</p><p><img src="https://cdn.rencheng.cc/blog/bp2sp.png"></p><p> 对于某一个神经元，它可能同时接收了多个输入信号（输入1，2），神经元之间考形成突触的方式构成神经网络，但各个突触的结构的性质与连接强度不尽相同，具体表示时相同的输入可能对不同的神经元有不同的影响。引入权重值的目的就是为了模拟突触的这种表现，其征途代表了生物神经元中突出的兴奋或抑制，其大小则表示突触间的不同连接强度。</p><p>b 表示一个阈值。</p><p>考虑到神经元的累加性，我们对全部的输入信号进行累加整合，相当于生物神经元中膜电位的变化总量，其值可以用下述公式表示：</p><p><img src="https://cdn.rencheng.cc/blog/312r2.png"></p><p>生物神经元的激活与否取决于输入信号与某一阈值电平的比较。在神经元模型中也是类似的，只有当其输入总和超过阈值b是才会被激活，否则神经元不会被激活，当处于激活后，可以计算出y值。</p><p>之后会在进行一个非线性变换，也就是经过非线性激活函数，计算出该节点的输出（激活值）a &#x3D; g(y)</p><p>其中g(y) 为非线性函数。在深度学习中，常用的激活函数主要有，sigmid, tanh, ReLu。</p><p>比如此时我们选用sigmoid函数，该函数是将取值为负无穷到正无穷的数映射到（0，1）之间。Sigmoid函数的公式及图形如下。</p><p><img src="https://cdn.rencheng.cc/blog/eq2ii.png"></p><p>若神经元的激活a为正值，称改神经元处于激活状态或兴奋状态，若a为负值，则称神经元处于抑制状态。</p><h3 id="神经网络基本结构"><a href="#神经网络基本结构" class="headerlink" title="神经网络基本结构"></a>神经网络基本结构</h3><p>简单神经网络可分为三层，分别是输入层、输出层、以及中间的隐藏层</p><p><img src="https://cdn.rencheng.cc/blog/2omir.png"></p><p>输入层有3个输入单元，隐藏层有4个单元，输出层有2个单元。</p><ol><li><p>设计一个神经网络时，输入层与输出层的节点数往往是固定的，中间层则可以自由指定；</p></li><li><p>神经网络结构图中的拓扑与箭头代表着预测过程时数据的流向，跟训练时的数据流有一定的区别；</p></li><li><p>结构图里的关键不是圆圈（代表“神经元”），而是连接线（代表“神经元”之间的连接）。每个连接线对应一个不同的权重（其值称为权值），这是需要训练得到的。</p></li></ol><h3 id="神经网络训练过程"><a href="#神经网络训练过程" class="headerlink" title="神经网络训练过程"></a>神经网络训练过程</h3><ol><li><p>整理输入与输出</p><p>我们有一组样本数据。每个样本有三个输入特征与一个输出结果。我们需要做的就是通过三个输入特征值预测输出。</p></li><li><p>模型搭建与训练</p><p>依据设计好的神经网络结构，为每一层的输入分配权重，完成神经网络正向结构搭建。基于正向传播计算样本预测输出。根据已知训练样本，设计损失函数，基于反向传播不断迭代更新每一层的权重参数使得损失函数值向最低点快速收敛。</p></li><li><p>预测</p><p>使用训练好的一组权重，对未知输出的输入进行结果预测。</p></li></ol><h4 id="正向传播（FP-Forward-Propagation）"><a href="#正向传播（FP-Forward-Propagation）" class="headerlink" title="正向传播（FP - Forward Propagation）"></a>正向传播（FP - Forward Propagation）</h4><p><img src="https://cdn.rencheng.cc/blog/zwzod.png"></p><p>正向传播推导过程如下：<br>$$<br>layer_0 &#x3D; X \<br>$$<br>根据第一层权重计算第一层结果：<br>$$<br>layer_1 &#x3D; sigmoid(layer_0 \times W_1)<br>$$<br>根据第二层权重计算当前样本的预测输出：<br>$$<br>layer_2(out) &#x3D; sigmoid(layer_1 \times W_2)) &#x3D; y’<br>$$</p><h4 id="反向传播（BP-Backward-Propagation）"><a href="#反向传播（BP-Backward-Propagation）" class="headerlink" title="反向传播（BP - Backward Propagation）"></a>反向传播（BP - Backward Propagation）</h4><p>根据预测结果与实际结果的误差设计损失函数，对损失函数求偏导，随着迭代次数的不断增加。从而从后向前更新权重的过程称为反向传播。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ol><li>设计神经网络结构，按照已定结构训练神经网络实现分类业务。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line"><span class="comment"># sigmiod 函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">active</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># sigmoid函数导函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backward</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * (<span class="number">1</span> - x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单层网路前向传播</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">x, w</span>):</span><br><span class="line">    <span class="keyword">return</span> np.dot(x, w)</span><br><span class="line"></span><br><span class="line">x = np.array([</span><br><span class="line">    [<span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">4</span>, -<span class="number">1</span>]])</span><br><span class="line">y = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]).reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机初始化权重[-1 1)</span></span><br><span class="line">w0 = <span class="number">2</span> * np.random.random((<span class="number">2</span>, <span class="number">4</span>)) - <span class="number">1</span></span><br><span class="line">w1 = <span class="number">2</span> * np.random.random((<span class="number">4</span>, <span class="number">1</span>)) - <span class="number">1</span></span><br><span class="line">lrate = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">    l0 = x</span><br><span class="line">    l1 = active(forward(l0, w0))</span><br><span class="line">    l2 = active(forward(l1, w1))</span><br><span class="line">    <span class="comment"># 损失</span></span><br><span class="line">    l2_error = y - l2</span><br><span class="line">    <span class="keyword">if</span> (j % <span class="number">100</span>) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Error:&quot;</span> + <span class="built_in">str</span>(np.mean(np.<span class="built_in">abs</span>(l2_error))))</span><br><span class="line">    l2_delta = l2_error * backward(l2)</span><br><span class="line">    w1 += l1.T.dot(l2_delta * lrate)</span><br><span class="line">    l1_error = l2_delta.dot(w1.T)</span><br><span class="line">    l1_delta = l1_error * backward(l1)</span><br><span class="line">    w0 += l0.T.dot(l1_delta * lrate)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">x</span>):</span><br><span class="line">    l0 = x</span><br><span class="line">    l1 = active(forward(l0, w0))</span><br><span class="line">    l2 = active(forward(l1, w1))</span><br><span class="line">    result = np.zeros_like(l2)</span><br><span class="line">    result[l2&gt;<span class="number">0.5</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">500</span></span><br><span class="line">l, r = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">b, t = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">grid_x = np.meshgrid(np.linspace(l, r, n),</span><br><span class="line">                     np.linspace(b, t, n))</span><br><span class="line">flat_x = np.column_stack((grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()))   </span><br><span class="line"></span><br><span class="line">flat_y = predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">mp.figure(<span class="string">&#x27;SVM Linear Classification&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;SVM Linear Classification&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">mp.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=y.ravel(), cmap=<span class="string">&#x27;brg&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><ol start="2"><li>封装模型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ANNModel</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 随机初始化权重[-1 1)</span></span><br><span class="line">        <span class="variable language_">self</span>.w0 = <span class="number">2</span> * np.random.random((<span class="number">2</span>, <span class="number">4</span>)) - <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.w1 = <span class="number">2</span> * np.random.random((<span class="number">4</span>, <span class="number">1</span>)) - <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.lrate = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># sigmiod 函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">active</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sigmoid函数导函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> x * (<span class="number">1</span> - x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单层网路前向传播</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, w</span>):</span><br><span class="line">        <span class="keyword">return</span> np.dot(x, w)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fit</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">            l0 = x</span><br><span class="line">            l1 = <span class="variable language_">self</span>.active(<span class="variable language_">self</span>.forward(l0, <span class="variable language_">self</span>.w0))</span><br><span class="line">            l2 = <span class="variable language_">self</span>.active(<span class="variable language_">self</span>.forward(l1, <span class="variable language_">self</span>.w1))</span><br><span class="line">            <span class="comment"># 损失</span></span><br><span class="line">            l2_error = y - l2</span><br><span class="line">            <span class="keyword">if</span> (j % <span class="number">100</span>) == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;Error:&quot;</span> + <span class="built_in">str</span>(np.mean(np.<span class="built_in">abs</span>(l2_error))))</span><br><span class="line">            l2_delta = l2_error * <span class="variable language_">self</span>.backward(l2)</span><br><span class="line">            <span class="variable language_">self</span>.w1 += l1.T.dot(l2_delta * <span class="variable language_">self</span>.lrate)</span><br><span class="line">            l1_error = l2_delta.dot(<span class="variable language_">self</span>.w1.T)</span><br><span class="line">            l1_delta = l1_error * <span class="variable language_">self</span>.backward(l1)</span><br><span class="line">            <span class="variable language_">self</span>.w0 += l0.T.dot(l1_delta * <span class="variable language_">self</span>.lrate)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">self, x</span>):</span><br><span class="line">        l0 = x</span><br><span class="line">        l1 = <span class="variable language_">self</span>.active(<span class="variable language_">self</span>.forward(l0, <span class="variable language_">self</span>.w0))</span><br><span class="line">        l2 = <span class="variable language_">self</span>.active(<span class="variable language_">self</span>.forward(l1, <span class="variable language_">self</span>.w1))</span><br><span class="line">        result = np.zeros_like(l2)</span><br><span class="line">        result[l2&gt;<span class="number">0.5</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">x = np.array([</span><br><span class="line">    [<span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">4</span>, -<span class="number">1</span>]])</span><br><span class="line">y = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]).reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">500</span></span><br><span class="line">l, r = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">b, t = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">grid_x = np.meshgrid(np.linspace(l, r, n),</span><br><span class="line">                     np.linspace(b, t, n))</span><br><span class="line">flat_x = np.column_stack((grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()))   </span><br><span class="line">model = ANNModel()</span><br><span class="line">model.fit(x)</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">mp.figure(<span class="string">&#x27;SVM Linear Classification&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;SVM Linear Classification&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">mp.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=y.ravel(), cmap=<span class="string">&#x27;brg&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="神经网络的实现过程"><a href="#神经网络的实现过程" class="headerlink" title="神经网络的实现过程"></a>神经网络的实现过程</h2><p>1、准备数据集，提取特征，作为输入喂给神经网络（ Neural Network NN)<br>2、搭建 NN 结构，从输入到输出（先搭建计算图，再用会话执行）<br>3、大量特征数据喂给 NN ，迭代优化 NN 参数<br>4、使用训练好的模型预测和分类</p><h3 id="基于tensorflow的前向传播"><a href="#基于tensorflow的前向传播" class="headerlink" title="基于tensorflow的前向传播"></a>基于tensorflow的前向传播</h3><p>变量初始化：在 sess.run 函数中用 tf.global_variables_initializer() 汇总所有待优化变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">init_op = tf.global_variables_initializer()</span><br><span class="line">sess.run(init_op)</span><br></pre></td></tr></table></figure><p>计算图节点运算：在sess.run函数中写入待运算的节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sess.run(y)</span><br></pre></td></tr></table></figure><p>用 tf.placeholder占位，在 sess.run 函数中用函数中用 feed_dict喂数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"><span class="comment">#喂一组数据：</span></span><br><span class="line">x = tf.placeholder(tf.float32, shape=(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">y = x + x</span><br><span class="line">r = sess.run(y, feed_dict=&#123;x: [[<span class="number">0.5</span>,<span class="number">0.6</span>]]&#125;)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="comment">#喂多组数据：</span></span><br><span class="line">x = tf.placeholder(tf.float32, shape=(<span class="literal">None</span>, <span class="number">2</span>))</span><br><span class="line">y = tf.reduce_sum(x, <span class="number">0</span>)</span><br><span class="line">r = sess.run(y, feed_dict=&#123;x: [[<span class="number">0.1</span>,<span class="number">0.2</span>],[<span class="number">0.2</span>,<span class="number">0.3</span>],[<span class="number">0.3</span>,<span class="number">0.4</span>],[<span class="number">0.4</span>,<span class="number">0.5</span>]]&#125;)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><h3 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h3><p>反向传播 ：训练模型参数 ，在所有参数上用梯度下降，使神经网络模型在训练数据上的损失函数最小。</p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>损失函数的计算有很多方法。</p><h4 id="解决回归问题的损失函数：均方误差MSE"><a href="#解决回归问题的损失函数：均方误差MSE" class="headerlink" title="解决回归问题的损失函数：均方误差MSE"></a>解决回归问题的损失函数：均方误差MSE</h4><p><img src="https://cdn.rencheng.cc/blog/7vl0x.png"></p><p>用tensorflow 函数表示为loss_mse &#x3D; tf.reduce_mean(tf.square(y_ - y))</p><p>反向传播训练方法： 以减小 loss 值为优化目标 ，有梯度下降 、  adam优化器等优化方法。</p><p>这两种优化方法用tensorflow 的函数可以表示为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">train_step=tf.train.GradientDescentOptimizer(learning_rate).minimize(loss)</span><br><span class="line"></span><br><span class="line">train_step=tf.train.AdamOptimizer(learning_rate).minimize(loss)</span><br></pre></td></tr></table></figure><ol><li><p>tf.train.GradientDescentOptimizer 使用随机梯度下降算法，使参数沿着<br>梯度的反方向，即总损失减小的方向移动，实现更新参数。</p><p>其中，𝐽(𝜃)为损失函数， 𝜃为参数， 𝛼为学习率。</p><p> <img src="https://cdn.rencheng.cc/blog/lre1k.png"></p></li><li><p>tf.train.AdamOptimizer() 是利用自适应学习率的优化算法， Adam 算法和随机梯度下降算法不同。随机梯度下降算法保持单一的学习率更新所有的参数，学习率在训练过程中并不会改变。而 Adam 算法通过计算梯度的一阶矩估计和二阶矩估计而为不同的参数设计独立的自适应性学习率。</p></li></ol><p>学习率 learning_rate： 决定每次参数更新的幅度。<br>优化器中都需要一个叫做学习率的参数，使用时如果学习率选择过大会导致待优化的参数在最小值附近波动不收敛的情况，如果学习率选择过小，会出现收敛速度慢的情况。 我们可以选个比较小的值填入， 比如 0.01 、 0.001。</p><h4 id="解决分类问题的损失函数：交叉熵（-cross-entropy-）"><a href="#解决分类问题的损失函数：交叉熵（-cross-entropy-）" class="headerlink" title="解决分类问题的损失函数：交叉熵（ cross entropy ）"></a>解决分类问题的损失函数：交叉熵（ cross entropy ）</h4><p>假设有两个分布p（1, 0, 0）与 q（0.8, 0.1, 0.1），则它们在给定样本集上的交叉熵定义如下：<br>$$<br>CE(p,q)&#x3D;−\sum_{}p(x)logq(x)<br>$$</p><hr><p>用Tensorflow 函数表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ce=-tf.reduce_sum(p * tf.log(tf.clip_by_value(q, <span class="number">1e-12</span>, <span class="number">1.0</span>))) </span><br></pre></td></tr></table></figure><p>（1e-12 是为了防止log0出现）</p><p>两个神经网络模型解决二分类问题中，已知标准答案为p &#x3D; (1, 0)，第一个神经网络模型预测结果为q1&#x3D;(0.6, 0.4)，第二个神经网络模型预测结果为q2&#x3D;(0.8, 0.2)，判断哪个神经网络模型预测的结果更接近标准答案。<br>根据交叉熵的计算公式得：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">H1((1,0),(0.6,0.4)) = -(1*log0.6 + 0*log0.4) ≈≈ -(-0.222 + 0) = 0.222</span><br><span class="line">H2((1,0),(0.8,0.2)) = -(1*log0.8 + 0*log0.2) ≈≈ -(-0.097 + 0) = 0.097</span><br></pre></td></tr></table></figure><p>由于0.222&gt;0.097，所以预测结果y2与标准答案与标准答案y_更接近，y2预测更准确。</p><p><strong>总结：</strong></p><p>交叉熵刻画了两个概率分布之间的距离， 它是分类问题中使用比较广的一种损失函数。</p><p>交叉熵越大，两个概率分布距离越远， 两个概率分布越相异 ;</p><p>交叉熵越小，两个概率分布距离越近 ，两个概率分布越相似 。</p><h2 id="神经网络计算过程："><a href="#神经网络计算过程：" class="headerlink" title="神经网络计算过程："></a>神经网络计算过程：</h2><ol><li><p>导入模块，生成模拟数据集；<br>import<br>常量定义<br>生成数据集</p></li><li><p>前向传播：定义输入、参数和输出<br>x&#x3D;              y_ &#x3D;<br>w1&#x3D;           w2&#x3D;<br>a&#x3D;              y&#x3D;</p></li><li><p>反向传播：定义损失函数、反向传播方法<br>loss&#x3D;<br>train_step&#x3D;</p></li><li><p>生成会话，训练 STEPS 轮</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.session() <span class="keyword">as</span> sess</span><br><span class="line">    Init_op=tf.global_variables_initializer()</span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    STEPS=<span class="number">3000</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(STEPS):</span><br><span class="line">        start=</span><br><span class="line">        end=</span><br><span class="line">        sess.run(train_step, feed_dict:)</span><br></pre></td></tr></table></figure></li></ol><h3 id="基于tensorflow训练神经网络"><a href="#基于tensorflow训练神经网络" class="headerlink" title="基于tensorflow训练神经网络"></a>基于tensorflow训练神经网络</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding utf-8</span></span><br><span class="line"><span class="comment">#导入模块，生成模拟数据集</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">BATCH_SIZE =<span class="number">8</span></span><br><span class="line">seed =<span class="number">23455</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#基于seed产生随机数</span></span><br><span class="line">rng = np.random.RandomState(seed)</span><br><span class="line"><span class="comment">#随机数返回32行2列的矩阵，表示32组宽度和长度作为输入数据集</span></span><br><span class="line">X = rng.rand(<span class="number">32</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#从这个32行2列的矩阵中，取出一行，判断如果和小于1，给Y赋值1；</span></span><br><span class="line"><span class="comment"># 如果和不小于1，给Y赋值0，作为输入数据集的标签</span></span><br><span class="line">Y = [[<span class="built_in">int</span>(x0 +x1 &lt; <span class="number">1</span>)] <span class="keyword">for</span> (x0,x1) <span class="keyword">in</span> X]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;X:&quot;</span>,X)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Y:&quot;</span>,Y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义神经网络的输入、参数和输出，定义向前传播过程</span></span><br><span class="line">x = tf.placeholder(tf.float32, shape=(<span class="literal">None</span>,<span class="number">2</span>))</span><br><span class="line">y_ = tf.placeholder(tf.float32, shape=(<span class="literal">None</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">w1=tf.Variable(tf.random_normal([<span class="number">2</span>,<span class="number">3</span>],stddev=<span class="number">1</span>,seed=<span class="number">1</span>))</span><br><span class="line">w2=tf.Variable(tf.random_normal([<span class="number">3</span>,<span class="number">1</span>],stddev=<span class="number">1</span>,seed=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">a= tf.matmul(x,w1)</span><br><span class="line">y= tf.matmul(a,w2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义损失函数及反向传播方法</span></span><br><span class="line">loss=tf.reduce_mean(tf.square(y-y_))</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.001</span>).minimize(loss)</span><br><span class="line"><span class="comment">#train_step=tf.train.AdamOptimizer(0.001).minimize(loss)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成会话，训练STEPS轮</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    init_op=tf.global_variables_initializer()</span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    <span class="comment">#输出目前（未经训练）的参数取值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;w1:&quot;</span>, sess.run(w1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;w2:&quot;</span>, sess.run(w2))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#训练模型</span></span><br><span class="line">    STEPS= <span class="number">3000</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(STEPS):</span><br><span class="line">        start = (i*BATCH_SIZE) % <span class="number">32</span></span><br><span class="line">        end = start + BATCH_SIZE</span><br><span class="line">        sess.run(train_step,feed_dict=&#123;x:X[start:end], y_ :Y[start:end]&#125;)</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">500</span> ==<span class="number">0</span>:</span><br><span class="line">            total_loss = sess.run(loss,feed_dict=&#123;x:X,y_:Y&#125;)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;After %d training steps, loss on all data is %g&quot;</span>%(i,total_loss))</span><br><span class="line">    <span class="comment">#输出训练后的参数数值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;w1:&quot;</span>,sess.run(w1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;w2:&quot;</span>,sess.run(w2))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由神经网络的实现 结果，我们可以看出，总共 训练 3000 轮。 每轮从 X 的数据集和 Y 的标签中抽取相对应的从 start 开始到 end 结束个特征值 和 标签 喂入神经网络。 用 sess.run 求出 loss， 每 500 轮打印一次 loss 值 。经过 3000 轮后 我们打印出 最终训练好的 参数 w1 、 w2 。</p><h2 id="图像处理与CNN"><a href="#图像处理与CNN" class="headerlink" title="图像处理与CNN"></a>图像处理与CNN</h2><h3 id="计算机眼中的图像"><a href="#计算机眼中的图像" class="headerlink" title="计算机眼中的图像"></a>计算机眼中的图像</h3><p>在计算机中，对于图像存储是通过矩阵来存储的。照片分为黑白和彩色。在图像里我们相应的有灰度图和彩色图。</p><p>对于灰度图像，由于只有明暗的区别，因此只需要一个数字就可以表示出不同的灰度。通常用0表示最暗的黑色，255表示最亮的白色，介于0和255之间的整数则表示不同明暗程度的灰色。</p><p>对于彩色图像，我们用（R,G,B）三个数字来表示一个颜色，他们表示用红（R）、绿（G）、蓝（B）三种基本颜色叠加后的颜色。对于每种基本颜色，我们用0到255之间的整数表示这个颜色分量的明暗程度。</p><p><img src="https://cdn.rencheng.cc/blog/oa89o.png"></p><p>三个数字中对应的某种基本颜色的数字越大，表示该基本颜色的比例越大，例如（255,0,0）表示纯红色，（0,255,0）表示纯绿色，（135,206,255）表示天蓝色。</p><p>一张彩色图片我们可以用一个由整数组成的立方体阵列来表示。我们称这样的立方体排列的数字阵列为三阶张量（tensor）。这个三阶张量的长度与宽度就是图片的分辨率，高度为3.对于数字图像而言，三阶张量的高度也成为通道（channel）数，因此我们说彩色图像有3个通道。矩阵可以看成是高度为1的三阶张量。</p><h3 id="图像特征概述"><a href="#图像特征概述" class="headerlink" title="图像特征概述"></a>图像特征概述</h3><p>在深度学习出现之前，图像特征的设计一直是计算机视觉领域中一个重要的研究课题，在这个领域发展初期，人们手工设计了各种图像特征，这些特征可以描述图像的颜色、边缘、纹理等性质，结合机器学习技术，能解决物体识别和物体检测等实际问题。</p><p>既然图像在计算机中可以表示成三阶张量，那么从图像中提取特征便是对这个三阶张量进行运算的过程。其中非常重要的一种运算就是卷积。</p><h3 id="卷积运算"><a href="#卷积运算" class="headerlink" title="卷积运算"></a>卷积运算</h3><h4 id="卷积定义"><a href="#卷积定义" class="headerlink" title="卷积定义"></a>卷积定义</h4><p>卷积是两个变量在某范围内相乘后求和的结果。</p><h4 id="一维卷积"><a href="#一维卷积" class="headerlink" title="一维卷积"></a>一维卷积</h4><p>卷积运算的物理意义：一个函数（如：单位响应）在另一个函数（如:输入信号）上的加权叠加</p><p>有两个离散信号</p><p>待卷积信号 X&#x3D;[1,2,3,0,1,0]，</p><p>卷积核 H&#x3D;[1,2,1]</p><p>卷积运算 Y &#x3D; X * H</p><p><img src="https://cdn.rencheng.cc/blog/mmyal.jpg"></p><p><strong>valid</strong></p><p>自始至终卷积核都在“信号内”</p><p>最后得到的结果的长度会小于卷积信号的长度</p><p><img src="https://cdn.rencheng.cc/blog/zw5vr.jpg"></p><p><strong>same</strong></p><p>卷积核的中心刚好是从待卷积信号的第一个元素“划”到最后一个元素卷积结果的长度和待卷积信号长度一样</p><p><img src="https://cdn.rencheng.cc/blog/evqc3.jpg"></p><p><strong>full</strong> </p><p>从卷积核的最后一个元素开始，直到第一个元素到与待卷积信号第一个元素对齐卷积结果的长度是n+m-1</p><p><img src="https://cdn.rencheng.cc/blog/o6t3o.jpg"></p><h4 id="二维卷积"><a href="#二维卷积" class="headerlink" title="二维卷积"></a>二维卷积</h4><p>图像数据是5x5的二维矩阵，使用一个3x3的卷积核，从左到右从上到下滑动。滑动的过程称为stride，一个卷积层有两个stride，分别从上到下，从左到右，步长一般设定为1或2。</p><p><img src="https://cdn.rencheng.cc/blog/vj3sh.jpg"></p><h4 id="利用卷积提取图像特征"><a href="#利用卷积提取图像特征" class="headerlink" title="利用卷积提取图像特征"></a>利用卷积提取图像特征</h4><p>卷积运算在图像处理中应用十分广泛，许多图像特征提取方法都会用到卷积。以灰度图为例，，我们知道在计算机中，一个灰度图像被表示为一个整数矩阵，如果我们用一个形状较小的矩阵和这个图像矩阵做卷积运算，就可以得到一个新的矩阵，这个新的矩阵可以看作是一副新的图像，换句话说，通过卷积运算，我们可以将原图像变换为一副新的图像。这幅新图像比原图像更清楚地表示了某些性质，我们就可以把它看做原图像的一个特征。</p><p>这里用到的小矩阵就称为卷积核（convolution kernel），通常，图像矩阵中的元素都是介于0到255的整数，但卷积核中的元素可以是任意实数。</p><p>通过卷积，我们可以从图像中提取边缘特征，在没有边缘的比较平坦的区域，图像的像素值的变化较小，而横向边缘上下两侧的像素值 差异明显，竖向边缘左右两侧的像素也会有较大差别。</p><p><img src="https://cdn.rencheng.cc/blog/6xlfw.jpg"></p><p>如上图，我们用1、0、-1 组成的卷积核与原图像进行卷积运算，可以从图像中提取出竖向边缘。</p><p><img src="https://cdn.rencheng.cc/blog/k5k81.jpg"></p><p>如上图，我们用三行1,0，-1组成的卷积核，从图中提取出了横向边缘。</p><p>事实上，这两个卷积核分别计算了原图像上每个3*3区域内左右像素或者上下像素的差值（为了将运算结果以图像的形式显示出来，我们对运算结果去了绝对值），通过这样的运算，我们就可以从图像上提取不同的边缘特征。</p><h3 id="卷积神经网络基本结构"><a href="#卷积神经网络基本结构" class="headerlink" title="卷积神经网络基本结构"></a>卷积神经网络基本结构</h3><p>Alex Net 神经网络</p><p><img src="https://cdn.rencheng.cc/blog/xzvij.png"></p><p>上图为Alex Net 神经网络的主体部分，主体部分有5个卷积层和3个全连接层组成</p><p>5个卷积层位于网络的最前端，依次<strong>对图像进行变换以提取特征</strong>；</p><p>每个卷积层之后都有一个<strong>ReLU</strong>非线性激活层<strong>完成非线性变换；</strong></p><p>第一、二、五个卷积层之后连接有最大池化 层，用以<strong>降低特征图的分辨率</strong>。</p><p>经过5个卷积层以及相连的非线性激活层与池化层之后，特征图被转换为4096维特征向量，在经过两次全连接层和ReLU层变换之后，成为最终的特征向量，在经过一个全连接层和一个softmax归一化指数层之后，就得到了对图片所属类型的预测。</p><h4 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h4><p>神经网络中的卷积层就是用卷积运算对原始图像或者上一层的特征进行变换的层。在前边的学习中，我们学习了边缘特征的提取，知道一种特定的卷积核可以对图像进行一种特定的变换，从而提取出某种特定的特征，如横向边缘或者竖向边缘。</p><p>在一个卷积层中，为了从图像中提取多种形式的特征，我们通常使用多个卷积核对输入的图像进行不同的卷积操作。一个卷积核可以得到一个通道为1的三阶张量，，多个卷积核就可以得到多个通道为1的三阶张量结果。我们把这些结果作为不同的通道组合起来，就可以得到一个新的三阶张量，这个三阶张量的通道数就等于我们使用的卷积核的个数。由于每一个通道都是从原图像中提取的一种特征，我们也将这个三阶张量称为特征图（feature map）。这个特征图就是卷积层的最终输出。</p><p>特征图与彩色图像都是三阶张量，也都有若干个通道。因此卷积层不仅可以作用于图像，也可以作用于其他输出的特征图。通常，一个深度神经网络的第一个卷积层会以图像作为输入，而之后的卷积层会以前面的特征图为输入。</p><h4 id="非线性激活层"><a href="#非线性激活层" class="headerlink" title="非线性激活层"></a>非线性激活层</h4><p>通常我们需要在每个卷积层和全连接层后面都连接一个非线性激活层（non-linear activation layer）。为什么呢？其实不管是卷积运算还是全连接层中的运算，他们都是自变量的一次函数，即所谓的线性函数（linear function）。线性函数有一个性质：若干线性计算的符合仍然是线性的。换句话说，如果我们只是将卷积层和全连接层直接堆叠起来，，那么它们对输入图片产生的效果就可以被一个全连接层替代。这样一来，虽然我们堆叠了很多层，但对每一层的变换效果实际上被合并到了一起。而如果我们在每次线性运算后，再进行一次非线性运算，那么每次变换的效果就可以保留。非线性激活层的形式与很多种，它们的基本形式是先选定某种非线性函数，然后对输入特征图或者特征向量的每一个元素应用这种非线性函数，得到输出。</p><p>常见的非线性函数有：</p><p>l  逻辑函数（logistic function）sigmoid</p><p><img src="https://cdn.rencheng.cc/blog/rmvyd.png"></p><p><img src="https://cdn.rencheng.cc/blog/ockpa.png"></p><p>l  双曲正切函数（hyperbolic tangent function）</p><p><img src="https://cdn.rencheng.cc/blog/k2h3o.png"></p><p><img src="https://cdn.rencheng.cc/blog/ips3q.png"></p><p>l  修正线性函数（rectified linear function）</p><p><img src="https://cdn.rencheng.cc/blog/4v4zl.png"></p><p><img src="https://cdn.rencheng.cc/blog/jv3oz.png"></p><p>前两者sigmoid&#x2F;tanh比较常见于全连接层，后者ReLU常见于卷积层。</p><p>激活函数是用来加入非线性因素的，使得神经网络可以任意逼近任何非线性函数，提高经网络对模型的表达能力，解决线性模型所不能解决的问题，这样神经网络就可以应用到众多的非线性模型中。</p><p>以ReLU层为例，对于输入的特征向量或特征图，他会将其中小于零的元素变成零，而其他元素的值保持不变，就得到了输出。</p><p><img src="https://cdn.rencheng.cc/blog/zkpow.png"></p><p>因为ReLU的计算非常简单，所以它的计算速度往往比其他非线性激活层快很多，价值其在实际应用中的效果也很好，因此在深度神经网络中被广泛地使用。</p><h4 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h4><p>在计算卷积时，我们会用卷积核滑过图像或者特征图的每一个像素。如果图像或者特征图的分辨率很多，那么卷积的计算量就会很大。为了解决 这个问题，我们通常在几个卷积层之后插入池化层（pooling layer），已降低特征图的分辨率。</p><p>池化层的基本操作步骤如下。首先，我们将特征图按通道分开，得到若干个矩阵。对于每个矩阵，我们将其切割成若干大小相等的正方形小块。如下图，我们将一个4<em>4的矩阵分割成4个正方形区块，每个区块的大小为2</em>2.接下来，我们对每一个区块取最大值或者平均值，并将结果组成一个新的矩阵。最后，我们将所有通道的结果矩阵按原顺序堆叠起来形成一个三阶张量，这个三阶张量就是池化层的输出。对于每一个区块取最大值的池化层，我们称之为最大池化层（<strong>max pooling</strong>），而取平均值的池化层成为平均池化层（<strong>average pooling layer</strong>）。</p><p><img src="https://cdn.rencheng.cc/blog/se5cf.png"></p><p>在经过池化后，特征图的长和宽都会减小到原来的1&#x2F;2，特征图中的元素数目减小到原来的1&#x2F;4。通常我们会在卷积层之后增加池化层。这样，在经过若干卷积、池化层的组合之后，在不考虑通道数的情况下，特征图的分辨率就会远小于输入图像的分辨率，大大减小了对计算量和参数数量的需求。</p><h4 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h4><p>全连接层在整个卷积神经网络中起到“分类器”的作用，即通过卷积、激活函数、池化等深度网络后，再经过全连接层对结果进行识别分类。：</p><p><img src="https://cdn.rencheng.cc/blog/ox5o4.png"></p><p>由于神经网络是属于监督学习，在模型训练时，根据训练样本对模型进行训练，从而得到全连接层的权重（如预测字母X的所有连接的权重)</p><p><img src="https://cdn.rencheng.cc/blog/umd4f.png"></p><p>最后计算出来字母X的识别值为0.92，字母O的识别值为0.51，则结果判定为X</p><p><img src="https://cdn.rencheng.cc/blog/m9yjx.png"></p><p>“卷积神经网络”（CNN）结构，如下图所示：</p><p><img src="https://cdn.rencheng.cc/blog/2quzh.png"></p><p><img src="https://cdn.rencheng.cc/blog/rwspj.png"></p><p>softmax实现多分类业务</p><h3 id="设计卷积神经网络实现手写数字识别"><a href="#设计卷积神经网络实现手写数字识别" class="headerlink" title="设计卷积神经网络实现手写数字识别"></a>设计卷积神经网络实现手写数字识别</h3><h4 id="mnist-数据集"><a href="#mnist-数据集" class="headerlink" title="mnist 数据集"></a>mnist 数据集</h4><p>mnist 数据集 ：包含 7 万张 黑底白字手写数字 图片， 其中 55000 张为训练集，5000 张为验证集， 1 0000 张 为测试集 。每张图片大小为 28*28 像素，图片中 纯 黑色像素 值为 0， 纯 白色像素值为 1 。数据集的标签是长度为 10 的一维数组，数组中每个元素索引号表示对应数字出现的概率 。</p><p>tf.cast(x,dtype) 函数表示将参数 x 转换为指定数据类型 。</p><p>tf.reduce_mean( x,axis 函数表示求取矩阵或张量指定维度的平均值。 </p><p>tf argmax(x,axis) 函数表示 返回 指定维度 axis 下，参数 x 中 最大值索引号 。</p><p>os.path.join 函数表示 把 参数 字符串按照路径命名规则拼接。</p><p>字符串 split( 函数表示 按照指定 拆分符 对字符串拆分 返回拆分列表 。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">&#x27;MNIST_data&#x27;</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成权重</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weight_variable</span>(<span class="params">shape</span>):</span><br><span class="line">  initial = tf.random_normal(shape, stddev=<span class="number">0.1</span>)</span><br><span class="line">  <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成b</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bias_variable</span>(<span class="params">shape</span>):</span><br><span class="line">  initial = tf.constant(<span class="number">0.1</span>, shape=shape)</span><br><span class="line">  <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="comment">#卷积层</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conv2d</span>(<span class="params">x, W</span>):</span><br><span class="line">  <span class="keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">&#x27;SAME&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max_pool_2x2</span>(<span class="params">x</span>):</span><br><span class="line">  <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">                        strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">&#x27;SAME&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建正向传播的神经网络</span></span><br><span class="line">x = tf.placeholder(<span class="string">&quot;float&quot;</span>, shape=[<span class="literal">None</span>, <span class="number">784</span>])</span><br><span class="line">y_ = tf.placeholder(<span class="string">&quot;float&quot;</span>, shape=[<span class="literal">None</span>, <span class="number">10</span>])</span><br><span class="line"><span class="comment"># 第一层操作   卷积/relu/池化</span></span><br><span class="line">W_conv1 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">32</span>])</span><br><span class="line">b_conv1 = bias_variable([<span class="number">32</span>])</span><br><span class="line">x_image = tf.reshape(x, [-<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>])</span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)</span><br><span class="line">h_pool1 = max_pool_2x2(h_conv1)</span><br><span class="line"><span class="comment"># 第二层操作   卷积/relu/池化</span></span><br><span class="line">W_conv2 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>])</span><br><span class="line">b_conv2 = bias_variable([<span class="number">64</span>])</span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)</span><br><span class="line">h_pool2 = max_pool_2x2(h_conv2)</span><br><span class="line"><span class="comment"># 第三层全连接  FC</span></span><br><span class="line">W_fc1 = weight_variable([<span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>, <span class="number">1024</span>])</span><br><span class="line">b_fc1 = bias_variable([<span class="number">1024</span>])</span><br><span class="line">h_pool2_flat = tf.reshape(h_pool2, [-<span class="number">1</span>, <span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])</span><br><span class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</span><br><span class="line"><span class="comment"># softmax</span></span><br><span class="line">W_fc2 = weight_variable([<span class="number">1024</span>, <span class="number">10</span>])</span><br><span class="line">b_fc2 = bias_variable([<span class="number">10</span>])</span><br><span class="line">y_conv=tf.nn.softmax(tf.matmul(h_fc1, W_fc2) + b_fc2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))</span><br><span class="line">    train_step = tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(cross_entropy)</span><br><span class="line">    correct_prediction = tf.equal(tf.argmax(y_conv,<span class="number">1</span>), tf.argmax(y_,<span class="number">1</span>))</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="string">&quot;float&quot;</span>))</span><br><span class="line">    sess.run(tf.initialize_all_variables())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20000</span>):</span><br><span class="line">        batch = mnist.train.next_batch(<span class="number">50</span>)</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            train_accuracy = accuracy.<span class="built_in">eval</span>(feed_dict=&#123;</span><br><span class="line">                x:batch[<span class="number">0</span>], y_: batch[<span class="number">1</span>]&#125;)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;step %d, training accuracy %g&quot;</span>%(i, train_accuracy))</span><br><span class="line">        train_step.run(feed_dict=&#123;x: batch[<span class="number">0</span>], y_: batch[<span class="number">1</span>]&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test accuracy %g&quot;</span>%accuracy.<span class="built_in">eval</span>(feed_dict=&#123;</span><br><span class="line">        x: mnist.test.images, y_: mnist.test.labels&#125;))</span><br></pre></td></tr></table></figure><p><strong>模型上线：</strong></p><p>MyModel.py</p><p>y &#x3D; model.predict(x)</p><p>假设模型用于预测股票价格，如果已经得到y，如何交给调用者？</p><p>设计web服务：</p><p>url:  <a href="http://172.10.0.13:8000/moviereco/%7BID%7D">http://172.10.0.13:8000/moviereco/{ID}</a></p><p>method: get</p><p>params: none</p><p>return: {status:200, data:[movie1id, movie2id, …….], msg:’no msg’}</p>]]></content>
      
      
      
        <tags>
            
            <tag> AI进阶 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django教程</title>
      <link href="/2019/11/11/django/Django%E6%95%99%E7%A8%8B/"/>
      <url>/2019/11/11/django/Django%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Django是一个开放源代码的Web应用框架，由Python写成。</p><span id="more"></span><h2 id="Django框架的介绍"><a href="#Django框架的介绍" class="headerlink" title="Django框架的介绍"></a>Django框架的介绍</h2><ul><li><p>2005年发布, 采用Python语言编写的开源web框架</p></li><li><p>早期的时候Django主做新闻和内容管理的</p></li><li><p>一个重量级的 Python Web框架，Django 配备了常用的大部分组件</p><ol><li>基本配置</li><li>路由系统</li><li>原生HTML模板系统</li><li>视图 view</li><li>Model模型,数据库连接和ORM数据库管理</li><li>中间件</li><li>Cookie &amp; Seesion</li><li>分页</li><li>数据库后台管理系统admin</li></ol></li><li><p>Django的用途</p><ul><li>网站后端开发</li><li>微信公众号、微信小程序等后台开发</li><li>基于HTTP&#x2F;HTTPS协议的后台服务器开发<ul><li>在线语音&#x2F;图像识别服务器</li><li>在线第三方身份验证服务器等</li></ul></li></ul></li><li><p>Django的版本</p><ul><li>最新版本:2.2.x</li><li>当前版本:1.11.8</li></ul></li><li><p>Django的官网</p><ul><li>官方网址: <a href="http://www.djangoproject.com/">http://www.djangoproject.com</a></li><li>中文文档(第三方):<ul><li><a href="https://yiyibooks.cn/">https://yiyibooks.cn/</a></li><li><a href="http://djangobook.py3k.cn/">http://djangobook.py3k.cn/</a></li></ul></li><li>Django的离线文档<ol><li>解压缩数据包 <code>django-docs-1.11-en.zip</code></li><li>用浏览器打开 <code>django-docs-1.11-en/index.html</code></li></ol></li></ul></li></ul><h3 id="Django的安装"><a href="#Django的安装" class="headerlink" title="Django的安装"></a>Django的安装</h3><ul><li><p>查看已安装的版本</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> django</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(django.VERSION)</span><br><span class="line">(<span class="number">1</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="string">&#x27;final&#x27;</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>安装</p><ol><li>在线安装<ul><li><code>$ sudo pip3 install django</code>  安装django的最新版本</li><li>或</li><li><code>$ sudo pip3 install django[==版本]</code> 安装django的指定版本</li><li>如:<ul><li><code>$ sudo pip3 install django==1.11.8</code></li></ul></li></ul></li><li>离线安装<ul><li>下载安装包:</li><li>安装离线包<ul><li><code>$ tar -xvf Django-1.11.8.tar.gz</code></li><li><code>$ cd Django-1.11.8</code></li><li><code>$ sudo python3 setup.py install</code></li></ul></li></ul></li><li>用wheel离线安装<ul><li>下载安装包:<ul><li><code>pip3 download -d /home/weimz/django_packs django==1.11.8</code></li></ul></li><li>安装离线包<ul><li>$ pip3 install Django-1.11.8.whl</li></ul></li></ul></li></ol></li><li><p>Django的卸载</p></li><li><p>$ pip3 uninstall django</p></li><li><p>Django 的开发环境</p><ul><li>Django 1.11.x 支持 Python 2.7, 3.4, 3.5 和 3.6（长期支持版本 LTS)</li><li>注: Django 1.11.x 不支持 Python 3.7</li></ul></li></ul><h2 id="Django框架开发"><a href="#Django框架开发" class="headerlink" title="Django框架开发"></a>Django框架开发</h2><h3 id="创建项目的指令"><a href="#创建项目的指令" class="headerlink" title="创建项目的指令"></a>创建项目的指令</h3><ul><li><p>$ django-admin startproject 项目名称</p></li><li><p>如:</p><ul><li>$ django-admin startproject mysite1</li></ul></li><li><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> mysite1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 manage.py runserver</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 manage.py runserver 5000  <span class="comment"># 指定只能本机使用127.0.0.1的5000端口访问本机</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Django项目的目录结构"><a href="#Django项目的目录结构" class="headerlink" title="Django项目的目录结构"></a>Django项目的目录结构</h3><ul><li><p>示例:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">django-admin startproject mysite1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree mysite1/</span></span><br><span class="line">mysite1/</span><br><span class="line">├── manage.py</span><br><span class="line">└── mysite1</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── settings.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── wsgi.py</span><br><span class="line"></span><br><span class="line">1 directory, 5 files</span><br></pre></td></tr></table></figure></li><li><p>项目目录结构解析:</p><ul><li>manage.py<ul><li>此文件是项目管理的主程序,在开发阶段用于管理整个项目的开发运行的调式</li><li><code>manage.py</code> 包含项目管理的子命令, 如:<ul><li><code>python3 manage.py runserver</code> 启动服务</li><li><code>python3 manage.py startapp</code> 创建应用</li><li><code>python3 manage.py migrate</code> 数据库迁移</li><li><code>...</code></li></ul></li></ul></li><li>mysite1 项目包文件夹<ul><li>项目包的主文件夹(默认与项目名称一致)</li></ul><ol><li><code>__init__.py</code><ul><li>包初始化文件,当此项目包被导入(import)时此文件会自动运行</li></ul></li><li><code>wsgi.py</code><ul><li>WSGI 即 Web Server Gateway Interface</li><li>WEB服务网关接口的配置文件，仅部署项目时使用</li></ul></li><li><code>urls.py</code><ul><li>项目的基础路由配置文件，所有的动态路径必须先走该文件进行匹配</li></ul></li><li><code>settings.py</code><ul><li>Django项目的配置文件, 此配置文件中的一些全局变量将为Django框架的运行传递一些参数</li><li>setting.py 配置文件,启动服务时自动调用，</li><li>此配置文件中也可以定义一些自定义的变量用于作用全局作用域的数据传递</li></ul></li></ol></li></ul></li><li><p><code>settings.py</code> 文件介绍</p><ol><li><p><code>BASE_DIR</code></p><ul><li>用于绑定当前项目的绝对路径(动态计算出来的), 所有文件都可以依懒此路径</li></ul></li><li><p><code>DEBUG</code></p><ul><li>用于配置Django项目的启用模式, 取值:<ol><li>True 表示开发环境中使用 <code>调试模式</code>(用于开发中)</li><li>False 表示当前项目运行在<code>生产环境中</code>(不启用调试)</li></ol></li></ul></li><li><p><code>ALLOWED_HOSTS</code></p><ul><li>设置允许访问到本项目的网络地址列表,取值:<ol><li>[] 空列表,表示只有<code>127.0.0.1</code>, <code>localhost</code>, ‘[::1]’ 能访问本项目</li><li>[‘*’]，表示任何网络地址都能访问到当前项目</li><li>[‘*.tedu.cn’, ‘weimingze.com’] 表示只有当前两个主机能访问当前项目</li></ol><ul><li>注意:<ul><li>如果要在局域网其它主机也能访问此主机,启动方式应使用如下模式:</li></ul></li><li><code>python3 manage.py runserver 0.0.0.0:5000</code> # 指定网络设备所有主机都可以通过5000端口访问(需加<code>ALLOWED_HOSTS = [&#39;*&#39;]</code>)</li></ul></li></ul></li><li><p><code>INSTALLED_APPS</code></p><ul><li>指定当前项目中安装的应用列表</li></ul></li><li><p><code>MIDDLEWARE</code></p><ul><li>用于注册中间件</li></ul></li><li><p><code>TEMPLATES</code></p><ul><li>用于指定模板的配置信息</li></ul></li><li><p><code>DATABASES</code></p><ul><li>用于指定数据库的配置信息</li></ul></li><li><p><code>LANGUAGE_CODE</code></p><ul><li>用于指定语言配置</li><li>取值:<ul><li>英文 : <code>&quot;en-us&quot;</code></li><li>中文 : <code>&quot;zh-Hans&quot;</code></li></ul></li></ul></li><li><p><code>TIME_ZONE</code></p><ul><li>用于指定当前服务器端时区</li><li>取值:<ul><li>世界标准时间: <code>&quot;UTC&quot;</code></li><li>中国时区 : <code>&quot;Asia/Shanghai&quot;</code></li></ul></li></ul></li><li><p><code>ROOT_URLCONF</code></p><ul><li>用于配置根级 url 配置 ‘mysite1.urls’</li><li>如:<ul><li><code>ROOT_URLCONF = &#39;mysite1.urls&#39;</code></li></ul></li></ul></li></ol><blockquote><p>注: 此模块可以通过 <code>from django.conf import settings</code> 导入和使用</p></blockquote></li></ul><h3 id="URL-介绍"><a href="#URL-介绍" class="headerlink" title="URL 介绍"></a>URL 介绍</h3><ul><li><p>url 即统一资源定位符 Uniform Resource Locator</p></li><li><p>作用:</p><ul><li>用来表示互联网上某个资源的地址。</li></ul></li><li><p>说明:</p><ul><li>互联网上的每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</li></ul></li><li><p>URL的一般语法格式为：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol :// hostname[:port] / path [?query][#fragment]</span><br></pre></td></tr></table></figure></li><li><p>如:</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://tts.tmooc.cn/video/showVideo?menuId=657421&amp;version=AID201908#subject</span><br></pre></td></tr></table></figure></li><li><p>说明:</p><ul><li><p>protocol（协议）</p><ul><li>http 通过 HTTP 访问该资源。 格式 <code>HTTP://</code></li><li>https 通过安全的 HTTPS 访问该资源。 格式 <code>HTTPS://</code></li><li>file 资源是本地计算机上的文件。格式: <code>file:///</code></li><li>…</li></ul></li><li><p>hostname（主机名）</p><ul><li>是指存放资源的服务器的域名系统(DNS) 主机名、域名 或 IP 地址。</li></ul></li><li><p>port（端口号）</p><ul><li>整数，可选，省略时使用方案的默认端口；</li><li>各种传输协议都有默认的端口号，如http的默认端口为80。</li></ul></li><li><p>path（路由地址）</p><ul><li>由零或多个“&#x2F;”符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。路由地址决定了服务器端如何处理这个请求</li></ul></li><li><p>query(查询)</p><ul><li>可选，用于给动态网页传递参数，可有多个参数，用“&amp;”符号隔开，每个参数的名和值用“&#x3D;”符号隔开。</li></ul></li><li><p>fragment（信息片断）</p><ul><li>字符串，用于指定网络资源中的片断。例如一个网页中有多个名词解释，可使用fragment直接定位到某一名词解释。</li></ul></li><li><p>注: [] 代表其中的内容可省略</p></li></ul></li></ul><h3 id="视图函数-view"><a href="#视图函数-view" class="headerlink" title="视图函数(view)"></a>视图函数(view)</h3><ul><li>视图函数是用于接收一个浏览器请求并通过HttpResponse对象返回数据的函数。此函数可以接收浏览器请求并根据业务逻辑返回相应的内容给浏览器</li><li>视图处理的函数的语法格式:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">xxx_view</span>(<span class="params">request[, 其它参数...]</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse对象</span><br></pre></td></tr></table></figure></li><li>参数:<ul><li>request用于绑定HttpRequest对象，通过此对象可以获取浏览器的参数和数据</li></ul></li><li>示例:<ul><li>视图处理函数 <code>views.py</code>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file : &lt;项目名&gt;/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page1_view</span>(<span class="params">request</span>):</span><br><span class="line">    html = <span class="string">&quot;&lt;h1&gt;这是第1个页面&lt;/h1&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Django-中的路由配置"><a href="#Django-中的路由配置" class="headerlink" title="Django 中的路由配置"></a>Django 中的路由配置</h3><ul><li>settings.py 中的<code>ROOT_URLCONF</code> 指定了主路由配置列表urlpatterns的文件位置</li><li>urls.py 主路由配置文件  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file : &lt;项目名&gt;/urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    ...  <span class="comment"># 此处配置主路由</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>urlpatterns 是一个路由-视图函数映射关的列表,此列表的映射关系由url函数来确定</p></blockquote></li></ul><ol start="3"><li><p>url() 函数</p><ul><li>用于描述路由与视图函数的对应关系</li><li>模块<ul><li><code>from django.conf.urls import url</code></li></ul></li><li>语法:<ul><li>url(regex, views, name&#x3D;None)</li><li>参数：<ol><li>regex: 字符串类型，匹配的请求路径，允许是正则表达式</li><li>views: 指定路径所对应的视图处理函数的名称</li><li>name: 为地址起别名，在模板中地址反向解析时使用</li></ol></li></ul></li></ul><blockquote><p>每个正则表达式前面的r表示<code>&#39;\&#39;</code>不转义的原始字符串</p></blockquote></li></ol><ul><li>练习<ul><li>建立一个小网站:<ul><li>输入网址: <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000</a>, 在网页中输出 : 这是我的首页</li><li>输入网址: <a href="http://127.0.0.1:8000/page1">http://127.0.0.1:8000/page1</a>, 在网页中输出 : 这是编号为1的网页</li><li>输入网址: <a href="http://127.0.0.1:8000/page2">http://127.0.0.1:8000/page2</a>, 在网页中输出 : 这是编号为2的网页<blockquote><p>提示: 主面路由的正则是  <code>r&#39;^$&#39;</code></p></blockquote></li><li>思考<ul><li>建立如上一百个网页该怎么办？</li></ul></li></ul></li></ul></li></ul><h4 id="带有分组的路由和视图函数"><a href="#带有分组的路由和视图函数" class="headerlink" title="带有分组的路由和视图函数"></a>带有分组的路由和视图函数</h4><ul><li>在视图函数内，可以用正则表达式分组 <code>()</code> 提取参数后用函数位置传参传递给视图函数</li><li>一个分组表示一个参数,多个参数需要使用多个分组,并且使用个&#x2F;隔开<ul><li>如:<ul><li><a href="http://127.0.0.1:8000/year/2018">http://127.0.0.1:8000/year/2018</a></li><li><a href="http://127.0.0.1:8000/year/2019">http://127.0.0.1:8000/year/2019</a></li><li><a href="http://127.0.0.1:8000/year/">http://127.0.0.1:8000/year/</a>????  # 四位数字</li></ul></li></ul></li><li>练习：<ul><li><p>定义一个路由的格式为:</p><ul><li><a href="http://127.0.0.1:8000/%E6%95%B4%E6%95%B0/%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%95%B4%E6%95%B0">http://127.0.0.1:8000/整数/操作字符串/整数</a></li></ul></li><li><p>从路由中提取数据，做相应的操作后返回给浏览器</p></li><li><p>如：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: 127.0.0.1:8000/100/add/200</span><br><span class="line">    页面显示结果：300</span><br><span class="line">输入: 127.0.0.1:8000/100/sub/200</span><br><span class="line">    页面显示结果：-100</span><br><span class="line">输入: 127.0.0.1:8000/100/mul/200</span><br><span class="line">    页面显示结果：20000</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="带有命名分组的路由和视图函数"><a href="#带有命名分组的路由和视图函数" class="headerlink" title="带有命名分组的路由和视图函数"></a>带有命名分组的路由和视图函数</h4><ul><li><p>在url 的正则表达式中可以使用命名分组(捕获分组)</p></li><li><p>说明:</p><ul><li>在视图函数内，可以用正则表达式分组 <code>(?P&lt;name&gt;pattern)</code> 提取参数后用函数位置传参传递给视图函数</li></ul></li><li><p>示例:</p><ul><li>路由配置文件  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file : &lt;项目名&gt;/urls.py</span></span><br><span class="line"><span class="comment"># 以下示例匹配</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/person/weimingze/35</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/person/shibowen/29</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/person/xiaowei/9</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r&#x27;^person/(?P&lt;name&gt;\w+)/(?P&lt;age&gt;\d&#123;1,2&#125;)&#x27;</span>,views.person_view),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>练习:</p><ul><li>访问地址:<a href="http://127.0.0.1:8000/birthday/%E5%9B%9B%E4%BD%8D%E6%95%B0%E5%AD%97/%E4%B8%80%E5%88%B0%E4%B8%A4%E4%BD%8D%E6%95%B0%E5%AD%97/%E4%B8%80%E5%88%B0%E4%B8%A4%E4%BD%8D%E6%95%B0%E5%AD%97">http://127.0.0.1:8000/birthday/四位数字/一到两位数字/一到两位数字</a></li><li>最终输出: 生日为: xxxx年xx月xx日</li><li>如:<br>  输入网址: <a href="http://127.0.0.1:8000/birthday/2015/12/11">http://127.0.0.1:8000/birthday/2015/12/11</a><br>  显示为: 生日为:2015年12月11日<br>  输入网址: <a href="http://127.0.0.1:8000/birthday/2/28/2008">http://127.0.0.1:8000/birthday/2/28/2008</a><br>  显示为: 生日为:2008年2月28日</li></ul></li><li><p>PyCharm 社区版针对Django项目调试方法</p><ol><li>添加自己调式配置<ul><li>选择 Add Configuration…</li></ul></li><li>点击 <code>+</code> 号添加一个自己的配置<ul><li>选择运行的项目的主模块位置 manage.py</li><li>添加 runserver 命令行参数</li></ul></li></ol></li></ul><h2 id="HTTP协议的请求和响应"><a href="#HTTP协议的请求和响应" class="headerlink" title="HTTP协议的请求和响应"></a>HTTP协议的请求和响应</h2><ul><li>请求是指浏览器端通过HTTP协议发送给服务器端的数据</li><li>响应是指服务器端接收到请求后做相应的处理后再回复给浏览器端的数据</li></ul><h3 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h3><ul><li><p>根据HTTP标准，HTTP请求可以使用多种请求方法。</p></li><li><p>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法(最常用)</p></li><li><p>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p></li><li><p>HTTP1.1 请求详述</p><table><thead><tr><th align="center">序号</th><th align="center">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">GET</td><td align="left">请求指定的页面信息，并返回实体主体。</td></tr><tr><td align="center">2</td><td align="center">HEAD</td><td align="left">类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td align="center">3</td><td align="center">POST</td><td align="left">向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和&#x2F;或已有资源的修改。</td></tr><tr><td align="center">4</td><td align="center">PUT</td><td align="left">从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td align="center">5</td><td align="center">DELETE</td><td align="left">请求服务器删除指定的页面。</td></tr><tr><td align="center">6</td><td align="center">CONNECT</td><td align="left">HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td align="center">7</td><td align="center">OPTIONS</td><td align="left">允许客户端查看服务器的性能。</td></tr><tr><td align="center">8</td><td align="center">TRACE</td><td align="left">回显服务器收到的请求，主要用于测试或诊断。</td></tr></tbody></table></li><li><p>HttpRequest对象</p><ul><li>视图函数的第一个参数是HttpRequest对象</li><li>服务器接收到http协议的请求后，会根据请求数据报文创建HttpRequest对象</li><li>HttpRequest属性<ul><li>path：字符串，表示请求的路由信息</li><li>path_info: URL字符串</li><li>method：字符串，表示HTTP请求方法，常用值：’GET’、’POST’</li><li>encoding：字符串，表示提交的数据的编码方式<ul><li>如果为None则表示使用浏览器的默认设置，一般为’utf-8’</li><li>这个属性是可写的，可以通过修改它来修改访问表单数据使用的编码，接下来对属性的任何访问将使用新的encoding值</li></ul></li><li>GET：QueryDict查询字典的对象，包含get请求方式的所有数据</li><li>POST：QueryDict查询字典的对象，包含post请求方式的所有数据</li><li>FILES：类似于字典的对象，包含所有的上传文件信息</li><li>COOKIES：Python字典，包含所有的cookie，键和值都为字符串</li><li>session：似于字典的对象，表示当前的会话，</li><li>body: 字符串，请求体的内容(POST或PUT)</li><li>environ: 字符串,客户端运行的环境变量信息</li><li>scheme : 请求协议(‘http’&#x2F;‘https’)</li><li>request.get_full_path() : 请求的完整路径</li><li>request.get_host() : 请求的主机</li><li>request.META : 请求中的元数据(消息头)<ul><li>request.META[‘REMOTE_ADDR’]  : 客户端IP地址</li></ul></li></ul></li></ul></li></ul><h3 id="HTTP-响应"><a href="#HTTP-响应" class="headerlink" title="HTTP 响应"></a>HTTP 响应</h3><ul><li><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头用以响应浏览器的请求。</p></li><li><p>HTTP状态码的英文为HTTP Status Code。</p></li><li><p>下面是常见的HTTP状态码：</p><ul><li>200 - 请求成功</li><li>301 - 资源（网页等）被永久转移到其它URL</li><li>404 - 请求的资源（网页等）不存在</li><li>500 - 内部服务器错误</li></ul></li><li><p>HTTP状态码分类</p><ul><li><p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型：</p><table><thead><tr><th align="center">分类</th><th>分类描述</th></tr></thead><tbody><tr><td align="center">1**</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td align="center">2**</td><td>成功，操作被成功接收并处理</td></tr><tr><td align="center">3**</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td align="center">4**</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="center">5**</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table></li></ul></li><li><p>Django中的响应对象HttpResponse:</p><ul><li>构造函数格式:<ul><li><code>HttpResponse(content=响应体, content_type=响应体数据类型, status=状态码)</code></li></ul></li><li>作用:<ul><li>向客户端浏览器返回响应，同时携带响应体内容</li></ul></li><li>参数:<ul><li>content：表示返回的内容。</li><li>status_code：返回的HTTP响应状态码(默认为200)。</li><li>content_type：指定返回数据的的MIME类型(默认为”text&#x2F;html”)。浏览器会根据这个属性，来显示数据。如果是text&#x2F;html，那么就会解析这个字符串，如果text&#x2F;plain，那么就会显示一个纯文本。<ul><li>常用的Content-Type如下：<ul><li><code>&#39;text/html&#39;</code>（默认的，html文件）</li><li><code>&#39;text/plain&#39;</code>（纯文本）</li><li><code>&#39;text/css&#39;</code>（css文件）</li><li><code>&#39;text/javascript&#39;</code>（js文件）</li><li><code>&#39;multipart/form-data&#39;</code>（文件提交）</li><li><code>&#39;application/json&#39;</code>（json传输）</li><li><code>&#39;application/xml&#39;</code>（xml文件）<blockquote><p>注： 关键字MIME(Multipurpose Internet Mail Extensions)是指多用途互联网邮件扩展类型。</p></blockquote></li></ul></li></ul></li></ul></li></ul></li><li><p>HttpResponse 子类</p><table><thead><tr><th>类型</th><th>作用</th><th>状态码</th></tr></thead><tbody><tr><td>HttpResponseRedirect</td><td>重定响</td><td>301</td></tr><tr><td>HttpResponseNotModified</td><td>未修改</td><td>304</td></tr><tr><td>HttpResponseBadRequest</td><td>错误请求</td><td>400</td></tr><tr><td>HttpResponseNotFound</td><td>没有对应的资源</td><td>404</td></tr><tr><td>HttpResponseForbidden</td><td>请求被禁止</td><td>403</td></tr><tr><td>HttpResponseServerError</td><td>服务器错误</td><td>500</td></tr></tbody></table></li></ul><h3 id="GET方式传参"><a href="#GET方式传参" class="headerlink" title="GET方式传参"></a>GET方式传参</h3><ul><li>GET请求方式中可以通过查询字符串(Query String)将数据传递给服务器    </li><li>URL 格式: <code>xxx?参数名1=值1&amp;参数名2=值2...</code><ul><li>如: <code>http://127.0.0.1:8000/page1?a=100&amp;b=200</code></li></ul></li><li>服务器端接收参数<ol><li>判断 request.method 的值判断请求方式是否是get请求 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">    处理GET请求时的业务逻辑</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    处理其它请求的业务逻辑</span><br></pre></td></tr></table></figure></li><li>获取客户端请求GET请求提交的数据<ol><li>语法 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.GET[<span class="string">&#x27;参数名&#x27;</span>]</span><br><span class="line">request.GET.get(<span class="string">&#x27;参数名&#x27;</span>,<span class="string">&#x27;默认值&#x27;</span>)</span><br><span class="line">request.GET.getlist(<span class="string">&#x27;参数名&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>能够产生get请求方式的场合<ol><li>地址栏手动输入, 如: <a href="http://www.sina.com.cn/?a=100&b=200">http://www.sina.com.cn/?a=100&amp;b=200</a></li><li><code>&lt;a href=&quot;地址?参数=值&amp;参数=值&quot;&gt;</code></li><li>form表单中的method为get <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&#x27;get&#x27;</span> <span class="attr">action</span>=<span class="string">&quot;/user/login&quot;</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol></li></ul><blockquote><p>一般查询字符串的大小会受到浏览器的的限制(不建议超过2048字节)</p></blockquote><ul><li>PyCharm社区版调试Django程序配置<ol><li>选择 Add Configuration</li><li>选择 左上角 + 号 选择 “Python”<ol><li>script path 里选 manage.py 的路径 </li><li>在 parameters 里填入runserver</li></ol></li><li>设置断点</li><li>点击开始调式按钮开始调式操作</li></ol></li></ul><h3 id="POST传递参数"><a href="#POST传递参数" class="headerlink" title="POST传递参数"></a>POST传递参数</h3><ul><li><p>客户端通过表单等POST请求将数据传递给服务器端,如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span> <span class="attr">action</span>=<span class="string">&quot;/user/login&quot;</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>服务器端接收参数</p><ul><li>通过 request.method 来判断是否为POST请求,如:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">    处理POST请求的数据并响应</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    处理非POST 请求的响应</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用post方式接收客户端数据</p><ol><li>方法  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.POST[<span class="string">&#x27;参数名&#x27;</span>]</span><br><span class="line">request.POST.get(<span class="string">&#x27;参数名&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">request.POST.getlist(<span class="string">&#x27;参数名&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>取消csrf验证,否则Django将会拒绝客户端发来的POST请求</p><ul><li>取消 csrf 验证<ul><li>删除 settings.py 中 MIDDLEWARE 中的 CsrfViewsMiddleWare 的中间件  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="form-表单的name属性"><a href="#form-表单的name属性" class="headerlink" title="form 表单的name属性"></a>form 表单的name属性</h3><ul><li>在form表单控件提交数据时，会自动搜索本表单控件内部的子标签的name属性及相应的值，再将这些名字和值以键-值对的形式提交给action指定的服务器相关位置</li><li>在form内能自动搜集到的name属性的标签的控件有  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&#x27;xxx&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&#x27;yyy&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&#x27;zzz&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如:  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/page1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">1</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">0</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;10&quot;</span>&gt;</span>附言...<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="POST传递参数-1"><a href="#POST传递参数-1" class="headerlink" title="POST传递参数"></a>POST传递参数</h3><ul><li><p>客户端通过表单等POST请求将数据传递给服务器端,如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span> <span class="attr">action</span>=<span class="string">&quot;/user/login&quot;</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>服务器端接收参数</p><ul><li>通过 request.method 来判断是否为POST请求,如:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">    处理POST请求的数据并响应</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    处理非POST 请求的响应</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用post方式接收客户端数据</p><ol><li>方法  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.POST[<span class="string">&#x27;参数名&#x27;</span>]</span><br><span class="line">request.POST.get(<span class="string">&#x27;参数名&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">request.POST.getlist(<span class="string">&#x27;参数名&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>取消csrf验证,否则Django将会拒绝客户端发来的POST请求</p><ul><li>取消 csrf 验证<ul><li>删除 settings.py 中 MIDDLEWARE 中的 CsrfViewsMiddleWare 的中间件  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="form-表单的name属性-1"><a href="#form-表单的name属性-1" class="headerlink" title="form 表单的name属性"></a>form 表单的name属性</h3><ul><li>在form表单控件提交数据时，会自动搜索本表单控件内部的子标签的name属性及相应的值，再将这些名字和值以键-值对的形式提交给action指定的服务器相关位置</li><li>在form内能自动搜集到的name属性的标签的控件有  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&#x27;xxx&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&#x27;yyy&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&#x27;zzz&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如:  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/page1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">1</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">0</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;10&quot;</span>&gt;</span>附言...<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Django的框架模式"><a href="#Django的框架模式" class="headerlink" title="Django的框架模式"></a>Django的框架模式</h2><ul><li><p>MVC 设计模式</p><ul><li>MVC 代表 Model-View-Controller（模型-视图-控制器） 模式。</li><li>作用: 降低模块间的耦合度(解耦)</li><li>MVC<ul><li>M 模型层(Model), 主要用于对数据库层的封装</li><li>V 视图层(View), 用于向用户展示结果</li><li>C 控制(Controller ，用于处理请求、获取数据、返回结果(重要)</li></ul></li></ul></li><li><p>MTV 模式<br>  MTV 代表 Model-Template-View（模型-模板-视图） 模式。这种模式用于应用程序的分层开发</p><ul><li>作用: <ul><li>降低模块间的耦合度(解耦)</li></ul></li><li>MTV <ul><li>M – 模型层(Model)  负责与数据库交互</li><li>T – 模板层(Template)  负责呈现内容到浏览器</li><li>V – 视图层(View)  是核心，负责接收请求、获取数据、返回结果</li></ul></li></ul></li></ul><h2 id="Django中的应用-app"><a href="#Django中的应用-app" class="headerlink" title="Django中的应用 - app"></a>Django中的应用 - app</h2><ul><li>应用在Django项目中是一个独立的业务模块,可以包含自己的路由,视图,模板,模型</li></ul><h3 id="创建应用app"><a href="#创建应用app" class="headerlink" title="创建应用app"></a>创建应用app</h3><ul><li><p>创建步骤</p><ol><li>用manage.py 中的子命令 startapp 创建应用文件夹</li><li>在settings.py 的 INSTALLED_APPS 列表中配置安装此应用</li></ol></li><li><p>创建应用的子命令</p><ul><li>python3 manage.py startapp 应用名称(必须是标识符命令规则)</li><li>如:<ul><li>python3 manage.py startapp music</li></ul></li></ul></li><li><p>Django应用的结构组成</p><ol><li><code>migrations</code> 文件夹<ul><li>保存数据迁移的中间文件</li></ul></li><li><code>__init__.py</code><ul><li>应用子包的初始化文件</li></ul></li><li><code>admin.py</code><ul><li>应用的后台管理配置文件</li></ul></li><li><code>apps.py</code><ul><li>应用的属性配置文件</li></ul></li><li><code>models.py</code><ul><li>与数据库相关的模型映射类文件</li></ul></li><li><code>tests.py</code><ul><li>应用的单元测试文件</li></ul></li><li><code>views.py</code><ul><li>定义视图处理函数的文件</li></ul></li></ol></li><li><p>配置安装应用</p><ul><li>在 settings.py 中配置应用, 让此应用能和整个项目融为一体  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file : settings.py </span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ... ...,</span><br><span class="line">    <span class="string">&#x27;自定义应用名称&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>如:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># ....</span></span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>,  <span class="comment"># 用户信息模块</span></span><br><span class="line">    <span class="string">&#x27;music&#x27;</span>,  <span class="comment"># 收藏模块</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="应用的分布式路由"><a href="#应用的分布式路由" class="headerlink" title="应用的分布式路由"></a>应用的分布式路由</h3><ul><li>Django中，基础路由配置文件(urls.py)可以不处理用户具体路由，基础路由配置文件的可以做请求的分发(分布式请求处理)。具体的请求可以由各自的应用来进行处理</li></ul><h4 id="include-函数"><a href="#include-函数" class="headerlink" title="include 函数"></a>include 函数</h4><ul><li>作用:<ul><li>用于分发将当前路由转到各个应用的路由配置文件的 urlpatterns 进行分布式处理</li></ul></li><li>函数格式<ul><li>include(‘app命字.url模块名’)<blockquote><p>模块<code>app命字/url模块名.py</code> 文件件里必须有urlpatterns 列表<br>使用前需要使用 <code>from django.conf.urls import include</code> 导入此函数</p></blockquote></li></ul></li></ul><h2 id="数据库-和-模型"><a href="#数据库-和-模型" class="headerlink" title="数据库 和 模型"></a>数据库 和 模型</h2><h3 id="Django下配置使用-mysql-数据库"><a href="#Django下配置使用-mysql-数据库" class="headerlink" title="Django下配置使用 mysql 数据库"></a>Django下配置使用 mysql 数据库</h3><ol><li><p>安装 pymysql包</p><ul><li>用作 python 和 mysql 的接口<ul><li><code>$ sudo pip3 install pymysql</code></li></ul></li><li>安装 mysql 客户端(非必须)<br>  <code>$ sudo pip3 install mysqlclient</code></li></ul></li><li><p>创建 和 配置数据库</p><ol><li>创建数据库<ul><li>创建 <code>create database 数据库名 default charset utf8 collate utf8_general_ci;</code> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database mywebdb <span class="keyword">default</span> charset utf8 <span class="keyword">collate</span> utf8_general_ci;</span><br></pre></td></tr></table></figure></li></ul></li><li>数据库的配置<ul><li>sqlite 数据库配置  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file: settings.py</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>mysql 数据库配置  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span> : &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;mywebdb&#x27;</span>,  <span class="comment"># 数据库名称,需要自己定义</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,  <span class="comment"># 管理员密码</span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>关于数据为的SETTING设置<ol><li><p>ENGINE</p><ul><li>指定数据库的后端引擎 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x27;django.db.backends.mysql&#x27;</span><br><span class="line">&#x27;django.db.backends.sqlite3&#x27;</span><br><span class="line">&#x27;django.db.backends.oracle&#x27;</span><br><span class="line">&#x27;django.db.backends.postgresql&#x27;</span><br></pre></td></tr></table></figure></li><li>mysql引擎如下:<ul><li>‘django.db.backends.mysql’</li></ul></li></ul></li><li><p>NAME</p><ul><li>指定要连接的数据库的名称</li><li><code>&#39;NAME&#39;: &#39;mywebdb&#39;</code></li></ul></li><li><p>USER</p><ul><li>指定登录到数据库的用户名</li><li><code>&#39;USER&#39;:&#39;root&#39;</code></li></ul></li><li><p>PASSWORD</p><ul><li>接数据库时使用的密码。</li><li><code>&#39;PASSWORD&#39;:&#39;123456&#39;</code></li></ul></li><li><p>HOST</p><ul><li>连接数据库时使用哪个主机。</li><li><code>&#39;HOST&#39;:&#39;127.0.0.1&#39;</code></li></ul></li><li><p>PORT</p><ul><li>连接数据库时使用的端口。</li><li><code>&#39;PORT&#39;:&#39;3306&#39;</code></li></ul></li></ol></li><li>添加 mysql 支持<ul><li><p>安装pymysql 模块</p><ul><li><code>$ sudo pip install pymysql</code></li></ul></li><li><p>修改项目中__init__.py 加入如下内容来提供pymysql引擎的支持</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol><h3 id="模型（Models）"><a href="#模型（Models）" class="headerlink" title="模型（Models）"></a>模型（Models）</h3><ul><li>模型是一个Python类，它是由django.db.models.Model派生出的子类。</li><li>一个模型类代表数据库中的一张数据表</li><li>模型类中每一个类属性都代表数据库中的一个字段。</li><li>模型是数据交互的接口，是表示和操作数据库的方法和方式</li></ul><h3 id="Django-的-ORM框架"><a href="#Django-的-ORM框架" class="headerlink" title="Django 的 ORM框架"></a>Django 的 ORM框架</h3><ul><li>ORM（Object Relational Mapping）即对象关系映射，它是一种程序技术，它允许你使用类和对象对数据库进行操作,从而避免通过SQL语句操作数据库</li><li>ORM框架的作用<ol><li>建立模型类和表之间的对应关系，允许我们通过面向对象的方式来操作数据库。</li><li>根据设计的模型类生成数据库中的表格。</li><li>通过简单的配置就可以进行数据库的切换。</li></ol></li><li>ORM 好处:<ol><li>只需要面向对象编程, 不需要面向数据库编写代码.<ul><li>对数据库的操作都转化成对类属性和方法的操作.</li><li>不用编写各种数据库的sql语句.</li></ul></li><li>实现了数据模型与数据库的解耦, 屏蔽了不同数据库操作上的差异.<ul><li>不在关注用的是mysql、oracle…等数据库的内部细节.</li><li>通过简单的配置就可以轻松更换数据库, 而不需要修改代码.</li></ul></li></ol></li><li>ORM 缺点<ol><li>相比较直接使用SQL语句操作数据库,有性能损失.</li><li>根据对象的操作转换成SQL语句,根据查询的结果转化成对象, 在映射过程中有性能损失.</li></ol></li></ul><ol start="2"><li>模型示例:<ul><li>此示例为添加一个 bookstore_book 数据表来存放图书馆中书目信息</li><li>添加一个 bookstore 的 app  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 manage.py startapp bookstore</span></span><br></pre></td></tr></table></figure></li><li>添加模型类并注册app  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file : bookstore/models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(<span class="string">&quot;书名&quot;</span>, max_length=<span class="number">50</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    price = models.DecimalField(<span class="string">&#x27;定价&#x27;</span>, max_digits=<span class="number">7</span>, decimal_places=<span class="number">2</span>, default=<span class="number">0.0</span>)</span><br></pre></td></tr></table></figure></li><li>注册app  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file : setting.py</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;bookstore&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li><li>数据库的迁移<ul><li>迁移是Django同步您对模型所做更改（添加字段，删除模型等） 到您的数据库模式的方式</li></ul><ol><li>生成或更新迁移文件<ul><li>将每个应用下的models.py文件生成一个中间文件,并保存在migrations文件夹中</li><li><code>python3 manage.py makemigrations</code></li></ul></li><li>执行迁移脚本程序<ul><li>执行迁移程序实现迁移。将每个应用下的migrations目录中的中间文件同步回数据库</li><li><code>python3 manage.py migrate</code></li></ul></li></ol><ul><li>注:</li></ul></li></ol><ul><li><p>每次修改完模型类再对服务程序运行之前都需要做以上两步迁移操作。</p><ul><li>生成迁移脚本文件<code>bookstore/migrations/0001_initial.py</code>并进行迁移  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 manage.py makemigrations</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 manage.py migrate</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="2"><li><p>编写模型类Models</p><ul><li>模型类需继承自<code>django.db.models.Model</code><ol><li>Models的语法规范 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">class 模型类名(models.Model):</span><br><span class="line">    字段名 = models.字段类型(字段选项)</span><br></pre></td></tr></table></figure><blockquote><p>模型类名是数据表名的一部分，建议类名首字母大写<br>字段名又是当前类的类属性名，此名称将作为数据表的字段名<br>字段类型用来映射到数据表中的字段的类型<br>字段选项为这些字段提供附加的参数信息</p></blockquote></li></ol></li></ul></li><li><p>字段类型</p><ol><li><p>BooleanField()</p><ul><li>数据库类型:tinyint(1)</li><li>编程语言中:使用True或False来表示值</li><li>在数据库中:使用1或0来表示具体的值</li></ul></li><li><p>CharField()</p><ul><li>数据库类型:varchar</li><li>注意:<ul><li>必须要指定max_length参数值</li></ul></li></ul></li><li><p>DateField()</p><ul><li>数据库类型:date</li><li>作用:表示日期</li><li>编程语言中:使用字符串来表示具体值</li><li>参数:<ul><li>DateField.auto_now: 每次保存对象时，自动设置该字段为当前时间(取值:True&#x2F;False)。</li><li>DateField.auto_now_add: 当对象第一次被创建时自动设置当前时间(取值:True&#x2F;False)。</li><li>DateField.default: 设置当前时间(取值:字符串格式时间如: ‘2019-6-1’)。</li><li>以上三个参数只能多选一</li></ul></li></ul></li><li><p>DateTimeField()</p><ul><li>数据库类型:datetime(6)</li><li>作用:表示日期和时间</li><li>auto_now_add&#x3D;True</li></ul></li><li><p>DecimalField()</p><ul><li><p>数据库类型:decimal(x,y)</p></li><li><p>编程语言中:使用小数表示该列的值</p></li><li><p>在数据库中:使用小数</p></li><li><p>参数:</p><ul><li>DecimalField.max_digits: 位数总数，包括小数点后的位数。 该值必须大于等于decimal_places.</li><li>DecimalField.decimal_places: 小数点后的数字数量</li></ul></li><li><p>示例:</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">money=models.DecimalField(</span><br><span class="line">    max_digits=7,</span><br><span class="line">    decimal_places=2,</span><br><span class="line">    default=0.0</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>FloatField()</p><ul><li>数据库类型:double</li><li>编程语言中和数据库中都使用小数表示值</li></ul></li><li><p>EmailField()</p><ul><li>数据库类型:varchar</li><li>编程语言和数据库中使用字符串</li></ul></li><li><p>IntegerField()</p><ul><li>数据库类型:int</li><li>编程语言和数据库中使用整数</li></ul></li><li><p>URLField()</p><ul><li>数据库类型:varchar(200)</li><li>编程语言和数据库中使用字符串</li></ul></li><li><p>ImageField()</p><ul><li>数据库类型:varchar(100)</li><li>作用:在数据库中为了保存图片的路径</li><li>编程语言和数据库中使用字符串</li><li>示例:  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">image=models.ImageField(</span><br><span class="line">    upload_to=&quot;static/images&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>upload_to:指定图片的上传路径<br>  在后台上传时会自动的将文件保存在指定的目录下</li></ul></li><li><p>TextField()</p><ul><li>数据库类型:longtext</li><li>作用:表示不定长的字符数据</li></ul></li></ol><ul><li>参考文档 <a href="https://docs.djangoproject.com/en/1.11/ref/models/fields/#field-types">https://docs.djangoproject.com/en/1.11/ref/models/fields/#field-types</a></li></ul></li><li><p>字段选项FIELD_OPTIONS</p><ul><li>字段选项, 指定创建的列的额外的信息</li><li>允许出现多个字段选项,多个选项之间使用,隔开</li></ul><ol><li>primary_key<ul><li>如果设置为True,表示该列为主键,如果指定一个字段为主键，则此数库表不会创建id字段</li></ul></li><li>blank<ul><li>设置为True时，字段可以为空。设置为False时，字段是必须填写的。字符型字段CharField和TextField是用空字符串来存储空值的。 默认值是False。</li></ul></li><li>null<ul><li>如果设置为True,表示该列值允许为空。日期型、时间型和数字型字段不接受空字符串。所以设置IntegerField，DateTimeField型字段可以为空时，需要将blank，null均设为True。</li><li>默认为False,如果此选项为False建议加入default选项来设置默认值</li></ul></li><li>default<ul><li>设置所在列的默认值,如果字段选项null&#x3D;False建议添加此项</li></ul></li><li>db_index<ul><li>如果设置为True,表示为该列增加索引</li></ul></li><li>unique<ul><li>如果设置为True,表示该字段在数据库中的值必须是唯一(不能重复出现的)</li></ul></li><li>db_column<ul><li>指定列的名称,如果不指定的话则采用属性名作为列名</li></ul></li><li>verbose_name<ul><li>设置此字段在admin界面上的显示名称。</li></ul></li></ol><ul><li>示例:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个属性,表示用户名称,长度30个字符,必须是唯一的,不能为空,添加索引</span></span><br><span class="line">name = models.CharField(max_length=<span class="number">30</span>, unique=<span class="literal">True</span>, null=<span class="literal">False</span>, db_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>文档参见:<ul><li><a href="https://docs.djangoproject.com/en/1.11/ref/models/fields/#field-options">https://docs.djangoproject.com/en/1.11/ref/models/fields/#field-options</a></li></ul></li></ul><h3 id="数据库迁移的错误处理方法"><a href="#数据库迁移的错误处理方法" class="headerlink" title="数据库迁移的错误处理方法"></a>数据库迁移的错误处理方法</h3><ul><li><p>当执行 <code>$ python3 manage.py makemigrations</code> 出现如下迁移错误时的处理方法</p><ul><li>错误信息  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python3 manage.py makemigrations</span><br><span class="line">You are trying to change the nullable field &#x27;title&#x27; on book to non-nullable without a default; we can&#x27;t do that (the database needs something to populate existing rows).</span><br><span class="line">Please select a fix:</span><br><span class="line">1) Provide a one-off default now (will be set on all existing rows with a null value for this column)</span><br><span class="line">2) Ignore for now, and let me handle existing rows with NULL myself (e.g. because you added a RunPython or RunSQL operation to handle NULL values in a previous data migration)</span><br><span class="line">3) Quit, and let me add a default in models.py</span><br><span class="line">Select an option: </span><br></pre></td></tr></table></figure></li><li>翻译为中文如下:  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python3 manage.py makemigrations</span><br><span class="line">您试图将图书上的可空字段“title”更改为非空字段(没有默认值);我们不能这样做(数据库需要填充现有行)。</span><br><span class="line">请选择修复:</span><br><span class="line">1)现在提供一次性默认值(将对所有现有行设置此列的空值)</span><br><span class="line">2)暂时忽略，让我自己处理空值的现有行(例如，因为您在以前的数据迁移中添加了RunPython或RunSQL操作来处理空值)</span><br><span class="line">3)退出，让我在models.py中添加一个默认值</span><br><span class="line">选择一个选项:</span><br></pre></td></tr></table></figure></li><li>错误原因<ul><li>当将如下代码  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Book(models.Model):</span><br><span class="line">    title = models.CharField(&quot;书名&quot;, max_length=50, null=True)</span><br></pre></td></tr></table></figure></li><li>去掉 null&#x3D;True 改为如下内容时会出现上述错误  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Book(models.Model):</span><br><span class="line">    title = models.CharField(&quot;书名&quot;, max_length=50)</span><br></pre></td></tr></table></figure></li><li>原理是 此数据库的title 字段由原来的可以为NULL改为非NULL状态,意味着原来这个字段可以不填值，现在改为必须填定一个值，那填什么值呢？此时必须添加一个缺省值。</li></ul></li><li>处理方法:<ol><li>选择1 手动给出一个缺省值，在生成 bookstore&#x2F;migrations&#x2F;000x_auto_xxxxxxxx_xxxx.py 文件时自动将输入的值添加到default参数中</li><li>暂时忽略，以后用其它的命令处理缺省值问题(不推荐)</li><li>退出当前生成迁移文件的过程，自己去修改models.py, 新增加一个<code>default=XXX</code> 的缺省值(推荐使用)</li></ol></li></ul></li><li><p>数据库的迁移文件混乱的解决办法</p><ol><li>删除 所有 migrations 里所有的 000?_XXXX.py (<code>__init__.py</code>除外)</li><li>删除 数据表<ul><li>sql&gt; drop database mywebdb;</li></ul></li><li>重新创建 数据表<ul><li>sql&gt; create datebase mywebdb default charset…;</li></ul></li><li>重新生成migrations里所有的 000?_XXXX.py<ul><li>python3 manage.py makemigrations</li></ul></li><li>重新更新数据库<ul><li>python3 manage.py migrate</li></ul></li></ol></li></ul><h2 id="数据库的基本操作"><a href="#数据库的基本操作" class="headerlink" title="数据库的基本操作"></a>数据库的基本操作</h2><ul><li>数据库的基本操作包括增删改查操作，即(CRUD操作)</li><li>CRUD是指在做计算处理时的增加(Create)、读取查询(Read)、更新(Update)和删除(Delete)</li></ul><h3 id="管理器对象"><a href="#管理器对象" class="headerlink" title="管理器对象"></a>管理器对象</h3><ul><li>每个继承自 models.Model 的模型类，都会有一个 objects 对象被同样继承下来。这个对象叫管理器对象</li><li>数据库的增删改查可以通过模型的管理器实现  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(models.Model):</span><br><span class="line">    ...</span><br><span class="line">MyModel.objects.create(...) <span class="comment"># objects 是管理器对象</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="创建数据对象"><a href="#创建数据对象" class="headerlink" title="创建数据对象"></a>创建数据对象</h3><ul><li>Django 使用一种直观的方式把数据库表中的数据表示成Python 对象</li><li>创建数据中每一条记录就是创建一个数据对象<ol><li>MyModel.objects.create(属性1&#x3D;值1, 属性2&#x3D;值1,…)<ul><li>成功: 返回创建好的实体对象</li><li>失败: 抛出异常</li></ul></li><li>创建 MyModel 实例对象,并调用 save() 进行保存 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj = MyModel(属性=值,属性=值)</span><br><span class="line">obj.属性=值</span><br><span class="line">obj.save()</span><br><span class="line">无返回值,保存成功后,obj会被重新赋值</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="Django-shell-的使用"><a href="#Django-shell-的使用" class="headerlink" title="Django shell 的使用"></a>Django shell 的使用</h3><ul><li>在Django提供了一个交互式的操作项目叫 <code>Django Shell</code> 它能够在交互模式用项目工程的代码执行相应的操作</li><li>利用 Django Shell 可以代替编写View的代码来进行直接操作</li><li>在Django Shell 下只能进行简单的操作，不能运行远程调式</li><li>启动方式:  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 manage.py shell</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><ul><li>数据库的查询需要使用管理器对象进行</li><li>通过 MyModel.objects 管理器方法调用查询接口<table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>all()</td><td>查询全部记录,返回QuerySet查询对象</td></tr><tr><td>get()</td><td>查询符合条件的单一记录</td></tr><tr><td>filter()</td><td>查询符合条件的多条记录</td></tr><tr><td>exclude()</td><td>查询符合条件之外的全部记录</td></tr><tr><td>…</td><td></td></tr></tbody></table></li></ul><ol><li><p>all()方法</p><ul><li>方法: all()</li><li>用法: MyModel.objects.all()</li><li>作用: 查询MyModel实体中所有的数据<ul><li>等同于<ul><li>select * from tabel</li></ul></li></ul></li><li>返回值: QuerySet容器对象,内部存放 MyModel 实例</li><li>示例:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bookstore <span class="keyword">import</span> models</span><br><span class="line">books = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;书名&quot;</span>, book.title, <span class="string">&#x27;出版社:&#x27;</span>, book.pub)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在模型类中定义 <code>def __str__(self): </code> 方法可以将自定义默认的字符串</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = ...</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;书名: %s, 出版社: %s, 定价: %s&quot;</span> % (<span class="variable language_">self</span>.title, <span class="variable language_">self</span>.pub, <span class="variable language_">self</span>.price)</span><br></pre></td></tr></table></figure></li><li><p>查询返回指定列(字典表示)</p><ul><li><p>方法: values(‘列1’, ‘列2’)</p></li><li><p>用法: MyModel.objects.values(…)</p></li><li><p>作用: 查询部分列的数据并返回</p><ul><li>select 列1,列2 from xxx</li></ul></li><li><p>返回值: QuerySet</p><ul><li>返回查询结果容器，容器内存字典，每个字典代表一条数据,</li><li>格式为: {‘列1’: 值1, ‘列2’: 值2}</li></ul></li><li><p>示例:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bookstore <span class="keyword">import</span> models</span><br><span class="line">books = models.Book.objects.values(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;pub&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;书名&quot;</span>, book[<span class="string">&quot;title&quot;</span>], <span class="string">&#x27;出版社:&#x27;</span>, book[<span class="string">&#x27;pub&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;book=&quot;</span>, book)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询返回指定列（元组表示)</p><ul><li><p>方法:values_list(‘列1’,’列2’)</p></li><li><p>用法:MyModel.objects.values_list(…)</p></li><li><p>作用:</p><ul><li>返回元组形式的查询结果</li></ul></li><li><p>返回值: QuerySet容器对象,内部存放 <code>元组</code></p><ul><li>会将查询出来的数据封装到元组中,再封装到查询集合QuerySet中</li></ul></li><li><p>示例:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bookstore <span class="keyword">import</span> models</span><br><span class="line">books = models.Book.objects.values_list(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;pub&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;book=&quot;</span>, book)  <span class="comment"># (&#x27;Python&#x27;, &#x27;清华大学出版社&#x27;)...</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>排序查询</p><ul><li><p>方法:order_by</p></li><li><p>用法:MyModel.objects.order_by(‘-列’,’列’)</p></li><li><p>作用:</p><ul><li>与all()方法不同，它会用SQL 语句的ORDER BY 子句对查询结果进行根据某个字段选择性的进行排序</li></ul></li><li><p>说明:</p></li><li><p>默认是按照升序排序,降序排序则需要在列前增加’-‘表示</p></li><li><p>示例:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bookstore <span class="keyword">import</span> models</span><br><span class="line">books = models.Book.objects.order_by(<span class="string">&quot;price&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;书名:&quot;</span>, book.title, <span class="string">&#x27;定价:&#x27;</span>, book.price)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>根据条件查询多条记录</p><ul><li>方法: filter(条件)</li><li>语法:   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyModel.objects.<span class="built_in">filter</span>(属性<span class="number">1</span>=值<span class="number">1</span>, 属性<span class="number">2</span>=值<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li>返回值:<ul><li>QuerySet容器对象,内部存放 MyModel 实例</li></ul></li><li>说明:<ul><li>当多个属性在一起时为”与”关系，即当<code>Books.objects.filter(price=20, pub=&quot;清华大学出版社&quot;)</code> 返回定价为20 <code>且</code> 出版社为”清华大学出版社”的全部图书</li></ul></li><li>示例:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 查询书中出版社为&quot;清华大学出版社&quot;的图书</span></span><br><span class="line">    <span class="keyword">from</span> bookstore <span class="keyword">import</span> models</span><br><span class="line">    books = models.Book.objects.<span class="built_in">filter</span>(pub=<span class="string">&quot;清华大学出版社&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;书名:&quot;</span>, book.title)</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span> 查询Author实体中<span class="built_in">id</span>为<span class="number">1</span>并且isActive为<span class="literal">True</span>的</span><br><span class="line">        - authors=Author.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>,isActive=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="字段查找"><a href="#字段查找" class="headerlink" title="字段查找"></a>字段查找</h3><ul><li>字段查询是指如何指定SQL语句中 WHERE 子句的内容。</li><li>字段查询需要通过QuerySet的filter(), exclude() and get()的关键字参数指定。</li><li>非等值条件的构建,需要使用字段查询</li><li>示例:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询作者中年龄大于30</span></span><br><span class="line">Author.objects.<span class="built_in">filter</span>(age__gt=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 对应</span></span><br><span class="line"><span class="comment"># SELECT .... WHERE AGE &gt; 35;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="查询谓词"><a href="#查询谓词" class="headerlink" title="查询谓词"></a>查询谓词</h4><ul><li>每一个查询谓词是一个独立的查询功能</li></ul><ol><li><code>__exact</code> : 等值匹配 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Author.objects.<span class="built_in">filter</span>(id__exact=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 等同于select * from author where id = 1</span></span><br></pre></td></tr></table></figure></li><li><code>__contains</code> : 包含指定值 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Author.objects.<span class="built_in">filter</span>(name__contains=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="comment"># 等同于 select * from author where name like &#x27;%w%&#x27;</span></span><br></pre></td></tr></table></figure></li><li><code>__startswith</code> : 以 XXX 开始</li><li><code>__endswith</code> : 以 XXX 开始</li><li><code>__gt</code> : 大于指定值 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Author.objects.filer(age__gt=<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 等同于 select * from author where age &gt; 50</span></span><br></pre></td></tr></table></figure></li><li><code>__gte</code> : 大于等于</li><li><code>__lt</code> : 小于</li><li><code>__lte</code> : 小于等于</li><li><code>__in</code> : 查找数据是否在指定范围内<ul><li>示例 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Author.objects.<span class="built_in">filter</span>(country__in=[<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;日本&#x27;</span>,<span class="string">&#x27;韩国&#x27;</span>])</span><br><span class="line"><span class="comment"># 等同于 select * from author where country in (&#x27;中国&#x27;,&#x27;日本&#x27;,&#x27;韩国&#x27;)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><code>__range</code>: 查找数据是否在指定的区间范围内 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找年龄在某一区间内的所有作者</span></span><br><span class="line">Author.objects.<span class="built_in">filter</span>(age__range=(<span class="number">35</span>,<span class="number">50</span>))</span><br><span class="line"><span class="comment"># 等同于 SELECT ... WHERE Author BETWEEN 35 and 50;</span></span><br></pre></td></tr></table></figure></li><li>详细内容参见: <a href="https://docs.djangoproject.com/en/1.11/ref/models/querysets/#field-lookups">https://docs.djangoproject.com/en/1.11/ref/models/querysets/#field-lookups</a></li></ol><ul><li><p>示例</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyModel.objects.<span class="built_in">filter</span>(id__gt=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 等同于 SELECT ... WHERE id &gt; 4;</span></span><br></pre></td></tr></table></figure></li><li><p>练习:</p><ol><li>查询Author表中age大于等于85的信息<ul><li><code>Author.objects.filter(age__gte=85)</code></li></ul></li><li>查询Author表中姓王的人的信息<ul><li><code>Author.objects.filter(name__startswith=&#39;王&#39;)</code></li></ul></li><li>查询Author表中Email中包含”wc”的人的信息<ul><li><code>Author.objects.filter(email__contains=&#39;wc&#39;)</code></li></ul></li></ol></li></ul><ol start="2"><li>不等的条件筛选<ul><li><p>语法:<br>  MyModel.objects.exclude(条件)</p></li><li><p>作用:</p><ul><li>返回不包含此 <code>条件</code> 的 全部的数据集</li></ul></li><li><p>示例:</p><ul><li>查询 <code>清华大学出版社，定价大于50</code> 以外的全部图书  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">        books = models.Book.objects.exclude(pub=<span class="string">&quot;清华大学出版社&quot;</span>, price__gt=<span class="number">50</span>)</span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">            <span class="built_in">print</span>(book)</span><br><span class="line">        ```    </span><br><span class="line"><span class="number">3.</span> 查询指定的一条数据</span><br><span class="line">    - 语法:</span><br><span class="line">        MyModel.objects.get(条件)</span><br><span class="line">    - 作用：</span><br><span class="line">      </span><br><span class="line">        - 返回满足条件的唯一一条数据</span><br><span class="line">    - 返回值:</span><br><span class="line">      </span><br><span class="line">        - MyModel 对象</span><br><span class="line">    - </span><br><span class="line">    - 说明:</span><br><span class="line">        - 该方法只能返回一条数据</span><br><span class="line">        - 查询结果多余一条数据则抛出,Model.MultipleObjectsReturned异常</span><br><span class="line">        - 查询结果如果没有数据则抛出Model.DoesNotExist异常</span><br><span class="line">    - 示例:</span><br><span class="line">        ```python</span><br><span class="line">        <span class="keyword">from</span> bookstore <span class="keyword">import</span> models</span><br><span class="line">        book = models.Book.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(book.title)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h3 id="修改数据记录"><a href="#修改数据记录" class="headerlink" title="修改数据记录"></a>修改数据记录</h3><ol><li>修改单个实体的某些字段值的步骤:<ol><li>查<ul><li>通过 get() 得到要修改的实体对象</li></ul></li><li>改<ul><li>通过 对象.属性 的方式修改数据</li></ul></li><li>保存<ul><li>通过 对象.save() 保存数据</li></ul></li></ol><ul><li>如:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bookstore <span class="keyword">import</span> models</span><br><span class="line">abook = models.Book.objects.get(<span class="built_in">id</span>=<span class="number">10</span>)</span><br><span class="line">abook.market_price = <span class="string">&quot;10.5&quot;</span></span><br><span class="line">abook.save()</span><br></pre></td></tr></table></figure></li></ul></li><li>通过 QuerySet 批量修改 对应的全部字段<ul><li>直接调用QuerySet的update(属性&#x3D;值) 实现批量修改</li><li>如:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 id大于3的所有图书价格定为0元</span></span><br><span class="line">books = Book.objects.<span class="built_in">filter</span>(id__gt=<span class="number">3</span>)</span><br><span class="line">books.update(price=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 将所有书的零售价定为100元</span></span><br><span class="line">books = Book.objects.<span class="built_in">all</span>()</span><br><span class="line">books.update(market_price=<span class="number">100</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h3><ul><li>删除记录是指删除数据库中的一条或多条记录</li><li>删除单个MyModel对象或删除一个查询结果集(QuerySet)中的全部对象都是调用 delete()方法</li></ul><ol><li>删除单个对象<ul><li>步骤<ol><li>查找查询结果对应的一个数据对象</li><li>调用这个数据对象的delete()方法实现删除</li></ol></li><li>示例:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    auth = Author.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    auth.delete()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(删除失败)</span><br></pre></td></tr></table></figure></li></ul></li><li>删除查询结果集<ul><li>步骤<ol><li>查找查询结果集中满足条件的全部QuerySet查询集合对象</li><li>调用查询集合对象的delete()方法实现删除</li></ol></li><li>示例:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除全部作者中，年龄大于65的全部信息</span></span><br><span class="line">auths = Author.objects.<span class="built_in">filter</span>(age__gt=<span class="number">65</span>)</span><br><span class="line">auths.delete()</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><ul><li>聚合查询是指对一个数据表中的一个字段的数据进行部分或全部进行统计查询,查bookstore_book数据表中的全部书的平均价格，查询所有书的总个数等,都要使用聚合查询</li></ul><ol><li>不带分组聚合<ul><li><p>不带分组的聚合查询是指导将全部数据进行集中统计查询</p></li><li><p>聚合函数:</p><ul><li>定义模块: <code>django.db.models</code></li><li>用法: <code>from django.db.models import *</code></li><li>聚合函数: <ul><li>Sum, Avg, Count, Max, Min</li></ul></li></ul></li><li><p>语法: </p><ul><li>MyModel.objects.aggregate(结果变量名&#x3D;聚合函数(‘列’))</li></ul></li><li><p>返回结果:</p><ul><li>由 结果变量名和值组成的字典</li><li>格式为:<ul><li>&#96;{“结果变量名”: 值}</li></ul></li></ul></li><li><p>示例:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 得到所有书的平均价格</span></span><br><span class="line">    <span class="keyword">from</span> bookstore <span class="keyword">import</span> models</span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line">    result = models.Book.objects.aggregate(myAvg=Avg(<span class="string">&#x27;price&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;平均价格是:&quot;</span>, result[<span class="string">&#x27;myAvg&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result=&quot;</span>, result)  <span class="comment"># &#123;&quot;myAvg&quot;: 58.2&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 得到数据表里有多少本书</span></span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line">    result = models.Book.objects.aggregate(mycnt=Count(<span class="string">&#x27;title&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据记录总个数是:&quot;</span>, result[<span class="string">&#x27;mycnt&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;result=&quot;</span>, result)  <span class="comment"># &#123;&quot;mycnt&quot;: 10&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li>分组聚合<ul><li><p>分组聚合是指通过计算查询结果中每一个对象所关联的对象集合，从而得出总计值(也可以是平均值或总和)，即为查询集的每一项生成聚合。</p></li><li><p>语法: </p><ul><li>QuerySet.annotate(结果变量名&#x3D;聚合函数(‘列’))</li></ul></li><li><p>用法步骤:</p><ol><li>通过先用查询结果MyModel.objects.value. 查找查询要分组聚合的列<ul><li>MyModel.objects.value(‘列1’, ‘列2’)</li><li>如:   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    pub_set = models.Book.objects.values(<span class="string">&#x27;pub&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(books)  <span class="comment"># &lt;QuerySet [&#123;&#x27;pub&#x27;: &#x27;清华大学出版社&#x27;&#125;, &#123;&#x27;pub&#x27;: &#x27;清华大学出版社&#x27;&#125;, &#123;&#x27;pub_hou &#123;&#x27;pub&#x27;: &#x27;机械工业出版社&#x27;&#125;, &#123;&#x27;pub&#x27;: &#x27;清华大学出版社&#x27;&#125;]&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul></li><li>通过返回结果的 QuerySet.annotate 方法分组聚合得到分组结果<ul><li>QuerySet.annotate(名&#x3D;聚合函数(‘列’))</li><li>返回 QuerySet 结果集,内部存储结果的字典</li><li>如:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pub_count_set = pub_set.annotate(myCount=Count(<span class="string">&#x27;pub&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(pub_count_set)  <span class="comment"># &lt;QuerySet [&#123;&#x27;pub&#x27;: &#x27;清华大学出版社&#x27;, &#x27;myCount&#x27;: 7&#125;, &#123;&#x27;pub&#x27;: &#x27;机械工业出版社&#x27;, &#x27;myCount&#x27;: 3&#125;]&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>.values(‘查询列名’)</li></ul></li><li><p>示例:</p><ul><li>得到哪儿个出版社共出版多少本书</li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_annotate</span>(<span class="params">request</span>):</span><br><span class="line">   - <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 得到所有出版社的查询集合QuerySet</span></span><br><span class="line">    pub_set = models.Book.objects.values(<span class="string">&#x27;pub&#x27;</span>)</span><br><span class="line">    <span class="comment"># 根据出版社查询分组，出版社和Count的分组聚合查询集合</span></span><br><span class="line">    pub_count_set = pub_set.annotate(myCount=Count(<span class="string">&#x27;pub&#x27;</span>))  <span class="comment"># 返回查询集合</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> pub_count_set:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;出版社:&quot;</span>, item[<span class="string">&#x27;pub&#x27;</span>], <span class="string">&quot;图书有：&quot;</span>, item[<span class="string">&#x27;myCount&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;请查看服务器端控制台获取结果&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="F对象"><a href="#F对象" class="headerlink" title="F对象"></a>F对象</h3><ul><li>一个F对象代表数据库中某条记录的字段的信息</li></ul><ol><li><p>作用:</p><ul><li>通常是对数据库中的字段值在不获取的情况下进行操作</li><li>用于类属性(字段)之间的比较。</li></ul></li><li><p>用法</p><ul><li>F对象在数据包 django.db.models 中，使用时需要先导入<ul><li><code>from django.db.models import F</code></li></ul></li></ul></li><li><p>语法:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line">F(<span class="string">&#x27;列名&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>说明:</p><ul><li>一个 F() 对象代表了一个model的字段的值</li><li>F对象通常是对数据库中的字段值在不加载到内存中的情况下直接在数据库服务器端进行操作</li></ul></li><li><p>示例1</p><ul><li>更新Book实例中所有的零售价涨10元 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">models.Book.objects.<span class="built_in">all</span>().update(market_price=F(<span class="string">&#x27;market_price&#x27;</span>)+<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 以下做法好于如下代码</span></span><br><span class="line">books = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">    book.update(market_price=book.marget_price+<span class="number">10</span>)</span><br><span class="line">    book.save()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>示例2</p><ul><li>对数据库中两个字段的值进行比较，列出哪儿些书的零售价高于定价? <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"><span class="keyword">from</span> bookstore <span class="keyword">import</span> models</span><br><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(market_price__gt=F(<span class="string">&#x27;price&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">    <span class="built_in">print</span>(book.title, <span class="string">&#x27;定价:&#x27;</span>, book.price, <span class="string">&#x27;现价:&#x27;</span>, book.market_price)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Q对象-Q"><a href="#Q对象-Q" class="headerlink" title="Q对象 - Q()"></a>Q对象 - Q()</h3><ul><li><p>当在获取查询结果集 使用复杂的逻辑或  <code>|</code> 、 逻辑非 <code>~</code> 等操作时可以借助于 Q对象进行操作</p></li><li><p>如: 想找出定价低于20元 或 清华大学出版社的全部书，可以写成</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.Book.objects.<span class="built_in">filter</span>(Q(price__lt=<span class="number">20</span>)|Q(pub=<span class="string">&quot;清华大学出版社&quot;</span>))</span><br></pre></td></tr></table></figure></li><li><p>Q对象在 数据包 django.db.models 中。需要先导入再使用</p><ul><li><code>from django.db.models import Q</code></li></ul></li></ul><ol><li><p>作用</p><ul><li>在条件中用来实现除 and(&amp;) 以外的 or(|) 或 not(~) 操作</li></ul></li><li><p>运算符:</p><ul><li>&amp; 与操作</li><li>| 或操作</li><li>〜 非操作</li></ul></li><li><p>语法</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">Q(条件<span class="number">1</span>)|Q(条件<span class="number">2</span>)  <span class="comment"># 条件1成立或条件2成立</span></span><br><span class="line">Q(条件<span class="number">1</span>)&amp;Q(条件<span class="number">2</span>)  <span class="comment"># 条件1和条件2同时成立</span></span><br><span class="line">Q(条件<span class="number">1</span>)&amp;~Q(条件<span class="number">2</span>)  <span class="comment"># 条件1成立且条件2不成立</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>示例</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"><span class="comment"># 查找清华大学出版社的书或价格低于50的书</span></span><br><span class="line">models.Book.objects.<span class="built_in">filter</span>(Q(market_price__lt=<span class="number">50</span>) | Q(pub_house=<span class="string">&#x27;清华大学出版社&#x27;</span>))</span><br><span class="line"><span class="comment"># 查找不是机械工业出版社的书且价格低于50的书</span></span><br><span class="line">models.Book.objects.<span class="built_in">filter</span>(Q(market_price__lt=<span class="number">50</span>) &amp; ~Q(pub_house=<span class="string">&#x27;机械工业出版社&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ol><h3 id="原生的数据库操作方法"><a href="#原生的数据库操作方法" class="headerlink" title="原生的数据库操作方法"></a>原生的数据库操作方法</h3><ul><li>使用MyModel.objects.raw()进行 数据库查询操作查询<ul><li>在django中，可以使用模型管理器的raw方法来执行select语句进行数据查询</li></ul><ol><li><p>语法: </p><ul><li><code>MyModel.objects.raw(sql语句)</code></li></ul></li><li><p>用法</p><ul><li><code>MyModel.objects.raw(&#39;sql语句&#39;)</code></li></ul></li><li><p>返回值:</p><ul><li>QuerySet 集合对象</li></ul></li></ol></li></ul><ol start="4"><li>示例 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    books = models.Book.objects.raw(<span class="string">&#x27;select * from bookstore_book&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">        <span class="built_in">print</span>(book)</span><br></pre></td></tr></table></figure></li></ol><ul><li>使用django中的游标cursor对数据库进行 增删改操作<ul><li><p>在Django中可以使用 如UPDATE,DELETE等SQL语句对数据库进行操作。</p></li><li><p>在Django中使用上述非查询语句必须使用游标进行操作</p></li><li><p>使用步骤:</p><ol><li>导入cursor所在的包<ul><li>Django中的游标cursor定义在 django.db.connection包中，使用前需要先导入</li><li>如：<ul><li><code>from django.db import connection</code></li></ul></li></ul></li><li>用创建cursor类的构造函数创建cursor对象，再使用cursor对象,为保证在出现异常时能释放cursor资源,通常使用with语句进行创建操作<ul><li>如:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> connection</span><br><span class="line"><span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cur:</span><br><span class="line">    cur.execute(<span class="string">&#x27;执行SQL语句&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>示例  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用SQL语句将id 为 10的 书的出版社改为 &quot;XXX出版社&quot;</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> connection</span><br><span class="line"><span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cur: </span><br><span class="line">    cur.execute(<span class="string">&#x27;update bookstore_book set pub_house=&quot;XXX出版社&quot; where id=10;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cur:</span><br><span class="line">    <span class="comment"># 删除 id为1的一条记录</span></span><br><span class="line">    cur.execute(<span class="string">&#x27;delete from bookstore_book where id=10;&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="admin-后台数据库管理"><a href="#admin-后台数据库管理" class="headerlink" title="admin 后台数据库管理"></a>admin 后台数据库管理</h2><ul><li>django 提供了比较完善的后台管理数据库的接口，可供开发过程中调用和测试使用</li><li>django 会搜集所有已注册的模型类，为这些模型类提拱数据管理界面，供开发者使用</li><li>使用步骤:<ol><li>创建后台管理帐号:<ul><li>后台管理–创建管理员帐号<ul><li><code>$ python3 manage.py createsuperuser</code>            </li><li>根据提示完成注册,参考如下:  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 manage.py createsuperuser</span></span><br><span class="line">Username (leave blank to use &#x27;tarena&#x27;): tarena  # 此处输入用户名</span><br><span class="line">Email address: laowei@tedu.cn  # 此处输入邮箱</span><br><span class="line">Password: # 此处输入密码(密码要复杂些，否则会提示密码太简单)</span><br><span class="line">Password (again): # 再次输入重复密码</span><br><span class="line">Superuser created successfully.</span><br><span class="line"><span class="meta prompt_">$ </span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>用注册的帐号登陆后台管理界面<ul><li>后台管理的登录地址:<ul><li><a href="http://127.0.0.1:8000/admin">http://127.0.0.1:8000/admin</a></li></ul></li></ul></li></ol></li></ul><h3 id="自定义后台管理数据表"><a href="#自定义后台管理数据表" class="headerlink" title="自定义后台管理数据表"></a>自定义后台管理数据表</h3><ul><li>若要自己定义的模型类也能在 <code>/admin</code> 后台管理界中显示和管理，需要将自己的类注册到后台管理界面</li><li>添加自己定义模型类的后台管理数据表的,需要用<code>admin.site.register(自定义模型类)</code> 方法进行注册<ul><li>配置步骤如下:<ol><li>在应用app中的admin.py中导入注册要管理的模型models类, 如: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br></pre></td></tr></table></figure></li><li>调用 admin.site.register 方法进行注册,如: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line">admin.site.register(自定义模型类)</span><br></pre></td></tr></table></figure></li></ol></li><li>如: 在 bookstore&#x2F;admin.py 添加如下代码对Book类进行管理</li><li>示例:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file: bookstore/admin.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line">...</span><br><span class="line">admin.site.register(models.Book)  <span class="comment"># 将Book类注册为可管理页面</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="修改后台Models的展现形式"><a href="#修改后台Models的展现形式" class="headerlink" title="修改后台Models的展现形式"></a>修改后台Models的展现形式</h3><ul><li>在admin后台管理数据库中对自定义的数据记录都展示为 <code>XXXX object</code> 类型的记录，不便于阅读和判断</li><li>在用户自定义的模型类中可以重写 <code>def __str__(self):</code> 方法解决显示问题,如:<ul><li>在 自定义模型类中重写 <strong>str</strong>(self) 方法返回显示文字内容:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;书名&quot;</span> + <span class="variable language_">self</span>.title</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="模型管理器类"><a href="#模型管理器类" class="headerlink" title="模型管理器类"></a>模型管理器类</h3><ul><li><p>作用:</p><ul><li>为后台管理界面添加便于操作的新功能。</li></ul></li><li><p>说明:</p><ul><li>后台管理器类须继承自 <code>django.contrib.admin</code> 里的 <code>ModelAdmin</code> 类</li></ul></li><li><p>模型管理器的使用方法:</p><ol><li>在 <code>&lt;应用app&gt;/admin.py</code> 里定义模型管理器类 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">XXXX_Manager</span>(admin.ModelAdmin):</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure></li><li>注册管理器与模型类关联 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line">admin.site.register(models.YYYY, XXXX_Manager) <span class="comment"># 注册models.YYYY 模型类与 管理器类 XXXX_Manager 关联</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>示例:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file : bookstore/admin.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;market_price&#x27;</span>]</span><br><span class="line"></span><br><span class="line">admin.site.register(models.Book, BookAdmin)</span><br></pre></td></tr></table></figure><ul><li>进入<a href="http://127.0.0.1:8000/admin/bookstore/book/">http://127.0.0.1:8000/admin/bookstore/book/</a> 查看显示方式和以前有所不同</li></ul></li></ul></li><li><p>模型管理器类ModelAdmin中实现的高级管理功能</p><ol><li>list_display 去控制哪些字段会显示在Admin 的修改列表页面中。</li><li>list_display_links 可以控制list_display中的字段是否应该链接到对象的“更改”页面。</li><li>list_filter 设置激活Admin 修改列表页面右侧栏中的过滤器</li><li>search_fields 设置启用Admin 更改列表页面上的搜索框。 </li><li>list_editable 设置为模型上的字段名称列表，这将允许在更改列表页面上进行编辑。</li><li>其它参见<a href="https://docs.djangoproject.com/en/1.11/ref/contrib/admin/">https://docs.djangoproject.com/en/1.11/ref/contrib/admin/</a></li></ol></li></ul><h3 id="数据库表管理"><a href="#数据库表管理" class="headerlink" title="数据库表管理"></a>数据库表管理</h3><ol><li>修改模型类字段的显示名字<ul><li>模型类各字段的第一个参数为 verbose_name,此字段显示的名字会在后台数据库管理页面显示</li><li>通过 verbose_name 字段选项,修改显示名称示例如下：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title = models.CharField(</span><br><span class="line">    max_length = <span class="number">30</span>,</span><br><span class="line">    verbose_name=<span class="string">&#x27;显示名称&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul></li><li>通过Meta内嵌类 定义模型类的属性及展现形式<ul><li>模型类可以通过定义内部类class Meta 来重新定义当前模型类和数据表的一些属性信息</li><li>用法格式如下:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = CharField(....)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="number">1.</span> db_table = <span class="string">&#x27;数据表名&#x27;</span></span><br><span class="line">            - 该模型所用的数据表的名称。(设置完成后需要立马更新同步数据库)</span><br><span class="line">        <span class="number">2.</span> verbose_name = <span class="string">&#x27;单数名&#x27;</span></span><br><span class="line">            - 给模型对象的一个易于理解的名称(单数),用于显示在/admin管理界面中</span><br><span class="line">        <span class="number">3.</span> verbose_name_plural = <span class="string">&#x27;复数名&#x27;</span></span><br><span class="line">            - 该对象复数形式的名称(复数),用于显示在/admin管理界面中</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>练习:<ul><li>将Book模型类 和 Author 模型类都加入后台管理</li><li>制作一个AuthorManager管理器类，让后台管理Authors列表中显示作者的ID、姓名、年龄信息</li><li>用后台管理程序 添加三条 Author 记录</li><li>修改其中一条记录的年龄</li><li>删除最后一条添加的记录</li><li>将bookstore_author 数名表名称改为myauthor (需要重新迁移数据库)</li></ul></li></ul><h2 id="数据表关联关系映射"><a href="#数据表关联关系映射" class="headerlink" title="数据表关联关系映射"></a>数据表关联关系映射</h2><ul><li>在关系型数据库中，通常不会把所有数据都放在同一张表中，这样做会额外占用内存空间，</li><li>在关系列数据库中通常用表关联来解决数据库。</li><li>常用的表关联方式有三种:<ol><li>一对一映射<ul><li>如: 一个身份证对应一个人</li></ul></li><li>一对多映射<ul><li>如: 一个班级可以有多个学生</li></ul></li><li>多对多映射<ul><li>如: 一个学生可以报多个课程，一个课程可以有多个学生学习</li></ul></li></ol></li></ul><h3 id="一对一映射"><a href="#一对一映射" class="headerlink" title="一对一映射"></a>一对一映射</h3><ul><li>一对一是表示现实事物间存在的一对一的对应关系。</li><li>如:一个家庭只有一个户主，一个男人有一个妻子，一个人有一个唯一的指纹信息等</li></ul><ol><li>语法 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(model.Model):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(model.Model):</span><br><span class="line">    属性 = models.OneToOneField(A)</span><br></pre></td></tr></table></figure></li><li>用法示例<ol><li>创建作家和作家妻子类 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file : xxxxxxxx/models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;作家模型类&#x27;&#x27;&#x27;</span></span><br><span class="line">    name = models.CharField(<span class="string">&#x27;作家&#x27;</span>, max_length=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wife</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;作家妻子模型类&#x27;&#x27;&#x27;</span></span><br><span class="line">    name = models.CharField(<span class="string">&quot;妻子&quot;</span>, max_length=<span class="number">50</span>)</span><br><span class="line">    author = models.OneToOneField(Author)  <span class="comment"># 增加一对一属性</span></span><br></pre></td></tr></table></figure></li><li>查询<ul><li>在 Wife 对象中,通过 author 属性找到对应的author对象</li><li>在 Author 对象中,通过 wife 属性找到对应的wife对象</li></ul></li><li>创始一对一的数据记录 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line">author1 = models.Author.objects.create(name=<span class="string">&#x27;王老师&#x27;</span>)</span><br><span class="line">wife1 = models.Wife.objects.create(name=<span class="string">&#x27;王夫人&#x27;</span>, author=author1)  <span class="comment"># 关联王老师</span></span><br><span class="line">author2 = models.Author.objects.create(name=<span class="string">&#x27;小泽老师&#x27;</span>)  <span class="comment"># 一对一可以没有数据对应的数据 </span></span><br></pre></td></tr></table></figure></li><li>一对一数据的相互获取<ol><li>正向查询<ul><li>直接通过关联属性查询即可 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 wife 找 author</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line">wife = models.Wife.objects.get(name=<span class="string">&#x27;王夫人&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(wife.name, <span class="string">&#x27;的老公是&#x27;</span>, wife.author.name)</span><br></pre></td></tr></table></figure></li></ul></li><li>反向查询<ul><li>通过反向关联属性查询</li><li>反向关联属性为<code>实例对象.引用类名(小写)</code>，如作家的反向引用为<code>作家对象.wife</code></li><li>当反向引用不存在时，则会触发异常 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 author.wife 关联属性 找 wife,如果没有对应的wife刚触发异常</span></span><br><span class="line">author1 = models.Author.objects.get(name=<span class="string">&#x27;王老师&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(author1.name, <span class="string">&#x27;的妻子是&#x27;</span>, author1.wife.name)</span><br><span class="line">author2 = models.Author.objects.get(name=<span class="string">&#x27;小泽老师&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(author2.name, <span class="string">&#x27;的妻子是&#x27;</span>, author2.wife.name)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(author2.name, <span class="string">&#x27;还没有妻子&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol></li></ol><ul><li>作用:<ul><li>主要是解决常用数据不常用数据的存储问题,把经常加载的一个数据放在主表中，不常用数据放在另一个副表中，这样在访问主表数据时不需要加载副表中的数据以提高访问速度提高效率和节省内存空间,如经常把书的内容和书名建成两张表，因为在网站上经常访问书名等信息，但不需要得到书的内容。</li></ul></li></ul><h3 id="一对多映射"><a href="#一对多映射" class="headerlink" title="一对多映射"></a>一对多映射</h3><ul><li>一对多是表示现实事物间存在的一对多的对应关系。</li><li>如:一个学校有多个班级,一个班级有多个学生, 一本图书只能属于一个出版社,一个出版社允许出版多本图书</li></ul><ol><li><p>用法语法</p><ul><li>当一个A类对象可以关联多个B类对象时 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(model.Model):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(model.Model):</span><br><span class="line">    属性 = models.ForeignKey(多对一中<span class="string">&quot;一&quot;</span>的模型类, ...)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>外键类ForeignKey </p><ul><li>构造函数:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ForeignKey(to, on_delete, **options)</span><br></pre></td></tr></table></figure></li><li>常用参数:<ul><li>on_delete<ol><li>models.CASCADE  级联删除。 Django模拟SQL约束ON DELETE CASCADE的行为，并删除包含ForeignKey的对象。</li><li>models.PROTECT 抛出ProtectedError 以阻止被引用对象的删除;</li><li>SET_NULL 设置ForeignKey null；只有null是True才有可能。</li><li>SET_DEFAULT  将ForeignKey设置为其默认值；必须设置ForeignKey的默认值。</li><li>… 其它参请参考文档 <a href="https://docs.djangoproject.com/en/1.11/ref/models/fields/#foreignkey">https://docs.djangoproject.com/en/1.11/ref/models/fields/#foreignkey</a> ForeignKey部分</li></ol></li><li><code>**options</code> 可以是常用的字段选项如:<ol><li>null</li><li>unique等</li><li>…</li></ol></li></ul></li></ul></li><li><p>示例</p><ul><li>有二个出版社对应五本书的情况.<ol><li><p><code>清华大学出版社</code> 有书</p><ol><li>C++</li><li>Java</li><li>Python</li></ol></li><li><p><code>北京大学出版社</code> 有书</p><ol><li>西游记</li><li>水浒</li></ol></li></ol></li></ul><ol><li>定义一对多类 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file: one2many/models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Publisher</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;出版社&#x27;&#x27;&#x27;</span></span><br><span class="line">    name = models.CharField(<span class="string">&#x27;名称&#x27;</span>, max_length=<span class="number">50</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;书名&#x27;</span>, max_length=<span class="number">50</span>)</span><br><span class="line">    publisher = models.ForeignKey(Publisher, null=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>创建一对多的对象</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file: xxxxx/views.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line">pub1 = models.Publisher.objects.create(name=<span class="string">&#x27;清华大学出版社&#x27;</span>)</span><br><span class="line">models.Book.objects.create(title=<span class="string">&#x27;C++&#x27;</span>, publisher=pub1)</span><br><span class="line">models.Book.objects.create(title=<span class="string">&#x27;Java&#x27;</span>, publisher=pub1)</span><br><span class="line">models.Book.objects.create(title=<span class="string">&#x27;Python&#x27;</span>, publisher=pub1)</span><br><span class="line"></span><br><span class="line">pub2 = models.Publisher.objects.create(name=<span class="string">&#x27;北京大学出版社&#x27;</span>)</span><br><span class="line">models.Book.objects.create(title=<span class="string">&#x27;西游记&#x27;</span>, publisher=pub2)</span><br><span class="line">models.Book.objects.create(title=<span class="string">&#x27;水浒&#x27;</span>, publisher=pub2)</span><br></pre></td></tr></table></figure></li><li><p>查询:</p><ul><li>通过多查一  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过一本书找到对应的出版社</span></span><br><span class="line">abook = models.Book.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(abook.title, <span class="string">&#x27;的出版社是:&#x27;</span>, abook.publisher.name)</span><br></pre></td></tr></table></figure></li><li>通过一查多  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过出版社查询对应的书</span></span><br><span class="line">pub1 = models.Publisher.objects.get(name=<span class="string">&#x27;清华大学出版社&#x27;</span>)</span><br><span class="line">books = pub1.book_set.<span class="built_in">all</span>()  <span class="comment"># 通过book_set 获取pub1对应的多个Book数据对象</span></span><br><span class="line"><span class="comment"># books = models.Book.objects.filter(publisher=pub1)  # 也可以采用此方式获取</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;清华大学出版社的书有:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">    <span class="built_in">print</span>(book.title)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>数据查询</p><ol><li>通过 Book 查询 Publisher <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过 publisher 属性查询即可</span><br><span class="line">练习:</span><br><span class="line">    查询 西游记 对应的出版社信息,打印在终端上</span><br></pre></td></tr></table></figure></li><li>通过 Publisher 查询 对应的所有的 Books <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Django会在Publisher中增加一个属性来表示对对应的Book们的查询引用</span><br><span class="line">属性:book_set(MyModel.objects)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="多对多映射"><a href="#多对多映射" class="headerlink" title="多对多映射"></a>多对多映射</h3><ul><li>多对多表达对象之间多对多复杂关系，如: 每个人都有不同的学校(小学，初中，高中,…),每个学校都有不同的学生…</li></ul><ol><li>语法<ul><li>在关联的两个类中的任意一个类中,增加: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">属性 = models.ManyToManyField(MyModel)</span><br></pre></td></tr></table></figure></li></ul></li><li>示例<ul><li>一个作者可以出版多本图书</li><li>一本图书可以被多名作者同时编写 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    ...</span><br><span class="line">    authors = models.ManyToManyField(Author)</span><br></pre></td></tr></table></figure></li></ul></li><li>数据查询<ol><li>通过 Book 查询对应的所有的 Authors <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">book.authors.<span class="built_in">all</span>() -&gt; 获取 book 对应的所有的author的信息</span><br><span class="line">book.authors.<span class="built_in">filter</span>(age__gt=<span class="number">80</span>) -&gt; 获取book对应的作者中年龄大于<span class="number">80</span>岁的作者的信息</span><br></pre></td></tr></table></figure></li><li>通过 Author 查询对应的所有的Books<ul><li>Django会生成一个关联属性 book_set 用于表示对对应的book的查询对象相关操作 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">author.book_set.<span class="built_in">all</span>()</span><br><span class="line">author.book_set.<span class="built_in">filter</span>()</span><br><span class="line">author.book_set.create(...)  <span class="comment"># 创建新书并联作用author</span></span><br><span class="line">author.book_set.add(book)   <span class="comment"># 添加已有的书为当前作者author</span></span><br><span class="line">author.book_set.clear()  <span class="comment"># 删除author所有并联的书</span></span><br><span class="line">author.book_set.remove()  <span class="comment"># 删除所author所有并联的书</span></span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li>示例:<ul><li><p>多对多模型</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;作家模型类&#x27;&#x27;&#x27;</span></span><br><span class="line">    name = models.CharField(<span class="string">&#x27;作家&#x27;</span>, max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.name</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;书名&#x27;</span>, max_length=<span class="number">50</span>)</span><br><span class="line">    author = models.ManyToManyField(Author, null=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.title</span><br></pre></td></tr></table></figure></li><li><p>多对多视图操作</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">many2many_init</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 创建两人个作者</span></span><br><span class="line">    author1 = models.Author.objects.create(name=<span class="string">&#x27;吕泽&#x27;</span>)</span><br><span class="line">    author2 = models.Author.objects.create(name=<span class="string">&#x27;魏老师&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 吕择和魏老师同时写了一本Python</span></span><br><span class="line">    book11 = author1.book_set.create(title=<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">    author2.book_set.add(book11)  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 魏老师还写了两本书</span></span><br><span class="line">    book21 = author2.book_set.create(title=<span class="string">&quot;C&quot;</span>)  <span class="comment"># 创建一本新书&quot;C&quot;</span></span><br><span class="line">    book22 = author2.book_set.create(title=<span class="string">&quot;C++&quot;</span>)  <span class="comment"># 创建一本新书&quot;C++&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;初始化成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_many2many</span>(<span class="params">request</span>):</span><br><span class="line">    authors = models.Author.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">for</span> auth <span class="keyword">in</span> authors:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;作者:&quot;</span>, auth.name, <span class="string">&#x27;发出版了&#x27;</span>, auth.book_set.count(), <span class="string">&#x27;本书: &#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;    &#x27;</span>, book.title)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----显示书和作者的关系----&quot;</span>)</span><br><span class="line">    books = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">        auths = book.author.<span class="built_in">all</span>()</span><br><span class="line">        <span class="built_in">print</span>(book.title, <span class="string">&#x27;的作者是:&#x27;</span>, <span class="string">&#x27;、&#x27;</span>.join([<span class="built_in">str</span>(x.name) <span class="keyword">for</span> x <span class="keyword">in</span> auths]))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;显示成功，请查看服务器端控制台终端&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>多对多最终的SQL结果</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> many2many_author;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> 吕泽      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> 魏老师    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> many2many_book;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> title  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">13</span> <span class="operator">|</span> Python <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">14</span> <span class="operator">|</span> C      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">15</span> <span class="operator">|</span> C<span class="operator">+</span><span class="operator">+</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> many2many_book_author;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> book_id <span class="operator">|</span> author_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">17</span> <span class="operator">|</span>      <span class="number">13</span> <span class="operator">|</span>        <span class="number">11</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">20</span> <span class="operator">|</span>      <span class="number">13</span> <span class="operator">|</span>        <span class="number">12</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">18</span> <span class="operator">|</span>      <span class="number">14</span> <span class="operator">|</span>        <span class="number">12</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">19</span> <span class="operator">|</span>      <span class="number">15</span> <span class="operator">|</span>        <span class="number">12</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+-----------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="cookies-和-session"><a href="#cookies-和-session" class="headerlink" title="cookies 和 session"></a>cookies 和 session</h2><h3 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h3><ul><li><p>cookies是保存在客户端浏览器上的存储空间，通常用来记录浏览器端自己的信息和当前连接的确认信息</p></li><li><p>cookies 在浏览器上是以键-值对的形式进行存储的，键和值都是以ASCII字符串的形存储(不能是中文字符串)</p></li><li><p>cookies 的内部的数据会在每次访问此网址时都会携带到服务器端，如果cookies过大会降低响应速度</p></li><li><p>在Django 服务器端来设置 设置浏览器的COOKIE 必须通过 HttpResponse 对象来完成</p></li><li><p>HttpResponse 关于COOKIE的方法</p><ul><li><p>添加、修改COOKIE</p><ul><li>HttpResponse.set_cookie(key, value&#x3D;’’, max_age&#x3D;None, expires&#x3D;None)<ul><li>key:cookie的名字</li><li>value:cookie的值</li><li>max_age:cookie存活时间，秒为单位</li><li>expires:具体过期时间</li><li>当不指定max_age和expires 时,关闭浏览器时此数据失效</li></ul></li></ul></li><li><p>删除COOKIE</p><ul><li>HttpResponse.delete_cookie(key)</li><li>删除指定的key 的Cookie。 如果key 不存在则什么也不发生。</li></ul></li></ul></li><li><p>Django中的cookies</p><ul><li>使用 响应对象HttpResponse 等 将cookie保存进客户端<ol><li>方法1 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line">resp = HttpResponse()</span><br><span class="line">resp.set_cookie(<span class="string">&#x27;cookies名&#x27;</span>, cookies值, 超期时间)</span><br></pre></td></tr></table></figure><ul><li>如: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resp = HttpResponse()</span><br><span class="line">resp.set_cookie(<span class="string">&#x27;myvar&#x27;</span>, <span class="string">&quot;weimz&quot;</span>, 超期时间)</span><br></pre></td></tr></table></figure></li></ul></li><li>方法二, 使用render对象 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line">resp = render(request,<span class="string">&#x27;xxx.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line">resp.set_cookie(<span class="string">&#x27;cookies名&#x27;</span>, cookies值, 超期时间)</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="3"><li><p>获取cookie</p><ul><li>通过 request.COOKIES 绑定的字典(dict) 获取客户端的 COOKIES数据  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">value = request.COOKIES.get(<span class="string">&#x27;cookies名&#x27;</span>, <span class="string">&#x27;没有值!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cookies名 = &quot;</span>, value)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>注:</p><ul><li>Chrome 浏览器 可能通过开发者工具的 <code>Application</code> &gt;&gt; <code>Storage</code> &gt;&gt; <code>Cookies</code> 查看和操作浏览器端所有的 Cookies 值</li></ul></li></ol></li><li><p>cookies 示例</p><ul><li>以下示例均在视图函数中调用</li><li>添加cookie  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为浏览器添加键为 my_var1,值为123，过期时间为1个小时的cookie</span></span><br><span class="line">responds = HttpResponse(<span class="string">&quot;已添加 my_var1,值为123&quot;</span>)</span><br><span class="line">responds.set_cookie(<span class="string">&#x27;my_var1&#x27;</span>, <span class="number">123</span>, <span class="number">3600</span>)</span><br><span class="line"><span class="keyword">return</span> responds</span><br></pre></td></tr></table></figure></li><li>修改cookie  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为浏览器添加键为 my_var1,修改值为456，过期时间为2个小时的cookie</span></span><br><span class="line">responds = HttpResponse(<span class="string">&quot;已修改 my_var1,值为456&quot;</span>)</span><br><span class="line">responds.set_cookie(<span class="string">&#x27;my_var1&#x27;</span>, <span class="number">456</span>, <span class="number">3600</span>*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> responds</span><br></pre></td></tr></table></figure></li><li>删除cookie  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除浏览器键为 my_var1的cookie</span></span><br><span class="line">responds = HttpResponse(<span class="string">&quot;已删除 my_var1&quot;</span>)</span><br><span class="line">responds.delete_cookie(<span class="string">&#x27;my_var1&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> responds</span><br></pre></td></tr></table></figure></li><li>获取cookie  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取浏览器中 my_var变量对应的值</span></span><br><span class="line">value = request.COOKIES.get(<span class="string">&#x27;my_var1&#x27;</span>, <span class="string">&#x27;没有值!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cookie my_var1 = &quot;</span>, value)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&quot;my_var1:&quot;</span> + value)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="session-会话控制"><a href="#session-会话控制" class="headerlink" title="session 会话控制"></a>session 会话控制</h3><ul><li><p>什么是session</p></li><li><p>session又名会话控制，是在服务器上开辟一段空间用于保留浏览器和服务器交互时的重要数据</p></li><li><p>session的起源</p><ul><li>http协议是无状态的：每次请求都是一次新的请求，不会记得之前通信的状态</li><li>实现状态保持的方式：在客户端或服务器端存储与会话有关的数据</li><li>推荐使用sesison方式，所有数据存储在服务器端</li></ul></li><li><p>实现方式</p><ul><li>使用 session 需要在浏览器客户端启动 cookie，且用在cookie中存储sessionid</li><li>每个客户端都可以在服务器端有一个独立的Session</li><li>注意：不同的请求者之间不会共享这个数据，与请求者一一对应</li></ul></li><li><p>Django启用Session</p><ul><li>在 settings.py 文件中</li><li>向 INSTALLED_APPS 列表中添加：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># 启用 sessions 应用</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li>向 MIDDLEWARE_CLASSES 列表中添加：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="comment"># 启用 Session 中间件</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>session的基本操作:</p><ul><li>session对于象是一个在似于字典的SessionStore类型的对象, 可以用类拟于字典的方式进行操作</li><li>session 只能够存储能够序列化的数据,如字典，列表等。</li></ul><ol><li>保存 session 的值到服务器<ul><li><code>request.session[&#39;KEY&#39;] = VALUE</code></li></ul></li><li>获取session的值<ul><li><code>VALUE = request.session[&#39;KEY&#39;]</code></li><li><code>VALUE = request.session.get(&#39;KEY&#39;, 缺省值)</code></li></ul></li></ol><ul><li>删除session的值<ul><li><code>del request.session[&#39;KEY&#39;]</code></li></ul></li><li>在 settings.py 中有关 session 的设置<ol><li>SESSION_COOKIE_AGE<ul><li>作用: 指定sessionid在cookies中的保存时长(默认是2周)，如下:</li><li><code>SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2</code></li></ul></li><li>SESSION_EXPIRE_AT_BROWSER_CLOSE &#x3D; True<br> 设置只要浏览器关闭时,session就失效(默认为False)</li></ol></li><li>session 缺省配置<ul><li>模块<ul><li><code>import django.conf.global_settings</code></li></ul></li></ul></li></ul></li><li><p>注: 当使用session时需要迁移数据库,否则会出现错误</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 manage.py makemigrations</span><br><span class="line">$ python3 manage.py migrate</span><br></pre></td></tr></table></figure></li></ul><h3 id="session-会话控制-1"><a href="#session-会话控制-1" class="headerlink" title="session 会话控制"></a>session 会话控制</h3><ul><li><p>什么是session</p></li><li><p>session又名会话控制，是在服务器上开辟一段空间用于保留浏览器和服务器交互时的重要数据</p></li><li><p>session的起源</p><ul><li>http协议是无状态的：每次请求都是一次新的请求，不会记得之前通信的状态</li><li>实现状态保持的方式：在客户端或服务器端存储与会话有关的数据</li><li>推荐使用sesison方式，所有数据存储在服务器端</li></ul></li><li><p>实现方式</p><ul><li>使用 session 需要在浏览器客户端启动 cookie，且用在cookie中存储sessionid</li><li>每个客户端都可以在服务器端有一个独立的Session</li><li>注意：不同的请求者之间不会共享这个数据，与请求者一一对应</li></ul></li><li><p>Django启用Session</p><ul><li>在 settings.py 文件中</li><li>向 INSTALLED_APPS 列表中添加：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># 启用 sessions 应用</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li>向 MIDDLEWARE_CLASSES 列表中添加：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="comment"># 启用 Session 中间件</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>session的基本操作:</p><ul><li>session对于象是一个在似于字典的SessionStore类型的对象, 可以用类拟于字典的方式进行操作</li><li>session 只能够存储能够序列化的数据,如字典，列表等。</li></ul><ol><li>保存 session 的值到服务器<ul><li><code>request.session[&#39;KEY&#39;] = VALUE</code></li></ul></li><li>获取session的值<ul><li><code>VALUE = request.session[&#39;KEY&#39;]</code></li><li><code>VALUE = request.session.get(&#39;KEY&#39;, 缺省值)</code></li></ul></li></ol><ul><li>删除session的值<ul><li><code>del request.session[&#39;KEY&#39;]</code></li></ul></li><li>在 settings.py 中有关 session 的设置<ol><li>SESSION_COOKIE_AGE<ul><li>作用: 指定sessionid在cookies中的保存时长(默认是2周)，如下:</li><li><code>SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2</code></li></ul></li><li>SESSION_EXPIRE_AT_BROWSER_CLOSE &#x3D; True<br> 设置只要浏览器关闭时,session就失效(默认为False)</li></ol></li><li>session 缺省配置<ul><li>模块<ul><li><code>import django.conf.global_settings</code></li></ul></li></ul></li></ul></li><li><p>注: 当使用session时需要迁移数据库,否则会出现错误</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 manage.py makemigrations</span><br><span class="line">$ python3 manage.py migrate</span><br></pre></td></tr></table></figure></li></ul><h3 id="用户登陆逻辑处理"><a href="#用户登陆逻辑处理" class="headerlink" title="用户登陆逻辑处理"></a>用户登陆逻辑处理</h3><ul><li><p>当用户登陆时，可以在session添加一个键 ‘user’ 绑定一个当前登陆用户的信息，如果在 <code> &#39;user&#39; in request.session</code> 成立，即当前用户为登陆状态，可以从<code>request.session[&#39;user&#39;] </code>获限登陆信息。否则为没有登陆状态</p></li><li><p>登陆逻辑处理</p><ol><li>检查用户和密码是否是合法用户</li><li>如果是合法用户，在当前用户的session记录 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在session内保存当前用的名称和id</span></span><br><span class="line">  request.session[<span class="string">&#x27;user&#x27;</span>] = &#123;</span><br><span class="line">      <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;tedu&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;id&#x27;</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment"># 注： 没有登陆的用户 request.session[&#x27;user&#x27;] 不存在</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>退出登陆的逻辑处理</p><ol start="3"><li>退出登陆时，删除session[‘user’] <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;user&#x27;</span> <span class="keyword">in</span> request.session:</span><br><span class="line">    <span class="keyword">del</span> request.session[<span class="string">&#x27;user&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ol></li><li><p>判断用户是否登陆:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;user&#x27;</span> <span class="keyword">in</span> request.session:</span><br><span class="line">    ...  当前用户登陆中</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ... 没有登陆</span><br></pre></td></tr></table></figure></li><li><p>练习:</p><ul><li><p>实现用户登陆、退出功能</p></li><li><p>说明:</p><ul><li>如果用户输入的登陆数据合法，则在session[‘user’]内记录一个已经登陆的用户状态</li></ul></li><li><p>要求 ：</p><ol><li>创建一个 user 应用 实现用户登陆,注册，退出登陆的逻辑<ul><li><code>python3 manage.py startapp user</code></li></ul></li><li>创建一个 index 应用 实现用户主页<ul><li><code>python3 manage.py startapp index</code></li></ul></li></ol></li><li><p>模型类</p><ol><li>用户模型类 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    username = models.CharField(<span class="string">&quot;用户名&quot;</span>, max_length=<span class="number">30</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    password = models.CharField(<span class="string">&quot;密码&quot;</span>, max_length=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户&quot;</span> + <span class="variable language_">self</span>.username</span><br></pre></td></tr></table></figure></li></ol></li><li><p>登陆设计规范(在user应用中写代码)</p><table><thead><tr><th>路由正则</th><th>视图函数</th><th>模板位置</th><th>说明</th></tr></thead><tbody><tr><td>&#x2F;user&#x2F;login</td><td>def login_view(request):</td><td>templates&#x2F;user&#x2F;login.html</td><td>用户登陆</td></tr><tr><td>&#x2F;user&#x2F;logout</td><td>def logout_view(request</td><td>无</td><td>退出用户登陆</td></tr></tbody></table></li><li><p>主页设计规范(在index应用中写代码)</p><table><thead><tr><th>路由正则</th><th>视图函数</th><th>模板位置</th><th>说明</th></tr></thead><tbody><tr><td>&#x2F;</td><td>def index_view(request):</td><td>templates&#x2F;index&#x2F;index.html</td><td>主页</td></tr></tbody></table></li></ul></li></ul><h2 id="中间件-Middleware"><a href="#中间件-Middleware" class="headerlink" title="中间件 Middleware"></a>中间件 Middleware</h2><ul><li><p>中间件是 Django 请求&#x2F;响应处理的钩子框架。它是一个轻量级的、低级的“插件”系统，用于全局改变 Django 的输入或输出。</p></li><li><p>每个中间件组件负责做一些特定的功能。例如，Django 包含一个中间件组件 AuthenticationMiddleware，它使用会话将用户与请求关联起来。</p></li><li><p>他的文档解释了中间件是如何工作的，如何激活中间件，以及如何编写自己的中间件。Django 具有一些内置的中间件，你可以直接使用。它们被记录在 built-in middleware reference 中。</p></li><li><p>中间件类:</p><ul><li>中间件类须继承自 <code>django.utils.deprecation.MiddlewareMixin</code>类</li><li>中间件类须实现下列五个方法中的一个或多个:<ul><li><code>def process_request(self, request):</code> 执行视图之前被调用，在每个请求上调用，返回None或HttpResponse对象 </li><li><code>def process_view(self, request, callback, callback_args, callback_kwargs):</code> 调用视图之前被调用，在每个请求上调用，返回None或HttpResponse对象</li><li><code>def process_response(self, request, response):</code> 所有响应返回浏览器之前被调用，在每个请求上调用，返回HttpResponse对象</li><li><code>def process_exception(self, request, exception):</code> 当处理过程中抛出异常时调用，返回一个HttpResponse对象</li><li><code>def process_template_response(self, request, response):</code> 在视图刚好执行完毕之后被调用，在每个请求上调用，返回实现了render方法的响应对象</li></ul></li><li>注： 中间件中的大多数方法在返回None时表示忽略当前操作进入下一项事件，当返回HttpResponese对象时表示此请求结果，直接返回给客户端</li></ul></li><li><p>编写中间件类:</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file : middleware/mymiddleware.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, Http404</span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMiddleWare</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;中间件方法 process_request 被调用&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_view</span>(<span class="params">self, request, callback, callback_args, callback_kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;中间件方法 process_view 被调用&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;中间件方法 process_response 被调用&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;中间件方法 process_exception 被调用&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_template_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;中间件方法 process_template_response 被调用&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><ul><li>注册中间件:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file : settings.py</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;middleware.mymiddleware.MyMiddleWare&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="跨站请求伪造保护-CSRF"><a href="#跨站请求伪造保护-CSRF" class="headerlink" title="跨站请求伪造保护 CSRF"></a>跨站请求伪造保护 CSRF</h3><ul><li><p>跨站请求伪造攻击</p><ul><li>某些恶意网站上包含链接、表单按钮或者JavaScript，它们会利用登录过的用户在浏览器中的认证信息试图在你的网站上完成某些操作，这就是跨站请求伪造(CSRF，即Cross-Site Request Forgey)。</li></ul></li><li><p>说明:</p><ul><li>CSRF中间件和模板标签提供对跨站请求伪造简单易用的防护。</li></ul></li><li><p>作用:  </p><ul><li>不让其它表单提交到此 Django 服务器</li></ul></li><li><p>解决方案:</p><ol><li>取消 csrf 验证(不推荐)<ul><li>删除 settings.py 中 MIDDLEWARE 中的 <code>django.middleware.csrf.CsrfViewMiddleware</code> 的中间件</li></ul></li><li>通过验证 csrf_token 验证 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">需要在表单中增加一个标签 </span><br><span class="line">&#123;% csrf_token %&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="Django中的forms模块"><a href="#Django中的forms模块" class="headerlink" title="Django中的forms模块"></a>Django中的forms模块</h2><ul><li>在Django中提供了 forms 模块,用forms 模块可以自动生成form内部的表单控件,同时在服务器端可以用对象的形式接收并操作客户端表单元素，并能对表单的数据进行服务器端验证</li><li>forms模块的作用<ul><li>可以用类来描述表单内部的控件，最终生成 HTML 格式的表单内容</li><li>可以用 forms 模块进行表单验证</li></ul></li></ul><h3 id="用form生成表单"><a href="#用form生成表单" class="headerlink" title="用form生成表单"></a>用form生成表单</h3><ul><li><p>Form表单类示意：</p><ul><li>Django Form 实现 Form 表单  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MySearch</span>(forms.Form):</span><br><span class="line">    input_text = forms.CharField(label = <span class="string">&#x27;请输入内容&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>此 form 表单生成的代码  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;id_input_text&quot;</span>&gt;</span>请输入内容:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;input_text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_input_text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用 forms 模块的步骤</p><ol><li><p>在应用中创建 forms.py</p></li><li><p>导入 django 提供的 forms 模模</p><ul><li><code>from django import forms</code></li></ul></li><li><p>创建一个表单类，并在表单类内添加相应的控件</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Form表单类名</span>(forms.Form):</span><br><span class="line">    表单元素 = forms.Field类型(参数...)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li><li><p>创建表对象生成表单</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">form1 =  FormName()</span><br><span class="line">html = form1.as_p()  <span class="comment"># html 绑定表单内部的input标签...</span></span><br></pre></td></tr></table></figure></li><li><p>利用Form 类型的对象自动成表单内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; form1.as_p &#125;&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="3"><li><p>forms.Form 示例:</p><ol><li>创建表单类 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegForm</span>(forms.Form):</span><br><span class="line">    username = forms.CharField(max_length=<span class="number">30</span>, label=<span class="string">&#x27;请输入用户名&#x27;</span>)</span><br><span class="line">    password = forms.CharField(max_length=<span class="number">30</span>, label=<span class="string">&#x27;请输入密码&#x27;</span>)</span><br><span class="line">    password2 = forms.CharField(max_length=<span class="number">20</span>, label=<span class="string">&#x27;请再次输入密码&#x27;</span>)</span><br><span class="line">    ... ...</span><br></pre></td></tr></table></figure></li></ol></li><li><p>字段参数</p><ol><li>label <ul><li>控件前的文本</li></ul></li><li>widget<ul><li>指定小部件</li></ul></li><li>initial<ul><li>控件的初始值(主要针对文本框类型)</li></ul></li><li>required<ul><li>是否为必填项，值为(True&#x2F;False)，默认为True</li></ul></li></ol></li><li><p>在模板中解析form对象</p><ol><li>方法<ol><li>需要自定义 <form></li><li>表单中的按钮需要自定义</li></ol></li><li>解析form<ul><li>在 视图中创建form对象并发送到模板中解析.</li><li>示例  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">form = XXXForm()</span><br><span class="line"><span class="keyword">return</span> render(request,<span class="string">&#x27;xx.html&#x27;</span>,<span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure></li></ul><ol><li>手动解析 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for field in form %&#125;</span><br><span class="line">    field : 表示的是form对象中的每个属性(控件)</span><br><span class="line">    &#123;&#123;field.label&#125;&#125; : 表示的是label参数值</span><br><span class="line">    &#123;&#123;field&#125;&#125; : 表示的就是控件</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li>自动解析<ol><li> <code>将 form 中的每个属性(控件/文本)都使用p标记包裹起来再显示</code></li><li> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将 form 中的每个属性(控件/文本)都使用li标记包裹起来再显示</span><br><span class="line">注意:必须手动提供ol 或 ul 标记</span><br></pre></td></tr></table></figure></li><li> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">            将 form 中的每个属性(控件/文本)都使用tr标记包裹起来再显示</span><br><span class="line">            注意:必须手动提供table标记</span><br><span class="line">            ```    </span><br><span class="line">    5. 通过 forms 对象获取表单数据</span><br><span class="line">        1. 通过 forms.Form 子类的构造器来接收 post 数据</span><br><span class="line">            - form = XXXForm(request.POST)</span><br><span class="line">        2. 必须是 form 通过验证后,才能取值</span><br><span class="line">            - form.is_valid()</span><br><span class="line">                - 返回True:通过验证,可以取值</span><br><span class="line">                - 返回False:暂未通过验证,则不能取值</span><br><span class="line">        3. 通过 form.cleaned_data 字典的属性接收数据</span><br><span class="line">            - form.cleaned_data : dict 类型</span><br><span class="line"></span><br><span class="line">7. Field 内置小部件 - widget</span><br><span class="line">    1. 什么是小部件</span><br><span class="line">        - 表示的是生成到网页上的控件以及一些其他的html属性</span><br><span class="line">        ```python</span><br><span class="line">        message=forms.CharField(widget=forms.Textarea)</span><br><span class="line">        upwd=forms.CharField(widget=forms.PasswordInput)</span><br></pre></td></tr></table></figure></li></ol></li><li>常用的小部件类型<table><thead><tr><th>widget名称</th><th>对应和type类值</th></tr></thead><tbody><tr><td>TextInput</td><td>type&#x3D;’text’</td></tr><tr><td>PasswordInput</td><td>type&#x3D;’password’</td></tr><tr><td>NumberInput</td><td>type&#x3D;”number”</td></tr><tr><td>EmailInput</td><td>type&#x3D;”email”</td></tr><tr><td>URLInput</td><td>type&#x3D;”url”</td></tr><tr><td>HiddenInput</td><td>type&#x3D;”hidden”</td></tr><tr><td>CheckboxInput</td><td>type&#x3D;”checkbox”</td></tr><tr><td>CheckboxSelectMultiple</td><td>type&#x3D;”checkbox”</td></tr><tr><td>RadioSelect</td><td>type&#x3D;”radio”</td></tr><tr><td>Textarea</td><td>textarea标记</td></tr><tr><td>Select</td><td>select标记</td></tr><tr><td>SelectMultiple</td><td>select multiple 标记</td></tr></tbody></table></li></ol></li><li><p>小部件的使用</p><ol><li>继承自forms.Form<ol><li>基本版<ol><li>语法 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">属性 = forms.CharField() <span class="comment">#无预选值使用</span></span><br><span class="line">    text,password,email,url,textarea,checkbox</span><br><span class="line">属性 = forms.ChoiceField() <span class="comment">#有预选值使用</span></span><br><span class="line">    checkbox,radio,select</span><br><span class="line"></span><br><span class="line">属性 = forms.CharField(</span><br><span class="line">    label=<span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    widget=forms.小部件类型</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>示例: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">upwd = forms.CharField(</span><br><span class="line">    label=<span class="string">&#x27;用户密码&#x27;</span>,</span><br><span class="line">    widget=forms.PasswordInput</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">message = forms.CharField(</span><br><span class="line">    label=<span class="string">&#x27;评论内容&#x27;</span>,</span><br><span class="line">    widget=forms.Textarea</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol></li></ol><ul><li>文档参见<a href="https://docs.djangoproject.com/en/1.11/topics/forms/">https://docs.djangoproject.com/en/1.11/topics/forms/</a></li></ul><h3 id="Django之form表单验证"><a href="#Django之form表单验证" class="headerlink" title="Django之form表单验证"></a>Django之form表单验证</h3><ul><li><p>django form 提供表单和字段验证</p></li><li><p>当在创建有不同的多个表单需要提交的网站时，用表单验证比较方便验证的封装</p></li><li><p>当调用form.is_valid() 返回True表示当前表单合法，当返回False说明表单验证出现问题</p></li><li><p>验证步骤:</p><ol><li>先对form.XXXField() 参数值进行验证，比如:min_length,max_length,如果不符合form.is_valid()返回False</li><li>对各自from.clean_zzz属性名(self): 方法对相应属性进行验证,如果验证失败form.is_valid()返回False</li><li>调胳form.clean(self): 对表单的整体结构进行验证，如果验证失败form.is_valid()返回False</li><li>以上验证都成功 form.is_valid()返回True</li></ol></li><li><p>验证方法:</p><ul><li>def clean_xxx属性(self):<ul><li>验证失败必须抛出forms.ValidationError</li><li>验证成功必须返回xxx属性的值</li></ul></li><li>def clean(self):<ul><li>验证失败必须抛出forms.ValidationError</li><li>验证成功必须返回 self.cleaned_data</li></ul></li></ul></li><li><p>文档参见<a href="https://docs.djangoproject.com/en/1.11/ref/forms/validation/">https://docs.djangoproject.com/en/1.11/ref/forms/validation/</a></p></li><li><p>验证示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterForm</span>(forms.Form):</span><br><span class="line">    username = forms.CharField(label=<span class="string">&#x27;用户名&#x27;</span>)</span><br><span class="line">    password = forms.CharField(label=<span class="string">&#x27;请输入密码&#x27;</span>, widget=forms.PasswordInput)</span><br><span class="line">    password2 = forms.CharField(label=<span class="string">&#x27;再次输入新密码&#x27;</span>, widget=forms.PasswordInput)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean</span>(<span class="params">self</span>):</span><br><span class="line">        pwd1 = <span class="variable language_">self</span>.cleaned_data[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        pwd2 = <span class="variable language_">self</span>.cleaned_data[<span class="string">&#x27;password2&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> pwd1 != pwd2:</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;两次密码不一致!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.cleaned_data  <span class="comment"># 必须返回cleaned_data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean_username</span>(<span class="params">self</span>):</span><br><span class="line">        username = <span class="variable language_">self</span>.cleaned_data[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(username) &lt; <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&quot;用户名太短&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> username</span><br></pre></td></tr></table></figure></li></ul><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><ul><li>分页是指在web页面有大量数据需要显示，为了阅读方便在每个页页中只显示部分数据。</li><li>好处:<ol><li>方便阅读</li><li>减少数据提取量，减轻服务器压力。</li></ol></li><li>Django提供了Paginator类可以方便的实现分页功能 </li><li>Paginator类位于<code>django.core.paginator</code> 模块中。</li></ul><h3 id="Paginator对象"><a href="#Paginator对象" class="headerlink" title="Paginator对象"></a>Paginator对象</h3><ul><li><p>对象的构造方法</p><ul><li>Paginator(object_list, per_page)</li><li>参数<ul><li>object_list 需要分类数据的对象列表</li><li>per_page 每页数据个数</li></ul></li><li>返回值:<ul><li>分页对象</li></ul></li></ul></li><li><p>Paginator属性</p><ul><li>count：需要分类数据的对象总数</li><li>num_pages：分页后的页面总数</li><li>page_range：从1开始的range对象, 用于记录当前面码数</li><li>per_page 每页数据的个数</li></ul></li><li><p>Paginator方法</p><ul><li>Paginator.page(number)<ul><li>参数 number为页码信息(从1开始)</li><li>返回当前number页对应的页信息</li><li>如果提供的页码不存在，抛出InvalidPage异常</li></ul></li></ul></li><li><p>Paginator异常exception</p><ul><li>InvalidPage：当向page()传入一个无效的页码时抛出</li><li>PageNotAnInteger：当向page()传入一个不是整数的值时抛出</li><li>EmptyPage：当向page()提供一个有效值，但是那个页面上没有任何对象时抛出</li></ul></li></ul><h3 id="Page对象"><a href="#Page对象" class="headerlink" title="Page对象"></a>Page对象</h3><ul><li><p>创建对象<br>Paginator对象的page()方法返回Page对象，不需要手动构造</p></li><li><p>Page对象属性</p><ul><li>object_list：当前页上所有数据对象的列表</li><li>number：当前页的序号，从1开始</li><li>paginator：当前page对象相关的Paginator对象</li></ul></li><li><p>Page对象方法</p><ul><li>has_next()：如果有下一页返回True</li><li>has_previous()：如果有上一页返回True</li><li>has_other_pages()：如果有上一页或下一页返回True</li><li>next_page_number()：返回下一页的页码，如果下一页不存在，抛出InvalidPage异常</li><li>previous_page_number()：返回上一页的页码，如果上一页不存在，抛出InvalidPage异常</li><li>len()：返回当前页面对象的个数</li></ul></li><li><p>说明:</p><ul><li>Page 对象是可迭代对象,可以用 for 语句来 访问当前页面中的每个对象</li></ul></li><li><p>参考文档<a href="https://docs.djangoproject.com/en/1.11/topics/pagination/">https://docs.djangoproject.com/en/1.11/topics/pagination/</a></p></li><li><p>分页示例:</p><ul><li>视图函数  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book</span>(<span class="params">request</span>):</span><br><span class="line">    bks = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    paginator = Paginator(bks, <span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;当前对象的总个数是:&#x27;</span>, paginator.count)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;当前对象的面码范围是:&#x27;</span>, paginator.page_range)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;总页数是：&#x27;</span>, paginator.num_pages)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;每页最大个数:&#x27;</span>, paginator.per_page)</span><br><span class="line"></span><br><span class="line">    cur_page = request.GET.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>)  <span class="comment"># 得到默认的当前页</span></span><br><span class="line">    page = paginator.page(cur_page)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;bookstore/book.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure></li><li>模板设计  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>分页显示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% for b in page %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; b.title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 分页功能 #&#125;</span><br><span class="line">&#123;# 上一页功能 #&#125;</span><br><span class="line">&#123;% if page.has_previous %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;book&#x27; %&#125;?page=&#123;&#123; page.previous_page_number &#125;&#125;&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">上一页</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for p in paginator.page_range %&#125;</span><br><span class="line">    &#123;% if p == page.number %&#125;</span><br><span class="line">        &#123;&#123; p &#125;&#125;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;book&#x27; %&#125;?page=&#123;&#123; p &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; p &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;#下一页功能#&#125;</span><br><span class="line">&#123;% if page.has_next %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;book&#x27; %&#125;?page=&#123;&#123; page.next_page_number &#125;&#125;&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">下一页</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">总页数: &#123;&#123; page.len &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><ul><li><p>文件上传必须为POST提交方式</p></li><li><p>表单<code>&lt;form&gt;</code>中文件上传时必须有带有<code>enctype=&quot;multipart/form-data&quot;</code> 时才会包含文件内容数据。</p></li><li><p>表单中用<code>&lt;input type=&quot;file&quot; name=&quot;xxx&quot;&gt;</code>标签上传文件</p><ul><li>名字<code>xxx</code>对应<code>request.FILES[&#39;xxx&#39;]</code> 对应的内存缓冲文件流对象。可通能过<code>request.FILES[&#39;xxx&#39;]</code> 返回的对象获取上传文件数据</li><li><code>file=request.FILES[&#39;xxx&#39;]</code> file 绑定文件流对象，可以通过文件流对象的如下信息获取文件数据<br>  file.name 文件名<br>  file.file 文件的字节流数据</li></ul></li><li><p>上传文件的表单书写方式</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- file: index/templates/index/upload.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myfile&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在setting.py 中设置一个变量MEDIA_ROOT 用来记录上传文件的位置</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file : settings.py</span></span><br><span class="line">...</span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;static/files&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>在当前项目文件夹下创建 <code>static/files</code> 文件夹</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> -p static/files</span></span><br></pre></td></tr></table></figure></li><li><p>添加路由及对应的处理函数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r&#x27;^upload&#x27;</span>, views.upload_view)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>上传文件的视图处理函数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, Http404</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_view</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;index/upload.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        a_file = request.FILES[<span class="string">&#x27;myfile&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;上传文件名是:&quot;</span>, a_file.name)</span><br><span class="line"></span><br><span class="line">        filename =os.path.join(settings.MEDIA_ROOT, a_file.name)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = a_file.file.read()</span><br><span class="line">            f.write(data)</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;接收文件:&quot;</span> + a_file.name + <span class="string">&quot;成功&quot;</span>)</span><br><span class="line">    <span class="keyword">raise</span> Http404</span><br></pre></td></tr></table></figure></li><li><p>访问地址: <a href="http://127.0.0.1:8000/static/upload.html">http://127.0.0.1:8000/static/upload.html</a></p></li></ul><h2 id="Django中的用户认证-使用Django认证系统"><a href="#Django中的用户认证-使用Django认证系统" class="headerlink" title="Django中的用户认证 (使用Django认证系统)"></a>Django中的用户认证 (使用Django认证系统)</h2><ul><li><p>Django带有一个用户认证系统。 它处理用户账号、组、权限以及基于cookie的用户会话。</p></li><li><p>作用:</p><ol><li>添加普通用户和超级用户</li><li>修改密码</li></ol></li><li><p>文档参见</p><ul><li><a href="https://docs.djangoproject.com/en/1.11/topics/auth/">https://docs.djangoproject.com/en/1.11/topics/auth/</a></li></ul></li><li><p>User模型类</p><ul><li>位置: <code>from django.contrib.auth.models import User</code></li></ul></li><li><p>默认user的基本属性有：</p><table><thead><tr><th>属性名</th><th>类型</th><th>是否必选</th></tr></thead><tbody><tr><td>username</td><td>用户名</td><td>是</td></tr><tr><td>password</td><td>密码</td><td>是</td></tr><tr><td>email</td><td>邮箱</td><td>可选</td></tr><tr><td>first_name</td><td>名</td><td></td></tr><tr><td>last_name</td><td>姓</td><td></td></tr><tr><td>is_superuser</td><td>是否是管理员帐号(&#x2F;admin)</td><td></td></tr><tr><td>is_staff</td><td>是否可以访问admin管理界面</td><td></td></tr><tr><td>is_active</td><td>是否是活跃用户,默认True。一般不删除用户，而是将用户的is_active设为False。</td><td></td></tr><tr><td>last_login</td><td>上一次的登录时间</td><td></td></tr><tr><td>date_joined</td><td>用户创建的时间</td><td></td></tr></tbody></table></li><li><p>数据库表现形式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use myauth;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> auth_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field        <span class="operator">|</span> Type         <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id           <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> password     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">128</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> last_login   <span class="operator">|</span> datetime(<span class="number">6</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> is_superuser <span class="operator">|</span> tinyint(<span class="number">1</span>)   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> username     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">150</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> UNI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> first_name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>)  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> last_name    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>)  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> email        <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">254</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> is_staff     <span class="operator">|</span> tinyint(<span class="number">1</span>)   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> is_active    <span class="operator">|</span> tinyint(<span class="number">1</span>)   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> date_joined  <span class="operator">|</span> datetime(<span class="number">6</span>)  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ul><h3 id="auth基本模型操作"><a href="#auth基本模型操作" class="headerlink" title="auth基本模型操作:"></a>auth基本模型操作:</h3><ul><li>创建用户<ul><li>创建普通用户create_user  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> models</span><br><span class="line">user = models.User.objects.create_user(username=<span class="string">&#x27;用户名&#x27;</span>, password=<span class="string">&#x27;密码&#x27;</span>, email=<span class="string">&#x27;邮箱&#x27;</span>,...)</span><br><span class="line">...</span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure></li><li>创建超级用户create_superuser  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> models</span><br><span class="line">user = models.User.objects.create_superuser(username=<span class="string">&#x27;用户名&#x27;</span>, password=<span class="string">&#x27;密码&#x27;</span>, email=<span class="string">&#x27;邮箱&#x27;</span>,...)</span><br><span class="line">...</span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure></li></ul></li><li>删除用户  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user = models.User.objects.get(username=<span class="string">&#x27;用户名&#x27;</span>)</span><br><span class="line">    user.is_active = <span class="literal">False</span>  <span class="comment"># 记当前用户无效</span></span><br><span class="line">    user.save()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;删除普通用户成功！&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;删除普通用户失败&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/user/info&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>修改密码set_password  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user = models.User.objects.get(username=<span class="string">&#x27;laowei&#x27;</span>)</span><br><span class="line">    user.set_password(<span class="string">&#x27;654321&#x27;</span>)</span><br><span class="line">    user.save()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;修改密码成功！&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;修改密码失败！&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>检查密码是否正确check_password  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user = models.User.objects.get(username=<span class="string">&#x27;laowei&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.check_password(<span class="string">&#x27;654321&#x27;</span>):  <span class="comment"># 成功返回True,失败返回False</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;密码正确&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;密码错误&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;没有此用户！&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><ul><li>项目部署是指在软件开发完毕后，将开发机器上运行的开发板软件实际安装到服务器上进行长期运行</li><li>部署要分以下几个步骤进行<ol><li>在安装机器上安装和配置同版本的数据库</li><li>django 项目迁移(在安装机器上配置与开发环境相同的python版本及依懒的包)</li><li>用 uwsgi 替代<code>python3 manage.py runserver</code> 方法启动服务器</li><li>配置 nginx 反向代理服务器</li><li>用nginx 配置静态文件路径,解决静态路径问题</li></ol></li></ul><ol><li>安装同版本的数据库<ul><li>安装步骤略</li></ul></li><li>django 项目迁移<ol><li>安装python<ul><li><code>$ sudo apt install python3</code></li></ul></li><li>安装相同版本的包<ul><li>导出当前模块数据包的信息:<ul><li><code>$ pip3 freeze &gt; package_list.txt</code></li></ul></li><li>导入到另一台新主机<ul><li><code>$ pip3 install -r package_list.txt</code></li></ul></li></ul></li><li>将当前项目源代码复制到运程主机上(scp 命令)<ul><li>$ sudo scp -a 当前项目源代码 远程主机地址和文件夹</li></ul></li></ol></li></ol><h3 id="WSGI-Django工作环境部署"><a href="#WSGI-Django工作环境部署" class="headerlink" title="WSGI Django工作环境部署"></a>WSGI Django工作环境部署</h3><ul><li>WSGI (Web Server Gateway Interface)Web服务器网关接口，是Python应用程序或框架和Web服务器之间的一种接口，被广泛使用</li><li>它实现了WSGI协议、http等协议。Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换。WSGI是一种Web服务器网关接口。</li></ul><h3 id="uWSGI-网关接口配置-ubuntu-18-04-配置"><a href="#uWSGI-网关接口配置-ubuntu-18-04-配置" class="headerlink" title="uWSGI 网关接口配置 (ubuntu 18.04 配置)"></a>uWSGI 网关接口配置 (ubuntu 18.04 配置)</h3><ul><li><p>使用 <code>python manage.py runserver</code> 通常只在开发和测试环境中使用。</p></li><li><p>当开发结束后，完善的项目代码需要在一个高效稳定的环境中运行，这时可以使用uWSGI</p></li><li><p>uWSGI是WSGI的一种,它可以让Django、Flask等开发的web站点运行其中.</p></li><li><p>安装uWSGI</p><ul><li>在线安装 uwsgi  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> pip3 install uwsgi</span></span><br></pre></td></tr></table></figure></li><li>离线安装<ol><li>在线下载安装包:  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pip3 download uwsgi</span></span><br></pre></td></tr></table></figure><ul><li>下载后的文件为 <code>uwsgi-2.0.18.tar.gz</code></li></ul></li><li>离线安装 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar -xzvf uwsgi-2.0.18.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> uwsgi-2.0.18</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> python3 setup.py install</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>配置uWSGI</p><ul><li>添加配置文件 <code>项目文件夹/uwsgi.ini</code><ul><li>如: mysite1&#x2F;uwsgi.ini  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="comment"># 套接字方式的 IP地址:端口号</span></span><br><span class="line"><span class="comment"># socket=127.0.0.1:8000</span></span><br><span class="line"><span class="comment"># Http通信方式的 IP地址:端口号</span></span><br><span class="line"><span class="attr">http</span>=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span></span><br><span class="line"><span class="comment"># 项目当前工作目录</span></span><br><span class="line"><span class="attr">chdir</span>=/home/weimz/.../my_project 这里需要换为项目文件夹的绝对路径</span><br><span class="line"><span class="comment"># 项目中wsgi.py文件的目录，相对于当前工作目录</span></span><br><span class="line"><span class="attr">wsgi-file</span>=my_project/wsgi.py</span><br><span class="line"><span class="comment"># 进程个数</span></span><br><span class="line"><span class="attr">process</span>=<span class="number">4</span></span><br><span class="line"><span class="comment"># 每个进程的线程个数</span></span><br><span class="line"><span class="attr">threads</span>=<span class="number">2</span></span><br><span class="line"><span class="comment"># 服务的pid记录文件</span></span><br><span class="line"><span class="attr">pidfile</span>=uwsgi.pid</span><br><span class="line"><span class="comment"># 服务的目志文件位置</span></span><br><span class="line"><span class="attr">daemonize</span>=uwsgi.log</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>uWSGI的运行管理</p><ul><li><p>启动 uwsgi</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> 项目文件夹</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> uwsgi --ini 项目文件夹/uwsgi.ini</span></span><br></pre></td></tr></table></figure></li><li><p>停止 uwsgi</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> 项目文件夹</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> uwsgi --stop uwsgi.pid</span></span><br></pre></td></tr></table></figure></li><li><p>说明:</p><ul><li>当uwsgi 启动后,当前django项目的程序已变成后台守护进程,在关闭当前终端时此进程也不会停止。</li></ul></li></ul></li><li><p>测试:</p><ul><li>在浏览器端输入<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000</a> 进行测试</li><li>注意，此时端口号为8000</li></ul></li></ul><h3 id="nginx-反向代理配置"><a href="#nginx-反向代理配置" class="headerlink" title="nginx 反向代理配置"></a>nginx 反向代理配置</h3><ul><li><p>Nginx是轻量级的高性能Web服务器，提供了诸如HTTP代理和反向代理、负载均衡、缓存等一系列重要特性，在实践之中使用广泛。</p></li><li><p>C语言编写，执行效率高</p></li><li><p>nginx 作用</p><ul><li>负载均衡， 多台服务器轮流处理请求</li><li>反向代理</li></ul></li><li><p>原理:</p></li><li><p>客户端请求nginx,再由nginx 请求 uwsgi, 运行django下的python代码</p></li><li><p>ubuntu 下 nginx 安装<br>  $ sudo apt install nginx</p></li><li><p>nginx 配置 </p><ul><li>修改nginx 的配置文件 &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 在server节点下添加新的location项，指向uwsgi的ip与端口。</span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    location / &#123;</span><br><span class="line">        uwsgi_pass 127.0.0.1:8000;  # 重定向到127.0.0.1的8000端口</span><br><span class="line">        include /etc/nginx/uwsgi_params; # 将所有的参数转到uwsgi下</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>nginx服务控制</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> /etc/init.d/nginx start|stop|restart|status</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> service nginx start|stop|restart|status</span></span><br></pre></td></tr></table></figure><blockquote><p>通过 start,stop,restart,status 可能实现nginx服务的启动、停止、重启、查扑克状态等操作</p></blockquote></li><li><p>修改uWSGI配置 </p><ul><li>修改<code>项目文件夹/uwsgi.ini</code>下的Http通信方式改为socket通信方式,如:  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="comment"># 去掉如下</span></span><br><span class="line"><span class="comment"># http=127.0.0.1:8000</span></span><br><span class="line"><span class="comment"># 改为</span></span><br><span class="line"><span class="attr">socket</span>=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span></span><br></pre></td></tr></table></figure></li><li>重启uWSGI服务  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> uwsgi --stop uwsgi.pid</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> uwsgi --ini 项目文件夹/uwsgi.ini</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">- 测试:</span><br><span class="line">    - 在浏览器端输入&lt;http://127.0.0.1&gt; 进行测试</span><br><span class="line">    - 注意，此时端口号为80(nginx默认值)</span><br><span class="line"></span><br><span class="line">### nginx 配置静态文件路径</span><br><span class="line">- 解决静态路径问题</span><br><span class="line">    ```ini</span><br><span class="line">    # file : /etc/nginx/sites-available/default</span><br><span class="line">    # 新添加location /static 路由配置，重定向到指定的绝对路径</span><br><span class="line">    server &#123;</span><br><span class="line">        ...</span><br><span class="line">        location /static &#123;</span><br><span class="line">            # root static文件夹所在的绝对路径,如:</span><br><span class="line">            root /home/weimz/my_django_project; # 重定向/static请求的路径，这里改为你项目的文件夹</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改配置文件后需要重新启动 nginx 服务</p></li></ul><h3 id="404-界面"><a href="#404-界面" class="headerlink" title="404 界面"></a>404 界面</h3><ul><li>在模板文件夹内添加 404.html 模版，当视图触发Http404 异常时将会被显示</li><li>404.html 仅在发布版中(即setting.py 中的 DEBUG&#x3D;False时) 才起作用</li><li>当向应处理函数触发Http404异常时就会跳转到404界面  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xxx_view</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">raise</span> Http404  <span class="comment"># 直接返回404</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux搭建Hexo</title>
      <link href="/2019/10/12/hexo/Linux%E6%90%AD%E5%BB%BAHexo/"/>
      <url>/2019/10/12/hexo/Linux%E6%90%AD%E5%BB%BAHexo/</url>
      
        <content type="html"><![CDATA[<p>为这个博客系统搭建一个远程站点</p><span id="more"></span><h2 id="方法1：Docker的node镜像部署"><a href="#方法1：Docker的node镜像部署" class="headerlink" title="方法1：Docker的node镜像部署"></a>方法1：Docker的node镜像部署</h2><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 4000:4000 --name hexo \</span><br><span class="line">-v /dockerData/Blog:/Blog \</span><br><span class="line">node /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it hexo bash</span><br></pre></td></tr></table></figure><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p><strong>如果初始化博客</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir hexo</span><br><span class="line">cd hexo   </span><br><span class="line">hexo init </span><br></pre></td></tr></table></figure><blockquote><p>hexo init 自动把资源文件下载好；会等待一段时间</p></blockquote><p><strong>如果已经有博客</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd Blog</span><br><span class="line">npm install hexo --save</span><br><span class="line">npm audit fix</span><br></pre></td></tr></table></figure><h3 id="运行博客"><a href="#运行博客" class="headerlink" title="运行博客"></a>运行博客</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup hexo s &amp;</span><br></pre></td></tr></table></figure><h2 id="方法2：手动搭建Node环境"><a href="#方法2：手动搭建Node环境" class="headerlink" title="方法2：手动搭建Node环境"></a>方法2：手动搭建Node环境</h2><h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nodejs</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><blockquote><p>安装时间会很久，闹心等待。</p><p>卧槽，无情。安装失败了</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker运行Nginx</title>
      <link href="/2019/10/09/docker/Docker%E8%BF%90%E8%A1%8CNginx/"/>
      <url>/2019/10/09/docker/Docker%E8%BF%90%E8%A1%8CNginx/</url>
      
        <content type="html"><![CDATA[<p>如果我们有自己的服务器，就经常肯定会使用到Nginx，下面我们就用Docker来部署一个Nginx</p><span id="more"></span><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p><strong>移除旧版本</strong><br>1.查询安装过的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum list installed | grep docker</span><br><span class="line"></span><br><span class="line">docker-engine.x86_64                 17.03.0.ce-1.el7.centos         @dockerrepo</span><br></pre></td></tr></table></figure><p>2.删除安装的软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove docker-engine.x86_64</span><br></pre></td></tr></table></figure><p>3.删除镜像&#x2F;容器等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/docker</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>安装一些必要的系统工具:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p><strong>添加软件源信息：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p><strong>更新 yum 缓存</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure><p><strong>安装 Docker-ce：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装 Docker</span></span><br><span class="line"><span class="built_in">sudo</span> yum -y install docker-ce</span><br></pre></td></tr></table></figure><p><strong>启动 Docker 后台服务:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p><strong>测试运行 hello-world</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>出现<code>hello world</code>就证明安装正常了</p><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><p>安装<code>nginx</code>前，我们现在本地建立几个文件，用于存放<code>nginx</code>的配置文件等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到服务器根目录</span></span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"><span class="comment"># 创建主目录</span></span><br><span class="line"><span class="built_in">mkdir</span> dockerData</span><br><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line"><span class="built_in">mkdir</span> dockerData/nginx dockerData/nginx/conf dockerData/nginx/logs dockerData/nginx/www dockerData/nginx/ssl</span><br></pre></td></tr></table></figure><p>上面的 <code>dockerData</code> 可以换成自己喜欢的名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dockerData/nginx 用于存放 docker 下 nginx 自定义文件</span><br><span class="line">dockerData/nginx/conf 存放 nginx 配置文件</span><br><span class="line">dockerData/nginx/log 存放 nginx 日志文件</span><br><span class="line">dockerData/nginx/www 存放 nginx 访问的资源文件</span><br><span class="line">dockerData/nginx/ssl 存放 ssl 证书</span><br></pre></td></tr></table></figure><p>启动 nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 80:80 -d --rm nginx</span><br></pre></td></tr></table></figure><p>如果你没有备案，可以将上面的<code>80:80</code>换成<code>8081:80</code>，因为这个东西一会儿也要删掉，所以加上<code>--rm</code>参数，命令执行玩后通过 <code>docker ps</code> 查看 <code>nginx</code> 是否在运行，在运行的情况下访问你的域名加端口号查看是否正常安装，<code>80</code>直接省略。如下表示访问成功</p><p>导出配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp nginx:/etc/nginx/nginx.conf /dockerData/nginx/conf/nginx.conf 导出配置文件 nginx.conf</span><br><span class="line">docker cp nginx:/etc/nginx/conf.d /dockerData/nginx/conf/conf.d 导出配置为你 nginx.conf</span><br></pre></td></tr></table></figure><p>执行 <code>docker stop nginx</code> ，会自动删除现在的 <code>nginx</code> 容器，然后执行如下命令重新启动一个 <code>nginx</code> 容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 --name nginx \</span><br><span class="line">-v /dockerData/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /dockerData/nginx/ssl:/etc/nginx/ssl \</span><br><span class="line">-v /dockerData/nginx/conf/conf.d:/etc/nginx/conf.d \</span><br><span class="line">-v /dockerData/nginx/www:/usr/share/nginx/html \</span><br><span class="line">-v /dockerData/nginx/logs:/var/log/nginx nginx</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-v /dockerData/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \ 挂载配置文件nginx.conf</span><br><span class="line">-v /dockerData/nginx/conf/conf.d:/etc/nginx/conf.d 挂载配置文件default.conf</span><br><span class="line">-v /dockerData/nginx/www:/usr/share/nginx/html  挂载项目文件</span><br><span class="line">-v /dockerData/nginx/logs:/var/log/nginx 挂载配置文件</span><br></pre></td></tr></table></figure><p>访问你的域名，你会发现报错了<br>这时我们可以前往 <code>/dockerData/nginx/logs</code> 下查看日志文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019/08/05 14:57:54 [error] 6#6: *3 directory index of &quot;/usr/share/nginx/html/&quot; is forbidden, client: 121.32.33.217, server: localhost, request: &quot;GET / HTTP/1.1&quot;, host: &quot;www.jinjianh.com&quot; </span><br></pre></td></tr></table></figure><p>因为 <code>/usr/share/nginx/html/</code> 被挂载到了服务器上面的&#x2F;dockerData&#x2F;nginx&#x2F;www目录下，原来的欢迎页面在 <code>dockerData/nginx/www</code> 是没有的，所有就报错了，这里我们随便建一个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 打开项目文件</span><br><span class="line">cd /dockerData/nginx/www</span><br><span class="line"># 使用vim 创建并编辑文件</span><br><span class="line">vim index.html</span><br><span class="line"># 此时我们会进入vim界面，按 i 插入，然后输入</span><br><span class="line">&lt;h1&gt;Hello Docker-Nginx&lt;/h1&gt;</span><br><span class="line"># 输入完后，按 esc，然后输入 :wq</span><br></pre></td></tr></table></figure><p>再次访问我们的域名就可以看到我们刚刚写的h1标签内容</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-图片压缩</title>
      <link href="/2019/10/01/ios/general/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E6%8A%80%E6%9C%AF/"/>
      <url>/2019/10/01/ios/general/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p>移动端开发经常会遇到图片压缩的问题，场景有更新头像，发帖等。今天我们就了解一下</p><span id="more"></span><h2 id="图片格式基础"><a href="#图片格式基础" class="headerlink" title="图片格式基础"></a>图片格式基础</h2><ul><li>点阵图：也叫位图。用像素为单位，像素保存颜色信息，排列像素实现显示。</li><li>矢量图：记录元素形状和颜色的算法，显示时展示算法运算的结果。</li></ul><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>表示颜色时，有两种形式，一种为索引色（Index Color），一种为直接色（Direct Color）</p><ul><li>索引色：用一个数字索引代表一种颜色，在图像信息中存储数字到颜色的映射关系表（调色盘 Palette）。每个像素保存该像素颜色对应的数字索引。一般调色盘只能存储有限种类的颜色，通常为 256 种。所以每个像素的数字占用 1 字节（8 bit）大小。</li><li>直接色：用四个数字来代表一种颜色，数字分别对应颜色中红色，绿色，蓝色，透明度（RGBA）。每个像素保存这四个纬度的信息来代表该像素的颜色。根据色彩深度（每个像素存储颜色信息的 bit 数不同），最多可以支持的颜色种类也不同，常见的有 8 位（R3+G3+B2）、16 位（R5+G6+B5）、24 位（R8+G8+B8）、32 位（A8+R8+G8+B8）。所以每个像素占用 1~4 字节大小。</li></ul><h2 id="移动端常用图片格式"><a href="#移动端常用图片格式" class="headerlink" title="移动端常用图片格式"></a>移动端常用图片格式</h2><p>图片格式中一般分为静态图和动态图</p><h3 id="静态图"><a href="#静态图" class="headerlink" title="静态图"></a>静态图</h3><ul><li><p>JPG：是支持 JPEG（ 一种有损压缩方法）标准中最常用的图片格式。采用点阵图。常见的是使用 24 位的颜色深度的直接色（不支持透明）。</p></li><li><p>PNG：是支持无损压缩的图片格式。采用点阵图。PNG 有 5 种颜色选项：索引色、灰度、灰度透明、真彩色（24 位直接色）、真彩色透明（32 位直接色）。</p></li><li><p>WebP：是同时支持有损压缩和无所压缩的的图片格式。采用点阵图。支持 32 位直接色。移动端支持情况如下：</p></li></ul><table><thead><tr><th>系统</th><th>原生</th><th>WebView</th><th>浏览器</th></tr></thead><tbody><tr><td>iOS</td><td>第三方库支持</td><td>不支持</td><td>支持</td></tr><tr><td>Android</td><td>4.3后支持完整功能</td><td>支持</td><td>支持</td></tr></tbody></table><h3 id="动态图"><a href="#动态图" class="headerlink" title="动态图"></a>动态图</h3><ul><li>GIF：是支持无损压缩的图片格式。采用点阵图。使用索引色，并有 1 位透明度通道（透明与否）。</li><li>APNG：基于 PNG 格式扩展的格式，加入动态图支持。采用点阵图。使用 32 位直接色。但没有被官方 PNG 接纳。移动端支持情况如下：</li></ul><table><thead><tr><th>系统</th><th>原生</th><th>WebView</th><th>浏览器</th></tr></thead><tbody><tr><td>iOS</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Android</td><td>第三方库支持</td><td>不支持</td><td>不支持</td></tr></tbody></table><ul><li>Animated Webp：Webp 的动图形式，实际上是文件中打包了多个单帧 Webp，在 libwebp 0.4 后开始支持。移动端支持情况如下：</li></ul><table><thead><tr><th>系统</th><th>原生</th><th>WebView</th><th>浏览器</th></tr></thead><tbody><tr><td>iOS</td><td>第三方库支持</td><td>不支持</td><td>不支持</td></tr><tr><td>Android</td><td>第三方库支持</td><td>不支持</td><td>不支持</td></tr></tbody></table><p>而由于一般项目需要兼容三端（iOS、Android、Web 的关系），最简单就是支持 JPG、PNG、GIF 这三种通用的格式。所以本文暂不讨论其余图片格式的压缩。</p><h2 id="移动端系统图片处理架构"><a href="#移动端系统图片处理架构" class="headerlink" title="移动端系统图片处理架构"></a>移动端系统图片处理架构</h2><p>根据我的了解，画了一下 iOS&amp;Android 图片处理架构。iOS 这边，也是可以直接调用底层一点的框架的。</p><p><img src="https://cdn.rencheng.cc/blog/f7jhz.jpg-thumb100"></p><h2 id="iOS-的-ImageIO"><a href="#iOS-的-ImageIO" class="headerlink" title="iOS 的 ImageIO"></a>iOS 的 ImageIO</h2><p>本文 iOS 端处理图片主要用 ImageIO 框架，使用的原因主要是静态图动态图 API 调用保持一致，且不会因为 UIImage 转换时会丢失一部分数据的信息。</p><p>ImageIO 主要提供了图片编解码功能，封装了一套 C 语言接口。在 Swift 中不需要对 C 对象进行内存管理，会比 Objective-C 中使用方便不少，但 api 结果返回都是 Optional（实际上非空），需要用 <code>guard/if</code>，或者 !进行转换。</p><h3 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h3><p><strong>1. 创建 CGImageSource</strong><br><code>CGImageSource</code> 相当于 ImageIO 数据来源的抽象类。通用的使用方式 <code>CGImageSourceCreateWithDataProvider:</code> 需要提供一个 DataProvider，可以指定文件、URL、Data 等输入。也有通过传入 CFData 来进行创建的便捷方法 <code>CGImageSourceCreateWithData:</code>。方法的第二个参数 options 传入一个字典进行配置。根据 Apple 在 WWDC 2018 上的 <a href="https://developer.apple.com/videos/play/wwdc2018/219/">Image and Graphics Best Practices</a> 上的例子，当不需要解码仅需要创建 <code>CGImageSource</code> 的时候，应该将 <code>kCGImageSourceShouldCache</code> 设为 false。</p><p><img src="https://cdn.rencheng.cc/blog/lmr0l.jpg-thumb100"></p><p><strong>2. 解码得到 CGImage</strong><br>用 <code>CGImageSourceCreateImageAtIndex:</code> 或者 <code>CGImageSourceCreateThumbnailAtIndex:</code> 来获取生成的 <code>CGImage</code>，这里参数的 Index 就是第几帧图片，静态图传入 0 即可。</p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p><strong>1. 创建 CGImageDestination</strong><br><code>CGImageDestination</code> 相当于<code>ImageIO</code>数据输出的抽象类。通用的使用方式 <code>CGImageDestinationCreateWithDataConsumer: </code>需要提供一个 <code>DataConsumer</code>，可以置顶 URL、Data 等输入。也有通过传入 CFData 来进行创建的便捷方法 <code>CGImageDestinationCreateWithData:</code>，输出会写入到传入的<code>Data</code>中。方法还需要提供图片类型，图片帧数。</p><p><strong>2. 添加 CGImage</strong><br>添加 <code>CGImage</code> 使用<code>CGImageDestinationAddImage:</code>方法，动图的话，按顺序多次调用就行了。</p><p>而且还有一个特别的 <code>CGImageDestinationAddImageFromSource:</code> 方法，添加的其实是一个<code> CGImageSource</code>，有什么用呢，通过<code> options</code> 参数，达到改变图像设置的作用。比如改变 JPG 的压缩参数，用上这个功能后，就不需要转换成更顶层的对象（比如 <code>UIImage</code>），减少了转换时的编解码的损耗，达到性能更优的目的。</p><p><strong>3. 进行编码</strong><br>调用 <code>CGImageDestinationFinalize: </code>，表示开始编码，完成后会返回一个<code>Bool</code>值，并将数据写入 <code>CGImageDestination</code> 提供的 DataConsumer 中。</p><h2 id="压缩思路分析"><a href="#压缩思路分析" class="headerlink" title="压缩思路分析"></a>压缩思路分析</h2><p>位图占用的空间大小，其实就是像素数量 x 单像素占用空间 x 帧数。所以减小图片空间大小，其实就从这三个方向下手。其中单像素占用空间，在直接色的情况下，主要和色彩深度相关。在实际项目中，改变色彩深度会导致图片颜色和原图没有保持完全一致，笔者并不建议对色彩深度进行更改。而像素数量就是平时非常常用的图片分辨率缩放。除此之外，JPG 格式还有特有的通过指定压缩系数来进行有损压缩。</p><p>JPG：压缩系数 + 分辨率缩放 + 色彩深度降低<br>PNG： 分辨率缩放 + 降低色彩深度<br>GIF：减少帧数 + 每帧分辨率缩放 + 减小调色盘</p><p><a href="https://nemocdz.github.io/post/%E6%B5%85%E8%B0%88%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/#%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E5%9F%BA%E7%A1%80">https://nemocdz.github.io/post/%E6%B5%85%E8%B0%88%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/#%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E5%9F%BA%E7%A1%80</a></p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>减少图片占用内存空间</p><h2 id="质量压缩"><a href="#质量压缩" class="headerlink" title="质量压缩"></a>质量压缩</h2><p>图片的质量压缩 降低图片质量（大小）。<br><strong>原理</strong><br>通过算法扣掉（同化）了 图片中的一些某个点附近相近的像素，达到降低质量 减少 文件大小的目的。</p><blockquote><p>他其实只能 实现对 file 的影响，对加载这个图片出来的bitmap 内存是无法节省的 ，还是那么大。 因为 bitmap 在内存中的大小是按照 像素 计算的 ，也就是width * height ，对于质量压缩，并不会改变图片的真实的像素（像素大小不会变）。</p></blockquote><h2 id="尺寸压缩"><a href="#尺寸压缩" class="headerlink" title="尺寸压缩"></a>尺寸压缩</h2><p>就是按照一定的倍数对图片减少单位尺寸的像素值。<br><strong>原理</strong><br>通过减少单位尺寸的像素值，真正意义上的降低像素值。</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信分享卡片点击跳转App</title>
      <link href="/2019/09/27/search/%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E5%8D%A1%E7%89%87%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%ACApp/"/>
      <url>/2019/09/27/search/%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E5%8D%A1%E7%89%87%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%ACApp/</url>
      
        <content type="html"><![CDATA[<p>微信内置浏览器已禁止使用外部url scheme跳转至其他app。<br>如何突破这一壁垒实现需求呢？</p><span id="more"></span><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>App分享卡片到微信，微信点击打开卡片连接，点击【按钮】直接唤起App；</p><h2 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h2><p>微信内置浏览器已禁止使用外部url scheme跳转至其他app。<br>官方没有给具体的链接，但是就不能跳转。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="解决方案1（推荐使用）-类似虎扑"><a href="#解决方案1（推荐使用）-类似虎扑" class="headerlink" title="解决方案1（推荐使用）(类似虎扑)"></a>解决方案1（推荐使用）(类似虎扑)</h3><p>引导打开浏览器，iOS在Safari中打开，Android在浏览器中打开</p><table><thead><tr><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left"><img src="https://cdn.rencheng.cc/blog/ubs3d.jpg-thumb100"></td><td align="left"><img src="https://cdn.rencheng.cc/blog/dbozx.jpg-thumb100"></td><td align="left"><img src="https://cdn.rencheng.cc/blog/l9iol.jpg-thumb100"></td><td align="left"><img src="https://cdn.rencheng.cc/blog/fq67j.jpg-thumb100"></td><td align="left"><img src="https://cdn.rencheng.cc/blog/g4aaa.jpg-thumb100"></td></tr></tbody></table><blockquote><p>基于<code>universal link</code> 和 <code>scheme</code><br>技术相对简单，虽说达到了跳转目的，但过程过于繁琐</p></blockquote><h3 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2"></a>解决方案2</h3><p>集成第三方程序（无需花时间去维护）</p><blockquote><p>使用<code>DeepLink</code> 技术，突破微信跳转问题<br>技术门槛高，但第三方帮我们解决了。</p></blockquote><h4 id="LinkedME"><a href="#LinkedME" class="headerlink" title="LinkedME"></a><a href="https://www.linkedme.cc/">LinkedME</a></h4><p>—国内⾸首家企业级深度链接服务提供商，致⼒于帮助APP解决 ⽤用户增⻓(拉新、拉活、留留存、转化等)和流量变现等问题。</p><table><thead><tr><th align="center">唤醒指定页面</th><th align="center">场景还原</th><th align="center">沉默用户唤醒</th></tr></thead><tbody><tr><td align="center">&lt;video src&#x3D;”<a href="https://www.linkedme.cc/img/LInkPage.mp4%22controls=%22controls">https://www.linkedme.cc/img/LInkPage.mp4&quot;controls=&quot;controls</a>“ width&#x3D;180px&gt;</video></td><td align="center">&lt;video src&#x3D;”<a href="https://www.linkedme.cc/img/li.mp4%22controls=%22controls">https://www.linkedme.cc/img/li.mp4&quot;controls=&quot;controls</a>“ width&#x3D;180px&gt;</video></td><td align="center">&lt;video src&#x3D;”<a href="https://www.linkedme.cc/img/vancl.mp4%22controls=%22controls">https://www.linkedme.cc/img/vancl.mp4&quot;controls=&quot;controls</a>“ width&#x3D;180px&gt;</video></td></tr></tbody></table><p><strong>唤醒指定页面</strong></p><table><thead><tr><th align="left"></th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left"><img src="https://cdn.rencheng.cc/blog/zs2r8.jpg-thumb100"></td><td align="left"><img src="https://cdn.rencheng.cc/blog/c4llg.jpg-thumb100"></td><td align="left"><img src="https://cdn.rencheng.cc/blog/tttst.jpg-thumb100"></td></tr></tbody></table><h4 id="极光魔链"><a href="#极光魔链" class="headerlink" title="极光魔链"></a><a href="https://www.jiguang.cn/jmlink/#/app/d3c04300ca1878475ad651f7/overview">极光魔链</a></h4><p>今年极光收购了魔窗，产品名称是极光魔链。可以快速集成，但是稳定性待测试。<br><img src="https://cdn.rencheng.cc/blog/7ukxa.png-thumb100"></p><h4 id="实际测试结果"><a href="#实际测试结果" class="headerlink" title="实际测试结果"></a>实际测试结果</h4><p><strong>iOS</strong><br>微信：可以完美唤起App以及指定页面App；（打开App的时候显示的是第三方应用）<br><strong>Android</strong><br>微信：当App在后台时可以直接唤起App（Android Q除外，它跟杀死唤起机制一样）；如果App杀死之后，需要浏览器唤起。</p><h3 id="解决方案3"><a href="#解决方案3" class="headerlink" title="解决方案3"></a>解决方案3</h3><p>小程序可以打开App（类似Bilibili）<br><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/launchApp.html">官方文档</a></p><table><thead><tr><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left"><img src="https://cdn.rencheng.cc/blog/svcqk.jpg-thumb100"></td><td align="left"><img src="https://cdn.rencheng.cc/blog/gympp.jpg-thumb100"></td><td align="left"><img src="https://cdn.rencheng.cc/blog/1civj.jpg-thumb100"></td><td align="left"><img src="https://cdn.rencheng.cc/blog/du3l5.jpg-thumb100"></td></tr></tbody></table><h3 id="解决方案4"><a href="#解决方案4" class="headerlink" title="解决方案4"></a>解决方案4</h3><p>通过自己调研开发DeepLink（参考一点资讯）</p><table><thead><tr><th align="left"></th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left"><img src="https://cdn.rencheng.cc/blog/jh51j.jpg-thumb100"></td><td align="left"><img src="https://cdn.rencheng.cc/blog/fqvrl.jpg-thumb100"></td><td align="left"><img src="https://cdn.rencheng.cc/blog/skrvs.jpg-thumb100"></td></tr></tbody></table><blockquote><p>超级复杂，需要移动端，Web，服务器；三端联调。预计3人两周到三周工作量。阅读英文文档，需要懂架构的人。<br>实际测试，也并没有100%全部跳转成功</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 技术调研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-监测iOS发布更新</title>
      <link href="/2019/09/26/python/%E7%9B%91%E6%B5%8BiOS%E5%8F%91%E5%B8%83%E6%9B%B4%E6%96%B0/"/>
      <url>/2019/09/26/python/%E7%9B%91%E6%B5%8BiOS%E5%8F%91%E5%B8%83%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>由于发布版本之后，Appstore一直都没有更新，就写了个脚本。</p><span id="more"></span><p><strong>该脚本是需要所有信息更新完成才能触发</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># xpath</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="comment"># 延迟</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求最新版本数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">requestLastVersionData</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        header = &#123;<span class="string">&quot;Accept&quot;</span>:<span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&quot;</span>&#125;</span><br><span class="line">        res = requests.get(<span class="string">&#x27;https://apps.apple.com/cn/app/id******&#x27;</span>, headers=header)</span><br><span class="line">        html = etree.HTML(res.text)</span><br><span class="line">        html_data = html.xpath(<span class="string">&quot;//p[@class=&#x27;l-column small-6 medium-12 whats-new__latest__version&#x27;]/text()&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> html_data[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 钉钉通知</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">robotNotice</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        header = &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">        data = &#123;<span class="string">&quot;msgtype&quot;</span>:<span class="string">&quot;link&quot;</span>,<span class="string">&quot;link&quot;</span>:&#123;<span class="string">&quot;title&quot;</span>:<span class="string">&quot;已更新&quot;</span>,<span class="string">&quot;text&quot;</span>:<span class="string">&quot;已更新&quot;</span>,<span class="string">&quot;picUrl&quot;</span>:<span class="string">&quot;https://rencheng.cc/images/avatar.JPG&quot;</span>,<span class="string">&quot;messageUrl&quot;</span>:<span class="string">&quot;https://apps.apple.com/cn/app/id******&quot;</span>&#125;&#125;</span><br><span class="line">        requests.post(<span class="string">&#x27;https://oapi.dingtalk.com/robot/send?access_token=******&#x27;</span>, json=data, headers=header, timeout=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 死循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    version = requestLastVersionData()</span><br><span class="line">    <span class="keyword">if</span> version != <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> version != <span class="string">&quot;版本 2.0.3&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;已更新&quot;</span>)</span><br><span class="line">            robotNotice()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;最新%s&quot;</span> % version)</span><br><span class="line">    sleep(<span class="number">10</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> iOS </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-事故记录</title>
      <link href="/2019/09/26/ios/record/%E4%B8%8A%E7%BA%BF%E4%BA%8B%E6%95%85%E8%AE%B0%E5%BD%9501/"/>
      <url>/2019/09/26/ios/record/%E4%B8%8A%E7%BA%BF%E4%BA%8B%E6%95%85%E8%AE%B0%E5%BD%9501/</url>
      
        <content type="html"><![CDATA[<p>2019-09-26 上线事故记录<br>已经发布版本，在AppStore迟迟迟迟迟迟没有看到。</p><span id="more"></span><h2 id="事故？"><a href="#事故？" class="headerlink" title="事故？"></a>事故？</h2><p>按照摘要描述的，这本不是一个事故，为什么叫事故呢？<br>由于此版本是强更版本，移动端，Web，后台，全部需要统一上线；最后其他端都上线了，就iOS没有更新，导致线上宕机25h20m，并且收到了很多差评。</p><h2 id="上线流程"><a href="#上线流程" class="headerlink" title="上线流程"></a>上线流程</h2><table><thead><tr><th align="left">时间</th><th align="left">操作</th></tr></thead><tbody><tr><td align="left">09:00</td><td align="left">发布停服更新公告</td></tr><tr><td align="left">10:00</td><td align="left">停服，导数据，代码合并Master上线</td></tr><tr><td align="left">10:10</td><td align="left">Web合并Master上线</td></tr><tr><td align="left">11:00</td><td align="left">释放Android包同时配置强更</td></tr><tr><td align="left">11:10</td><td align="left">iOS发布版本同时配置强更</td></tr><tr><td align="left">14:00</td><td align="left">开服</td></tr></tbody></table><p>按照这个流程，iOS这边只需要静悄悄的等待上线就好了，按照正常的时间，iOS这边是半个小时到2个小时，这个时间肯定是够够的。但是，就怕这个但是，我们等了25h20m。</p><h2 id="iOS操作流程"><a href="#iOS操作流程" class="headerlink" title="iOS操作流程"></a>iOS操作流程</h2><table><thead><tr><th align="left">时间</th><th align="left">操作状态</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">2019-09-22 22:39</td><td align="left">2.1.0准备提交</td><td align="left"></td></tr><tr><td align="left">2019-09-23 13:19</td><td align="left">提交审核</td><td align="left"></td></tr><tr><td align="left">2019-09-24 04:56</td><td align="left">正在审核</td><td align="left"></td></tr><tr><td align="left">2019-09-24 05:55</td><td align="left">等待开发人员发布</td><td align="left"></td></tr><tr><td align="left">2019-09-25 11:10</td><td align="left">发布此版本</td><td align="left"></td></tr><tr><td align="left">2019-09-25 16:43</td><td align="left">更改价格及发布地区</td><td align="left">刷新状态</td></tr><tr><td align="left">2019-09-25 18:15</td><td align="left">给Apple发邮件</td><td align="left"></td></tr><tr><td align="left">2019-09-26 10:00</td><td align="left">下架应用</td><td align="left">刷新状态</td></tr><tr><td align="left">2019-09-26 10:00</td><td align="left">发布版本</td><td align="left">刷新状态</td></tr><tr><td align="left">2019-09-26 10:36</td><td align="left">Apple回复邮件</td><td align="left">可供销售后，最多等待24小时</td></tr><tr><td align="left">2019-09-26 11:03</td><td align="left">2.1.1准备提交</td><td align="left">只为尝试提交让其刷新状态，并没有用</td></tr><tr><td align="left">2019-09-26 11:13</td><td align="left">Call Apple</td><td align="left">回复说我们重新上架，还要等最多24小时</td></tr><tr><td align="left">2019-09-26 12:14</td><td align="left">商店封面图更新</td><td align="left"></td></tr><tr><td align="left">2019-09-26 12:16</td><td align="left">商店可以刷到最新包</td><td align="left"></td></tr><tr><td align="left">2019-09-26 12:30</td><td align="left">商店文案更新</td><td align="left"></td></tr><tr><td align="left">2019-09-26 12:38</td><td align="left">发布上线通知</td><td align="left"></td></tr></tbody></table><p><strong>下面是Apple的邮件回复</strong><br><img src="https://cdn.rencheng.cc/blog/xcs2q.jpg"></p><h2 id="实时监测最新版本的脚本"><a href="#实时监测最新版本的脚本" class="headerlink" title="实时监测最新版本的脚本"></a>实时监测最新版本的脚本</h2><p><a href="https://rencheng.cc/2019/09/26/python/%E7%9B%91%E6%B5%8BiOS%E5%8F%91%E5%B8%83%E6%9B%B4%E6%96%B0/">监测iOS发布更新</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>优化上线流程，iOS和Android应该提前发布，然后再走后端上线流程。</p><blockquote><p>如果后台的流程后置的话，一定要保障其自动化部署和迁移脚本能够顺利进行。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 事故记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-代理检测</title>
      <link href="/2019/09/26/ios/objc/iOS-%E4%BB%A3%E7%90%86%E6%A3%80%E6%B5%8B/"/>
      <url>/2019/09/26/ios/objc/iOS-%E4%BB%A3%E7%90%86%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>当我们开发移动App时候，为了避免别人抓包，所以我们要有自己的检测机制</p><span id="more"></span><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 判断是否设置了代理</span></span><br><span class="line">- (<span class="type">BOOL</span>)checkProxySetting &#123;</span><br><span class="line">    <span class="comment">// 获取当前系统代理配置</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *proxySettings = (__bridge <span class="built_in">NSDictionary</span> *)(<span class="built_in">CFNetworkCopySystemProxySettings</span>());</span><br><span class="line">    <span class="comment">// 获取代理的信息 - url一般都填baidu</span></span><br><span class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@&quot;https://www.baidu.com&quot;</span>];</span><br><span class="line">    <span class="built_in">NSArray</span> *proxies = (__bridge <span class="built_in">NSArray</span> *)(<span class="built_in">CFNetworkCopyProxiesForURL</span>((__bridge <span class="built_in">CFURLRef</span>)(url), (__bridge <span class="built_in">CFDictionaryRef</span>)(proxySettings)));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (proxies.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *proxyType = [proxies.firstObject objectForKey:(<span class="built_in">NSString</span> *)kCFProxyTypeKey];</span><br><span class="line">        <span class="keyword">if</span> (![proxyType isEqualToString:(__bridge <span class="built_in">NSString</span> *)kCFProxyTypeNone]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; proxies.count; i++) &#123;</span><br><span class="line">                <span class="built_in">NSDictionary</span> *settings = proxies[i];</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">NSLog</span>(<span class="string">@&quot;---------------代理配置---------------&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;host: %@&quot;</span>, [settings objectForKey:(<span class="built_in">NSString</span> *)kCFProxyHostNameKey]);</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;port: %@&quot;</span>, [settings objectForKey:(<span class="built_in">NSString</span> *)kCFProxyPortNumberKey]);</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;type: %@&quot;</span>, [settings objectForKey:(<span class="built_in">NSString</span> *)kCFProxyTypeKey]);</span><br><span class="line">                <span class="keyword">if</span> (i == proxies.count - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="built_in">NSLog</span>(<span class="string">@&quot;-------------------------------------&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">NSLog</span>(<span class="string">@&quot;---------------------------&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-脚本后台执行</title>
      <link href="/2019/09/20/python/%E8%84%9A%E6%9C%AC%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C/"/>
      <url>/2019/09/20/python/%E8%84%9A%E6%9C%AC%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>最近被一款养成游戏感染了，为了不浪费我的时间，我抓了它的请求，写了个脚本自动养成；在Pycharm上面运行着好好的，但是我不能一直开着电脑吧，然后我就有一个需求，就是把脚本部署到服务器上，但是部署到服务器上，怎么能让他在后台执行呢？</p><span id="more"></span><h2 id="初级版"><a href="#初级版" class="headerlink" title="初级版"></a>初级版</h2><p>脚本后加<code>&amp;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ***.py &amp;</span><br></pre></td></tr></table></figure><blockquote><p><strong>此方法在ssh连接断开之后自动停止</strong><br>如果你想临时让他后台执行的话，这种方法很适合你</p></blockquote><h2 id="终极版"><a href="#终极版" class="headerlink" title="终极版"></a>终极版</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> python ***.py &amp;</span><br></pre></td></tr></table></figure><p><strong>如何把<code>print</code>输入重定向到执行文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> python -u myscript.py params1 &gt; nohup.out 2&gt;&amp;1 &amp; </span><br></pre></td></tr></table></figure><p>python的输出有缓冲，导致nohup.out不能够马上看到输出。加上<code>-u</code>参数得到解决</p><blockquote><p>这种方法就算退出登录也会执行</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-logging</title>
      <link href="/2019/09/18/python/logging/"/>
      <url>/2019/09/18/python/logging/</url>
      
        <content type="html"><![CDATA[<p>logging模块是Python内置的标准模块，主要用于输出运行日志，可以设置输出日志的等级、日志保存路径、日志文件回滚等</p><span id="more"></span><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>可以通过设置不同的日志等级，在release版本中只输出重要信息，而不必显示大量的调试信息；</li><li>print将所有信息都输出到标准输出中，严重影响开发者从标准输出中查看其它数据；logging则可以由开发者决定将信息输出到什么地方，以及怎么输出；</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level = logging.INFO,<span class="built_in">format</span> = <span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">&quot;Start print log&quot;</span>)</span><br><span class="line">logger.debug(<span class="string">&quot;Do something&quot;</span>)</span><br><span class="line">logger.warning(<span class="string">&quot;Something maybe fail.&quot;</span>)</span><br><span class="line">logger.info(<span class="string">&quot;Finish&quot;</span>)</span><br></pre></td></tr></table></figure><p>logging中可以选择很多消息级别，如debug、info、warning、error以及critical。通过赋予logger或者handler不同的级别，开发者就可以只输出错误信息到特定的记录文件，或者在调试时只记录调试信息。</p><h3 id="logging-basicConfig函数各参数："><a href="#logging-basicConfig函数各参数：" class="headerlink" title="logging.basicConfig函数各参数："></a>logging.basicConfig函数各参数：</h3><p>filename：指定日志文件名；<br>filemode：和file函数意义相同，指定日志文件的打开模式，’w’或者’a’；<br>format：指定输出的格式和内容，format可以输出很多有用的信息，</p><p>参数：作用</p><p>%(levelno)s：打印日志级别的数值<br>%(levelname)s：打印日志级别的名称<br>%(pathname)s：打印当前执行程序的路径，其实就是sys.argv[0]<br>%(filename)s：打印当前执行程序名<br>%(funcName)s：打印日志的当前函数<br>%(lineno)d：打印日志的当前行号<br>%(asctime)s：打印日志的时间<br>%(thread)d：打印线程ID<br>%(threadName)s：打印线程名称<br>%(process)d：打印进程ID<br>%(message)s：打印日志信息<br>datefmt：指定时间格式，同time.strftime()；</p><p>level：设置日志级别，默认为logging.WARNNING；</p><p>stream：指定将日志的输出流，可以指定输出到sys.stderr，sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略；</p><h2 id="将日志写入到文件"><a href="#将日志写入到文件" class="headerlink" title="将日志写入到文件"></a>将日志写入到文件</h2><h3 id="将日志写入到文件-1"><a href="#将日志写入到文件-1" class="headerlink" title="将日志写入到文件"></a>将日志写入到文件</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">logger.setLevel(level = logging.INFO)</span><br><span class="line">handler = logging.FileHandler(<span class="string">&quot;log.txt&quot;</span>)</span><br><span class="line">handler.setLevel(logging.INFO)</span><br><span class="line">formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">handler.setFormatter(formatter)</span><br><span class="line">logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">&quot;Start print log&quot;</span>)</span><br><span class="line">logger.debug(<span class="string">&quot;Do something&quot;</span>)</span><br><span class="line">logger.warning(<span class="string">&quot;Something maybe fail.&quot;</span>)</span><br><span class="line">logger.info(<span class="string">&quot;Finish&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="将日志同时输出到屏幕和日志文件"><a href="#将日志同时输出到屏幕和日志文件" class="headerlink" title="将日志同时输出到屏幕和日志文件"></a>将日志同时输出到屏幕和日志文件</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">logger.setLevel(level = logging.INFO)</span><br><span class="line">handler = logging.FileHandler(<span class="string">&quot;log.txt&quot;</span>)</span><br><span class="line">handler.setLevel(logging.INFO)</span><br><span class="line">formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">console = logging.StreamHandler()</span><br><span class="line">console.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">logger.addHandler(handler)</span><br><span class="line">logger.addHandler(console)</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">&quot;Start print log&quot;</span>)</span><br><span class="line">logger.debug(<span class="string">&quot;Do something&quot;</span>)</span><br><span class="line">logger.warning(<span class="string">&quot;Something maybe fail.&quot;</span>)</span><br><span class="line">logger.info(<span class="string">&quot;Finish&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="日志回滚"><a href="#日志回滚" class="headerlink" title="日志回滚"></a>日志回滚</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> RotatingFileHandler</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">logger.setLevel(level = logging.INFO)</span><br><span class="line"><span class="comment">#定义一个RotatingFileHandler，最多备份3个日志文件，每个日志文件最大1K</span></span><br><span class="line">rHandler = RotatingFileHandler(<span class="string">&quot;log.txt&quot;</span>,maxBytes = <span class="number">1</span>*<span class="number">1024</span>,backupCount = <span class="number">3</span>)</span><br><span class="line">rHandler.setLevel(logging.INFO)</span><br><span class="line">formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">rHandler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">console = logging.StreamHandler()</span><br><span class="line">console.setLevel(logging.INFO)</span><br><span class="line">console.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">logger.addHandler(rHandler)</span><br><span class="line">logger.addHandler(console)</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">&quot;Start print log&quot;</span>)</span><br><span class="line">logger.debug(<span class="string">&quot;Do something&quot;</span>)</span><br><span class="line">logger.warning(<span class="string">&quot;Something maybe fail.&quot;</span>)</span><br><span class="line">logger.info(<span class="string">&quot;Finish&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-日期时间</title>
      <link href="/2019/09/18/python/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/"/>
      <url>/2019/09/18/python/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>Python 程序能用很多方式处理日期和时间，转换日期格式是一个常见的功能。<br>Python 提供了一个<code>time</code>和<code>calendar</code>模块可以用于格式化日期和时间。<br>时间间隔是以秒为单位的浮点小数。<br>每个时间戳都以自从1970年1月1日午夜（历元）经过了多长时间来表示。</p><span id="more"></span><p>Python 的 time 模块下有很多函数可以转换常见日期格式。如函数<code>time.time()</code>用于获取当前时间戳, 如下实例:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br></pre></td></tr></table></figure><blockquote><p>时间戳单位最适于做日期运算。但是1970年之前的日期就无法以此表示了。太遥远的日期也不行，UNIX和Windows只支持到2038年。</p></blockquote><h2 id="获取当前时间戳"><a href="#获取当前时间戳" class="headerlink" title="获取当前时间戳"></a>获取当前时间戳</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.time()</span><br></pre></td></tr></table></figure><h2 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h2><p>由于我们获取的时间是距离1970年的时间戳，我们要转换成我们想要的格式，比如2018-09-10 08:09:00;也有将日期时间转换成时间戳</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化成2018-09-10 08:09:00形式</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化成Sat Sep 10 08:09:00 2018形式</span></span><br><span class="line"><span class="built_in">print</span> (time.strftime(<span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>, time.localtime()))</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 将格式字符串转换为时间戳</span></span><br><span class="line">a = <span class="string">&quot;Sat Mar 28 22:24:24 2016&quot;</span></span><br><span class="line"><span class="built_in">print</span> (time.mktime(time.strptime(a,<span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>)))</span><br></pre></td></tr></table></figure><p><strong>python中时间日期格式化符号</strong></p><table><thead><tr><th align="left">符号</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">%y</td><td align="left">两位数的年份表示（00-99）</td></tr><tr><td align="left">%Y</td><td align="left">四位数的年份表示（000-9999）</td></tr><tr><td align="left">%m</td><td align="left">月份（01-12）</td></tr><tr><td align="left">%d</td><td align="left">月内中的一天（0-31）</td></tr><tr><td align="left">%H</td><td align="left">24小时制小时数（0-23）</td></tr><tr><td align="left">%I</td><td align="left">12小时制小时数（01-12）</td></tr><tr><td align="left">%Mv</td><td align="left">分钟数（00&#x3D;59）</td></tr><tr><td align="left">%S</td><td align="left">秒（00-59）</td></tr><tr><td align="left">%a</td><td align="left">本地简化星期名称</td></tr><tr><td align="left">%A</td><td align="left">本地完整星期名称</td></tr><tr><td align="left">%b</td><td align="left">本地简化的月份名称</td></tr><tr><td align="left">%B</td><td align="left">本地完整的月份名称</td></tr><tr><td align="left">%c</td><td align="left">本地相应的日期表示和时间表示</td></tr><tr><td align="left">%j</td><td align="left">年内的一天（001-366）</td></tr><tr><td align="left">%p</td><td align="left">本地A.M.或P.M.的等价符</td></tr><tr><td align="left">%U</td><td align="left">一年中的星期数（00-53）星期天为星期的开始</td></tr><tr><td align="left">%w</td><td align="left">星期（0-6），星期天为星期的开始</td></tr><tr><td align="left">%W</td><td align="left">一年中的星期数（00-53）星期一为星期的开始</td></tr><tr><td align="left">%x</td><td align="left">本地相应的日期表示</td></tr><tr><td align="left">%X</td><td align="left">本地相应的时间表示</td></tr><tr><td align="left">%Z</td><td align="left">当前时区的名称</td></tr><tr><td align="left">%%</td><td align="left">%号本身</td></tr></tbody></table><h2 id="程序耗时检测方法"><a href="#程序耗时检测方法" class="headerlink" title="程序耗时检测方法"></a>程序耗时检测方法</h2><p>由于CPU调度问题，我们使用<code>time.time()</code>方法不是特别准确，Python为我们提供了更加准确的方法</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ime.perf_counter()  <span class="comment"># 返回系统运行时间</span></span><br><span class="line">time.process_time()  <span class="comment"># 返回进程运行时间</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-三方库</title>
      <link href="/2019/09/14/ios/general/%E5%B8%B8%E7%94%A8%E4%B8%89%E6%96%B9%E5%BA%93/"/>
      <url>/2019/09/14/ios/general/%E5%B8%B8%E7%94%A8%E4%B8%89%E6%96%B9%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>列出用过比较好用的三方库，以达成最佳实践</p><span id="more"></span><table><thead><tr><th align="left">类别</th><th align="left">Objective-c</th><th align="left">Swift</th></tr></thead><tbody><tr><td align="left">网络请求库</td><td align="left"><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a></br><a href="https://github.com/yuantiku/YTKNetwork">YTKNetwork</a></td><td align="left"><a href="https://github.com/Alamofire/Alamofire">Alamofire</a></br><a href="https://github.com/Moya/Moya">Moya</a></td></tr><tr><td align="left">图片异步加载</td><td align="left"><a href="https://sdwebimage.github.io/">SDWebImage</a></td><td align="left"><a href="https://github.com/onevcat/Kingfisher">Kingfisher</a>（喵神）</td></tr><tr><td align="left">刷新控件</td><td align="left"><a href="https://github.com/CoderMJLee/MJRefresh">MJRefresh</a>(MJ)</td><td align="left"></td></tr><tr><td align="left">布局约束</td><td align="left"><a href="https://github.com/SnapKit/Masonry">Masonry</a></td><td align="left"><a href="http://snapkit.io/">SnapKit</a></td></tr><tr><td align="left">JSON 解析</td><td align="left"><a href="https://github.com/ibireme/YYModel">YYModel</a>（郭耀源）(最高效)</br><a href="https://github.com/CoderMJLee/MJExtension">MJExtention</a>（MJ）</td><td align="left"><a href="https://www.cnblogs.com/mjios/p/11352776.html">KakaJSON</a>（MJ）</br><a href="https://github.com/alibaba/HandyJSON">HandyJson</a>（Alibaba）</br><a href="https://github.com/SwiftyJSON/SwiftyJSON">SwiftyJSON</a></td></tr><tr><td align="left">基础库</td><td align="left"><a href="https://github.com/ibireme/YYKit">YYKit</a>（郭耀源）</td><td align="left"></td></tr><tr><td align="left">播放器</td><td align="left"><a href="https://github.com/renzifeng/ZFPlayer">ZFPlayer</a>（任子峰）</td><td align="left"><a href="https://github.com/BrikerMan/BMPlayer">BMPlayer</a>（模仿ZF）</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
            <tag> Objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS中级面试题</title>
      <link href="/2019/09/02/ios/general/iOS%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/09/02/ios/general/iOS%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>基础面试提纲</p><ul><li><input checked="" disabled="" type="checkbox"> 应用程序生命周期</li></ul><span id="more"></span><ol><li>应用程序生命周期发生变化时，是先触发UIAppDelegate内的方法还是本地通知？<br> 答：系统会先回调相应的方法，待回调方法执行后，再发送相应的通知</li><li></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-csv模块</title>
      <link href="/2019/08/31/python/csv%E6%A8%A1%E5%9D%97/"/>
      <url>/2019/08/31/python/csv%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>在Python中，csv文件的存取操作</p><span id="more"></span><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、导入模块</span><br><span class="line">2、打开csv文件</span><br><span class="line">3、初始化写入对象</span><br><span class="line">4、写入数据(参数为列表)</span><br></pre></td></tr></table></figure><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单行写入（writerow([]))</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.csv&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    writer.writerow([<span class="string">&#x27;白眉鹰王&#x27;</span>,<span class="string">&#x27;43&#x27;</span>])</span><br><span class="line">    writer.writerow([<span class="string">&#x27;金毛狮王&#x27;</span>,<span class="string">&#x27;45&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行写入(writerows([(),(),()]</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.csv&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    writer.writerows([(<span class="string">&#x27;王源&#x27;</span>,<span class="string">&#x27;18&#x27;</span>),(<span class="string">&#x27;易烊千玺&#x27;</span>,<span class="string">&#x27;20&#x27;</span>),(<span class="string">&#x27;王俊凯&#x27;</span>,<span class="string">&#x27;19&#x27;</span>)])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 持久化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS底层面试题</title>
      <link href="/2019/08/28/ios/general/iOS%E5%BA%95%E5%B1%82%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/08/28/ios/general/iOS%E5%BA%95%E5%B1%82%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>底层面试概要</p><ul><li><input checked="" disabled="" type="checkbox"> 对象的本质</li><li><input checked="" disabled="" type="checkbox"> Category</li><li><input disabled="" type="checkbox"> Block</li><li><input disabled="" type="checkbox"> Runtime</li><li><input checked="" disabled="" type="checkbox"> RunLoop</li><li><input checked="" disabled="" type="checkbox"> 多线程</li><li><input checked="" disabled="" type="checkbox"> 内存管理</li><li><input disabled="" type="checkbox"> 性能优化<span id="more"></span></li></ul><h2 id="对象的本质"><a href="#对象的本质" class="headerlink" title="对象的本质"></a>对象的本质</h2><h3 id="Objective-C对象的本质"><a href="#Objective-C对象的本质" class="headerlink" title="Objective-C对象的本质"></a>Objective-C对象的本质</h3><ol><li>一个NSObject对象占用多少内存<br> 系统分配了16个字节；64位环境下，NSObject内部只使用了8个字节（64位环境下）存储isa。</li><li>对象的isa指向哪里？<br> instance对象的isa-&gt;类对象<br> 类对象的isa-&gt;metaClass对象<br> metaClass对象的isa-&gt;基类的metaClass对象<br> 基类的metaClass对象-&gt;基类的metaClass对象</li><li>OC的类信息存放在哪里？<br> 实例对象的方法，属性，成员变量，协议存在类对象中<br> 类对象的方法存在元类对象中</li></ol><h2 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h2><ol><li>Category的实现原理<ul><li>Category编译之后，底层结构是struct category_t，里面存储着分类的对象方法，类方法，属性，协议信息</li><li>在程序运行的时候，Runtime会将Category的数据，合并到类信息中（类对象，元类对象）</li></ul></li><li>Category和Extension的区别？<ul><li>Extension发生在编译的时候，他的信息已经包含在类信息中</li><li>Category是在运行时，将信息同步到类信息中</li></ul></li><li>Category中有load方法吗？load方法什么时候调用？能继承吗？<ul><li>有load方法</li><li>load方法是在Runtime加载类&#x2F;分类的时候调用（静态调用-函数地址调用）。</li><li>load方法可以继承，但是开发中强烈不建议主动调用load方法</li></ul></li><li>load和initialize方法的区别是什么？<ul><li>调用方式：load是函数地址直接调用；initialize是通过objc_msgSend调用</li><li>调用时机：load方法是程序启动Runtime加载类&#x2F;分类的时候调用；initialize是该类第一次收到消息的时候调用。</li><li>调用次数：load方法，一般系统自动执行，每个类只会执行一次。initialize如果子类没有实现，会调用父类的initialize，所以initialize会调用多次。</li></ul></li><li>他们在Category中的调用顺序？以及出现继承时他们之间的调用过程？<ul><li>load：先调用类的load，按照编译顺序加载，但是如果有父类，先处理父类（递归）；其次再调用分类的load，按照编译的顺序加载。</li><li>initialize：调用子类的+initialize前，先调用父类+initialize（递归）</li></ul></li><li>Category能否添加成员变量？如果可以，如何给Category添加成员变量<ul><li>可以，通过关联对象添加。</li></ul></li></ol><h2 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h2><ol><li>block原理是怎样的？本质是什么？<ul><li>block是封装<code>函数</code>及其<code>上下文</code>的<code>OC对象</code></li><li></li></ul></li><li>__block的作用是什么？有什么使用注意点？<ul><li>编译器会将__block修饰的变量封装成对象，解决block可以修改auto变量</li><li>MRC环境，block不会对修饰的OC对象产生强引用</li></ul></li><li>block的属性修饰词为什么是copy？使用block有哪些注意点？<ul><li>如果block不进行copy操作，就不会在堆上。就无法控制block生命周期</li><li>注意点：循环引用的问题</li></ul></li><li>block修改NSMutableArray内部数据的时候，需不需要加__block？<ul><li>不需要</li></ul></li></ol><h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><ol><li><p>如果需要交换UIControl的didMoveToSuperview方法，用于捕获控件的点击事件，需要的注意点是什么？</p><ul><li>由于didMoveToSuperview方法是UIView的方法，UIControl继承自UIView，所以在方法交换之后，UIView及继承UIView的子类，都需要增加交换的方法，否则会因为找不到方法而崩溃</li></ul></li><li><p>讲一下OC的消息机制</p><ul><li>OC的方法调用都是转换成<code>objc_msgSend</code>函数调用，给<code>receiver</code>方法调用者发送一个消息<code>@selector方法名</code></li><li><code>objc_msgSend</code>底层有3大阶段<ul><li>消息发送</li><li>动态方法解析</li><li>消息转发</li></ul></li></ul></li><li><p>消息转发机制流程</p><ul><li><code>forwardTargetForSelector</code> 返回target对象</li><li><code>methodSignatureForSelector</code> 返回方法签名；如果返回签名不为空，进行第3步</li><li><code>forwardInvocation:</code> 参数传入一个方法调用对象，可以自定义调用机制</li></ul></li><li><p>什么是Runtime？平时项目中有用过吗？</p><ul><li></li></ul></li></ol><h2 id="RunLoop"><a href="#RunLoop" class="headerlink" title="RunLoop"></a>RunLoop</h2><ol><li><p>讲讲 RunLoop，项目中有用到吗？</p><ul><li>定时器（Timer）、PerformSelector</li><li>GCD Async Main Queue</li><li>事件响应、手势识别、界面刷新</li><li>网络请求</li><li>AutoreleasePool</li></ul></li><li><p>RunLoop的基本作用</p><ul><li>保持程序的持续运行</li><li>处理App中的各种事件（比如触摸事件、定时器事件等）</li><li>节省CPU资源，提高程序性能：该做事时做事，该休息时休息</li></ul></li><li><p>Runloop内部实现逻辑？</p><ol><li>通知Observers：进入Loop</li><li>通知Observers：即将处理Timers</li><li>通知Observers：即将处理Sources</li><li>处理Blocks</li><li>处理Source0（可能会再次处理Blocks）</li><li>如果存在Source1，就跳转到第8步</li><li>通知Observers：开始休眠（等待消息唤醒）</li><li>通知Observers：结束休眠（被某个消息唤醒）<ol><li>处理Timer</li><li>处理GCD Async To Main Queue</li><li>处理Source1</li></ol></li><li>处理Blocks</li><li>根据前面的执行结果，决定如何操作<ol><li>回到第02步</li><li>退出Loop</li></ol></li><li>通知Observers：退出Loop</li></ol></li><li><p>Runloop和线程的关系？</p><ul><li>每条线程都有唯一的一个与之对应的RunLoop对象</li><li><code>RunLoop</code>保存在一个全局的Dictionary里，线程作为key，<code>RunLoop</code>作为value;{thread: Runloop}</li><li>线程刚创建时并没有RunLoop对象，RunLoop会在第一次获取它时创建</li><li><code>RunLoop</code>会在线程结束时销毁</li><li>主线程的<code>RunLoop</code>已经自动获取（创建），子线程默认没有开启<code>RunLoop</code></li></ul></li><li><p>Timer 与 Runloop 的关系？</p><ul><li>结构上来说：Timer里面有模式，模式里面有Timer</li><li>流程上来说：Timer是在Runloop运行流程中工作的</li></ul></li><li><p>程序中添加每3秒响应一次的NSTimer，当拖动tableview时timer可能无法响应要怎么解决？</p><ul><li>将Timer添加到Runloop的CommonMode里</li></ul></li><li><p>runloop 是怎么响应用户操作的， 具体流程是什么样的？</p><ol><li>Source1来捕获系统事件</li><li>Source1把事件包装成事件队列（EventQueue）</li><li>Source0处理事件队列</li></ol></li><li><p>说说runLoop的几种状态</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Run Loop Observer Activities */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">CF_OPTIONS</span><span class="params">(CFOptionFlags, CFRunLoopActivity)</span> &#123;</span><br><span class="line">    kCFRunLoopEntry = (<span class="number">1UL</span> &lt;&lt; <span class="number">0</span>),           <span class="comment">// 即将进入Loop</span></span><br><span class="line">    kCFRunLoopBeforeTimers = (<span class="number">1UL</span> &lt;&lt; <span class="number">1</span>),    <span class="comment">// 即将处理Timer</span></span><br><span class="line">    kCFRunLoopBeforeSources = (<span class="number">1UL</span> &lt;&lt; <span class="number">2</span>),   <span class="comment">// 即将处理Source</span></span><br><span class="line">    kCFRunLoopBeforeWaiting = (<span class="number">1UL</span> &lt;&lt; <span class="number">5</span>),   <span class="comment">// 即将进入休眠</span></span><br><span class="line">    kCFRunLoopAfterWaiting = (<span class="number">1UL</span> &lt;&lt; <span class="number">6</span>),    <span class="comment">// 刚从休眠中唤醒</span></span><br><span class="line">    kCFRunLoopExit = (<span class="number">1UL</span> &lt;&lt; <span class="number">7</span>),            <span class="comment">// 即将推出Loop</span></span><br><span class="line">    kCFRunLoopAllActivities = <span class="number">0x0FFFFFFF</span>U</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>runloop的mode作用是什么？</p><ul><li>kCFRunLoopDefaultMode（NSDefaultRunLoopMode）：App的默认Mode，通常主线程是在这个Mode下运行</li><li>UITrackingRunLoopMode：界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响</li></ul></li></ol><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><ol><li><p>你理解的多线程？</p></li><li><p>iOS的多线程方案有哪几种？你更倾向于哪一种？<br> <code>pthread</code><code>NSThread</code> <code>GCD</code> <code>NSOperation</code><br> 更倾向于GCD；但是也要看场景</p></li><li><p>GCD 的队列类型<br> <code>同步队列``并发队列</code></p></li><li><p>说一下 OperationQueue 和 GCD 的区别，以及各自的优势<br> <code>Operation Queue</code> 是基于<code>GCD</code>封装的抽象类，目的是为了提高灵活度，以满足多线程操作频繁、灵活度要求高的复杂场景。</p></li><li><p>线程安全的处理手段有哪些？<br> <code>加锁</code>，<code>GCD同步队列</code>，<code>信号量</code>等</p></li><li><p>OC你了解的锁有哪些？在你回答基础上进行二次提问；自旋和互斥对比？使用以上锁需要注意哪些？<br> <a href="https://rencheng.cc/2018/06/18/ios/objc/OC-%E5%A4%9A%E7%BA%BF%E7%A8%8B/#%E9%94%81">路由地址</a></p></li><li><p>以下代码是在主线程执行的，会不会产生死锁？</p> <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    [<span class="keyword">self</span> test];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)test &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;执行任务1&quot;</span>);</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_get_main_queue();</span><br><span class="line">    <span class="built_in">dispatch_sync</span>(queue, ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;执行任务2&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;执行任务3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p> 答：会产生死锁，因为<code>viewDidLoad</code>方法就是在主线程(主队列)中进行的，而<code>line-9</code>仍然想让代码块 <strong>立即</strong> 在主线程(主队列)中同步执行。</p></li><li><p>问下面代码的打印结果是什么？</p> <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;1&quot;</span>);</span><br><span class="line">        [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(test) withObject:<span class="literal">nil</span> afterDelay:<span class="number">.0</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;3&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)test &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 答：打印结果是：1, 3。<br> 原因：<code>performSelector:withObject:afterDelay:</code>的本质是往Runloop中添加定时器，子线程默认没有启动<code>Runloop</code>。解决方法：在<code>line-8</code>后插入</p> <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[[NSRunLoop currentRunLoop] addPort:[NSPort new] forMode:NSDefaultRunLoopMode];</span></span><br><span class="line">[[<span class="built_in">NSRunLoop</span> currentRunLoop] runMode:<span class="built_in">NSDefaultRunLoopMode</span> beforeDate:[<span class="built_in">NSDate</span> distantFuture]];</span><br></pre></td></tr></table></figure></li><li><p>请问下面代码的打印结果是什么？</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSThread</span> *thread = [[<span class="built_in">NSThread</span> alloc] initWithBlock:^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;1&quot;</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">    [thread start];</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(test) onThread:thread withObject:<span class="literal">nil</span> waitUntilDone:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)test &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答：只会打印1。因为在调用test的时候，线程已经销毁了。会报错<code>target thread exited while waiting for the perform</code></p></li></ol><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><ol><li><p>使用CADisplayLink、NSTimer有什么注意点？<br> <code>CADisplayLink</code>、<code>NSTimer</code>会对<code>target</code>产生强引用，如果<code>target</code>又对它们产生强引用，那么就会引发循环引用。解决方案：1：使用Block处理。2.使用代理对象<code>NSProxy</code></p></li><li><p>介绍下内存的几大区域</p><ul><li>代码段：编译之后的代码</li><li>数据段<ul><li>字符串常量：比如NSString *str &#x3D; @”123”</li><li>已初始化数据：已初始化的全局变量、静态变量等</li><li>未初始化数据：未初始化的全局变量、静态变量等</li></ul></li><li>栈：函数调用开销，比如局部变量。分配的内存空间地址越来越小</li><li>堆：通过alloc、malloc、calloc等动态分配的空间，分配的内存空间地址越来越大</li></ul></li><li><p>讲一下你对 iOS 内存管理的理解</p></li><li><p>ARC 都帮我们做了什么？<br> 答：LLVM+Runtime相互协作；ARC利用LLVM编译器，自动帮我们生成release，retain，autorelease代码。像弱引用会在运行时做操作。</p></li><li><p>weak指针的实现原理<br> 答：将弱引用存到哈希表里面，对象将要销毁的时候，取出弱引用表，将指向当前对象的弱指针置为nil。</p></li><li><p>autorelease对象在什么时机会被调用release</p></li><li><p>方法里有局部对象， 出了方法后会立即释放吗</p></li><li><p>一下两段代码能发生什么事？有什么区别？</p> <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="keyword">self</span>.name = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;abcdefghijklmn&quot;</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="keyword">self</span>.name = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;abc&quot;</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 答：上面一段执行，会出现坏内存的崩溃。下面一段代码name变量存储的是<code>Tagged Pointer</code>，涉及不到对象的内存管理，而上面一段代码因为多线程操作一个对象，有可能会造成对象的过度释放，导致崩溃。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window-软件推荐</title>
      <link href="/2019/08/26/recommend/window-%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
      <url>/2019/08/26/recommend/window-%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<p>Windows软件推荐（服务器运维）（包含下载地址）</p><span id="more"></span><table><thead><tr><th>名称</th><th>描述</th><th>下载地址</th></tr></thead><tbody><tr><td>Fiddler</td><td>抓包工具-配合谷歌插件<code>Proxy-SwitchyOmega</code></td><td><a href="https://object.rencheng.cc/software/windows/Fiddler_5.0.20173.49666_Setup.rar">博主</a></td></tr><tr><td>Finder证书信任</td><td>抓包失败，可能是证书没有被信任</td><td><a href="https://object.rencheng.cc/software/windows/Fiddler%E6%B7%BB%E5%8A%A0%E8%AF%81%E4%B9%A6%E4%BF%A1%E4%BB%BB%E7%9A%84%E6%96%B9%E6%B3%95.zip">博主</a></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-tqdm</title>
      <link href="/2019/08/22/python/tqdm/"/>
      <url>/2019/08/22/python/tqdm/</url>
      
        <content type="html"><![CDATA[<p>Tqdm进度条库让你的python进度可视化。<br>Tqdm在阿拉伯语表示进步，在西班牙语中表示我非常爱你。是一个快速，可扩展的Python进度条，可以在Python长循环中添加一个进度提示信息，用户只需要封装任意的迭代器tqdm(iterator)即可完成进度条。相比ProgressBar来说Tqdm的开销非常低，同时Tqdm可以在任何环境中不需要任何依赖运行。</p><span id="more"></span><h2 id="tqdm安装"><a href="#tqdm安装" class="headerlink" title="tqdm安装"></a>tqdm安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install tqdm</span><br><span class="line">或</span><br><span class="line">conda install -c conda-forge tqdm</span><br></pre></td></tr></table></figure><h2 id="tqdm用法"><a href="#tqdm用法" class="headerlink" title="tqdm用法"></a>tqdm用法</h2><p>tqdm是非常通用的，并且可以以多种方式使用。</p><h3 id="基于可迭代"><a href="#基于可迭代" class="headerlink" title="基于可迭代"></a>基于可迭代</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import tqdm</span><br><span class="line">pbar = tqdm([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;])</span><br><span class="line">for char in pbar:</span><br><span class="line">    pbar.set_description(&quot;Processing %s&quot; % char)</span><br></pre></td></tr></table></figure><h3 id="手册"><a href="#手册" class="headerlink" title="手册"></a>手册</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with tqdm(total=100) as pbar:</span><br><span class="line">    for i in range(10):</span><br><span class="line">        pbar.update(10)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/tqdm/tqdm/master/images/tqdm.gif"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-正则（regex）</title>
      <link href="/2019/08/12/python/%E6%AD%A3%E5%88%99/"/>
      <url>/2019/08/12/python/%E6%AD%A3%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>即文本的高级匹配模式，提供搜索，替代等功能。其本质是一系列由特殊符号组成的字串，这个字串即正则表达式。<br>由普通字符和特殊符号组成字符串，通过描述字符的重复和位置等行为，达到匹配某一类字符串的目的</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><ol><li>文本处理已经成为计算机的常见工作之一</li><li>对文本内容的搜索，定位，提取是逻辑比较复杂的工作</li><li>为了快速解决上述问题，产生了正则表达式技术</li></ol><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>即文本的高级匹配模式，提供搜索，替代等功能。其本质是一系列由特殊符号组成的字串，这个字串即正则表达式。</p><h3 id="匹配原理"><a href="#匹配原理" class="headerlink" title="匹配原理"></a>匹配原理</h3><p>由普通字符和特殊符号组成字符串，通过描述字符的重复和位置等行为，达到匹配某一类字符串的目的</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ol><li>熟练掌握正则表达式符号</li><li>实现基本的文本搜索，定位，提取，理解正则用法</li><li>能够适用re模块操作正则表达式</li></ol><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>方便文本处理</li><li>支持语言众多</li><li>使用灵活多样</li></ul><h2 id="基础实践"><a href="#基础实践" class="headerlink" title="基础实践"></a>基础实践</h2><h3 id="re模块简单实用"><a href="#re模块简单实用" class="headerlink" title="re模块简单实用"></a>re模块简单实用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.findall(pattern, string)</span><br></pre></td></tr></table></figure><p>功能: 使用正则表达式匹配目标字符串内容<br>参数</p><ul><li>pattern  正则表达式</li><li>string   目标字符串<br>返回值： 列表，列表中为匹配到的内容</li></ul><h3 id="元字符的使用"><a href="#元字符的使用" class="headerlink" title="元字符的使用"></a>元字符的使用</h3><h4 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h4><p><strong>元字符</strong> ： <code>a</code>  <code>b</code>   <code>c</code><br><strong>匹配规则</strong>： 每个字符匹配对应的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;hello&quot;,&quot;hello world&quot;)</span><br><span class="line">[&#x27;hello&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;你好&quot;,&quot;你好北京&quot;)</span><br><span class="line">[&#x27;你好&#x27;]</span><br></pre></td></tr></table></figure><h4 id="或"><a href="#或" class="headerlink" title="或"></a>或</h4><p><strong>元字符</strong>：  <code>|</code><br><strong>匹配规则</strong>： 匹配 | 两边任意一个正则表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;ab|cd&quot;,&quot;abcdefghialkjasbab&quot;)</span><br><span class="line">[&#x27;ab&#x27;, &#x27;cd&#x27;, &#x27;ab&#x27;]</span><br></pre></td></tr></table></figure><h4 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符"></a>匹配单个字符</h4><p><strong>元字符</strong>：  <code>.</code><br><strong>匹配规则</strong>： 匹配除换行外的任意字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.o --&gt; foo  fao  f@o  f o</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;f.o&quot;,&quot;foo is not fao&quot;)</span><br><span class="line">[&#x27;foo&#x27;, &#x27;fao&#x27;]</span><br></pre></td></tr></table></figure><h4 id="匹配开始位置"><a href="#匹配开始位置" class="headerlink" title="匹配开始位置"></a>匹配开始位置</h4><p><strong>元字符</strong> ： <code>^</code><br><strong>匹配规则</strong>：匹配目标字符串的开头位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;^Tom&quot;,&quot;Tom is a boy&quot;)</span><br><span class="line">[&#x27;Tom&#x27;]</span><br></pre></td></tr></table></figure><h4 id="匹配结束位置"><a href="#匹配结束位置" class="headerlink" title="匹配结束位置"></a>匹配结束位置</h4><p><strong>元字符</strong> ： <code>$</code><br><strong>匹配规则</strong> ： 匹配字符串的结束位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;Tom$&quot;,&quot;hi Tom&quot;)</span><br><span class="line">[&#x27;Tom&#x27;]</span><br></pre></td></tr></table></figure><h4 id="匹配重复"><a href="#匹配重复" class="headerlink" title="匹配重复 *"></a>匹配重复 *</h4><p><strong>元字符</strong> ： <code>*</code><br><strong>匹配规则</strong>： 匹配前面的字符出现0次或多次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fo*  --&gt; fooooooooo  f  fo</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;fo*&quot;,&quot;fadsfafoooafo&quot;)</span><br><span class="line">[&#x27;f&#x27;, &#x27;f&#x27;, &#x27;fooo&#x27;, &#x27;fo&#x27;]</span><br></pre></td></tr></table></figure><h4 id="匹配重复-1"><a href="#匹配重复-1" class="headerlink" title="匹配重复 +"></a>匹配重复 +</h4><p><strong>元字符</strong> ： <code>+</code><br><strong>匹配规则</strong>： 匹配前面的字符出现1次或多次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fo+  --&gt; fo   fooooo</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;fo+&quot;,&quot;fadsfafoooafo&quot;)</span><br><span class="line">[&#x27;fooo&#x27;, &#x27;fo&#x27;]</span><br></pre></td></tr></table></figure><h4 id="匹配重复-？"><a href="#匹配重复-？" class="headerlink" title="匹配重复 ？"></a>匹配重复 ？</h4><p><strong>元字符</strong> ： <code>?</code><br><strong>匹配规则</strong>： 匹配前面的字符出现0次或1次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fo? --&gt;  f   fo</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;fo?&quot;,&quot;fasdffoafooooo&quot;)</span><br><span class="line">[&#x27;f&#x27;, &#x27;f&#x27;, &#x27;fo&#x27;, &#x27;fo&#x27;]</span><br></pre></td></tr></table></figure><h4 id="匹配重复-n"><a href="#匹配重复-n" class="headerlink" title="匹配重复 {n}"></a>匹配重复 {n}</h4><p><strong>元字符</strong> ： <code>&#123;n&#125;</code><br><strong>匹配规则</strong>： 匹配指定的重复次数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fo&#123;3&#125;  --&gt; fooo</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;fo&#123;2&#125;&quot;,&quot;fasdffoafooooo&quot;)</span><br><span class="line">[&#x27;foo&#x27;]</span><br></pre></td></tr></table></figure><h4 id="匹配重复-m-n"><a href="#匹配重复-m-n" class="headerlink" title="匹配重复 {m,n}"></a>匹配重复 {m,n}</h4><p><strong>元字符</strong> ： <code>&#123;m,n&#125;</code><br><strong>匹配规则</strong> ： 匹配前面的正则表达式 m–n次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fo&#123;2,4&#125; --&gt; foo  fooo  foooo</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;fo&#123;2,4&#125;&quot;,&quot;fasdfofoooafooooo&quot;)</span><br><span class="line">[&#x27;fooo&#x27;, &#x27;foooo&#x27;]</span><br></pre></td></tr></table></figure><h4 id="匹配字符集合"><a href="#匹配字符集合" class="headerlink" title="匹配字符集合"></a>匹配字符集合</h4><p><strong>元字符</strong>： <code>[字符集]</code><br><strong>匹配规则</strong> ： 匹配任意一个字符集中的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[abc123]   a  b  c  1  2  3 </span><br><span class="line">[a-z]  </span><br><span class="line">[A-Z]</span><br><span class="line">[0-9]</span><br><span class="line">[_123a-z]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;^[A-Z][a-z]*&quot;,&quot;Boy&quot;)</span><br><span class="line">[&#x27;Boy&#x27;]</span><br></pre></td></tr></table></figure><h4 id="匹配字符集"><a href="#匹配字符集" class="headerlink" title="匹配字符集"></a>匹配字符集</h4><p><strong>元字符</strong> ： <code>[^...]</code><br><strong>匹配规则</strong> ：字符集取非，除列出的字符之外任意一个字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^abc] --&gt; 除a b c之外任意字符</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;[^ ]+&quot;,&quot;a little boy&quot;)</span><br><span class="line">[&#x27;a&#x27;, &#x27;little&#x27;, &#x27;boy&#x27;]</span><br></pre></td></tr></table></figure><h4 id="匹配任意（非）数字字符"><a href="#匹配任意（非）数字字符" class="headerlink" title="匹配任意（非）数字字符"></a>匹配任意（非）数字字符</h4><p><strong>元字符</strong> ： <code>\d</code>  <code>\D</code><br><strong>匹配规则</strong>：</p><ul><li><code>\d</code> 匹配任意数字字符     <code>[0-9]</code></li><li><code>\D</code> 匹配任意非数字字符   <code>[^0-9]</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;1\d&#123;10&#125;&quot;,&quot;18888886666&quot;)</span><br><span class="line">[&#x27;18888886666&#x27;]</span><br></pre></td></tr></table></figure><h4 id="匹配任意（非）普通字符"><a href="#匹配任意（非）普通字符" class="headerlink" title="匹配任意（非）普通字符"></a>匹配任意（非）普通字符</h4><p><strong>元字符</strong> ： <code>\w</code>   <code>\W</code><br><strong>匹配规则</strong>: </p><ul><li><code>\w</code> 普通字符  <code>[_0-9a-zA-Z]</code> 也能匹配普通汉字</li><li><code>\W</code> 非普通字符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;\w+&quot;,&quot;hello#nihao%asdf@adsgdfg!df&amp;&quot;)</span><br><span class="line">[&#x27;hello&#x27;, &#x27;nihao&#x27;, &#x27;asdf&#x27;, &#x27;adsgdfg&#x27;, &#x27;df&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;\W+&quot;,&quot;hello#nihao%asdf@adsgdfg!df&amp;&quot;)</span><br><span class="line">[&#x27;#&#x27;, &#x27;%&#x27;, &#x27;@&#x27;, &#x27;!&#x27;, &#x27;&amp;&#x27;]</span><br></pre></td></tr></table></figure><h4 id="匹配任意（非）空字符"><a href="#匹配任意（非）空字符" class="headerlink" title="匹配任意（非）空字符"></a>匹配任意（非）空字符</h4><p><strong>元字符</strong> ： </p><ul><li><code>\s</code>  匹配任意空字符  <code>[ \r\t\n\v\f]</code></li><li><code>\S</code>  匹配任意非空字符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;\w+\s+\w+&quot;,&quot;hello   world&quot;)</span><br><span class="line">[&#x27;hello   world&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;\S+&quot;,&quot;hello this is tom&quot;)</span><br><span class="line">[&#x27;hello&#x27;, &#x27;this&#x27;, &#x27;is&#x27;, &#x27;tom&#x27;]</span><br></pre></td></tr></table></figure><blockquote><p>空格也属于空字符</p></blockquote><h4 id="匹配字符串位置"><a href="#匹配字符串位置" class="headerlink" title="匹配字符串位置"></a>匹配字符串位置</h4><p><strong>元字符</strong> ： <code>\A</code>   <code>\Z</code><br><strong>匹配规则</strong>：  </p><ul><li><code>\A</code> 匹配字符串开头位置  <code>^</code></li><li><code>\Z</code> 匹配字符串结尾位置  <code>$</code></li></ul><p>绝对匹配 ： 正则表达式要完全匹配目标字符串内容</p><p>在正则表达式开始和结束位置加上<code>^</code> <code>$</code> (或者<code>\A</code> <code>\Z</code>)。这样正则表达式必须匹配整个目标字符串才会有结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(&quot;\A\d+\Z&quot;,&quot;123445&quot;)</span><br><span class="line">[&#x27;123445&#x27;]</span><br></pre></td></tr></table></figure><h4 id="匹配（非）单词边界"><a href="#匹配（非）单词边界" class="headerlink" title="匹配（非）单词边界"></a>匹配（非）单词边界</h4><p><strong>元字符</strong> ： <code>\b</code>   <code>\B</code><br><strong>匹配规则</strong> ： </p><ul><li><code>\b</code> 匹配单词边界位置 普通字符和非普通字符交界认为是单词边界</li><li><code>\B</code> 匹配非单词边界位置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(r&quot;num\b&quot;,&quot;num#asdf#&quot;)</span><br><span class="line">[&#x27;num&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(r&quot;num\b&quot;,&quot;numasdf#&quot;)</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h4 id="元字符总结"><a href="#元字符总结" class="headerlink" title="元字符总结"></a>元字符总结</h4><p>匹配单个字符 ： <code>a</code>   <code>.</code>   <code>\d</code>  <code>\D</code>  <code>\w</code>  <code>\W</code>  <code>\s</code>  <code>\S</code> <code>[...]</code>  <code>[^...]</code></p><p>匹配重复 ： <code>*</code>   <code>+</code> <code>?</code>  <code>&#123;n&#125;</code>  <code>&#123;m,n&#125;</code></p><p>匹配位置 ： <code>^</code>  <code>$</code>  <code>\A</code>  <code>\Z</code>  <code>\b</code>  <code>\B</code> </p><p>其他 ： <code>|</code>  <code>()</code>  <code>\</code></p><p>正则表达式转义</p><p>正则中的特殊符号：</p><p><code>.</code>  <code>*</code>  <code>+</code>  <code>?</code>  <code>^</code>  <code>$</code>  <code>[]</code>  <code>&#123;&#125;</code> <code>()</code>  <code>|</code> <code>\</code></p><p>正则表达式如果匹配特殊字符需要加 <code>\</code> 表达转义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 正则          目标字符串</span><br><span class="line">e.g.    \$\d+  ----&gt;    $10</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">         pattern        string</span><br><span class="line">python  &quot;\\$\\d+&quot;       &quot;$10&quot; </span><br><span class="line"></span><br><span class="line">raw     r&quot;\$\d+&quot;       &quot;$10&quot; </span><br></pre></td></tr></table></figure><p>raw字串 ： 原始字符串对内容不解释转义，就表达内容原            本意义</p><h3 id="贪婪与非贪婪"><a href="#贪婪与非贪婪" class="headerlink" title="贪婪与非贪婪"></a>贪婪与非贪婪</h3><p><strong>贪婪模式</strong> ： 正则表达式的重复匹配总是尽可能多的向后匹配更多内容</p><p><code>*</code>   <code>+</code>   <code>?</code>  <code>&#123;m,n&#125;</code></p><p><strong>非贪婪（懒惰模式）</strong> ： 尽可能少的匹配内容</p><p>贪婪 —&gt; 非贪婪  <code>*?</code>  <code>+?</code>  <code>??</code>  <code>&#123;m,n&#125;?</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(r&quot;ab+?&quot;,&quot;abbbbbbbb&quot;)</span><br><span class="line">[&#x27;ab&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.findall(r&quot;ab??&quot;,&quot;abbbbbbbb&quot;)</span><br><span class="line">[&#x27;a&#x27;]</span><br></pre></td></tr></table></figure><h4 id="正则表达式的子组"><a href="#正则表达式的子组" class="headerlink" title="正则表达式的子组"></a>正则表达式的子组</h4><p>可以使用<code>()</code>为正则表达式建立子组，子组可以看做是正则表达式内部操作的一个整体</p><blockquote><p>子组是在正则表达式整体匹配到内容的前提下才会发挥作用，它不影响正则表达式整体去匹配目标内容这一原则</p></blockquote><h5 id="子组使用"><a href="#子组使用" class="headerlink" title="子组使用"></a>子组使用</h5><ol><li>作为内部整体可以改变某些元字符的行为</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.search(<span class="string">r&quot;(ab)+\d+&quot;</span>,<span class="string">&quot;ababab1234&quot;</span>).group()</span><br><span class="line"><span class="string">&#x27;ababab1234&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.search(<span class="string">r&quot;\w+@\w+\.(com|cn)&quot;</span>,<span class="string">&quot;abc@123.com&quot;</span>).group()</span><br><span class="line"><span class="string">&#x27;abc@123.com&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>子组在某些操作中可以单独提取出匹配内容</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.search(<span class="string">r&quot;(https|http|ftp)://\S+&quot;</span>,<span class="string">&quot;https://www.baidu.com&quot;</span>).group(<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;https&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="子组使用注意事项"><a href="#子组使用注意事项" class="headerlink" title="子组使用注意事项"></a>子组使用注意事项</h5><ul><li>一个正则表达式中可以有多个子组</li><li>子组一般由外到内，由左到右称之为第一，第二 第三。。。。子组</li><li>子组不能重叠，嵌套也不宜很多</li></ul><blockquote><p>search 只能匹配一个结果</p></blockquote><h4 id="捕获组-和-非捕获组"><a href="#捕获组-和-非捕获组" class="headerlink" title="捕获组 和 非捕获组"></a>捕获组 和 非捕获组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式 ： （?P&lt;name&gt;pattern）</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">re.search(<span class="string">r&quot;(?P&lt;dog&gt;ab)cdef&quot;</span>,<span class="string">&#x27;abcdefghti&#x27;</span>).group(<span class="string">&#x27;dog&#x27;</span>)</span><br><span class="line">Out[<span class="number">130</span>]: <span class="string">&#x27;ab&#x27;</span></span><br></pre></td></tr></table></figure><p>作用 ： 可以通过组名更方便获取某组内容</p><h3 id="正则表达式设计原则"><a href="#正则表达式设计原则" class="headerlink" title="正则表达式设计原则"></a>正则表达式设计原则</h3><ol><li>正确性 ，能正确匹配到目标内容</li><li>排他性 ，除了要匹配的内容，尽可能不会匹配与到其他内容</li><li>全面性 ，需要对目标的各种情况进行考虑，做到不遗漏</li></ol><h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><p>用来生成正则表达式对象</p><p><strong>regex &#x3D; compile(pattern,flags&#x3D;0)</strong></p><ul><li>功能 ： 生成正则表达式对象</li><li>参数 ： <ul><li>pattern  正则表达式</li><li>flags  功能标志位，丰富正则表达式的匹配功能</li></ul></li><li>返回值 : 返回正则表达式对象</li></ul><h3 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h3><h4 id="re模块调用"><a href="#re模块调用" class="headerlink" title="re模块调用"></a>re模块调用</h4><p><strong>re.findall(pattern,string,flags)</strong></p><ul><li>功能 ：从目标字符串查找正则匹配内容</li><li>参数 ： <ul><li>pattern  正则表达式</li><li>string  目标字符串</li><li>flags  标志位</li></ul></li><li>返回值 ： 返回匹配到的内容 如果正则有子组则只返回子组对应内容</li></ul><h4 id="正则对象调用"><a href="#正则对象调用" class="headerlink" title="正则对象调用"></a>正则对象调用</h4><p><strong>regex.findall(string,pos,endpos)</strong></p><ul><li>功能 ：从目标字符串查找正则匹配内容</li><li>参数 ： <ul><li>string  目标字符串</li><li>pos  匹配目标的起始位置</li><li>endpos  匹配目标的终止位置</li></ul></li><li>返回值 ： 返回匹配到的内容 如果正则有子组则只返回子组对应内容</li></ul><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>正则表达式所匹配的内容，做字符串的切割<br><strong>re.split(pattern,string,flags &#x3D; 0)</strong></p><ul><li>功能：根据正则匹配内容切割字符串</li><li>参数： pattern  string  flags</li><li>返回值： 返回列表，列表中为切割的内容</li></ul><h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h3><p>使用一个字符串去替换目标字符串被正则表达式匹配到的内容<br><strong>re.sub(pattern,replaceStr,string,max,flags)</strong></p><ul><li>功能： 替换正则匹配到的目标子串部分</li><li>参数： <ul><li>pattern</li><li>replaceStr ： 要替换的内容</li><li>string </li><li>max   最多替换几处 默认全部替换</li><li>flags</li></ul></li><li>返回值 ： 返回替换后的字符串</li></ul><h3 id="subn"><a href="#subn" class="headerlink" title="subn"></a>subn</h3><p>使用一个字符串去替换目标字符串被正则表达式匹配到的内容<br><strong>re.subn(pattern,replaceStr,string,max,flags)</strong></p><ul><li>功能： 替换正则匹配到的目标子串部分</li><li>参数： <ul><li>pattern</li><li>replaceStr ： 要替换的内容</li><li>string </li><li>max   最多替换几处 默认全部替换</li><li>flags</li></ul></li><li>返回值 ： 返回一个元组，为实际替换了几处和替换后的字符串</li></ul><blockquote><p>sub 和 subn区别</p><ul><li>sub返回替换后的字符串</li><li>subn返回替换了几处</li></ul></blockquote><h3 id="finditer"><a href="#finditer" class="headerlink" title="finditer"></a>finditer</h3><p>相比findall返回一个迭代对象<br><strong>re.finditer(pattern,string,flags)</strong></p><ul><li>功能： 使用正则表达式匹配目标字符串</li><li>参数： pattern  string flags</li><li>返回值： 返回一个迭代对象，迭代到的内容是一个<em>match</em>对象</li></ul><h3 id="fullmatch"><a href="#fullmatch" class="headerlink" title="fullmatch"></a>fullmatch</h3><p>相当于在最前面写一个<code>^</code>，最后面写一个<code>$</code>， 只匹配到一处，返回一个match对象<br><strong>fullmatch(pattern,string,flags)</strong></p><ul><li>功能： 完全匹配目标字符串</li><li>参数： pattern,string,flags</li><li>返回值：返回匹配到的match对象 如果没匹配成功返回None</li></ul><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p>相当于只匹配到开头，返回一个match对象<br><strong>match(pattern,string,flags)</strong></p><ul><li>功能： 从开头位置匹配目标字符串</li><li>参数： pattern,string,flags</li><li>返回值：返回匹配到的match对象 如果没匹配成功返回None</li></ul><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p><strong>search(pattern,string,flags)</strong></p><ul><li>功能： 正则表达式匹配目标字符串，<strong>只匹配第一处</strong></li><li>参数： pattern,string,flags</li><li>返回值：返回匹配到的match对象 如果没匹配成功返回None</li></ul><p>compile对象属性：</p><p>flags  ： 标志位<br>pattern ： 正则表达式<br>groups： 有多少子组<br>groupindex ： 捕获组形成组名和序列号的字典<br>              组名为键，第几组为值</p><h3 id="match对象属性"><a href="#match对象属性" class="headerlink" title="match对象属性"></a>match对象属性</h3><h4 id="属性变量"><a href="#属性变量" class="headerlink" title="属性变量"></a>属性变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pos     匹配目标字符串的开始位置</span><br><span class="line">endpos  匹配目标字符串的结束位置</span><br><span class="line">re      正则表达式</span><br><span class="line">string  目标字符串</span><br><span class="line">lastgroup  最后一组的组名</span><br><span class="line">lastindex  最后一组是第几组</span><br></pre></td></tr></table></figure><h4 id="属性方法"><a href="#属性方法" class="headerlink" title="属性方法"></a>属性方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">span()  匹配内容的开始位置</span><br><span class="line">start() 匹配内容的结束位置</span><br><span class="line">end()   匹配内容的起止位置</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">group()</span><br><span class="line">功能 ： 获取match对象对应的内容</span><br><span class="line">参数 ： 默认为0 表示获取整个正则匹配的内容</span><br><span class="line">        如果为序列号或者子组名则为获取某个子组匹配的对应内容</span><br><span class="line">返回值：返回得到的子串</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupdict()  获取捕获组名作为键，对应内容作为值的字典</span><br><span class="line">groups()   获取每个子组匹配内容</span><br></pre></td></tr></table></figure><h3 id="flags-参数的使用"><a href="#flags-参数的使用" class="headerlink" title="flags  参数的使用"></a>flags  参数的使用</h3><p>re.compile  re.findall  re.search  re.match<br>re.finditer  re.fullmatch  re.sub  re.subn  re.split<br>上面这些方法都有flags参数<br>作用： 辅助正则表达式，丰富匹配结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I ==  IGNORECASE  匹配时忽略字母的大小写</span><br><span class="line">S ==  DOTALL     作用于元字符 . 使其可以匹配换行 </span><br><span class="line">M ==  MULTILINE  作用于^  $  使其可以匹配每一行开头结尾位置</span><br><span class="line">X ==  VERBOSE    可以给正则添加注释</span><br></pre></td></tr></table></figure><p>使用多个标志位使用按位或连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">flags = re.X | re.I</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB-聚合操作</title>
      <link href="/2019/08/12/mongodb/%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/08/12/mongodb/%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>对文档的筛选结果进行整理统计</p><span id="more"></span><p>聚合操作</p><p>对文档的筛选结果进行整理统计</p><p>db.collection.aggregate()<br>功能 : 完成聚合操作<br>参数 ： 聚合条件 —》 聚合操作符</p><p>聚合操作符 </p><p>$group   分组聚合  需要配合具体的分组统计选项</p><pre><code>$sum  : 求和e.g.db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,num:&#123;$sum:1&#125;&#125;&#125;)db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,num:&#123;$sum:&#39;$age&#39;&#125;&#125;&#125;)$avg : 求平均数e.g.   db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,avg:&#123;$avg:&#39;$age&#39;&#125;&#125;&#125;)$max  求最大值e.g.db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,max:&#123;$max:&#39;$age&#39;&#125;&#125;&#125;)$min  求最小值e.g.db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,min:&#123;$min:&#39;$age&#39;&#125;&#125;&#125;)</code></pre><p>$project<br> 修改文档的显示效果</p><p>e.g.  project值得用法和find函数field格式一致<br> db.class0.aggregate({$project:{_id:0,name:1,age:1}})</p><p> db.class0.aggregate({$project:{_id:0,Name:’$name’,Age:’$age’}})</p><p>$match<br> 数据筛选<br> $match值得用法同query一致</p><p> e.g.  过滤年龄大于18岁的数据文档<br> db.class0.aggregate({$match:{age:{$gt:18}}})</p><p>$limit<br> 筛选前几条文档</p><p> e.g. 筛选前三条数据文档<br> db.class0.aggregate({$limit:3})</p><p>$skip<br> 跳过几条文档显示</p><p> e.g. 跳过前三条文档<br>  db.class0.aggregate({$skip:3})</p><p>$sort<br>  将数据排序</p><p>   e.g. 按照年龄排序<br>    db.class0.aggregate({$sort:{age:1}})</p><p>聚合管道 </p><p>聚合管道指的是将上一个聚合的操作结果给下一个聚合继续操作</p><p>db.collection.aggregate([{聚合},{},{}…])</p><p>e.g.  match –&gt; project –&gt; sort<br>db.class0.aggregate([{$match:{gender:’m’}},{$project:{_id:0}},{$sort:{age:1}}])</p><p>e.g.  group —&gt; match  找到重名学生<br>db.class0.aggregate([{$group:{_id:’$name’,num:{$sum:1}}},{$match:{num:{$gt:1}}}])</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB-索引</title>
      <link href="/2019/08/12/mongodb/%E7%B4%A2%E5%BC%95/"/>
      <url>/2019/08/12/mongodb/%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>指建立指定键值及所在文档存储位置的对照清单，使用索引可以方便我们进行快速查找，减少遍历次数提高查找效率</p><span id="more"></span><p>指建立指定键值及所在文档存储位置的对照清单，使用索引可以方便我们进行快速查找，减少遍历次数提高查找效率</p><p>ensureIndex()<br>功能 ： 创建索引<br>参数 ： 索引域和索引选项</p><p>e.g.  根据name域创建索引<br>db.class0.ensureIndex({name:1})</p><ul><li>1表示正序索引 -1表示逆序索引</li></ul><p>查看集合中索引</p><p>db.collection.getIndexes()</p><p>自定义索引名称<br>db.collection.ensureIndex({},{name:’myIndex’})</p><p>e.g.  对age域创建索引命名ageIndex<br>db.class0.ensureIndex({age:1},{name:’ageIndex’})</p><p>删除索引</p><p>db.collection.dropIndex(“index”)<br>功能：删除索引<br>参数： 要删除的索引名称或者键值对</p><p> e.g.<br>  db.class0.dropIndex({name：1})<br>  db.class0.dropIndex(‘ageIndex’)</p><p>db.collection.dropIndexes()<br>功能：删除所有索引</p><ul><li>_id是系统自动创建的主键索引，不能删除</li></ul><p>索引类型</p><p>  复合索引<br>  根据多个域创建一个索引</p><p>  e.g.<br>  db.class0.ensureIndex({name:1,age:-1},{name:’name_age’})</p><p>  数组索引 ，子文档索引<br>  如果对某个域的值为数组或者子文档的域创建索引，那么通过数组或者子文档中某一项进行查找也是索引查找</p><p>  e.g.  如果对score创建了索引那么该查找就是索引查找<br>  db.class1.find({‘score.1’:88})</p><p>  唯一索引<br>  创建索引的域要求值不能够重复</p><pre><code>e.g.  对name创建唯一索引db.class0.ensureIndex(&#123;name:1&#125;,&#123;unique:true&#125;)</code></pre><ul><li>当对某个域创建了唯一索引就不能插入重复的值</li></ul><p>  稀疏索引（间隙索引）<br>  只针对有指定索引域的文档创建索引，没有该域的文档不会插入到索引表</p><p>  e.g. 只对有age域的文档创建索引<br>  db.class0.ensureIndex({age:1},{sparse:true})</p><p>索引约束</p><ul><li>索引表需要占用一定的数据库磁盘空间</li><li>当对数据进行增 删 改等写入操作时索引也需要更新，降低了数据修改的</li></ul><p>综上 ： 数据量较小时不适合创建索引，当数据库进行频繁的修改操作而不是查找操作时也不适合创建索引。针对一个集合并不是创建索引越多越好。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB-数据类型</title>
      <link href="/2019/08/12/mongodb/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/08/12/mongodb/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>mongo中存储时间大多为 ISODate</p><span id="more"></span><p>时间数据类型</p><p>mongo中存储时间大多为 ISODate</p><p>存储当前时间方法</p><ol><li><p>new Date()  自动生成当前时间<br> e.g.<br> db.class2.insert({book:’Python入门’,date:new Date()})</p></li><li><p>ISODate()  自动生成当前时间<br> e.g.<br> db.class2.insert({book:’Python精通’,date:ISODate()})</p></li><li><p>Date()   将系统时间转换为字符串<br> e.g.<br> db.class2.insert({book:’Python疯狂’,date:Date()})</p></li></ol><p>指定时间<br>   ISODate()<br>   功能 : 生成mongo标准时间类型数据<br>   参数 ： 如果不传参默认为当前时间<br>           传参表示指定时间<br>         “2018-01-01 12:12:12”<br>         “20180101 12:12:12”<br>         “20180101”<br>   e.g.<br>   db.class2.insert({book:’Python崩溃’,date:ISODate(“2018-07-01 11:15:56”)})</p><p>时间戳</p><p>valueOf()<br>获取某个时间的时间戳<br>  e.g.  获取当前标准时间时间戳<br>    db.class2.insert({book:’Python涅槃’,date:ISODate().valueOf()})</p><p>Null 类型</p><p>值   null </p><ol><li>如果某个域存在却没有值可以赋值为null<br>   e.g.<br>   db.class2.insert({book:’Python死去活来’,price:null})</li><li>可以查找某个域不存在的情况<br>e.g. 如果date域不存在也能find到<br>db.class2.find({date:null})</li></ol><p>Object （内部文档）</p><p>文档内部某个域的值还是一个文档数据则这个文档就是内部文档类型数据</p><p>通常使用外部文档域名 . 引用内部文档域名的方式使用内部文档</p><p>e.g.<br> db.class3.find({‘book.title’:’狂人日记’})</p><p>e.g.<br> db.class3.update({‘book.title’:’围城’},{$set:{‘book.price’:48.8}})</p><p>通过数组下标直接操作某一项</p><p>e.g. 通过数组下标引用第一项进行查找<br>db.class1.find({‘score.0’:{$gt:90}},{_id:0})</p><p>e.g.<br>db.class1.update({name:’小刚’},{$set:{‘score.1’:80}})</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB-查找操作</title>
      <link href="/2019/08/11/mongodb/%E6%9F%A5%E6%89%BE%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/08/11/mongodb/%E6%9F%A5%E6%89%BE%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>MongoDB 查询文档使用 find() 方法。find() 方法以非结构化的方式来显示所有文档。</p><span id="more"></span><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(query,field)</span><br></pre></td></tr></table></figure><ul><li>功能 ：   查找文档</li><li>参数 <ul><li>query  查找条件，相当于where子句</li><li>field  查找的域</li></ul></li><li>返回值 ： 查找到的所有文档</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">query：  以键值对方式传递参数，如果是空&#123;&#125;表示查找所          有内容</span><br><span class="line"></span><br><span class="line">  e.g.   查找所有性别为w的文档  </span><br><span class="line">         db.class0.find(&#123;sex:&#x27;w&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">field：  以键值对的方式给出要查找（不查找）的域</span><br><span class="line">        以域名为键，以0,1为值分别表示不查找和查找</span><br></pre></td></tr></table></figure><ul><li>如果某一个或多个域设置为0 表示这些域不查找，其他域均查找</li><li>如果某一个或多个域设置为1 表示这些域查找，其他域均不查找</li><li><code>_id</code> 除非设置为0 否则均会查找</li><li>除<code>_id</code>域其他域不能有的设置1有的设置0</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 查找结果只有name域</span><br><span class="line">db.class0.find(&#123;sex:&#x27;w&#x27;&#125;,&#123;_id:0,name:1&#125;)</span><br></pre></td></tr></table></figure><h2 id="findOne"><a href="#findOne" class="headerlink" title="findOne"></a>findOne</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findOne(query,field)</span><br></pre></td></tr></table></figure><ul><li>功能 ： 查找第一条符合条件的文档</li><li>参数 ： 同find</li><li>返回值： 返回查找到的文档</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 查找集合中性别为女的第一个文档</span><br><span class="line">db.class0.findOne(&#123;sex:&#x27;w&#x27;&#125;,&#123;_id:0,name:1&#125;)</span><br></pre></td></tr></table></figure><h2 id="query更多的筛选用法"><a href="#query更多的筛选用法" class="headerlink" title="query更多的筛选用法"></a>query更多的筛选用法</h2><p>操作符 ： 使用<code>$</code>符号注明的一个特殊字符串，表达一定的含义，比如 <code>$lt</code> 表示小于</p><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><h4 id="eq-等于"><a href="#eq-等于" class="headerlink" title="$eq 等于 &#x3D;&#x3D;"></a><em>$eq</em> 等于 &#x3D;&#x3D;</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e.g. 查找年龄等于18</span><br><span class="line">db.class0.find(&#123;age:&#123;$eq:18&#125;&#125;,&#123;_id:0&#125;)</span><br><span class="line">==&gt; db.class0.find(&#123;age:18&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure><h4 id="lt-小于"><a href="#lt-小于" class="headerlink" title="$lt 小于 &lt;"></a><em>$lt</em> 小于 &lt;</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e.g. 查找年龄小于18的</span><br><span class="line">db.class0.find(&#123;age:&#123;$lt:18&#125;&#125;,&#123;_id:0&#125;)</span><br><span class="line">db.class0.find(&#123;name:&#123;$lt:&quot;John&quot;&#125;&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>在mongodb中字符串可以比较大小</p></blockquote><h4 id="lte-小于等于"><a href="#lte-小于等于" class="headerlink" title="$lte  小于等于 &lt;&#x3D;"></a><em>$lte</em>  小于等于 &lt;&#x3D;</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.  年龄小于等于18 </span><br><span class="line">db.class0.find(&#123;age:&#123;$lte:18&#125;&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure><h4 id="gt-大于"><a href="#gt-大于" class="headerlink" title="$gt  大于 &gt;"></a><em>$gt</em>  大于 &gt;</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.  查找年龄大于16 且 小于19</span><br><span class="line">db.class0.find(&#123;age:&#123;$gt:16,$lt:19&#125;&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>在mongodb中所有的{} [] 中都可以写多个条件。但根据   参数的不同表达的意思不一样</p></blockquote><h4 id="gte-大于等于"><a href="#gte-大于等于" class="headerlink" title="$gte 大于等于 &gt;&#x3D;"></a><em>$gte</em> 大于等于 &gt;&#x3D;</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.  大于等于19</span><br><span class="line">db.class0.find(&#123;age:&#123;$gte:19&#125;&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure><h4 id="ne-不等于"><a href="#ne-不等于" class="headerlink" title="$ne  不等于  !&#x3D;"></a><em>$ne</em>  不等于  !&#x3D;</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.  性别不等于‘m’的 </span><br><span class="line">db.class0.find(&#123;sex:&#123;$ne:&#x27;m&#x27;&#125;&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>使用ne查找也会找到该域不存在的文档</p></blockquote><h4 id="in-包含"><a href="#in-包含" class="headerlink" title="$in  包含"></a><em>$in</em>  包含</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 找到年龄为 [10,20,30]</span><br><span class="line">db.class0.find(&#123;age:&#123;$in:[10,20,30]&#125;&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure><h4 id="nin-不包含"><a href="#nin-不包含" class="headerlink" title="$nin 不包含"></a><em>$nin</em> 不包含</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.  找到年龄不是 17  18   19 的</span><br><span class="line">db.class0.find(&#123;age:&#123;$nin:[17,18,19]&#125;&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><h4 id="and-逻辑与"><a href="#and-逻辑与" class="headerlink" title="$and 逻辑与"></a><em>$and</em> 逻辑与</h4><ol><li>在 query 如果写多个条件默认即为 and 关系</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">db.class0.find(&#123;age:&#123;$lt:18&#125;,sex:&#x27;m&#x27;&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>逻辑与 $and</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 年龄小于18并且 性别为男</span><br><span class="line">db.class0.find(&#123;$and:[&#123;age:&#123;$lt:18&#125;&#125;,&#123;sex:&#x27;m&#x27;&#125;]&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>区别： 第一种不能对相同的域进行操作</p></blockquote><h4 id="or-逻辑或"><a href="#or-逻辑或" class="headerlink" title="$or  逻辑或"></a><em>$or</em>  逻辑或</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 年龄小于16或者年龄大于18</span><br><span class="line">db.class0.find(&#123;$or:[&#123;age:&#123;$lte:16&#125;&#125;,&#123;age:&#123;$gt:18&#125;&#125;]&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure><h4 id="not-逻辑非"><a href="#not-逻辑非" class="headerlink" title="$not  逻辑非"></a><em>$not</em>  逻辑非</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">e.g.  查找年龄不小于18岁的</span><br><span class="line">db.class0.find(&#123;age:&#123;$not:&#123;$lt:18&#125;&#125;&#125;,&#123;_id:0&#125;)```</span><br><span class="line">&gt; 非运算并不是正常运算取反</span><br><span class="line">&gt; age &lt; 18 不等于 not[age &lt; 18]</span><br><span class="line">&gt; 是因为mongo过于灵活，某个域的值的类型不一致</span><br><span class="line"></span><br><span class="line">#### *$nor*   not  (a or b)  ===&gt; (not a) and (not b)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>e.g.  性别不是m且年龄不小于18<br>db.class0.find({$nor:[{sex:’m’},{age:{$lt:18}}]},{_id:0})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 逻辑条件混合</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（年龄大于17 并且 为男生）  或者 姓名叫 Abby<br> db.class0.find({$or:[{age:{$gt:17},sex:’m’},{name:’Abby’}]},{_id:0})</p><p>（年龄不大于18 或者为 女性） 并且 姓名 大于Lucy<br> e.g.<br> db.class0.find({$or:[{age:{$not:{$gt:18}}},{sex:’w’}],name:{$gt:’Lucy’}},{_id:0})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 数组 Array</span><br><span class="line"></span><br><span class="line">* 数组是有序的数据集合</span><br><span class="line">* mongo中数组也可以有多重数据元素混合</span><br><span class="line"></span><br><span class="line">查找数组中包含某一条件的元素</span><br></pre></td></tr></table></figure><p>e.g.  只要score数组中包含小于60的元素即可查询过滤<br>db.class1.find({score:{$lt:60}},{_id:0})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### $all</span><br><span class="line"></span><br><span class="line">查找数组同时包含多项的文档</span><br></pre></td></tr></table></figure><p>e.g.  查找同时包含49  67的文档<br>db.class1.find({score:{$all:[49,67]}},{_id:0})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### $size</span><br><span class="line">通过数组元素个数查找</span><br></pre></td></tr></table></figure><p>e.g. 查找score中包含两个元素的文档<br>db.class1.find({score:{$size:2}},{_id:0})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### $slice</span><br><span class="line">取数组的部分进行显示，在`field`中声明</span><br></pre></td></tr></table></figure><p>e.g.  显示数组中前两项<br>db.class2.find({},{_id:0,score:{$slice:2}})</p><p>e.g.   跳过第一项显示后面两项<br>db.class2.find({},{_id:0,score:{$slice:[1,2]}})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 其他常用查找操作符</span><br><span class="line"></span><br><span class="line">#### $exists</span><br><span class="line">通过某个域是否存在筛选（true表示存在false表示不存在）</span><br></pre></td></tr></table></figure><p>e.g. ： 查找不存在sex域的文档<br>db.class1.find({sex:{$exists:false}},{_id:0})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### $mod</span><br><span class="line">余数查找</span><br></pre></td></tr></table></figure><p>e.g.  找出年龄为单数的文档<br>db.class1.find({age:{$mod:[2,1]}},{_id:0})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### $type</span><br><span class="line">找出指定数据类型的文档</span><br></pre></td></tr></table></figure><p>e.g.  查找name域值类型为2的文档<br>db.class1.find({name:{$type:2}},{_id:0})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### $regex</span><br><span class="line">找出指定正则的文档</span><br><span class="line"></span><br><span class="line">### 查找结果的操作函数</span><br><span class="line"></span><br><span class="line">#### distinct</span><br></pre></td></tr></table></figure><p>db.collection.distinct(filed)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 功能： 查看某个域的值范围</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>e.g.  获取某个域的值，去重<br>db.class0.distinct(‘age’)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### pretty()</span><br><span class="line">功能：格式化显示查询结果</span><br></pre></td></tr></table></figure><p>e.g.<br>db.class0.find().pretty()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### limit(n)</span><br><span class="line">功能：显示前n条结果</span><br></pre></td></tr></table></figure><p>e.g. 显示查询结果前三条<br>db.class0.find({},{_id:0}).limit(3)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### skip(n)</span><br><span class="line">功能： 跳过前n条显示后面的查询结构</span><br></pre></td></tr></table></figure><p>e.g. ： 跳过前5条文档，显示后面的查询结果<br>db.class0.find({},{_id:0}).skip(5)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### count()</span><br><span class="line">功能 ： 统计查询结果数量</span><br><span class="line"></span><br><span class="line">&gt; 在统计数量时要给出一定query条件</span><br></pre></td></tr></table></figure><p>e.g.  统计性别为w的文档个数<br>db.class0.find({sex:’w’},{_id:0}).count()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### sort(&#123;field: 1/-1&#125;)</span><br><span class="line">功能： 对查找结果排序</span><br><span class="line">参数： 以键值对表示按照哪个field排序</span><br><span class="line">       1 表示升序，-1表示降序</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>e.g.  查找结果按照降序排序<br>db.class0.find({},{_id:0}).sort({age:-1})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 复合排序</span><br></pre></td></tr></table></figure><p>e.g. 按照年龄升序排序，年龄相同时按照姓名降序<br>db.class0.find({},{_id:0}).sort({age:1,name:-1})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数的连续调用</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>e.g.<br>db.class0.find({},{_id:0}).sort({age:1}).limit(3)</p><pre><code>练习：1. 创建数据 名称 grade   use  grade 2. 创建集合 名称 class   3. 集合中插入若干（5-8条即可）文档 文档格式&#123;name:&#39;zhangsan&#39;,age:10,sex:&#39;m&#39;,hobby:[&#39;a&#39;,&#39;b&#39;]&#125; 年龄范围 6-15 爱好选择：draw  sing  dance  basketball  football  pingpong  computer 每个同学选择2-5项   db.class.insert(&#123;name:&#39;zhangsan&#39;,age:10,sex:&#39;m&#39;,hobby:[&#39;draw&#39;,&#39;sing&#39;]&#125;)4. 查找练习 查看班级所有学生信息   find() 查看班级中年龄为8岁的学生信息   find(&#123;age:8&#125;) 查看班级中年龄大于10岁学生信息   find(&#123;age:&#123;$gt:10&#125;&#125;) 查看班级中年龄在8-11岁之间的学生信息   find(&#123;age:&#123;$gte:8,$lte:11&#125;&#125;) 查看班级中年龄10岁且为男生的学生信息   find(&#123;age:10,sex:&#39;m&#39;&#125;) 查看班级中小于7岁或者大于14岁的学生   find(&#123;$or:[&#123;age:&#123;$lt:7&#125;&#125;,&#123;age:&#123;$gt:14&#125;&#125;]&#125;) 查看班级中年龄为8岁或者11岁的学生   find(&#123;age:&#123;$in:[8,11]&#125;&#125;) 找到有2项兴趣爱好的学生   find(&#123;hobby:&#123;$size:2&#125;&#125;) 找到兴趣中 有draw的学生   find(&#123;hobby:&#39;draw&#39;&#125;) 找到既喜欢画画又喜欢跳舞的学生   find(&#123;hobby:&#123;$all:[&#39;draw&#39;,&#39;dance&#39;]&#125;&#125;) 统计兴趣有4项的学生人数   find(&#123;hobby:&#123;$size:4&#125;&#125;).count() 找出本班年龄第二大的学生   find().sort(&#123;age:-1&#125;).skip(1).limit(1)  查看本班学生兴趣爱好涵盖哪些方面   db.class.distinct(&#39;hobby&#39;) 找到年龄最大的三个学生   find().sort(&#123;age:-1&#125;).limit(3) 删除所有年龄大于16或者小于7岁的学生除非他的爱好有三项以上   remove(&#123;$or:[&#123;age:&#123;$gt:16&#125;&#125;,&#123;age:&#123;$lt:7&#125;&#125;],&#123;hobby:&#123;$size:2&#125;&#125;&#125;)  </code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB-文档操作</title>
      <link href="/2019/08/11/mongodb/%E6%96%87%E6%A1%A3%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/08/11/mongodb/%E6%96%87%E6%A1%A3%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>这一节是文档的创建，删除，修改，查询</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>mongodb中数据的组织形式</p><p>mongodb文档 ： 是以键值对的形成组成的一组数据。类似python中字典描述数据的方式</p><ol><li>文档是bson数据类型</li><li>文档是由键值对构成</li><li>文档是MongoDB的基本单元</li></ol><h3 id="键"><a href="#键" class="headerlink" title="键"></a>键</h3><p>即文档的域，表达了一个键值对的含义</p><h4 id="键的命名规则："><a href="#键的命名规则：" class="headerlink" title="键的命名规则："></a>键的命名规则：</h4><ol><li><code>utf-8</code>格式<code>字符串</code></li><li>不能使用<code>\0</code></li><li>一个文档中的键不能<code>重复</code></li></ol><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>即文档存储的数据。<br>bson支持的数据类型值</p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>整型</td><td>整数 1  2   3</td></tr><tr><td>布尔类型</td><td>true  false</td></tr><tr><td>浮点型</td><td>小数</td></tr><tr><td>Array</td><td>数组</td></tr><tr><td>Date</td><td>时间日期</td></tr><tr><td>Timestamp</td><td>时间戳</td></tr><tr><td>String</td><td>字符串</td></tr><tr><td>Symbol</td><td>特殊字符串</td></tr><tr><td>Binary data</td><td>二进制子串</td></tr><tr><td>Null</td><td>null 空值</td></tr><tr><td>Object</td><td>内部文档（对象）</td></tr><tr><td>code</td><td>js代码</td></tr><tr><td>regex</td><td>正则子串</td></tr><tr><td>ObjectId</td><td>自动生成ID标记</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;_id&quot; : ObjectId(&quot;5ba07671b17d2b40342f7c5c&quot;)</span><br></pre></td></tr></table></figure><h3 id="id"><a href="#id" class="headerlink" title="_id"></a>_id</h3><p>当mongodb插入文档时如果不指定<code>_id</code>域则自动生成_id域。值如果不自己指定即会自动生成一个ObjectId值</p><p>24位16进制  使用ObjectId经过算法处理保证其唯一性</p><p>5ba07671 b17d2b 4034 2f7c5c<br>8位文档创建时间  6位  机器ID   4位进程id  6位计数器</p><blockquote><p>文档中键值对是有序的<br>文档中键值对严格区分大小写</p></blockquote><h3 id="集合中的文档"><a href="#集合中的文档" class="headerlink" title="集合中的文档"></a>集合中的文档</h3><ol><li><p>集合中的文档不一定有相同的域 </p><ul><li>个数不同</li><li>域不相同</li><li>数据类型不同</li></ul></li><li><p>集合中文档各自比较独立，相互并不影响</p></li></ol><h3 id="集合创建原则"><a href="#集合创建原则" class="headerlink" title="集合创建原则"></a>集合创建原则</h3><ol><li>集合中的文档要描述同一类事物</li><li>数据库中同一类数据尽量集中存放在相同的集合</li><li>集合中的文档嵌套层数不要太多</li></ol><h2 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.collection.insert()</span><br><span class="line">功能 ： 插入一个文档</span><br><span class="line">参数 ： 要插入的文档</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. </span><br><span class="line">db.class0.insert(&#123;&#x27;name&#x27;:&#x27;Lucy&#x27;,&quot;age&quot;:18,&quot;sex&quot;:&#x27;w&#x27;&#125;)</span><br></pre></td></tr></table></figure><h3 id="插入单个文档"><a href="#插入单个文档" class="headerlink" title="插入单个文档"></a>插入单个文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.class0.insert(&#123;_id:1,name:&#x27;Jame&#x27;,age:16,sex:&#x27;m&#x27;&#125;)</span><br><span class="line">或者</span><br><span class="line">db.class0.insertOne(&#123;_id:1,name:&#x27;Jame&#x27;,age:16,sex:&#x27;m&#x27;&#125;)</span><br></pre></td></tr></table></figure><ul><li>插入操作中键可以不加引号</li><li>查看插入结果 db.class0.find()</li><li>_id 值可以自己插入，但是不能重复</li></ul><h3 id="插入多条文档"><a href="#插入多条文档" class="headerlink" title="插入多条文档"></a>插入多条文档</h3><p>参数用中括号里面放入多个文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.class0.insert([&#123;&#125;,&#123;&#125;,...])</span><br><span class="line">或</span><br><span class="line">db.class0.insertMany([])</span><br><span class="line"></span><br><span class="line">e.g.</span><br><span class="line">db.class0.insert([&#123;name:&quot;Alex&quot;,age:19,sex:&#x27;m&#x27;&#125;,&#123;name:&#x27;Abby&#x27;,age:18,sex:&#x27;w&#x27;&#125;])</span><br><span class="line"></span><br><span class="line">db.class0.insertMany([&#123;name:&quot;John&quot;,age:16,sex:&#x27;m&#x27;&#125;,&#123;name:&quot;Lenzer&quot;,age:17,sex:&#x27;m&#x27;&#125;])</span><br></pre></td></tr></table></figure><h3 id="save插入文档"><a href="#save插入文档" class="headerlink" title="save插入文档"></a>save插入文档</h3><blockquote><p>跟insert插入的区别就是，如果_id重复，save会覆盖，insert会报错</p></blockquote><p>如果正常插入与insert用法相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.save()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">db.class0.save(&#123;name:&#x27;Allen&#x27;,age:19,sex:&#x27;m&#x27;&#125;)</span><br><span class="line">db.class0.save([&#123;name:&quot;Sunny&quot;,age:17,sex:&#x27;w&#x27;&#125;,&#123;name:&#x27;Alice&#x27;,age:16,sex:&#x27;w&#x27;&#125;])</span><br></pre></td></tr></table></figure><p>如果插入数据是有_id域，且_id域值存在时则会修改原有文档，如果该值不存在则正常插入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.save(&#123;_id:2,name:&#x27;Mary&#x27;,age:20,sex:&#x27;w&#x27;&#125;)</span><br></pre></td></tr></table></figure><h2 id="获取集合对象方法"><a href="#获取集合对象方法" class="headerlink" title="获取集合对象方法"></a>获取集合对象方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.class0  ===&gt; db.getCollection(&#x27;class0&#x27;)</span><br><span class="line"></span><br><span class="line">e.g.</span><br><span class="line">db.getCollection(&quot;class0&quot;).find()</span><br></pre></td></tr></table></figure><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><h3 id="删除一条或多条文档"><a href="#删除一条或多条文档" class="headerlink" title="删除一条或多条文档"></a>删除一条或多条文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remove(query,justOne)</span><br></pre></td></tr></table></figure><p>功能 ： 删除文档<br>参数 ： </p><ul><li>query  用法同find </li><li>justOne  布尔值 默认为false表示删除所有符合条                 件的文档 设置为true则表示只删除一条</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 删除所有不存在sex域的文档</span><br><span class="line">db.class1.remove(&#123;sex:&#123;$exists:false&#125;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.  删除第一条性别为w的文档</span><br><span class="line">db.class1.remove(&#123;sex:&#x27;w&#x27;&#125;,true)</span><br></pre></td></tr></table></figure><h3 id="删除集合中所有文档"><a href="#删除集合中所有文档" class="headerlink" title="删除集合中所有文档"></a>删除集合中所有文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 删除class1中所有文档</span><br><span class="line">db.class1.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h2><h3 id="更新单个文档"><a href="#更新单个文档" class="headerlink" title="更新单个文档"></a>更新单个文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updateOne(query,update,upsert,multi)</span><br></pre></td></tr></table></figure><p>功能 ： 修改文档<br>参数 ： </p><ul><li>query  筛选条件  用法同find</li><li>update  要修改成什么内容 通常配合修改操作符        （修改器）使用</li><li>upsert  布尔值，默认是false  如果query没有筛         选到文档则不做任何操作<br>          如果设置为true 则如果query没有筛选到匹配文档则根据query和update内容插入新的文档</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.  将Tom的年龄修改为18</span><br><span class="line">db.class0.update(&#123;name:&#x27;Tom&#x27;&#125;,&#123;$set:&#123;age:18&#125;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.  如果有name=Jame的文档则修改，如果没有则根据         query update插入新的文档</span><br><span class="line">db.class0.update(&#123;name:&#x27;Jame&#x27;&#125;,&#123;$set:&#123;age:15&#125;&#125;,true)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.  修改所有年龄小于17的为18</span><br><span class="line">db.class0.update(&#123;age:&#123;$lt:17&#125;&#125;,&#123;$set:&#123;age:18&#125;&#125;,false,true)</span><br></pre></td></tr></table></figure><h3 id="更新多个文档"><a href="#更新多个文档" class="headerlink" title="更新多个文档"></a>更新多个文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updateMany(query,update,upsert)</span><br></pre></td></tr></table></figure><h3 id="查到到某个然后将其修改"><a href="#查到到某个然后将其修改" class="headerlink" title="查到到某个然后将其修改"></a>查到到某个然后将其修改</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.findOneAndUpdate()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 找到名字为jpy的人，更改它的名字是lilei</span><br><span class="line">db.class.findOneAndUpdate(&#123;name:&#x27;Jpy&#x27;&#125;, &#123;$set:&#123;name:&#x27;lilei&#x27;&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="查到到某个然后将其替换"><a href="#查到到某个然后将其替换" class="headerlink" title="查到到某个然后将其替换"></a>查到到某个然后将其替换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.findOneAndReplace()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 找到名字是eveb的这个人，并且把替换文档</span><br><span class="line">db.class.findOneAndReplace(&#123;name:&quot;eveb&quot;&#125;, &#123;name:&#x27;aaa&#x27;, age:34&#125;)</span><br></pre></td></tr></table></figure><h3 id="修改器的使用"><a href="#修改器的使用" class="headerlink" title="修改器的使用"></a>修改器的使用</h3><h4 id="set"><a href="#set" class="headerlink" title="$set"></a>$set</h4><p>修改一个值或者也可以增加一个域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 修改姓名ebal的年龄为49岁</span><br><span class="line">db.class.updateOne(&#123;name:&#x27;ebal&#x27;&#125;, &#123;$set:&#123;age:49&#125;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 修改姓名ebal的年龄为49岁, 性别为女，并且新增一个喜好的域</span><br><span class="line">db.class.updateOne(&#123;name:&#x27;ebal&#x27;&#125;, &#123;$set:&#123;age:49, sex:0, habby:[1, 2]&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="unset"><a href="#unset" class="headerlink" title="$unset"></a>$unset</h4><p>删除一个域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 删除名字Jpy的age域（字段）</span><br><span class="line">db.class.updateMany(&#123;name:&#x27;Jpy&#x27;&#125;, &#123;$unset:&#123;age:&#x27;&#x27;&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="rename"><a href="#rename" class="headerlink" title="$rename"></a>$rename</h4><p>给一个域重命名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 当前集合中所有的sex域更名为gender</span><br><span class="line">db.class.updateMany(&#123;&#125;, &#123;$rename:&#123;sex:&#x27;gender&#x27;&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="inc"><a href="#inc" class="headerlink" title="$inc"></a>$inc</h4><p>加法修改器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 将所有人的年龄都加上1岁</span><br><span class="line">db.class.updateMany(&#123;&#125;, &#123;$inc:&#123;age:1&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="mul"><a href="#mul" class="headerlink" title="$mul"></a>$mul</h4><p>乘法修改器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 将所有人的年龄都成上3</span><br><span class="line">db.class.updateMany(&#123;&#125;, &#123;$mul:&#123;age:3&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="max"><a href="#max" class="headerlink" title="$max"></a>$max</h4><p>指定一个值的下限</p><blockquote><p>小于指定的值则修改该值，大于不变</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 将所有人的年龄小于18的都修改为18</span><br><span class="line">db.class.updateMany(&#123;&#125;, &#123;$max:&#123;age:18&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="min"><a href="#min" class="headerlink" title="$min"></a>$min</h4><p>指定一个值的上限</p><blockquote><p>大于指定的值则修改该值，小于不变</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 将所有人的年龄大于18的都修改为18</span><br><span class="line">db.class.updateMany(&#123;&#125;, &#123;$min:&#123;age:18&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="setOnInsert"><a href="#setOnInsert" class="headerlink" title="$setOnInsert"></a>$setOnInsert</h4><p>如果使用update插入了文档，则将该修改器内容作为插入文档的一部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.  如果插入了新文档则setOnInsert内容也会作为新文档一部分</span><br><span class="line">db.class0.update(&#123;name:&#x27;Jame&#x27;&#125;,&#123;$set:&#123;age:18&#125;,$setOnInsert:&#123;gender:&#x27;m&#x27;,tel:&#x27;123456&#x27;&#125;&#125;,true)</span><br></pre></td></tr></table></figure><h3 id="数组修改器"><a href="#数组修改器" class="headerlink" title="数组修改器"></a>数组修改器</h3><h4 id="push"><a href="#push" class="headerlink" title="$push"></a>$push</h4><p>向数组中添加一项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.  给小红 score数组中添加一项91</span><br><span class="line">db.class1.update(&#123;name:&#x27;小红&#x27;&#125;,&#123;$push:&#123;score:91&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="pushAll"><a href="#pushAll" class="headerlink" title="$pushAll"></a>$pushAll</h4><p>向数组中添加多项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">db.class1.update(&#123;name:&#x27;小乔&#x27;&#125;,&#123;$pushAll:&#123;score:[94,10]&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="pull"><a href="#pull" class="headerlink" title="$pull"></a>$pull</h4><p>从数组中删除一项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.  从数组中删除一项</span><br><span class="line">db.class1.update(&#123;name:&#x27;小红&#x27;&#125;,&#123;$pull:&#123;score:78&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="pullAll"><a href="#pullAll" class="headerlink" title="$pullAll"></a>$pullAll</h4><p>从数组中删除多项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">db.class1.update(&#123;name:&#x27;小乔&#x27;&#125;,&#123;$pullAll:&#123;score:[92,10]&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="each"><a href="#each" class="headerlink" title="$each"></a>$each</h4><p>对多个值逐个进行操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.  分别插入99  10</span><br><span class="line">db.class1.update(&#123;name:&#x27;小乔&#x27;&#125;,&#123;$push:&#123;score:&#123;$each:[99,10]&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="position"><a href="#position" class="headerlink" title="$position"></a>$position</h4><p>指定插入位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.  将67 插入到数组1号位置</span><br><span class="line">db.class1.update(&#123;name:&#x27;小明&#x27;&#125;,&#123;$push:&#123;score:&#123;$each:[67],$position:1&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="$sort"></a>$sort</h4><p>数组排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.  将说有score域的数组降序排序</span><br><span class="line">db.class1.update(&#123;&#125;,&#123;$push:&#123;score:&#123;$each:[],$sort:-1&#125;&#125;&#125;,false,true)</span><br></pre></td></tr></table></figure><h4 id="pop"><a href="#pop" class="headerlink" title="$pop"></a>$pop</h4><p>弹出一项 1表示弹出最后一项  -1弹出第一项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.  删除小明score中第一项</span><br><span class="line">db.class1.update(&#123;name:&#x27;小明&#x27;&#125;,&#123;$pop:&#123;score:-1&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="addToSet"><a href="#addToSet" class="headerlink" title="$addToSet"></a>$addToSet</h4><p>向数组中添加一项 但是不能添加重复的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 如果数组中没有81 则添加81</span><br><span class="line">db.class1.update(&#123;name:&#x27;小刚&#x27;&#125;,&#123;$addToSet:&#123;score:81&#125;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB-集合操作</title>
      <link href="/2019/08/11/mongodb/%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/08/11/mongodb/%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>这一节是集合的创建，删除，修改，查询。类似于MySQL中的表一样</p><span id="more"></span><h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(collection_name)</span><br><span class="line"></span><br><span class="line">e.g. 创建class1集合</span><br><span class="line">db.createCollection(&#x27;class1&#x27;)</span><br></pre></td></tr></table></figure><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>当向一个集合中插入数据的时候, 如果集合不存在则自动创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection_name.insert(...)</span><br></pre></td></tr></table></figure><h2 id="查看数据库中集合"><a href="#查看数据库中集合" class="headerlink" title="查看数据库中集合"></a>查看数据库中集合</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show collections</span><br><span class="line">或</span><br><span class="line">show tables</span><br></pre></td></tr></table></figure><h2 id="集合命名规则"><a href="#集合命名规则" class="headerlink" title="集合命名规则"></a>集合命名规则</h2><ol><li>合法的<code>UTF-8</code>字符</li><li>不能有<code>\0</code></li><li>不能以<code>system.</code>开头，因为这是系统保留集合前缀 </li><li>不能和关键字<code>重名</code></li></ol><h2 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.collection.drop()</span><br><span class="line"></span><br><span class="line">e.g. 删除class2集合</span><br><span class="line">    db.class2.drop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="集合的重命名"><a href="#集合的重命名" class="headerlink" title="集合的重命名"></a>集合的重命名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.collection.renameCollection(&quot;new_name&quot;)</span><br><span class="line"></span><br><span class="line">e.g. 将class集合重命名为 class0</span><br><span class="line">db.class.renameCollection(&quot;class0&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB-数据库操作</title>
      <link href="/2019/08/11/mongodb/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/08/11/mongodb/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>在上一节中主要说的是数据库的介绍，安装以及基本的命令<br>这一节主要说数据库的操作。比如：创建数据库，展示所有数据库，数据库命名规则，数据库备份与恢复，数据库监测等</p><span id="more"></span><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use  databaseName</span><br><span class="line">e.g.  创建一个名字为stu的数据库</span><br><span class="line">use stu</span><br></pre></td></tr></table></figure><blockquote><p>use实际为选择使用哪个数据库，当数据库不存在时会自   动创建<br>use 后并不会立即创建出数据库，而是需要等到插入数   据时数据库才会创建</p></blockquote><h2 id="查看系统中的数据库"><a href="#查看系统中的数据库" class="headerlink" title="查看系统中的数据库"></a>查看系统中的数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br><span class="line">或</span><br><span class="line">show databasees</span><br></pre></td></tr></table></figure><p>系统数据库说明<br><strong>admin</strong> ： 存储用户信息<br><strong>local</strong> ： 存储本地数据<br><strong>config</strong> ： 存储分片信息</p><h2 id="数据库命名规则"><a href="#数据库命名规则" class="headerlink" title="数据库命名规则"></a>数据库命名规则</h2><ol><li>使用 <code>utf-8</code> 字符 （mongo默认支持utf-8）</li><li>不能含有 <code>空格  .  /  \   &#39;\0&#39; </code> 字符</li><li>长度不超过 <code>64</code> 字节</li><li>不能和系统数据库<code>重名</code></li></ol><blockquote><p>db ： mongodb的全局量，代表当前正在使用的数据库</p></blockquote><blockquote><p>如果不选择使用任何数据库db代表test，直接插入数据就会建立test数据库</p></blockquote><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><p>删除db所代表的数据库</p><h2 id="数据库的备份和恢复"><a href="#数据库的备份和恢复" class="headerlink" title="数据库的备份和恢复"></a>数据库的备份和恢复</h2><p>备份和恢复数据的命令跟mongo都是shell命令，并不是<strong>Mongo Shell</strong>命令</p><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongodump  -h host  -d  dbname -o  bak</span><br><span class="line"></span><br><span class="line">e.g. 将本机test数据库备份到bak目录下</span><br><span class="line">mongodump -h 127.0.0.1 -d test -o bak</span><br></pre></td></tr></table></figure><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongorestore  -h  dbhost:port -d  dbname path</span><br><span class="line"></span><br><span class="line">e.g. 将test数据库恢复到本机的res数据库中（res不存在自动创建）</span><br><span class="line">mongorestore -h 127.0.0.1:27017 -d res  bak/test</span><br></pre></td></tr></table></figure><h2 id="数据库的监测"><a href="#数据库的监测" class="headerlink" title="数据库的监测"></a>数据库的监测</h2><h3 id="监测数据库运行数据"><a href="#监测数据库运行数据" class="headerlink" title="监测数据库运行数据"></a>监测数据库运行数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongostat  </span><br></pre></td></tr></table></figure><p>常用的检测的字段含义</p><table><thead><tr><th align="left">字段</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">insert</td><td align="left">每秒增加的次数</td></tr><tr><td align="left">query</td><td align="left">每秒查的次数</td></tr><tr><td align="left">update</td><td align="left">每秒改的次数</td></tr><tr><td align="left">delete</td><td align="left">每秒删的次数</td></tr><tr><td align="left">flushes</td><td align="left">每秒和磁盘交互次数</td></tr><tr><td align="left">vsize</td><td align="left">虚拟内存</td></tr><tr><td align="left">res</td><td align="left">物理内存</td></tr><tr><td align="left">time</td><td align="left">时间</td></tr></tbody></table><h3 id="监控数据库读写时长"><a href="#监控数据库读写时长" class="headerlink" title="监控数据库读写时长"></a>监控数据库读写时长</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongotop</span><br></pre></td></tr></table></figure><p>常用的检测的字段含义</p><table><thead><tr><th align="left">字段</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">ns</td><td align="left">数据表</td></tr><tr><td align="left">total</td><td align="left">总时间</td></tr><tr><td align="left">read</td><td align="left">读时间</td></tr><tr><td align="left">write</td><td align="left">写时间</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB-概述</title>
      <link href="/2019/08/11/mongodb/%E6%A6%82%E8%BF%B0/"/>
      <url>/2019/08/11/mongodb/%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="非关系型数据库-（NoSql-–-not-only-sql）"><a href="#非关系型数据库-（NoSql-–-not-only-sql）" class="headerlink" title="非关系型数据库 （NoSql –&gt; not  only  sql）"></a>非关系型数据库 （NoSql –&gt; not  only  sql）</h3><ul><li>优点 ： <ul><li>高并发，读写能力强</li><li>弱化数据结构一致性，使用更加灵活</li><li>有良好的可扩展性</li></ul></li><li>缺点 ： <ul><li>通用性差，没有sql语句那样同于的语句</li><li>操作灵活导致容易出错和混乱</li><li>没有外键关联等复杂的操作</li></ul></li></ul><h3 id="Nosql的使用情况"><a href="#Nosql的使用情况" class="headerlink" title="Nosql的使用情况"></a>Nosql的使用情况</h3><ol><li>对数据存储灵活性要求高，一致性要求低</li><li>数据处理海量并发，要求瞬间效率速度比较高</li><li>数据比较容易建立Nosql模型</li><li>网站临时缓冲存储，爬虫应用</li></ol><h3 id="Nosql分类"><a href="#Nosql分类" class="headerlink" title="Nosql分类"></a>Nosql分类</h3><p>1.键值型数据库  Redis<br>2.文档型数据库  MongoDB<br>3.列存储数据库  HBase<br>4.图形数据库</p><h2 id="MongoDB数据库"><a href="#MongoDB数据库" class="headerlink" title="MongoDB数据库"></a>MongoDB数据库</h2><p>标签 ： 非关系型数据库   文档型数据库<br>        最像关系型的非关系型数据库</p><p>特点 ：</p><ol><li>是由c++编写的数据库管理系统</li><li>支持丰富的数据操作，增删改查索引聚合</li><li>支持丰富的数据类型</li><li>使用方便，可以很好的扩展。相对比较成熟</li><li>支持众多的编程语言接口 （python  PHP c++  c#）</li></ol><p>要求：</p><ol><li>关系型数据库和非关系型数据库各自有什么特点</li><li>MongoDB是一个什么样的数据库</li></ol><h3 id="MongoDB的安装"><a href="#MongoDB的安装" class="headerlink" title="MongoDB的安装"></a>MongoDB的安装</h3><h4 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mongodb</span><br></pre></td></tr></table></figure><p>默认安装位置 ： &#x2F;var&#x2F;lib&#x2F;mongodb<br>配置文件位置 ： &#x2F;etc&#x2F;mongodb.conf<br>命令集： &#x2F;usr&#x2F;bin   &#x2F;usr&#x2F;local&#x2F;bin</p><h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h4><ol><li>下载安装包<br><a href="www.mongodb.com">官网</a></li><li>解压安装包<br>&#x2F;usr&#x2F;local   &#x2F;opt</li><li>将解压后的MongoDB文件夹中的bin目录添加到环境比变量<br>PATH&#x3D;$PAHT:&#x2F;opt&#x2F;mongo…..&#x2F;bin<br>export PATH<br>将以上两句写入启动脚本  &#x2F;etc&#x2F;rc.local</li><li>重启</li></ol><h3 id="mysql-和-mongodb-概念对比"><a href="#mysql-和-mongodb-概念对比" class="headerlink" title="mysql 和 mongodb 概念对比"></a>mysql 和 mongodb 概念对比</h3><table><thead><tr><th align="left">mysql</th><th align="left">mongodb</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">database</td><td align="left">database</td><td align="left">数据库</td></tr><tr><td align="left">table</td><td align="left">collection</td><td align="left">表&#x2F;集合</td></tr><tr><td align="left">column</td><td align="left">field</td><td align="left">字段&#x2F;域</td></tr><tr><td align="left">row</td><td align="left">document</td><td align="left">记录&#x2F;文档</td></tr><tr><td align="left">index</td><td align="left">index</td><td align="left">索引</td></tr></tbody></table><h3 id="Mongodb-命令"><a href="#Mongodb-命令" class="headerlink" title="Mongodb 命令"></a>Mongodb 命令</h3><ol><li>设置数据库存储位置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath  目录</span><br><span class="line">  e.g.  将存储路径设置为dbs</span><br><span class="line">mongod --dbpath  dbs </span><br></pre></td></tr></table></figure><ol start="2"><li>设置数据库监听端口</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongod --port  8080</span><br><span class="line">* 默认监听端口27017</span><br></pre></td></tr></table></figure><ol start="3"><li>进入数据库交互操作界面</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongo shell ： 用来操作mongodb数据库的界面，在这里可                以使用mongo语句操作数据库内容</span><br><span class="line"></span><br><span class="line">退出 mongo shell：quit()  exit  ctrl-c</span><br></pre></td></tr></table></figure><p>组织结构 ： 键值对 –&gt; 文档 –&gt;集合 –&gt; 数据库</p><p><strong>在MongoDB中如何表示下面的数据表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-------------------------</span><br><span class="line"> ID   |   NAME   |   AGE</span><br><span class="line">-------------------------</span><br><span class="line"> 1    |   Lily   |   17</span><br><span class="line">-------------------------</span><br><span class="line"> 2    |   Lucy   |   18</span><br><span class="line">-------------------------</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;ID&quot;:1,</span><br><span class="line">  &quot;NAME&quot;:&#x27;Lily&#x27;,</span><br><span class="line">  &quot;AGE&quot;:17</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  &quot;ID&quot;:2,</span><br><span class="line">  &quot;NAME&quot;:&#x27;Lucy&#x27;,</span><br><span class="line">  &quot;AGE&quot;:18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-支持Dark Mode</title>
      <link href="/2019/07/30/ios/general/DarkMode/"/>
      <url>/2019/07/30/ios/general/DarkMode/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.rencheng.cc/blog/flxpq.png-thumb100"></p><p>经过多年的等待和期待，iOS13 终于支持本机<code>Dark Mode</code>！ 用户可以选择启用系统范围的深色外观，所有正式应用程序都将支持该外观。</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在应用中启用<code>Dark Mode</code>支持就像使用新的iOS13 SDK一样容易！ 使用最新的SDK时，iOS将自动更新系统控件，例如开关，表格视图和按钮。如我们所见，Apple还使开发人员可以轻松地添加<code>Dark Mode</code>支持。<br>但是，iOS不会自动切换图像或文本颜色，因此您可能会在<code>Dark Mode</code>下注意到很多与应用有关的问题。<br>尽管使用新的iOS13 SDK进行构建会自动更新系统控件，但Apple强烈建议所有开发人员检查并更新其应用程序，以确保在启用<code>Dark Mode</code>时所有文本和图像都能正确显示。<br>幸运的是，由于苹果在过去几年中对资产目录进行了许多改进，因此大多数iOS应用程序应该能够采用<code>Dark Mode</code>，而无需进行重大代码更改。</p><h2 id="适配颜色"><a href="#适配颜色" class="headerlink" title="适配颜色"></a>适配颜色</h2><h3 id="System-Color"><a href="#System-Color" class="headerlink" title="System Color"></a>System Color</h3><p>iOS13现在在<code>UIColor</code>中包括新的系统颜色，例如<code>label</code>颜色。 通过使用iOS13中可用的新系统颜色，您的应用程序可以自动支持<code>Dark Mode</code>和高对比度模式。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label.color = <span class="built_in">UIColor</span>.secondaryLabel</span><br></pre></td></tr></table></figure><h3 id="Custom-Colors"><a href="#Custom-Colors" class="headerlink" title="Custom Colors"></a>Custom Colors</h3><p>尽管强烈建议您使用系统颜色来自动适应界面更改并确保各个应用程序之间的一致性，但是您可能希望在自定义颜色上支持深色模式。<br>使用iOS11的新资产目录颜色，可以通过添加自定义颜色的深色版本来轻松支持深色模式。<br>要添加资产目录颜色的深色版本，只需在目录中选择颜色，然后在“属性”检查器中将<code>Appearances</code>切换为<code>Any</code>，<code>Dark</code>。 然后，添加颜色的深色外观版本。<br><img src="https://cdn.rencheng.cc/blog/1130i.png-thumb100"><br>就是这样-启用深色模式时，iOS会自动切换到资产目录颜色的深色版本，而您无需进行其他工作！</p><blockquote><p>如果工程未使用资产目录颜色？<br>资产目录颜色使支持<code>Dark Mode</code>更加容易！ 请参阅<a href="https://twitter.com/twannl">Antoine van der Lee</a>撰写的<a href="https://www.avanderlee.com/xcode/dark-mode-on-ios-preparations-using-asset-catalog-colors/">博客文章</a>，详细了解如何使用资产目录颜色，如果您不希望切换，请参阅下面的以编程方式<a href="https://schiavo.me/2019/implementing-dark-mode/#detecting-dark-mode-programmatically">检测Dark Mode</a>。</p></blockquote><h2 id="适配图片"><a href="#适配图片" class="headerlink" title="适配图片"></a>适配图片</h2><p>虽然大多数图像在<code>Dark Mode</code>下看起来都不错，尤其是当您使用模板图像时，如果您将其放置在工作中以自动切换颜色（请参见上文的“适应颜色”），该图像会自动更改色调，但您可能希望<code>Dark Mode</code>下看某些图像具有不同的颜色。<br><img src="https://cdn.rencheng.cc/blog/1x26o.png-thumb100"><br>与资产目录颜色一样，启用<code>Dark Mode</code>时自动切换资产目录中的图像很简单。 要添加任何图像的深色版本，只需在目录中选择该图像，然后在“属性”检查器中将<code>Appearances</code>切换为<code>Any</code>，<code>Dark</code>。 然后，只需添加图像的深色外观版本。</p><h2 id="代码检测Dark-Mode"><a href="#代码检测Dark-Mode" class="headerlink" title="代码检测Dark Mode"></a>代码检测Dark Mode</h2><p>在某些情况下，您需要以代码来检测外观变化并相应地更改用户界面。</p><blockquote><p>⚠️警告：响应外观更改时，请确保尽快更新您的界面。 不要执行与外观更改无关的任务，因为这可能会导致延迟，尤其是当用户从Control Center切换外观时。</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">override func traitCollectionDidChange(_ previousTraitCollection: <span class="built_in">UITraitCollection</span>?) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.traitCollectionDidChange(previousTraitCollection)</span><br><span class="line"></span><br><span class="line">    let userInterfaceStyle = traitCollection.userInterfaceStyle <span class="comment">// Either .unspecified, .light, or .dark</span></span><br><span class="line">    <span class="comment">// Update your user interface based on the appearance</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过在视图控制器上重写traitCollectionDidChange，检测外观变化很简单，只需访问视图控制器的<code>traitCollection.userInterfaceStyle</code>。<br>但是要记住，我们也要针对其他情况更改（例如设备旋转）调用<code>traitCollectionDidChange</code>。 您可以使用此新方法检查当前外观是否不同：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">override func traitCollectionDidChange(_ previousTraitCollection: <span class="built_in">UITraitCollection</span>?) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.traitCollectionDidChange(previousTraitCollection)</span><br><span class="line"></span><br><span class="line">    let hasUserInterfaceStyleChanged = previousTraitCollection.hasDifferentColorAppearance(comparedTo: traitCollection) <span class="comment">// Bool</span></span><br><span class="line">    <span class="comment">// Update your user interface based on the appearance</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要从任何地方访问当前特征集，也可以使用<code>UITraitCollection.current</code>。</p><h2 id="重写-User-Interface-Style"><a href="#重写-User-Interface-Style" class="headerlink" title="重写 User Interface Style"></a>重写 User Interface Style</h2><h3 id="全局控制"><a href="#全局控制" class="headerlink" title="全局控制"></a>全局控制</h3><p>系统会自动在与iOS13或更高版本的SDK链接的任何应用中选择采用浅色和深色外观。 如果您需要更多时间来处理应用程序的<code>Dark Mode</code>支持，或者希望将应用保持单一样式，则可以通过在应用的<code>Info.plist</code>文件中添加<code>UIUserInterfaceStyle</code>键（值为<code>Light</code>或<code>Dark</code>）来控制。 设置此键会导致系统忽略用户的偏好，并始终将特定外观应用于您的应用。</p><blockquote><p>⚠️Note️注意：强烈建议支持深色模式。 在改进应用程序的<code>Dark Mode</code>支持时，请使用UIUserInterfaceStyle键暂时停用。</p></blockquote><h3 id="特定页面"><a href="#特定页面" class="headerlink" title="特定页面"></a>特定页面</h3><p>在iOS13中，您现在可以在特定视图或视图控制器上重写<code>User Interface Style</code>。例如，您可能只希望某个视图控制器处于<code>Dark Mode</code>，而应用程序的其余部分处于<code>Light</code>模式。<br>要覆盖用户界面样式，只需在顶视图或视图控制器中覆盖此变量，它将向下传播到子视图：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Inside a UIViewController</span></span><br><span class="line">override func viewDidLoad() &#123;</span><br><span class="line">    <span class="variable language_">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Always adopt a dark interface style.    </span></span><br><span class="line">    overrideUserInterfaceStyle = .dark</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印切换信息"><a href="#打印切换信息" class="headerlink" title="打印切换信息"></a>打印切换信息</h2><p>Edit Scheme -&gt; Run -&gt; Arguments -&gt; Arguments Passed On Launch<br>加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-UITraitCollectionChangeLoggingEnabled YES</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在文章中，我们探讨了如何使您的应用在iOS13的<code>Dark Mode</code>中看起来更漂亮，以及如何调整图像，颜色和自定义用户界面元素以匹配新样式。<br>我迫不及待想看到肯定会在秋天出现的所有出色的<code>Dark Mode</code>应用程序！<br>本文所有信息全部摘自<a href="https://developer.apple.com/videos/play/wwdc2019/214/">WWDC</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS13和Xcode11踩坑</title>
      <link href="/2019/07/24/ios/general/iOS13%E5%92%8CXcode11%E8%B8%A9%E5%9D%91/"/>
      <url>/2019/07/24/ios/general/iOS13%E5%92%8CXcode11%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.rencheng.cc/blog/g8big.png"></p><p>今年整体上问题不大，没有出现编译报错问题。</p><p>用 Xcode10 编译的 App 在 iOS 13 上使用甚至几乎完美<br>用 Xcode11 编译的 App 再在 iOS 13 上跑，就有些问题了</p><span id="more"></span><h2 id="modal新样式"><a href="#modal新样式" class="headerlink" title="modal新样式"></a>modal新样式</h2><p>iOS 13 多了一个新的枚举类型 <code>UIModalPresentationAutomatic</code>，且是<code>modalPresentationStyle</code>的默认值。</p><p><code>UIModalPresentationAutomatic</code>实际是表现是在 &#x3D;iOS 13的设备上被映射成<code>UIModalPresentationPageSheet</code>。</p><p>我这边的设计师表示，新样式不错，可以不用改😆。</p><p>不过， <code>PageSheet</code> 与 <code>FullScreen</code> 对比 有个需要注意的地方，控制器的生命周期有点区别：</p><p>以 <code>控制器A</code>、<code>控制器B</code> 举例：</p><ul><li><p><code>控制器A</code> present <code>控制器B</code><br>  <code>控制器A</code> 不会调用 <code>viewWillDisappear</code> 以及 <code>viewDidDisappear</code></p></li><li><p><code>控制器B</code> dismiss 时<br>  <code>控制器A</code> 不会调用 <code>viewWillAppear</code> 以及 <code>viewDidAppear</code></p></li></ul><p>那么如果有些业务逻辑会在<code>控制器A</code>的生命周期里做的话，就需要考虑其他方式实现，或者改回<code>UIModalPresentationFullScreen</code><br><img src="https://cdn.rencheng.cc/blog/ojqu0.gif"></p><p>如果需要改成原本全屏的样式，可以处理Controller:</p><ul><li>初始化时设置<code>modalPresentationStyle</code>值</li><li>跳转修改<code>modalPresentationStyle</code>值</li><li>覆盖<code>modalPresentationStyle</code>的get方法</li></ul><p>看上面gif，用户是可以通过手势下拉关闭被present出来的控制器的，那如果我需要禁止他下来要怎么实现呢？</p><blockquote><p>可以参考<a href="https://developer.apple.com/documentation/uikit/view_controllers/disabling_pulling_down_a_sheet?language=objc">disabling_pulling_down_a_sheet</a>的Demo</p></blockquote><p>设置<code>presentationController.delegate</code> 代理对象，实现<code>UIAdaptivePresentationControllerDelegate</code>协议方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">XXViewController</span> () &lt;<span class="title">UIAdaptivePresentationControllerDelegate</span>&gt;</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="type">BOOL</span> allowBack;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">XXViewController</span></span></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果vc被navigation套了一层就要取navigation的presentationController</span></span><br><span class="line">    <span class="keyword">self</span>.navigationController.presentationController.delegate = <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用UIAdaptivePresentationControllerDelegate 协议方法控制能否下拉dismiss</span></span><br><span class="line"><span class="comment">// 或者不实现这个协议，设置self.modalInPresentation（YES-不允许下拉关闭，NO-可以下拉关闭）</span></span><br><span class="line">- (<span class="type">BOOL</span>)presentationControllerShouldDismiss:(<span class="built_in">UIPresentationController</span> *)presentationController &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.allowBack;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 self.modalInPresentation=YES 或者</span></span><br><span class="line"><span class="comment">// 上面协议方法return NO，用户再下拉就会在这收到回调</span></span><br><span class="line">- (<span class="type">void</span>)presentationControllerDidAttemptToDismiss:(<span class="built_in">UIPresentationController</span> *)presentationController &#123;</span><br><span class="line">    <span class="comment">// 如果self.allowBack == NO，会回调到这里</span></span><br><span class="line">    <span class="comment">// 可以在这里做一些事情然后再考虑让 self.allowBack=YES 或</span></span><br><span class="line">    <span class="comment">// 则让 self.modalInPresentation=NO 即可让页面可以下拉返回</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="textfield-leftview"><a href="#textfield-leftview" class="headerlink" title="textfield.leftview"></a>textfield.leftview</h2><p>如下方式，直接给<code>textfield.leftView</code>赋值一个<code>UILabel</code>对象，他的宽高会被 <code>sizeToFit</code>，而不是创建时的值。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// left view label</span></span><br><span class="line"><span class="built_in">UILabel</span> *phoneLabel = [[<span class="built_in">UILabel</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">63</span>, <span class="number">50</span>)];</span><br><span class="line">phoneLabel.text = <span class="string">@&quot;手机号&quot;</span>;</span><br><span class="line">phoneLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">16</span>];</span><br><span class="line"><span class="comment">// set textfield left view</span></span><br><span class="line"><span class="keyword">self</span>.textfieldName.leftView = phoneLabel;</span><br></pre></td></tr></table></figure><p>如所看到，实际leftview的width为59，height为19：<br><img src="https://cdn.rencheng.cc/blog/mefgj.png"><br>通过监听<code>leftView</code>的<code>frame</code>变化，发现是<code>layoutSubview</code>之后变化的。<br>最终还是给UILabel多套了一个UIView来解决</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// label</span></span><br><span class="line"><span class="built_in">UILabel</span> *phoneLabel = [[<span class="built_in">UILabel</span> alloc] init];</span><br><span class="line">phoneLabel.text = <span class="string">@&quot;手机号&quot;</span>;</span><br><span class="line">phoneLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">16</span>];</span><br><span class="line">[phoneLabel sizeToFit];</span><br><span class="line">phoneLabel.centerY = <span class="number">50</span>/<span class="number">2.</span>f;</span><br><span class="line"><span class="comment">// left view</span></span><br><span class="line"><span class="built_in">UIView</span> *leftView = [[<span class="built_in">UIView</span> alloc] initWithFrame:(<span class="built_in">CGRect</span>)&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">63</span>, <span class="number">50</span>&#125;];</span><br><span class="line">[leftView addSubview:phoneLabel];</span><br><span class="line"><span class="comment">// set textfield left view</span></span><br><span class="line"><span class="keyword">self</span>.textfieldName.leftView = leftView;</span><br></pre></td></tr></table></figure><h2 id="KVC访问私有属性Crash"><a href="#KVC访问私有属性Crash" class="headerlink" title="KVC访问私有属性Crash"></a>KVC访问私有属性Crash</h2><p>打开有<code>UISearchBar</code>的页面发现Crash了，看到控制台输出提示：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取_searchField</span></span><br><span class="line"><span class="built_in">UITextField</span> *sField = [<span class="keyword">self</span>.searchbar valueForKey:<span class="string">@&quot;_searchField&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// crash log</span></span><br><span class="line">*** Terminating app due to uncaught exception <span class="string">&#x27;NSGenericException&#x27;</span>, reason: </span><br><span class="line"><span class="string">&#x27;Access to UISearchBar&#x27;</span>s _searchField ivar is prohibited. </span><br><span class="line">This is an application bug<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>看起来是禁止访问私有属性了。</strong></p><p>用 Xcode 10 编译的 App 在 iOS 13 上能正常使用，那么就是 Xcode 11 做了限制访问私有属性的一些处理了。</p><p>偶然发现 iOS 13 中增加了<code>UISearchTextField</code>类，且暴露了<code>searchTextField</code>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UISearchTextField.h</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UIKIT_CLASS_AVAILABLE_IOS_ONLY</span>(<span class="number">13.0</span>)</span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UISearchTextField</span> : <span class="title">UITextField</span></span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UISearchBar</span> (<span class="title">UITokenSearch</span>)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UISearchTextField</span> *searchTextField;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>但是仅在 iOS 13 以上系统支持，还是暂时用遍历view的方式去做了😂</p><h2 id="navigationBar-shouldPopItem"><a href="#navigationBar-shouldPopItem" class="headerlink" title="navigationBar:shouldPopItem:"></a>navigationBar:shouldPopItem:</h2><p>点击导航栏返回的时候Crash了，控制台输出提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Теrmіnаtіng арр due to uncaught exception&#x27; NSInternalInconsistencyException&#x27; , </span><br><span class="line">reason : &#x27; Override of -navigationBar : shouldPopItem: returned YES after </span><br><span class="line">manually popping a view controller ( navigat ionController=&lt;MHCRNavgationController : 0x106039400&gt;) &#x27;</span><br></pre></td></tr></table></figure><p>因为我们工程里，基本上所有的<code>Controller</code>是继承基类<code>BaseViewController</code>并实现<code>- (BOOL)naviBack:</code>方法，用于实现在用户点击返回和侧滑返回时，一些不能返回的特殊处理。<br>其根本原理是通过实现<code>UINavgationBar</code>的代理方法<code>- (BOOL)navigationBar:shouldPopItem:</code>来做的控制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)navigationBar:(UINavigationBar *)navigationBar</span><br><span class="line">        shouldPopItem:(UINavigationItem *)item &#123;</span><br><span class="line">    </span><br><span class="line">    // 默认可以返回</span><br><span class="line">    BOOL canGoBack = YES;</span><br><span class="line">    </span><br><span class="line">    // BaseViewController定义协议方法判断能否能点击返回上一层</span><br><span class="line">    UIViewController *vc = self.viewControllers.lastObject;</span><br><span class="line">    if ([vc isKindOfClass:BaseViewController.class]) &#123;</span><br><span class="line">        canGoBack = [(BaseViewController *)vc naviBack:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (canGoBack) &#123;</span><br><span class="line">        [self popViewControllerAnimated:YES];</span><br><span class="line">    &#125;</span><br><span class="line">    return canGoBack;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我实现的时候有<code>Return YES</code>啊！想了想，试着<strong>注释</strong>了<code>[self popViewControllerAnimated:YES]</code>，发现没有崩溃了。<br>但是在iOS 12上，会发现控制器没有回到上一层，如图，只有navbar回到上一层了：<br><img src="https://cdn.rencheng.cc/blog/m2g0d.gif"><br>好吧，那只能判断一下版本解决这个问题了，修改方式：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">BOOL</span>)navigationBar:(<span class="built_in">UINavigationBar</span> *)navigationBar</span><br><span class="line">        shouldPopItem:(<span class="built_in">UINavigationItem</span> *)item &#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 判断 iOS 版本低于13</span></span><br><span class="line">    <span class="type">BOOL</span> bellow13 = !@available(iOS <span class="number">13.0</span>, *);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认可以返回</span></span><br><span class="line">    <span class="type">BOOL</span> canGoBack = <span class="literal">YES</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// BaseViewController定义协议方法判断能否能点击返回上一层</span></span><br><span class="line">    <span class="built_in">UIViewController</span> *vc = <span class="keyword">self</span>.viewControllers.lastObject;</span><br><span class="line">    <span class="keyword">if</span> ([vc isKindOfClass:BaseViewController.class]) &#123;</span><br><span class="line">        canGoBack = [(BaseViewController *)vc naviBack:<span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (canGoBack &amp;&amp; bellow13) &#123;</span><br><span class="line">        <span class="comment">// 如果低于13且可以返回，就执行popViewController</span></span><br><span class="line">        [<span class="keyword">self</span> popViewControllerAnimated:<span class="literal">YES</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> canGoBack;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="夜间模式"><a href="#夜间模式" class="headerlink" title="夜间模式"></a>夜间模式</h2><p>WWDC 19 直播的时候看到夜间模式，老实说挺开心的，直到我用 Xcode 11 开始做适配，妈耶！x N</p><p><strong>注意：使用 Xcode 10 编译的 App 依然是日间模式，不会产生效果！！！</strong></p><p>初步扫了一下出现的问题如下图，大致情况是：没有设置背景色的系统控件会被设置成黑色，部分控件是tintColor没设置的话也会被改。<br><img src="https://cdn.rencheng.cc/blog/kpbaf.jpg"><br><img src="https://cdn.rencheng.cc/blog/i0378.jpg"></p><p>由于Assets里的Color配置是<code>iOS 12</code>以上才能使用的，所以如果没有做全局主题色设计且需要支持iOS 12以下设备，改起来会比较恶心。</p><p>对此现象，找设计师沟通。设计师表示，暂时没有精力做夜间模式规划。<br>设计师问：能否强制只日间模式？<br>答：能。配置方式有两种，<code>单页面配置</code> 和 <code>全局配置</code>。</p><ul><li>单页配置<br>  将需要配置的<code>UIViewControler</code>对象的<code>overrideUserInterfaceStyle</code>属性设置成<code>UIUserInterfaceStyleLight</code>或者<code>UIUserInterfaceStyleDark</code>以强制是某个页面显示为<code>浅/深色模式</code></li><li>全局配置<br>  在工程的<code>Info.plist</code>的中，增加&#x2F;修改<code>UIUserInterfaceStyle</code>为<code>UIUserInterfaceStyleLight</code>或<code>UIUserInterfaceStyleDark</code></li></ul><h2 id="禁用方法"><a href="#禁用方法" class="headerlink" title="禁用方法"></a>禁用方法</h2><p><strong>textField 更改holder颜色崩溃</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[textField setValue:HexColor(<span class="number">0x999999</span>) forKeyPath:<span class="string">@&quot;_placeholderLabel.textColor&quot;</span>];</span><br></pre></td></tr></table></figure><p><strong>解决方式</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSAttributedString</span> *attrString = [[<span class="built_in">NSAttributedString</span> alloc] initWithString:<span class="string">@&quot;请输入占位文字&quot;</span> attributes:@&#123;<span class="built_in">NSForegroundColorAttributeName</span>:HexColor(<span class="number">0x999999</span>), <span class="built_in">NSFontAttributeName</span>:textField.font&#125;];</span><br><span class="line">textField.attributedPlaceholder = attrString;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift</title>
      <link href="/2019/07/20/ios/swift/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/07/20/ios/swift/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>基于swift5.1写的</p><span id="more"></span><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>不用编写main函数，Swift将全局范围内的首句可执行代码作为程序入口</p></li><li><p>一句代码尾部可以省略分号(;)，多句代码写到同一行时必须用分号(;)隔开 </p></li><li><p>用<code>var</code>定义变量，<code>let</code>定义常量，编译器能自动推断出变量\常量的类型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> c <span class="operator">=</span> a <span class="operator">+</span> b</span><br><span class="line">c <span class="operator">+=</span> <span class="number">30</span></span><br></pre></td></tr></table></figure></li><li><p>Playground可以快速预览代码效果，是学习语法的好帮手 </p></li><li><p><code>Command + Shift + Enter</code>:运行整个Playground</p></li><li><p><code>Shift + Enter</code>:运行截止到某一行代码</p></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 1</span></span><br><span class="line"><span class="comment"> <span class="comment">/* 多行注释嵌套 */</span></span></span><br><span class="line"><span class="comment"> 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li>只能赋值1次</li><li>它的值不要求在编译时期确定，但使用之前必须赋值1次</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age1 <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> age2: <span class="type">Int</span></span><br><span class="line">age2 <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">getAge</span>() -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> age3 <span class="operator">=</span> getAge()</span><br></pre></td></tr></table></figure><ul><li>常量、变量在初始化之前，都不能使用</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age: <span class="type">Int</span></span><br><span class="line"><span class="keyword">var</span> height: <span class="type">Int</span></span><br><span class="line"><span class="built_in">print</span>(age)</span><br><span class="line"><span class="built_in">print</span>(height)</span><br></pre></td></tr></table></figure><ul><li>下面代码是错误的</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age</span><br><span class="line">age <span class="operator">=</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul><li>标识符(比如常量名、变量名、函数名)几乎可以使用任何字符</li><li>标识符不能以数字开头，不能包含空白字符、制表符、箭头等特殊字符</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> 🐂🍺() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;666&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">🐂🍺()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 👽 <span class="operator">=</span> <span class="string">&quot;ET&quot;</span></span><br><span class="line"><span class="keyword">var</span> 🥛 <span class="operator">=</span> <span class="string">&quot;milk&quot;</span></span><br></pre></td></tr></table></figure><h3 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h3><p><img src="https://cdn.rencheng.cc/blog/m7u8l.png"></p><ul><li><p>整数类型:Int8、Int16、Int32、Int64、UInt8、UInt16、UInt32、UInt64 </p></li><li><p>在32bit平台，Int等价于Int32，Int等价于Int64</p></li><li><p>整数的最值:UInt8.max、Int16.min</p></li><li><p>一般情况下，都是直接使用Int即可</p></li><li><p>浮点类型:Float，32位，精度只有6位;Double，64位，精度至少15位</p></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> letFloat: <span class="type">Float</span> <span class="operator">=</span> <span class="number">30.0</span></span><br><span class="line"><span class="keyword">let</span> letDouble <span class="operator">=</span> <span class="number">30.0</span></span><br></pre></td></tr></table></figure><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p><strong>布尔</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bool <span class="operator">=</span> <span class="literal">true</span> <span class="comment">// 取反是false</span></span><br></pre></td></tr></table></figure><p><strong>字符串</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string <span class="operator">=</span> <span class="string">&quot;飞翔&quot;</span></span><br></pre></td></tr></table></figure><p><strong>字符(可存储ASCII字符、Unicode字符)</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> character: <span class="type">Character</span> <span class="operator">=</span> <span class="string">&quot;🐶&quot;</span></span><br></pre></td></tr></table></figure><p><strong>整数</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> intDecimal <span class="operator">=</span> <span class="number">15</span> <span class="comment">//十进制</span></span><br><span class="line"><span class="keyword">let</span> intBinary <span class="operator">=</span> <span class="number">0b10001</span> <span class="comment">// 二进制</span></span><br><span class="line"><span class="keyword">let</span> intOctal <span class="operator">=</span> <span class="number">0o21</span> <span class="comment">// 八进制</span></span><br><span class="line"><span class="keyword">let</span> intHexadecimal <span class="operator">=</span> <span class="number">0x11</span> <span class="comment">// 十六进制</span></span><br></pre></td></tr></table></figure><blockquote><p> 整数和浮点数可以添加额外的零或者添加下划线来增强可读性 <code>p100_0000</code>、 <code>1_000_000.000_000_1</code>、 <code>000123.456</code></p></blockquote><p><strong>浮点数</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> doubleDecimal <span class="operator">=</span> <span class="number">15.0</span> <span class="comment">//十进制, 等价于1.25e2,0.0125等价于1.25e-2</span></span><br><span class="line"><span class="keyword">let</span> doubleHexadecimal1 <span class="operator">=</span> <span class="number">0xFp2</span> <span class="comment">// 十六进制, 意味着25×2^2，相当于十进制的60</span></span><br><span class="line"><span class="keyword">let</span> doubleHexadecimal2 <span class="operator">=</span> <span class="number">0xFp-2</span> <span class="comment">// 十六进制, 意味着25×2^-2，相当于十进制的3.75</span></span><br></pre></td></tr></table></figure><p><strong>数组</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array <span class="operator">=</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p><strong>字典</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dictionary <span class="operator">=</span> [<span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;height&quot;</span>: <span class="number">168</span>, <span class="string">&quot;weight&quot;</span>: <span class="number">120</span>]</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p><strong>整数转换</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> int1: <span class="type">UInt16</span> <span class="operator">=</span> <span class="number">2_000</span></span><br><span class="line"><span class="keyword">let</span> int2: <span class="type">UInt8</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> int3 <span class="operator">=</span> int1 <span class="operator">+</span> <span class="type">UInt16</span>(int2)</span><br></pre></td></tr></table></figure><p><strong>整数、浮点数转换</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> int <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> double <span class="operator">=</span> <span class="number">0.14</span></span><br><span class="line"><span class="keyword">let</span> pi <span class="operator">=</span> <span class="type">Double</span>(int) <span class="operator">+</span> double</span><br><span class="line"><span class="keyword">let</span> intPi <span class="operator">=</span> <span class="type">Int</span>(pi)</span><br></pre></td></tr></table></figure><p><strong>字面量相加</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量可以直接相加，欣慰数字字面量本身没有明确类型</span></span><br><span class="line"><span class="keyword">let</span> result <span class="operator">=</span> <span class="number">3</span> <span class="operator">+</span> <span class="number">0.14</span></span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> http404Error <span class="operator">=</span> (<span class="number">404</span>, <span class="string">&quot;Not Found&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status code is <span class="subst">\(http404Error.<span class="number">0</span>)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> (statusCode, statusMessage) <span class="operator">=</span> http404Error</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status code is <span class="subst">\(statusCode)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> (justTheStatusCode, <span class="keyword">_</span>) <span class="operator">=</span> http404Error</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> http200Error <span class="operator">=</span> (statusCode: <span class="number">200</span>, description: <span class="string">&quot;OK&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The status code is <span class="subst">\(http200Error.statusCode)</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age <span class="operator">=</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">if</span> age <span class="operator">&gt;=</span> <span class="number">22</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Get married&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> age <span class="operator">&gt;=</span> <span class="number">18</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Being a adult&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> age <span class="operator">&gt;=</span> <span class="number">7</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Go to school&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Just a child&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>if后面的条件可以省略小括号</li><li>条件后边的大括号不可以省略</li><li>if后边的条件智能是Bool类型</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误代码</span></span><br><span class="line"><span class="keyword">let</span> age <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> age &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num <span class="operator">=</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">where</span> num <span class="operator">&gt;</span> <span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num is <span class="subst">\(num)</span>&quot;</span>)</span><br><span class="line">    num <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">&#125; <span class="comment">//打印了5次</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num <span class="operator">=</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num is <span class="subst">\(num)</span>&quot;</span>)</span><br><span class="line">    num <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">while</span> num <span class="operator">&gt;</span> <span class="number">0</span> <span class="comment">//打印了1次</span></span><br></pre></td></tr></table></figure><ul><li>repeat-while 相当于C语言的do-while</li><li>这里不用num–，是因为从Swift3开始，去除了自增（++），自减（–）运算符</li></ul><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><h4 id="闭区间运算符：a…b-a"><a href="#闭区间运算符：a…b-a" class="headerlink" title="闭区间运算符：a…b, a &lt;&#x3D; 取值 &lt;&#x3D; b"></a>闭区间运算符：a…b, a &lt;&#x3D; 取值 &lt;&#x3D; b</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names <span class="operator">=</span> [<span class="string">&quot;Anna&quot;</span>, <span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Brian&quot;</span>, <span class="string">&quot;Jack&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">3</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(names[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Anna, Alex, Brian, Jack</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names <span class="operator">=</span> [<span class="string">&quot;Anna&quot;</span>, <span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Brian&quot;</span>, <span class="string">&quot;Jack&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> range <span class="operator">=</span> <span class="number">1</span><span class="operator">...</span><span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range &#123;</span><br><span class="line">    <span class="built_in">print</span>(names[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Alex, Brian, Jack</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names <span class="operator">=</span> [<span class="string">&quot;Anna&quot;</span>, <span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Brian&quot;</span>, <span class="string">&quot;Jack&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a<span class="operator">...</span>b &#123;</span><br><span class="line">    <span class="built_in">print</span>(name[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Alex, Brian</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// i默认是let, 如果有需要可以声明为var</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">var</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">3</span> &#123;</span><br><span class="line">    i <span class="operator">+=</span> <span class="number">5</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 6 7 8</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">_</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">3</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;for&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印了三次</span></span><br></pre></td></tr></table></figure><h4 id="半开区间运算符：a"><a href="#半开区间运算符：a" class="headerlink" title="半开区间运算符：a..&lt;b, a &lt;&#x3D; 取值 &lt; b"></a>半开区间运算符：a..&lt;b, a &lt;&#x3D; 取值 &lt; b</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">..&lt;</span><span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3 4</span></span><br></pre></td></tr></table></figure><h4 id="区间运算符用在数组上"><a href="#区间运算符用在数组上" class="headerlink" title="区间运算符用在数组上"></a>区间运算符用在数组上</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names <span class="operator">=</span> [<span class="string">&quot;Anna&quot;</span>, <span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Brian&quot;</span>, <span class="string">&quot;Jack&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names[<span class="number">0</span><span class="operator">...</span><span class="number">3</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Anna, Alex, Brian, Jack</span></span><br></pre></td></tr></table></figure><p><strong>单侧区间</strong><br>让区间朝着一个方向尽可能的远</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names <span class="operator">=</span> [<span class="string">&quot;Anna&quot;</span>, <span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Brian&quot;</span>, <span class="string">&quot;Jack&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names[<span class="number">2</span><span class="operator">...</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Brian, Jack</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names[<span class="operator">...</span><span class="number">2</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Anna, Alex, Brian</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names[<span class="operator">..&lt;</span><span class="number">2</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Anna, Alex</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> range <span class="operator">=</span> <span class="operator">...</span><span class="number">5</span></span><br><span class="line">range.contains(<span class="number">7</span>) <span class="comment">// false</span></span><br><span class="line">range.contains(<span class="number">4</span>) <span class="comment">// true</span></span><br><span class="line">range.contains(<span class="number">7</span><span class="operator">-</span><span class="number">3</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="区间类型"><a href="#区间类型" class="headerlink" title="区间类型"></a>区间类型</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> range1: <span class="type">ClosedRange</span>&lt;<span class="type">Int</span>&gt; <span class="operator">=</span> <span class="number">1</span><span class="operator">...</span><span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> range2: <span class="type">Range</span>&lt;<span class="type">Int</span>&gt; <span class="operator">=</span>  <span class="number">1</span><span class="operator">..&lt;</span><span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> range3: <span class="type">PartialRangeThrough</span>&lt;<span class="type">Int</span>&gt; <span class="operator">=</span> <span class="operator">...</span><span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>字符、字符串也能使用区间运算符，但默认不能用在for-in中</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringRange1 <span class="operator">=</span> <span class="string">&quot;cc&quot;</span><span class="operator">...</span><span class="string">&quot;ff&quot;</span> <span class="comment">// ClosedRange&lt;String&gt; </span></span><br><span class="line">stringRange1.contains(<span class="string">&quot;cb&quot;</span>) <span class="comment">// false </span></span><br><span class="line">stringRange1.contains(<span class="string">&quot;dz&quot;</span>) <span class="comment">// true</span></span><br><span class="line">stringRange1.contains(<span class="string">&quot;fg&quot;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> stringRange2 <span class="operator">=</span> <span class="string">&quot;a&quot;</span><span class="operator">...</span><span class="string">&quot;f&quot;</span></span><br><span class="line">stringRange2.contains(<span class="string">&quot;d&quot;</span>) <span class="comment">// true</span></span><br><span class="line">stringRange2.contains(<span class="string">&quot;h&quot;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// \0到~囊括了所有可能要用到的ASCII字符</span></span><br><span class="line"><span class="keyword">let</span> characterRange: <span class="type">ClosedRange</span>&lt;<span class="type">Character</span>&gt; <span class="operator">=</span> <span class="string">&quot;<span class="subst">\0</span>&quot;</span><span class="operator">...</span><span class="string">&quot;~&quot;</span> characterRange.contains(<span class="string">&quot;G&quot;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="带间隔的区间值"><a href="#带间隔的区间值" class="headerlink" title="带间隔的区间值"></a>带间隔的区间值</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hours <span class="operator">=</span> <span class="number">11</span></span><br><span class="line"><span class="keyword">let</span> hourInterval <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="comment">// tickMark的取值:从4开始，累加2，不超过11</span></span><br><span class="line"><span class="keyword">for</span> tickMark <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">4</span>, through: hours, by: hourInterval) &#123;</span><br><span class="line">    <span class="built_in">print</span>(tickMark)</span><br><span class="line">&#125; <span class="comment">// 4 6 8 10</span></span><br></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><ul><li>case、default后面不能写大括号{}</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">switch</span> number &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;number is 1&quot;</span>)</span><br><span class="line"><span class="keyword">break</span> <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;number is 2&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;number is other&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="comment">// number is 1</span></span><br></pre></td></tr></table></figure><ul><li>默认可以不写break，并不会贯穿到后面的条件</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">switch</span> number &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;number is 1&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;number is 2&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;number is other&quot;</span>)</span><br><span class="line">&#125; <span class="comment">// number is 1</span></span><br></pre></td></tr></table></figure><ul><li>使用fallthrough可以实现贯穿效果</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">switch</span> number &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;number is 1&quot;</span>)</span><br><span class="line">    <span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;number is 2&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;number is other&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// number is 1</span></span><br><span class="line"><span class="comment">// number is 2</span></span><br></pre></td></tr></table></figure><ul><li>switch必须要保证能处理所有情况</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示范，编译器会报错；应该加上default</span></span><br><span class="line"><span class="keyword">var</span> number <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">switch</span> number &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;number is 1&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;number is 2&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>case、default后面至少要有一条语句</li><li>如果不想做任何事，加个break即可</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">switch</span> number &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;number is 1&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;number is 2&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果能保证已处理所有情况，也可以不必使用default</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">enum Answer &#123; case right, wrong &#125; </span><br><span class="line">let answer = Answer.right</span><br><span class="line">switch answer &#123;</span><br><span class="line">case Answer.right:</span><br><span class="line">    print(&quot;right&quot;) </span><br><span class="line">case Answer.wrong: </span><br><span class="line">    print(&quot;wrong&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// 由于已确定answer是Ansewer类型，因此可以省略Answer </span><br><span class="line">switch answer &#123;</span><br><span class="line">case .right:</span><br><span class="line">    print(&quot;right&quot;) </span><br><span class="line">case .wrong:</span><br><span class="line">    print(&quot;wrong&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>switch也支持Character、String类型</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string <span class="operator">=</span> <span class="string">&quot;Jack&quot;</span></span><br><span class="line"><span class="keyword">switch</span> string &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;Jack&quot;</span>:</span><br><span class="line">    <span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;Rose&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Right person&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// Right person</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> character: <span class="type">Character</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="keyword">switch</span> character &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;a&quot;</span>, <span class="string">&quot;A&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The letter A&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Not the letter A&quot;</span>)</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// The letter A</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> string &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Rose&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Right person&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// Right person</span></span><br></pre></td></tr></table></figure><ul><li>区间匹配、元组匹配</li><li>可以使用下划线 _ 忽略某个值</li><li>关于case匹配问题，属于模式匹配(Pattern Matching)的范畴，以后会再次详细展开讲解</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count <span class="operator">=</span> <span class="number">62</span></span><br><span class="line"><span class="keyword">switch</span> count &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;none&quot;</span>) </span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span><span class="operator">..&lt;</span><span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a few&quot;</span>) </span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span><span class="operator">..&lt;</span><span class="number">12</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;several&quot;</span>) </span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span><span class="operator">..&lt;</span><span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dozens of&quot;</span>) </span><br><span class="line"><span class="keyword">case</span> <span class="number">100</span><span class="operator">..&lt;</span><span class="number">1000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hundreds of&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;many&quot;</span>)</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// dozens of</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> point <span class="operator">=</span> (<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">switch</span> point &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;the origin&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="keyword">_</span>, <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;on the x-axis&quot;</span>) </span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="keyword">_</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;on the y-axis&quot;</span>) </span><br><span class="line"><span class="keyword">case</span> (<span class="operator">-</span><span class="number">2</span><span class="operator">...</span><span class="number">2</span>, <span class="operator">-</span><span class="number">2</span><span class="operator">...</span><span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;inside the box&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;outside of the box&quot;</span>) &#125; </span><br><span class="line"><span class="comment">// inside the box</span></span><br></pre></td></tr></table></figure><ul><li>值绑定 必要时 let也可以改为var</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> point <span class="operator">=</span> (<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">switch</span> point &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="keyword">let</span> x, <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;on the x-axis with an x value of <span class="subst">\(x)</span>&quot;</span>) </span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="keyword">let</span> y):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;on the y-axis with a y value of <span class="subst">\(y)</span>&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;somewhere else at (<span class="subst">\(x)</span>, <span class="subst">\(y)</span>)&quot;</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// on the x-axis with an x value of 2</span></span><br></pre></td></tr></table></figure><ul><li>where</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> point <span class="operator">=</span> (<span class="number">1</span>, <span class="operator">-</span><span class="number">1</span>)</span><br><span class="line"><span class="keyword">switch</span> point &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y) <span class="keyword">where</span> x <span class="operator">==</span> y:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;on the line x == y&quot;</span>) </span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y) <span class="keyword">where</span> x <span class="operator">==</span> <span class="operator">-</span>y:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;on the line x == -y&quot;</span>) </span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(<span class="subst">\(x)</span>, <span class="subst">\(y)</span>) is just some arbitrary point&quot;</span>) &#125; </span><br><span class="line">    </span><br><span class="line"><span class="comment">// on the line x == -y</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将所有正数加起来</span></span><br><span class="line"><span class="keyword">var</span> numbers <span class="operator">=</span> [<span class="number">10</span>, <span class="number">20</span>, <span class="operator">-</span><span class="number">10</span>, <span class="operator">-</span><span class="number">20</span>, <span class="number">30</span>, <span class="operator">-</span><span class="number">30</span>]</span><br><span class="line"><span class="keyword">var</span> sum <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> numbers <span class="keyword">where</span> num <span class="operator">&gt;</span> <span class="number">0</span> &#123; <span class="comment">// 使用where来过滤num</span></span><br><span class="line">    sum <span class="operator">+=</span> num </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(sum) <span class="comment">// 60</span></span><br></pre></td></tr></table></figure><ul><li>标签语句；指定跳出的循环层级</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">outer: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">4</span> &#123; </span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">4</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> k <span class="operator">==</span> <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span> outer</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i <span class="operator">==</span> <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> outer </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;i == <span class="subst">\(i)</span>, k == <span class="subst">\(k)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><ul><li>形参默认是let，也只能是let</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">pi</span>() -&gt; <span class="type">Double</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="params">v1</span>: <span class="type">Int</span>, <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v1 <span class="operator">+</span> v2</span><br><span class="line">&#125;</span><br><span class="line">sum(v1: <span class="number">10</span>, v2: <span class="number">20</span>)</span><br></pre></td></tr></table></figure><ul><li>无返回值</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sayHello</span>() -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sayHello</span>() -&gt; () &#123; </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sayHello</span>() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="隐式返回-Implicit-Return"><a href="#隐式返回-Implicit-Return" class="headerlink" title="隐式返回(Implicit Return)"></a>隐式返回(Implicit Return)</h3><ul><li>如果整个函数体是一个单一表达式，那么函数会隐式返回这个表达式</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="params">v1</span>: <span class="type">Int</span>, <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; </span><br><span class="line">    v1 <span class="operator">+</span> v2</span><br><span class="line">&#125;</span><br><span class="line">sum(v1: <span class="number">10</span>, v2: <span class="number">20</span>) <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><h3 id="返回元组-实现多返回值"><a href="#返回元组-实现多返回值" class="headerlink" title="返回元组:实现多返回值"></a>返回元组:实现多返回值</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">calculate</span>(<span class="params">v1</span>: <span class="type">Int</span>, <span class="params">v2</span>: <span class="type">Int</span>) -&gt; (sum: <span class="type">Int</span>, difference: <span class="type">Int</span>, average: <span class="type">Int</span>) &#123; </span><br><span class="line">    <span class="keyword">let</span> sum <span class="operator">=</span> v1 <span class="operator">+</span> v2</span><br><span class="line">    <span class="keyword">return</span> (sum, v1 <span class="operator">-</span> v2, sum <span class="operator">&gt;&gt;</span> <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result <span class="operator">=</span> calculate(v1: <span class="number">20</span>, v2: <span class="number">10</span>) </span><br><span class="line">result.sum <span class="comment">// 30</span></span><br><span class="line">result.difference <span class="comment">// 10 </span></span><br><span class="line">result.average <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><h3 id="函数的文档注释"><a href="#函数的文档注释" class="headerlink" title="函数的文档注释"></a>函数的文档注释</h3><p><a href="https://swift.org/documentation/api-design-guidelines/">参考官方文档</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 求和【概述】 </span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// 将2个整数相加【更详细的描述】 </span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameter v1: 第1个整数</span></span><br><span class="line"><span class="comment">/// - Parameter v2: 第2个整数</span></span><br><span class="line"><span class="comment">/// - Returns: 2个整数的和 </span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Note:传入2个整数即可【批注】</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="params">v1</span>: <span class="type">Int</span>, <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    v1 <span class="operator">+</span> v2 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数标签-Argument-Label"><a href="#参数标签-Argument-Label" class="headerlink" title="参数标签(Argument Label)"></a>参数标签(Argument Label)</h3><p><strong>可以修改参数标签</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">goToWork</span>(<span class="params">at</span> <span class="params">time</span>: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;this time is <span class="subst">\(time)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">goToWork(at: <span class="string">&quot;08:00&quot;</span>)</span><br><span class="line"><span class="comment">// this time is 08:00</span></span><br></pre></td></tr></table></figure><p><strong>可以使用下划线_ 省略参数标签</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; </span><br><span class="line">    v1 <span class="operator">+</span> v2</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><h3 id="默认参数值-Default-Parameter-Value"><a href="#默认参数值-Default-Parameter-Value" class="headerlink" title="默认参数值(Default Parameter Value)"></a>默认参数值(Default Parameter Value)</h3><p><strong>参数可以有默认值</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">check</span>(<span class="params">name</span>: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;nobody&quot;</span>, <span class="params">age</span>: <span class="type">Int</span>, <span class="params">job</span>: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;none&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;name=<span class="subst">\(name)</span>, age=<span class="subst">\(age)</span>, job=<span class="subst">\(job)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">check(name: <span class="string">&quot;Jack&quot;</span>, age: <span class="number">20</span>, job: <span class="string">&quot;Doctor&quot;</span>) <span class="comment">// name=Jack, age=20, job=Doctor</span></span><br><span class="line">check(name: <span class="string">&quot;Rose&quot;</span>, age: <span class="number">18</span>) <span class="comment">// name=Rose, age=18, job=none</span></span><br><span class="line">check(age: <span class="number">10</span>, job: <span class="string">&quot;Batman&quot;</span>) <span class="comment">// name=nobody, age=10, job=Batman</span></span><br><span class="line">check(age: <span class="number">15</span>) <span class="comment">// name=nobody, age=15, job=none</span></span><br></pre></td></tr></table></figure><p><strong>C++的默认参数值有个限制:必须从右往左设置。由于Swift拥有参数标签，因此并没有此类限制<br>但是在省略参数标签时，需要特别注意，避免出错</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的middle不可以省略参数标签</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>(<span class="keyword">_</span> <span class="params">first</span>: <span class="type">Int</span> <span class="operator">=</span> <span class="number">10</span>, <span class="params">middle</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">last</span>: <span class="type">Int</span> <span class="operator">=</span> <span class="number">30</span>) &#123; &#125; test(middle: <span class="number">20</span>)</span><br></pre></td></tr></table></figure><h3 id="可变参数-Variadic-Parameter"><a href="#可变参数-Variadic-Parameter" class="headerlink" title="可变参数(Variadic Parameter)"></a>可变参数(Variadic Parameter)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="keyword">_</span> <span class="params">numbers</span>: <span class="type">Int</span>...) -&gt; <span class="type">Int</span> &#123; </span><br><span class="line">    <span class="keyword">var</span> total <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers &#123;</span><br><span class="line">        total <span class="operator">+=</span> number</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><p><strong>一个函数最多只能有1个可变参数</strong><br><strong>紧跟在可变参数后面的参数不能省略参数标签</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数string不能省略标签</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>(<span class="keyword">_</span> <span class="params">numbers</span>: <span class="type">Int</span>..., <span class="params">string</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">other</span>: <span class="type">String</span>) &#123; &#125;</span><br><span class="line">test(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, string: <span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Rose&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Swift自带的print函数"><a href="#Swift自带的print函数" class="headerlink" title="Swift自带的print函数"></a>Swift自带的print函数</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///     - items: Zero or more items to print.</span></span><br><span class="line"><span class="comment">///     - separator: A string to print between each item. The default is a single space (`&quot; &quot;`). </span></span><br><span class="line"><span class="comment">///     - terminator: The string to print after all items have been printed. The</span></span><br><span class="line"><span class="comment">///       default is a newline (`&quot;\n&quot;`).</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">print</span>(<span class="keyword">_</span> <span class="params">items</span>: <span class="keyword">Any</span><span class="operator">...</span>, <span class="params">separator</span>: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot; &quot;</span>, <span class="params">terminator</span>: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;<span class="subst">\n</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">// 1 2 3 4 5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, separator: <span class="string">&quot;_&quot;</span>) <span class="comment">// 1_2_3_4_5</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is Jake.&quot;</span>, terminator: <span class="string">&quot;&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My age is 18.&quot;</span>)</span><br><span class="line"><span class="comment">// My name is Jake.My age is 18.</span></span><br></pre></td></tr></table></figure><h3 id="输入输出参数-In-Out-Parameter"><a href="#输入输出参数-In-Out-Parameter" class="headerlink" title="输入输出参数(In-Out Parameter)"></a>输入输出参数(In-Out Parameter)</h3><p><strong>可以用inout定义一个输入输出参数:可以在函数内部修改外部实参的值</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">swapValues</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="keyword">inout</span> <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="keyword">inout</span> <span class="type">Int</span>) &#123; </span><br><span class="line">    <span class="keyword">let</span> tmp <span class="operator">=</span> v1</span><br><span class="line">    v1 <span class="operator">=</span> v2</span><br><span class="line">    v2 <span class="operator">=</span> tmp </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num1 <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> num2 <span class="operator">=</span> <span class="number">20</span></span><br><span class="line">swapValues(<span class="operator">&amp;</span>num1, <span class="operator">&amp;</span>num2)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">swapValues</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="keyword">inout</span> <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="keyword">inout</span> <span class="type">Int</span>) &#123; </span><br><span class="line">    (v1, v2) <span class="operator">=</span> (v2, v1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可变参数不能标记为inout<br>inout参数不能有默认值<br>inout参数只能传入可以被多次赋值的<br>inout参数的本质是地址传递(引用传递)</p></blockquote><h3 id="函数重载-Function-Overload"><a href="#函数重载-Function-Overload" class="headerlink" title="函数重载(Function Overload)"></a>函数重载(Function Overload)</h3><ul><li>规则<ul><li>函数名相同</li><li>参数个数不同 || 参数类型不同 || 参数标签不同</li></ul></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="params">v1</span>: <span class="type">Int</span>, <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; </span><br><span class="line">    v1 <span class="operator">+</span> v2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="params">v1</span>: <span class="type">Int</span>, <span class="params">v2</span>: <span class="type">Int</span>, <span class="params">v3</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; </span><br><span class="line">    v1 <span class="operator">+</span> v2 <span class="operator">+</span> v3</span><br><span class="line">&#125; <span class="comment">// 参数个数不同</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="params">v1</span>: <span class="type">Double</span>, <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    v1 <span class="operator">+</span> <span class="type">Double</span>(v2) &#125; <span class="comment">// 参数类型不同</span></span><br><span class="line">&#125; <span class="comment">// 参数类型不同</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; </span><br><span class="line">    v1 <span class="operator">+</span> v2</span><br><span class="line">&#125; <span class="comment">//https://cdn.rencheng.cc/blog</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="params">a</span>: <span class="type">Int</span>, <span class="params">b</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    a<span class="operator">+</span>b</span><br><span class="line">&#125; <span class="comment">// 参数标签不同</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum(v1: <span class="number">10</span>, v2: <span class="number">20</span>) <span class="comment">// 30 </span></span><br><span class="line">sum(v1: <span class="number">10</span>, v2: <span class="number">20</span>, v3: <span class="number">30</span>) <span class="comment">// 60 </span></span><br><span class="line">sum(v1: <span class="number">10</span>, v2: <span class="number">20.0</span>) <span class="comment">// 30.0 </span></span><br><span class="line">sum(v1: <span class="number">10.0</span>, v2: <span class="number">20</span>) <span class="comment">// 30.0 </span></span><br><span class="line">sum(<span class="number">10</span>, <span class="number">20</span>) <span class="comment">// 30</span></span><br><span class="line">sum(a: <span class="number">10</span>, b: <span class="number">20</span>) <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p><strong>返回值类型与函数重载无关</strong><br><img src="https://cdn.rencheng.cc/blog/g2c1n.png"><br><strong>默认参数值和函数重载一起使用产生二义性时，编译器并不会报错(在C++中会报错)</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="params">v1</span>: <span class="type">Int</span>, <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; </span><br><span class="line">    v1 <span class="operator">+</span> v2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="params">v1</span>: <span class="type">Int</span>, <span class="params">v2</span>: <span class="type">Int</span>, <span class="params">v3</span>: <span class="type">Int</span> <span class="operator">=</span> <span class="number">10</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    v1 <span class="operator">+</span> v2 <span class="operator">+</span> v3 </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 会调用sum(v1: Int, v2: Int) </span></span><br><span class="line">sum(v1: <span class="number">10</span>, v2: <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><strong>可变参数、省略参数标签、函数重载一起使用产生二义性时，编译器有可能会报错</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="params">v1</span>: <span class="type">Int</span>, <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; </span><br><span class="line">    v1 <span class="operator">+</span> v2</span><br><span class="line">&#125;</span><br><span class="line">https:<span class="comment">//cdn.rencheng.cc/blog</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    v1 <span class="operator">+</span> v2 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="keyword">_</span> <span class="params">numbers</span>: <span class="type">Int</span>...) -&gt; <span class="type">Int</span> &#123; <span class="keyword">var</span> total <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers &#123;</span><br><span class="line">        total <span class="operator">+=</span> number</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// error: ambiguous use of &#x27;sum&#x27;</span></span><br><span class="line">sum(<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><p><img src="https://cdn.rencheng.cc/blog/i1pnj.png"></p><ul><li><p>如果开启了编译器优化(Release模式默认会开启优化)，编译器会自动将某些函数变成内联函数 p将函数调用展开成函数体</p></li><li><p>哪些函数不会被自动内联? </p><ul><li>函数体比较长 </li><li>包含递归调用 </li><li>包含动态派发</li></ul></li></ul><p><strong>@inline</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 永远不会被内联(即使开启了编译器优化) </span></span><br><span class="line"><span class="meta">@inline</span>(never) <span class="keyword">func</span> <span class="title function_">test</span>() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启编译器优化后，即使代码很长，也会被内联(递归调用函数、动态派发的函数除外) </span></span><br><span class="line"><span class="meta">@inline</span>(__always) <span class="keyword">func</span> <span class="title function_">test</span>() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在Release模式下，编译器已经开启优化，会自动决定哪些函数需要内联，因此没必要使用@inline</p></blockquote><h3 id="函数类型-Function-Type"><a href="#函数类型-Function-Type" class="headerlink" title="函数类型(Function Type)"></a>函数类型(Function Type)</h3><p><strong>每一个函数都是有类型的，函数类型由形式参数类型、返回值类型组成</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>() &#123; &#125; <span class="comment">// () -&gt; Void 或者 () -&gt; ()</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="params">a</span>: <span class="type">Int</span>, <span class="params">b</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; </span><br><span class="line">    a<span class="operator">+</span>b</span><br><span class="line">&#125; <span class="comment">// (Int, Int) -&gt; Int</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义变量</span></span><br><span class="line"><span class="keyword">var</span> fn: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="operator">=</span> sum </span><br><span class="line">fn(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 5，调用时不需要参数标签</span></span><br></pre></td></tr></table></figure><p><strong>函数类型作为函数参数</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="params">v1</span>: <span class="type">Int</span>, <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; </span><br><span class="line">    v1 <span class="operator">+</span> v2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">difference</span>(<span class="params">v1</span>: <span class="type">Int</span>, <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    v1 <span class="operator">-</span> v2 </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">printResult</span>(<span class="keyword">_</span> <span class="params">mathFn</span>: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">a</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">b</span>: <span class="type">Int</span>) &#123; </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Result: <span class="subst">\(mathFn(a, b))</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">printResult(sum, <span class="number">5</span>, <span class="number">2</span>) <span class="comment">// Result: 7</span></span><br><span class="line">printResult(difference, <span class="number">5</span>, <span class="number">2</span>) <span class="comment">// Result: 3</span></span><br></pre></td></tr></table></figure><p><strong>函数类型作为函数返回值</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">next</span>(<span class="keyword">_</span> <span class="params">input</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; </span><br><span class="line">    input <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">previous</span>(<span class="keyword">_</span> <span class="params">input</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    input <span class="operator">-</span> <span class="number">1</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">forward</span>(<span class="keyword">_</span> <span class="params">forward</span>: <span class="type">Bool</span>) -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; </span><br><span class="line">    forward <span class="operator">?</span> next : previous</span><br><span class="line">&#125;</span><br><span class="line">forward(<span class="literal">true</span>)(<span class="number">3</span>) <span class="comment">// 4</span></span><br><span class="line">forward(<span class="literal">false</span>)(<span class="number">3</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值是函数类型的函数，叫做高阶函数(Higher-Order Function)</p></blockquote><h3 id="函数别名（typealias）"><a href="#函数别名（typealias）" class="headerlink" title="函数别名（typealias）"></a>函数别名（typealias）</h3><p><strong>typealias用来给类型起别名</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">Byte</span> <span class="operator">=</span> <span class="type">Int8</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Short</span> <span class="operator">=</span> <span class="type">Int16</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Long</span> <span class="operator">=</span> <span class="type">Int64</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">Date</span> <span class="operator">=</span> (year: <span class="type">Int</span>, month: <span class="type">Int</span>, day: <span class="type">Int</span>) <span class="keyword">func</span> <span class="title function_">test</span>(<span class="keyword">_</span> <span class="params">date</span>: <span class="type">Date</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(date.<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(date.year) </span><br><span class="line">&#125;</span><br><span class="line">test((<span class="number">2011</span>, <span class="number">9</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><p><strong>按照Swift标准库的定义，Void就是空元组()</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Void</span> <span class="operator">=</span> ()</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">IntFn</span> <span class="operator">=</span> (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">difference</span>(<span class="params">v1</span>: <span class="type">Int</span>, <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; </span><br><span class="line">    v1 <span class="operator">-</span> v2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn: <span class="type">IntFn</span> <span class="operator">=</span> difference</span><br><span class="line">fn(<span class="number">20</span>, <span class="number">10</span>) <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">setFn</span>(<span class="keyword">_</span> <span class="params">fn</span>: <span class="type">IntFn</span>) &#123; &#125; setFn(difference)</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">getFn</span>() -&gt; <span class="type">IntFn</span> &#123; </span><br><span class="line">    difference </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-组件化（CocoaPods）</title>
      <link href="/2019/07/14/ios/general/%E7%BB%84%E4%BB%B6%E5%8C%96%EF%BC%88CocoaPods%EF%BC%89/"/>
      <url>/2019/07/14/ios/general/%E7%BB%84%E4%BB%B6%E5%8C%96%EF%BC%88CocoaPods%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>随着移动互联网的不断发展，很多程序代码量和业务越来越多，现有架构已经不适合公司业务的发展速度了，很多都面临着重构的问题。<br>在公司项目开发中，如果项目比较小，普通的单工程+MVC架构就可以满足大多数需求了。但是像淘宝、蘑菇街、微信这样的大型项目，原有的单工程架构就不足以满足架构需求了。</p><span id="more"></span><h2 id="组件化简介"><a href="#组件化简介" class="headerlink" title="组件化简介"></a>组件化简介</h2><p>将一个工程分解为各个组件，然后按照某种方式任意组织成为一一个拥有完整业务逻辑的工程。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>组件的独立性</li><li>资源重用</li><li>高效迭代</li><li>配合我们二进制，加快项目的编译速度</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>增加开发人员的学习成本</li><li>增加了代码的冗余，组件化颗粒度越细，中间代码越多</li><li>增加了项目的复杂度，复杂度越高越容易出问题</li></ol><h3 id="组建划分"><a href="#组建划分" class="headerlink" title="组建划分"></a>组建划分</h3><ol><li><p><strong>基础组件</strong><br>基础配置(宏，常量)，分类， 网络(AFNetworking, SDWebImage二次封装)、工具类(日期时间的处理，文件处理，设备处理)</p></li><li><p><strong>功能组件</strong><br>控件(弹幕，轮播器，选项卡);功能(断点续传，音频处理)</p></li><li><p><strong>业务组件</strong><br>业务线一，业务线二。</p></li></ol><h2 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h2><p>多人协作的项目工程中，独立的代码模块划分的重要性是毋庸置疑的。而CocoaPods是一个iOS的包管理第三方工具(类似的概念)，它可以方便的帮助我们管理代码模块。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>一般情况下，下面这条命令就能安装最新的cocoapods到本地。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure><p><strong>然而有时候也会由于以下几个问题导致安装失败:</strong></p><ul><li>gem版本太旧</li><li>gem源访问不到</li><li>ruby环境问题</li></ul><p>具体问题还得再去发动Google大法找一找如何解决。</p><h4 id="更新gem版本和替换gem源"><a href="#更新gem版本和替换gem源" class="headerlink" title="更新gem版本和替换gem源"></a>更新gem版本和替换gem源</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem update --system # 这里请翻墙一下</span><br><span class="line">gem -v</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span><br><span class="line">gem sources -l</span><br><span class="line">https://gems.ruby-china.com</span><br><span class="line"># 确保只有 gems.ruby-china.com</span><br></pre></td></tr></table></figure><h4 id="更换Ruby环境"><a href="#更换Ruby环境" class="headerlink" title="更换Ruby环境"></a>更换Ruby环境</h4><p>由于MacOS系统自带了一个Ruby环境，但是usr&#x2F;bin的访问权限可能会导致一些问题，最好还是使用Homebrew安装一个ruby。</p><p>使用brew install ruby装好Ruby后记得给Shell配一下环境变量如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;/usr/local/lib/ruby/gems/2.5.0/bin:/usr/local/opt/ruby/bin:/usr/local/bin:$PATH&quot;</span><br></pre></td></tr></table></figure><h2 id="本地pod库"><a href="#本地pod库" class="headerlink" title="本地pod库"></a>本地pod库</h2><h3 id="pod的原理"><a href="#pod的原理" class="headerlink" title="pod的原理"></a>pod的原理</h3><p>CocoaPods的工作主要是通过ProjectName.xcworkspace来组织的，在打开ProjectName.xcworkspace文件后，发现Xcode会多出一个Pods工程。</p><ol><li>库文件引入及配置：<br>库文件的引入主要由Pods工程中的Pods-ProjectName-frameworks.sh脚本负责，在每次编译的时候，该脚本会帮你把预引入的所有三方库文件打包的成ProjectName.a静态库文件，放在我们原Xcode工程中Framework文件夹下，供工程使用。<br>如果Podfile使用了use_frameworks!,这是生成的是.framework的动态库文件。引入方式也略有不同。</li><li>Resource文件：<br>Resource资源文件主要由Pods工程中的Pods-ProjectName-resources.sh脚本负责，在每次编译的时候，该脚本会帮你将所有三方库的Resource文件copy到目标目录中。</li><li>依赖参数设置：<br>在Pods工程中的的每个库文件都有一个相应的SDKName.xcconfig，在编译时，CocoaPods就是通过这些文件来设置所有的依赖参数的，编译后，在主工程的Pods文件夹下会生成两个配置文件，Pods-ProjectName.debug.xcconfig、Pods-ProjectName.release.xcconfig。</li></ol><h3 id="创建本地pod库"><a href="#创建本地pod库" class="headerlink" title="创建本地pod库"></a>创建本地pod库</h3><p><strong>1.创建一个本地Demo工程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib create RCDownloader</span><br></pre></td></tr></table></figure><p><strong>2.填入询问的问题，填完之后会自动打开一个Demo工程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">What platform do you want to use?? [ iOS / macOS ]</span><br><span class="line"> &gt; iOS</span><br><span class="line">What language do you want to use?? [ Swift / ObjC ]</span><br><span class="line"> &gt; Objc</span><br><span class="line">Would you like to include a demo application with your library? [ Yes / No ]</span><br><span class="line"> &gt; Yes</span><br><span class="line">Which testing frameworks will you use? [ Specta / Kiwi / None ]</span><br><span class="line"> &gt; None</span><br><span class="line">Would you like to do view based testing? [ Yes / No ]</span><br><span class="line"> &gt; No</span><br><span class="line">What is your class prefix?</span><br><span class="line"> &gt; RC</span><br></pre></td></tr></table></figure><p><strong>3.找到<code>Pod工程</code>下面有一个<code>Development Pods</code>文件夹下面的<code>工程名</code>下面的<code>ReplaceMe.m</code>文件</strong></p><p><strong>4.右键<code>ReplaceMe.m</code>文件，<code>Show in Finder</code>到Finder文件夹，把我们封装的<code>.h和.m文件</code>替换掉<code>ReplaceMe.m</code></strong></p><p><strong>5.将替换进来的文件，拖拽到工程刚刚<code>ReplaceMe.m</code>所在的文件夹，然后全选Target</strong></p><p><strong>6.<code>主工程</code>下面有一个<code>Example for &lt;classname&gt;</code>文件夹，这个文件夹是用来调试的类库</strong></p><p><strong>7.在我们需要引入该Pod库的工程的<code>Podfile</code>文件中加入<code>pod &#39;RCDownloader&#39;, :path =&gt; &#39;可以是绝对路径/相对路径&#39;</code></strong></p><p><strong>8.执行<code>pod install</code></strong></p><p><strong>注意：</strong><br>如果我们的Pod有需要依赖的Framework，那么就打开组建工程的spec文件，里面有配置framework的地方。</p><h2 id="远程pod库"><a href="#远程pod库" class="headerlink" title="远程pod库"></a>远程pod库</h2><h3 id="创建远程索引库"><a href="#创建远程索引库" class="headerlink" title="创建远程索引库"></a>创建远程索引库</h3><p><strong>1.打开<a href="https://gitee.com/">码云</a>(<del>他家私有库不要钱，github私有库要钱</del>)</strong></p><p><strong>2.创建一个项目：名称是<code>RCSpecs</code>，私有的Objc</strong></p><p><strong>3.添加本地索引库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo add RCSpecs https://gitee.com/****/RCSpecs.git</span><br></pre></td></tr></table></figure><p><strong>4.查看本地索引库列表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo</span><br></pre></td></tr></table></figure><p><strong>5.将本地Pod库关联本地索引库</strong><br>1.在码云上再创建一个项目名称是<code>RCDownloader</code>私有的<br>2.终端切换到RCDownloader工程根目录<br>3.提交代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;初始化工程&quot;</span><br><span class="line">git remote add origin https://gitee.com/****/RCDownloader.git</span><br><span class="line">git push origin master -f</span><br></pre></td></tr></table></figure><p>4.修改本地spec文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.homepage         = &#x27;https://gitee.com/htyh_manito_rencheng11/RCDownloader&#x27;</span><br><span class="line">s.source           = &#123; :git =&gt; &#x27;https://gitee.com/******/RCDownloader.git&#x27;, :tag =&gt; s.version.to_s &#125;</span><br></pre></td></tr></table></figure><p>5.打 tag 0.1.0（跟s.version保持一致）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag 0.1.0</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p>6.将修改的spec文件上传到远程仓库</p><figure class="highlight plaintext"><figcaption><span>add .</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;修改spec&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>7.验证spec文件(警告可以忽略)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint</span><br></pre></td></tr></table></figure><p>8.上传RCDownloader.spec到远程索引库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo push RCSpecs RCDownloader.podspec --allow-warnings</span><br></pre></td></tr></table></figure><p>9.Podfile文件中增加source</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source &#x27;https://gitee.com/htyh_manito_rencheng11/RCSpecs.git&#x27;</span><br><span class="line">source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br></pre></td></tr></table></figure><p>10.pod install引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 这么写可以每次获取最新版本</span><br><span class="line">pod RCDownloader, :git=&gt;&#x27;http://*****/RCDownloader.git&#x27;</span><br><span class="line">pod install</span><br></pre></td></tr></table></figure><h2 id="清除Pod缓存"><a href="#清除Pod缓存" class="headerlink" title="清除Pod缓存"></a>清除Pod缓存</h2><ol><li>移除项目目录 Pods 文件下的 <code>xxx</code>。</li><li>删除 <code>CocoaPods</code> 目录缓存, 找到 <code>~/Library/Caches/CocoaPods/Pods/Release</code>, 删除此目录。</li><li>点击<code>Xcode -&gt; Preferences -&gt; Locations -&gt; Derived Data</code> 点击下方的右箭头跳转到相应目, 删除此目录即可。</li><li>项目根目录执行<code>pod repo update</code>。</li><li>项目根目录执行<code>pod install</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 组件化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac-软件推荐</title>
      <link href="/2019/07/14/recommend/mac-%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
      <url>/2019/07/14/recommend/mac-%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<p>Mac软件推荐（iOS开发+服务器运维+常用软件）（包含下载地址）</p><span id="more"></span><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><table><thead><tr><th align="left">名称</th><th align="left">描述</th><th align="left">下载地址</th></tr></thead><tbody><tr><td align="left">sip</td><td align="left">颜色提取器</td><td align="left"><a href="https://object.rencheng.cc/software/mac/Sip.zip">博主</a></td></tr><tr><td align="left">Apple Configurator 2</td><td align="left">AppStore中ipa包获取工具</td><td align="left"><a href="https://itunes.apple.com/cn/app/apple-configurator-2/id1037126344?mt=12&ign-mpt=uo=8">AppStore</a></td></tr><tr><td align="left">Assets提取工具</td><td align="left">提取ipa包中的图片</td><td align="left"><a href="https://object.rencheng.cc/software/mac/Assets%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7.zip">博主</a></td></tr><tr><td align="left">Prepo</td><td align="left">AppIcon 生成工具</td><td align="left"><a href="https://itunes.apple.com/cn/app/p.m.-prepo-free/id476533227?mt=12">AppStore</a></td></tr><tr><td align="left">Asset Catalog Creator Pro</td><td align="left">AppIcon&#x2F;LaunchImage生成工具</td><td align="left"><a href="https://apps.apple.com/cn/app/asset-catalog-creator-free/id866571115?mt=12">AppStore</a></td></tr><tr><td align="left">HandShaker</td><td align="left">安卓手机管理器</td><td align="left"><a href="https://apps.apple.com/cn/app/handshaker-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/id1012930195?mt=12">AppStore</a></td></tr></tbody></table><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><table><thead><tr><th align="left">名称</th><th align="left">描述</th><th align="left">下载地址</th></tr></thead><tbody><tr><td align="left">FileZilla</td><td align="left">ftp、sftp连接客户端</td><td align="left"><a href="https://object.rencheng.cc/software/mac/FileZilla_3.28.0_macosx-x86.app.tar.bz2">博主</a></td></tr><tr><td align="left">Microsoft Remote Desktop</td><td align="left">windows server连接工具</td><td align="left"><a href="https://object.rencheng.cc/software/mac/MicrosoftRemoteDesktop.dmg">博主</a></td></tr><tr><td align="left">parallels clientwindows</td><td align="left">server 连接工具</td><td align="left"><a href="https://itunes.apple.com/cn/app/parallels-client/id600925318?mt=12">AppStore</a></td></tr><tr><td align="left">ShellCraft</td><td align="left">ssh连接管理器</td><td align="left"><a href="https://object.rencheng.cc/software/mac/ShellCraft%20for%20MAC1.0.8.dmg">博主</a></td></tr><tr><td align="left">SocketTool</td><td align="left">socket调试工具</td><td align="left"><a href="https://object.rencheng.cc/software/mac/SocketTool.zip">博主</a></td></tr><tr><td align="left">Sequel Pro</td><td align="left">MySQL连接工具</td><td align="left"><a href="http://www.sequelpro.com/">官方</a> <a href="https://object.rencheng.cc/software/mac/sequel-pro-1.1.2.dmg">博主</a></td></tr><tr><td align="left">Medis</td><td align="left">Redis连接工具</td><td align="left"><a href="https://itunes.apple.com/cn/app/medis-gui-for-redis/id1063631769?mt=12">AppStore</a> <a href="https://object.rencheng.cc/software/mac/Medis.zip">博主</a></td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th align="left">名称</th><th align="left">描述</th><th align="left">下载地址</th></tr></thead><tbody><tr><td align="left">MWeb</td><td align="left">Markdown编辑工具</td><td align="left"><a href="https://object.rencheng.cc/software/mac/MWeb_3.1.8_uswd.dmg">博主</a></td></tr><tr><td align="left">OmniGraffle</td><td align="left">画图</td><td align="left"><a href="https://object.rencheng.cc/software/mac/macOmniGraffle-7.17.5.dmg">博主</a></td></tr><tr><td align="left">CleanMyMac X</td><td align="left">空间清理工具</td><td align="left"><a href="https://macpaw.com/cleanmymac">官方</a> <a href="https://object.rencheng.cc/software/mac/CleanMyMac_X_4.6.1%E4%B8%AD%E6%96%87%E7%A0%B4%E8%A7%A3%E7%89%88.dmg">博主</a></td></tr><tr><td align="left">zoom.us</td><td align="left">屏幕共享软件</td><td align="left"><a href="https://zoom.us/download#client_4meeting">官方</a> <a href="https://object.rencheng.cc/software/mac/Zoom.pkg">博主</a></td></tr><tr><td align="left">VirtualBox</td><td align="left">虚拟机</td><td align="left"><a href="https://www.virtualbox.org/wiki/Downloads">官方</a></td></tr><tr><td align="left">VLC</td><td align="left">流媒体播放软件</td><td align="left"><a href="https://object.rencheng.cc/software/mac/vlc-mac-2.2.8.dmg">博主</a></td></tr><tr><td align="left">Shadowsocks</td><td align="left">VPN</td><td align="left"><a href="https://object.rencheng.cc/software/mac/ShadowsocksX-NG-R8.zip">博主</a></td></tr><tr><td align="left">ClashX</td><td align="left">VPN</td><td align="left"><a href="https://object.rencheng.cc/software/mac/ClashX.dmg">博主</a></td></tr><tr><td align="left">Realm Browser</td><td align="left">Realm数据库查看</td><td align="left"><a href="https://itunes.apple.com/cn/app/realm-browser/id1007457278?mt=12">AppStore</a></td></tr><tr><td align="left">OBS</td><td align="left">音视频推流工具</td><td align="left"><a href="https://obsproject.com/">官方</a></td></tr><tr><td align="left">Charles</td><td align="left">抓包工具</td><td align="left"><a href="https://www.charlesproxy.com/download/">官方</a> <a href="https://www.zzzmode.com/mytools/charles/">破解工具</a></td></tr><tr><td align="left">java-抓包</td><td align="left">抓包工具</td><td align="left"><a href="https://object.rencheng.cc/software/mac/java-%E6%8A%93%E5%8C%85.zip">博主</a></td></tr><tr><td align="left">jmeter</td><td align="left">性能测试工具</td><td align="left"><a href="https://object.rencheng.cc/software/mac/apache-jmeter-3.3.zip">博主</a></td></tr><tr><td align="left">AirServer</td><td align="left">镜像服务</td><td align="left"><a href="https://object.rencheng.cc/software/mac/AirServer_7.2.0.dmg">博主</a></td></tr><tr><td align="left">Xmind2020</td><td align="left">思维导图</td><td align="left"><a href="https://object.rencheng.cc/software/mac/XMind2020_10.1.3.zip">博主</a></td></tr><tr><td align="left">jetbrains2020.2激活</td><td align="left">激活工具</td><td align="left"><a href="https://object.rencheng.cc/software/mac/jetbrains2020.2%E6%BF%80%E6%B4%BB.zip">博主</a></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-屏幕尺寸</title>
      <link href="/2019/07/14/ios/general/%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8/"/>
      <url>/2019/07/14/ios/general/%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8/</url>
      
        <content type="html"><![CDATA[<p>在苹果推出iPhoneX后，可以说苹果的机型有很多了，显示屏的大小和形状也变得各式各样。<br>iPhone各型号物理分辨率和逻辑分辨率列举</p><span id="more"></span><table><thead><tr><th align="left">设备</th><th align="left">尺寸</th><th align="left">逻辑分辨率</th><th align="left">Scale</th><th align="left">设备分辨率</th><th align="left">PPI</th></tr></thead><tbody><tr><td align="left">3GS</td><td align="left">3.5</td><td align="left">320x480</td><td align="left">@1x</td><td align="left">320x480</td><td align="left">163</td></tr><tr><td align="left">4s</td><td align="left">3.5</td><td align="left">320x480</td><td align="left">@2x</td><td align="left">640x960</td><td align="left">326</td></tr><tr><td align="left">5&#x2F;5c&#x2F;5s&#x2F;SE</td><td align="left">4</td><td align="left">320x568</td><td align="left">@2x</td><td align="left">640x1136</td><td align="left">326</td></tr><tr><td align="left">6&#x2F;6s&#x2F;7&#x2F;8&#x2F;SE2</td><td align="left">4.7</td><td align="left">375x667</td><td align="left">@2x</td><td align="left">750x1334</td><td align="left">326</td></tr><tr><td align="left">6&#x2F;6s&#x2F;7&#x2F;8 Plus</td><td align="left">5.5</td><td align="left">414x736</td><td align="left">@3x</td><td align="left">1242x2208</td><td align="left">401</td></tr><tr><td align="left">X&#x2F;Xs&#x2F;11 Pro</td><td align="left">5.8</td><td align="left">375x812</td><td align="left">@3x</td><td align="left">1125x2436</td><td align="left">458</td></tr><tr><td align="left">Xs Max&#x2F;11 Pro Max</td><td align="left">6.5</td><td align="left">414x896</td><td align="left">@3x</td><td align="left">1242×2688</td><td align="left">458</td></tr><tr><td align="left">XR&#x2F;11</td><td align="left">6.1</td><td align="left">414x896</td><td align="left">@2x</td><td align="left">828×1792</td><td align="left">326</td></tr><tr><td align="left">12 Mini</td><td align="left">5.4</td><td align="left">375x812</td><td align="left">@3x</td><td align="left">1080×2340</td><td align="left">476</td></tr><tr><td align="left">12&#x2F;12 Pro</td><td align="left">6.1</td><td align="left">390x844</td><td align="left">@3x</td><td align="left">1170×2532</td><td align="left">460</td></tr><tr><td align="left">12 Pro Max</td><td align="left">6.7</td><td align="left">428x926</td><td align="left">@3x</td><td align="left">1284×2778</td><td align="left">458</td></tr></tbody></table><p><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/#Device%20Screen%20Sizes%20and%20Orientations">https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/#Device%20Screen%20Sizes%20and%20Orientations</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-增加时序图</title>
      <link href="/2019/07/14/hexo/%E5%A2%9E%E5%8A%A0%E6%97%B6%E5%BA%8F%E5%9B%BE/"/>
      <url>/2019/07/14/hexo/%E5%A2%9E%E5%8A%A0%E6%97%B6%E5%BA%8F%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>hexo默认是不支持UML时序图的，但是官方网站上提供了一个插件让我们支持时序图</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://github.com/bubkoo/hexo-filter-sequence">hexo-filter-sequence</a> 插件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-filter-sequence</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>站点配置文件 _config.yml 中增加如下配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sequence:</span><br><span class="line">  webfont: https://cdn.bootcss.com/webfont/1.6.28/webfontloader.js</span><br><span class="line">  raphael: https://cdn.bootcss.com/raphael/2.2.7/raphael.min.js</span><br><span class="line">  underscore: https://cdn.bootcss.com/underscore.js/1.8.3/underscore-min.js</span><br><span class="line">  sequence: https://cdn.bootcss.com/js-sequence-diagrams/1.0.6/sequence-diagram-min.js</span><br><span class="line">  css: # optional, the url for css, such as hand drawn theme </span><br><span class="line">  options: </span><br><span class="line">    theme: simple</span><br><span class="line">    css_class:</span><br></pre></td></tr></table></figure><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>源码修改后才能正常使用，进入插件目录作如下修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// index.js</span><br><span class="line">var assign = require(&#x27;deep-assign&#x27;);</span><br><span class="line">var renderer = require(&#x27;./lib/renderer&#x27;);</span><br><span class="line">hexo.config.sequence = assign(&#123;</span><br><span class="line">  webfont: &#x27;https://cdn.bootcss.com/webfont/1.6.28/webfontloader.js&#x27;,</span><br><span class="line">  raphael: &#x27;https://cdn.bootcss.com/raphael/2.2.7/raphael.min.js&#x27;,</span><br><span class="line">  underscore: &#x27;https://cdn.bootcss.com/underscore.js/1.8.3/underscore-min.js&#x27;,</span><br><span class="line">  sequence: &#x27;https://cdn.bootcss.com/js-sequence-diagrams/1.0.6/sequence-diagram-min.js&#x27;,</span><br><span class="line">  css: &#x27;&#x27;,</span><br><span class="line">  options: &#123;</span><br><span class="line">    theme: &#x27;simple&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, hexo.config.sequence);</span><br><span class="line">hexo.extend.filter.register(&#x27;before_post_render&#x27;, renderer.render, 9);</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>新建文章，增加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><p>效果如下：<br>Alice-&gt;Bob: Hello Bob, how are you?<br>Note right of Bob: Bob thinks<br>Bob–&gt;Alice: I am good thanks!</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-高精度定时器</title>
      <link href="/2019/07/14/ios/objc/iOS-%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
      <url>/2019/07/14/ios/objc/iOS-%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>苹果上面的App一般都是不允许在后台运行的，比如说定时器计时，当用户切换到后台，定时器就被被挂起，等回到App之后，才会Resume。</p><span id="more"></span><h2 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h2><p>在实际开发过程中，我们经常遇到定时器NSTimer不准确的情况。比如</p><pre><code>1. 滑动视图的时候，NSTimer干脆就不走了；2. 两台设备同样倒计时300，有的设备走得快，有的设备走得慢，如果是抢购商品，这个不准确就很扯皮了；</code></pre><p>解决方案：</p><pre><code>1. 可以通过切换runloop的模式来处理2. 更换计时方案</code></pre><h2 id="NSTimer为什么不准"><a href="#NSTimer为什么不准" class="headerlink" title="NSTimer为什么不准"></a>NSTimer为什么不准</h2><p>NSTimer受runloop的影响，由于runloop需要处理很多任务，导致NSTimer的精度降低</p><h2 id="dispatch-source-t-（高精度定时器）"><a href="#dispatch-source-t-（高精度定时器）" class="headerlink" title="dispatch_source_t （高精度定时器）"></a>dispatch_source_t （高精度定时器）</h2><p><strong>简述</strong>：GCD 比 NSTimer 更准的定时器<br><strong>优点</strong>：精度很高，系统自动触发，系统级别</p><p><strong>注意</strong>：dispatch_source_t在后台可以走，但是在一段时间（30s或3min）后，程序也会被挂起，这个时候dispatch_source_t还是不准，所以我们要给程序开一个后台任务，让程序在后台能夺走一会儿</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">// 宏定义 @weakify是YYKit提供的</span><br><span class="line">#ifndef WEAK_SELF</span><br><span class="line">#define WEAK_SELF @weakify(self)</span><br><span class="line">#define STRONG_SELF @strongify(self)</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">@interface classname ()</span><br><span class="line">// 定义属性</span><br><span class="line">@property (nonatomic, strong) dispatch_source_t timer;    //!&lt; 定时器</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pragma mark - 开始定时器</span><br><span class="line">- (void)startTime &#123;</span><br><span class="line">    dispatch_resume(self.timer);</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - 关闭定时器</span><br><span class="line">- (void)closeTime &#123;</span><br><span class="line">    dispatch_source_cancel(_timer);</span><br><span class="line">    dispatch_source_set_cancel_handler(_timer, ^&#123;</span><br><span class="line">        self-&gt;_timer = nil;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 懒加载</span><br><span class="line">- (dispatch_source_t)timer &#123;</span><br><span class="line">    if (!_timer) &#123;</span><br><span class="line">        WEAK_SELF</span><br><span class="line">        _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, dispatch_get_main_queue());</span><br><span class="line">        dispatch_source_set_timer(_timer, dispatch_walltime(NULL, 0), 1.0 * NSEC_PER_SEC, 0);</span><br><span class="line">        dispatch_source_set_event_handler(_timer, ^&#123;</span><br><span class="line">            STRONG_SELF</span><br><span class="line">            if (!self) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            if (self.lessSecond &lt; 0) &#123;</span><br><span class="line">                dispatch_source_cancel(self-&gt;_timer);</span><br><span class="line">                [self showTimeOutAlertController];</span><br><span class="line">                [(AppDelegate *)[UIApplication sharedApplication].delegate endBackgroundTask];</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                NSInteger min = self.lessSecond / 60;</span><br><span class="line">                NSInteger second = self.lessSecond % 60;</span><br><span class="line">                NSString *title = [NSString stringWithFormat:@&quot;%02ld:%02ld&quot;, min, second];</span><br><span class="line">                NSLog(@&quot;%@&quot;, title);</span><br><span class="line">                self.lessSecond--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    return _timer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@interface AppDelegate : UIResponder &lt;UIApplicationDelegate&gt;</span><br><span class="line">@property (strong</span><br><span class="line">- (void)endBackgroundTask;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">@interface AppDelegate ()</span><br><span class="line">@property (nonatomic, assign) UIBackgroundTaskIdentifier backgroundTaskIdentifier;  //!&lt; 后台任务标识</span><br><span class="line">@property (nonatomic, strong) NSTimer *backgroundTimer;        //!&lt; 后台定时器</span><br><span class="line">@end</span><br><span class="line">/ 当应用程序掉到后台时，执行该方法</span><br><span class="line"></span><br><span class="line">// 当一个 iOS 应用被送到后台,它的主线程会被暂停。你用 NSThread 的 detachNewThreadSelector:toTar get:withObject:类方法创建的线程也被挂起了。</span><br><span class="line">// 如果你想在后台完成一个长期任务,就必须调用 UIApplication 的 beginBackgroundTaskWithExpirationHandler:实例方法,来向 iOS 借点时间。</span><br><span class="line">// 默认情况下，如果在这个期限内,长期任务没有被完成,iOS 将终止程序。</span><br><span class="line">// 怎么办？可以使用 beginBackgroundTaskWithExpirationHandler:实例方法,来向 iOS 再借点时间。</span><br><span class="line">- (void)applicationDidEnterBackground:(UIApplication *)application &#123;    </span><br><span class="line">    // 使用这个方法来释放公共的资源、存储用户数据、停止我们定义的定时器（timers）、并且存储在程序终止前的相关信息。</span><br><span class="line">    // 如果，我们的应用程序提供了后台执行的方法，那么，在程序退出时，这个方法将代替applicationWillTerminate方法的执行。</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    // 标记一个长时间运行的后台任务将开始</span><br><span class="line">    // 通过调试，发现，iOS给了我们额外的10分钟（600s）来执行这个任务。</span><br><span class="line">    self.backgroundTaskIdentifier = [application beginBackgroundTaskWithExpirationHandler:^(void) &#123;</span><br><span class="line">        // 当应用程序留给后台的时间快要到结束时（应用程序留给后台执行的时间是有限的）， 这个Block块将被执行</span><br><span class="line">        // 我们需要在次Block块中执行一些清理工作。</span><br><span class="line">        // 如果清理工作失败了，那么将导致程序挂掉</span><br><span class="line">        </span><br><span class="line">        // 清理工作需要在主线程中用同步的方式来进行</span><br><span class="line">        [self endBackgroundTask];</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    // 模拟一个Long-Running Task</span><br><span class="line">    self.backgroundTimer = [NSTimer scheduledTimerWithTimeInterval:1.0f</span><br><span class="line">                                                            target:self</span><br><span class="line">                                                          selector:@selector(timerMethod:)</span><br><span class="line">                                                          userInfo:nil</span><br><span class="line">                                                           repeats:YES];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)endBackgroundTask &#123;</span><br><span class="line">    dispatch_queue_t mainQueue = dispatch_get_main_queue();</span><br><span class="line">    AppDelegate *weakSelf = self;</span><br><span class="line">    dispatch_async(mainQueue, ^(void) &#123;</span><br><span class="line">        AppDelegate *strongSelf = weakSelf;</span><br><span class="line">        if (strongSelf != nil) &#123;</span><br><span class="line">            [strongSelf.backgroundTimer invalidate];// 停止定时器</span><br><span class="line">            self-&gt;_backgroundTimer = nil;// 停止定时器</span><br><span class="line">            // 每个对 beginBackgroundTaskWithExpirationHandler:方法的调用,必须要相应的调用 endBackgroundTask:方法。这样，来告诉应用程序你已经执行完成了。</span><br><span class="line">            // 也就是说,我们向 iOS 要更多时间来完成一个任务,那么我们必须告诉 iOS 你什么时候能完成那个任务。</span><br><span class="line">            // 也就是要告诉应用程序：“好借好还”嘛。</span><br><span class="line">            // 标记指定的后台任务完成</span><br><span class="line">            [[UIApplication sharedApplication] endBackgroundTask:self.backgroundTaskIdentifier];</span><br><span class="line">            // 销毁后台任务标识符</span><br><span class="line">            strongSelf.backgroundTaskIdentifier = UIBackgroundTaskInvalid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 模拟的一个 Long-Running Task 方法</span><br><span class="line">- (void)timerMethod:(NSTimer *)paramSender &#123;</span><br><span class="line">    // backgroundTimeRemaining 属性包含了程序留给的我们的时间</span><br><span class="line">    NSTimeInterval backgroundTimeRemaining =[[UIApplication sharedApplication] backgroundTimeRemaining];</span><br><span class="line">    if (backgroundTimeRemaining == DBL_MAX) &#123;</span><br><span class="line">        NSLog(@&quot;Background Time Remaining = Undetermined&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        NSLog(@&quot;Background Time Remaining = %.02f Seconds&quot;, backgroundTimeRemaining);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-网络编程（一）</title>
      <link href="/2019/07/14/python/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B02/"/>
      <url>/2019/07/14/python/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B02/</url>
      
        <content type="html"><![CDATA[<p>基于Python语言的网络编程，主要是socket网络通信</p><span id="more"></span><p>socket网络通信</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用于网络计算机通信的一种接口</span><br><span class="line">利用socket在系统软件级实现数据收发处理</span><br><span class="line">最早由加州大学伯克利分校开发</span><br><span class="line">是目前互联网通信的基础、标准</span><br><span class="line">计算机双方要进行通信，必须创建socket</span><br></pre></td></tr></table></figure><h3 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h3><ol><li><p>服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建(socket)</span><br><span class="line">绑定地址(bind)</span><br><span class="line">监听(listen)</span><br><span class="line">接受(accept)</span><br><span class="line">接收数据(recv)</span><br><span class="line">发送数据(send)</span><br><span class="line">关闭连接(close)</span><br></pre></td></tr></table></figure></li><li><p>客户端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建(socket)</span><br><span class="line">连接服务器(connect)</span><br><span class="line">发送数据(send)</span><br><span class="line">接收数据(recv)</span><br><span class="line">关闭连接(close)</span><br></pre></td></tr></table></figure></li></ol><h3 id="套接字类型"><a href="#套接字类型" class="headerlink" title="套接字类型"></a>套接字类型</h3><ol><li><p>流式套接字(SOCK_STREAM)：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">面向连接、可靠传输、数据无差错的收发序列</span><br><span class="line">提供流量控制功能</span><br><span class="line">数据被看做字节流，长度无限制，多个数据包的数据持续流入</span><br></pre></td></tr></table></figure></li><li><p>数据报套接字(SOCK_DGRAM)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">面向无连接、不可靠传输，数据可能丢失、错误、重发</span><br><span class="line">数据构成一个一个独立的数据报，每次一次发送就是一个数据报</span><br></pre></td></tr></table></figure></li></ol><h3 id="Socket方法"><a href="#Socket方法" class="headerlink" title="Socket方法"></a>Socket方法</h3><ol><li><p>创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">socket.socket(socket_family = AF_INET,  socket_type = SOCK_STREAM, proto = 0)</span><br><span class="line">参数：socket_family  地址族类型, 默认填写AF_INET</span><br><span class="line">     socket_type    套接字类型</span><br><span class="line">     SOCK_STREAM    流式套接字</span><br><span class="line">     SOCK_DGRAM     数据报套接字</span><br><span class="line">     proto          子协议类型，默认填写0</span><br></pre></td></tr></table></figure></li><li><p>绑定：绑定IP地址和端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">socket.bind(address)</span><br><span class="line">参数：address   地址，元组类型; 第一个值为IP，第二个值为端口</span><br></pre></td></tr></table></figure></li><li><p>监听：使服务器可以接收连接请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">socket.listen(backlog)</span><br><span class="line">参数： backlog     未接收连接请求个数; 超过该值，则会拒绝后面的请求</span><br></pre></td></tr></table></figure></li><li><p>接受连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connfd,addr = sockfd.accept()</span><br><span class="line">功能：阻塞，等待客户端连接请求; </span><br><span class="line">如果有新的连接，则返回; </span><br><span class="line">返回值为一个新的socket(用于数据通信)和客户端地址</span><br></pre></td></tr></table></figure></li><li><p>接收数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = connfd.recv(buffersize)</span><br><span class="line">功能 ： 流式套接字接收消息</span><br><span class="line">参数 ： 一次最多接收多大的消息  字节</span><br><span class="line">返回值 ： 返回接收到的内容</span><br><span class="line">          如果对方关闭或发送完成，则返回空串</span><br></pre></td></tr></table></figure></li><li><p>发送数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = connfd.send(data)</span><br><span class="line">功能 ： 流式套接字发送消息</span><br><span class="line">参数 ： 要发送的内容  要求bytes格式</span><br><span class="line">返回值 ： 返回实际发送的字节数</span><br></pre></td></tr></table></figure></li><li><p>关闭套接字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sockfd.close（）</span><br><span class="line">功能：关闭套接字 tcp套接字连接断开</span><br></pre></td></tr></table></figure></li><li><p>请求连接(只能在客户端调用)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sockfd.connect(addr)</span><br><span class="line">功能: 连接服务端套接字</span><br><span class="line">参数: addr  服务端地址</span><br></pre></td></tr></table></figure></li></ol><h3 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h3><h4 id="简单交互"><a href="#简单交互" class="headerlink" title="简单交互"></a>简单交互</h4><h5 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">address = (&quot;127.0.0.1&quot;, 9999)</span><br><span class="line"></span><br><span class="line">svr = socket.socket()</span><br><span class="line">svr.bind(address)</span><br><span class="line">svr.listen(10)</span><br><span class="line">print(&quot;服务器已启动：&quot;, address)</span><br><span class="line"></span><br><span class="line">sockfd, addr = svr.accept()</span><br><span class="line">print(&quot;收到客户端请求：&quot;, addr)</span><br><span class="line"></span><br><span class="line">data = sockfd.recv(1024)</span><br><span class="line">print(data.decode())</span><br><span class="line"></span><br><span class="line">sockfd.close()</span><br><span class="line">svr.close()</span><br></pre></td></tr></table></figure><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">address = (&quot;127.0.0.1&quot;, 9999)</span><br><span class="line"></span><br><span class="line">client = socket.socket()</span><br><span class="line">client.connect(address)</span><br><span class="line">print(&quot;连接服务器成功&quot;)</span><br><span class="line"></span><br><span class="line">msg = &quot;This is test msg&quot;</span><br><span class="line">client.send(msg.encode())</span><br><span class="line"></span><br><span class="line">print(&quot;发送消息：&quot;,msg)</span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><h4 id="循环接收"><a href="#循环接收" class="headerlink" title="循环接收"></a>循环接收</h4><h5 id="服务器-1"><a href="#服务器-1" class="headerlink" title="服务器"></a>服务器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">address = (&quot;127.0.0.1&quot;, 9999)</span><br><span class="line">svr = socket.socket()</span><br><span class="line">svr.bind(address)</span><br><span class="line">svr.listen(10)</span><br><span class="line">print(&quot;服务器已启动：&quot;, address) </span><br><span class="line">sockfd, addr = svr.accept()</span><br><span class="line">print(&quot;收到客户端请求：&quot;, addr)</span><br><span class="line">while True:</span><br><span class="line">data = sockfd.recv(1024)</span><br><span class="line">if data == &quot;&quot;: </span><br><span class="line">sockfd.close()</span><br><span class="line">print(data.decode())</span><br><span class="line">svr.close()</span><br></pre></td></tr></table></figure><h5 id="循环客户端"><a href="#循环客户端" class="headerlink" title="循环客户端"></a>循环客户端</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">address = (&quot;127.0.0.1&quot;, 9999)</span><br><span class="line">client = socket.socket()</span><br><span class="line">client.connect(address)</span><br><span class="line">print(&quot;连接服务器成功&quot;)</span><br><span class="line">while True:</span><br><span class="line">msg = input(&quot;请输入要发送的消息:&quot;)</span><br><span class="line">if msg == &quot;q&quot; or msg == &quot;Q&quot;:</span><br><span class="line">break</span><br><span class="line">client.send(msg.encode()) </span><br><span class="line">print(&quot;发送消息：&quot;,msg)</span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程基础篇</title>
      <link href="/2019/07/14/python/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01/"/>
      <url>/2019/07/14/python/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01/</url>
      
        <content type="html"><![CDATA[<p>本片文章主要讲述网络的基本概念。<br>将多个节点通过特定的介质联系起来的一种关系。<br>以计算设备作为节点，通信线路作为介质的网络。</p><span id="more"></span><h2 id="网络的概念"><a href="#网络的概念" class="headerlink" title="网络的概念"></a>网络的概念</h2><ul><li>什么是网络：将多个节点通过特定的介质联系起来的一种关系<br>  例如：铁路网、交通网、人际关系网</li><li>计算机网络：以计算设备作为节点，通信线路作为介质的网络</li><li>英特网：把许多网络连到一起的网络</li><li>网络起源于美苏冷战，最初是美国国防部高级研究计划局的一个项目，后来转为民用</li></ul><h2 id="网络功能"><a href="#网络功能" class="headerlink" title="网络功能"></a>网络功能</h2><ul><li>数据与信息的传输</li><li>实现资源共享</li><li>打破时空限制，优化资源配置</li></ul><h2 id="网络分类"><a href="#网络分类" class="headerlink" title="网络分类"></a>网络分类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">局域网、城域网、广域网</span><br></pre></td></tr></table></figure><h2 id="网络性能衡量指标"><a href="#网络性能衡量指标" class="headerlink" title="网络性能衡量指标"></a>网络性能衡量指标</h2><ul><li>带宽：通信信道支持的最高数据频率(Mb&#x2F;s, kb&#x2F;s, Gb&#x2F;s)</li><li>传输速率：每秒传输多少个bit数据</li><li>吞吐量：单位时间内通过某个网络的数据量</li><li>时延：<ul><li>传输时延：发送数据时候，到完成发送</li><li>传播时延：电磁波、电信号传输需花费的时间</li><li>处理时延：网络数据交换节点存储、转发所必需的处理时间</li><li>排队时延：网络节点队列分组、排队所经历的时间</li></ul></li></ul><h2 id="常用概念"><a href="#常用概念" class="headerlink" title="常用概念"></a>常用概念</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">客户端：请求服务的一方</span><br><span class="line">服务器：提供服务的一方</span><br><span class="line">通信：数据传输过程</span><br><span class="line">协议：数据组织、编码、传输、校验、解码的规则</span><br></pre></td></tr></table></figure><h2 id="网络通信要解决的几个问题"><a href="#网络通信要解决的几个问题" class="headerlink" title="网络通信要解决的几个问题"></a>网络通信要解决的几个问题</h2><table><thead><tr><th>客户端</th><th>服务器</th></tr></thead><tbody><tr><td><strong>如何找到对方</strong></br>查阅地址(DNS)</td><td><strong>如何让对方联系自己</strong></br>公布自己的网络地址</td></tr><tr><td><strong>如何联系对方</strong></br>主动敲门(发起网络连接)</td><td><strong>如何让对方联系自己</strong></br>开门迎客(监听、接收连接)</td></tr><tr><td><strong>如何正确传输数据</strong></br>通信协议</td><td><strong>如何正确传输数据</strong></br>通信协议</br></td></tr><tr><td><strong>如何让对方理解自己的意思</strong></br>应用协议</td><td><strong>如何让对方理解自己的意思</strong></br>应用协议</td></tr><tr><td><strong>如何结束对话</strong></br>关闭连接</td><td><strong>如何结束对话</strong></br>释放资源</td></tr></tbody></table><pre><code>      </code></pre><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">生活中的协议：汽车转向灯、交通信号灯</span><br><span class="line">协议是一组规则，数据组织、发送、传输、解析的规则</span><br><span class="line">协议由第三方机构事先指定，或通信双方约定</span><br><span class="line">协议需要通信各方共同遵守，否则就无法完成正常通信</span><br></pre></td></tr></table></figure><h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><p>OSI&#x2F;ISO七层模型 –&gt; 网络通信标准化流程<br>ISO(国际标准化组织)<br>OSI(开放系统互联模型)</p><h3 id="OSI七层模型如下"><a href="#OSI七层模型如下" class="headerlink" title="OSI七层模型如下"></a>OSI七层模型如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">应用层 : 提供用户服务,具体功能有程序体现</span><br><span class="line">表示层 : 数据的压缩优化和加密</span><br><span class="line">会话层 : 建立应用连接,选择合适的传输服务</span><br><span class="line">传输层 : 提供传输服务,进行流量控制</span><br><span class="line">网络层 : 路由选择,网络互连</span><br><span class="line">链路层 : 进行数据交换,控制具体消息收发,链路连接</span><br><span class="line">物理层 : 提供物理硬件传输,网卡,接口设置,传输介质</span><br></pre></td></tr></table></figure><h3 id="OSI七层模型优势"><a href="#OSI七层模型优势" class="headerlink" title="OSI七层模型优势:"></a>OSI七层模型优势:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">建立了统一的网络工作流程 </span><br><span class="line">每个层次功能清晰,各司其职</span><br><span class="line">降低了耦合度,方便了开发流程</span><br></pre></td></tr></table></figure><h4 id="分层原则"><a href="#分层原则" class="headerlink" title="分层原则:"></a>分层原则:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">高内聚: 模块功能尽可能单一,不要相互掺杂</span><br><span class="line">低耦合: 模块之间的关联影响尽可能少</span><br></pre></td></tr></table></figure><h3 id="四层模型-TCP-IP模型"><a href="#四层模型-TCP-IP模型" class="headerlink" title="四层模型 (TCP&#x2F;IP模型)"></a>四层模型 (TCP&#x2F;IP模型)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">应用层   传输层  网络层  物理链路层</span><br></pre></td></tr></table></figure><blockquote><p>将应用层,表示层,会话层统一为应用层,便于开发实践</p></blockquote><h3 id="五层模型"><a href="#五层模型" class="headerlink" title="五层模型"></a>五层模型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">应用层   传输层  网络层  链路层  物理层</span><br></pre></td></tr></table></figure><h2 id="数据的传输流程"><a href="#数据的传输流程" class="headerlink" title="数据的传输流程"></a>数据的传输流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">发送端由应用层逐层根据协议添加首部信息,最终在物理层实现发送</span><br><span class="line">发送的消息经过中间多个节点转发到达目标主机</span><br><span class="line">目标主机根据协议逐层解析首部,最终到达应用层获取数据</span><br></pre></td></tr></table></figure><h3 id="消息发送的流程"><a href="#消息发送的流程" class="headerlink" title="消息发送的流程"></a>消息发送的流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">封装：每个层次接收上层传递的数据，加入本层的控制信息，传递给下一层</span><br><span class="line">解封：每个层次接收下层传来的数据，读取并去掉控制信息，将数据送给上一层处理</span><br></pre></td></tr></table></figure><h3 id="数据包如何寻找路径"><a href="#数据包如何寻找路径" class="headerlink" title="数据包如何寻找路径"></a>数据包如何寻找路径</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">网络节点分配一个IP地址（全世界独一无二的）</span><br><span class="line">数据包中，包含了数据的源地址、目标地址</span><br><span class="line">根据路由表中记录的路径信息，将数据投递给下一站，循环直至数据送达对方</span><br></pre></td></tr></table></figure><h2 id="网络地址表示方式"><a href="#网络地址表示方式" class="headerlink" title="网络地址表示方式"></a>网络地址表示方式</h2><p><strong>网络主机</strong>:  在网络中标识一台主机的标志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">本地使用 : &#x27;localhost&#x27; </span><br><span class="line"> &#x27;127.0.0.1&#x27;</span><br><span class="line"></span><br><span class="line">网络使用 : &#x27;192.168.56.131&#x27;</span><br><span class="line"> &#x27;0.0.0.0&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>ifconfig : 查看本地网络信息 (Unix, Linux)<br>ipconfig : 查看本地网络信息 (Windows) </p></blockquote><p><strong>IP地址</strong> : 在网络上查找一台主机的网络位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">IPv4 : 点分十进制 192.168.1.2   每部分取值:0--255</span><br><span class="line"></span><br><span class="line">IPv6 : 扩充地址的范围</span><br><span class="line"></span><br><span class="line">ping [ip] : 网络连接测试</span><br><span class="line"></span><br><span class="line">特殊IP</span><br><span class="line">   127.0.0.1  本机测试IP</span><br><span class="line">   0.0.0.0  本机自动获取能够使用的网卡IP</span><br><span class="line">   192.168.1.0  表达一个网段</span><br><span class="line">   192.168.1.1  表示网关地址</span><br><span class="line">   192.168.1.255  广播地址</span><br></pre></td></tr></table></figure><p><strong>域名</strong> : 网络服务器的别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方便记忆,表达一定的含义</span><br></pre></td></tr></table></figure><p><strong>端口号</strong> port</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">端口号是网络地址的一部分,用于区分主机上不同的网络应用</span><br><span class="line"></span><br><span class="line">在一个系统中应用监听的端口不重复</span><br><span class="line"></span><br><span class="line">取值范围:</span><br><span class="line">        1 -- 65535</span><br><span class="line">        1 -- 255  一些众所周知的公共程序端口</span><br><span class="line">        256 -- 1023  系统应用端口</span><br><span class="line">        1024 -- 65535  自用端口</span><br></pre></td></tr></table></figure><p><strong>网络字节序</strong> : 网络上数据传输的排列方式</p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><h3 id="面向连接的传输服务"><a href="#面向连接的传输服务" class="headerlink" title="面向连接的传输服务"></a>面向连接的传输服务</h3><p>基于TCP协议的数据传输</p><h4 id="传输特征"><a href="#传输特征" class="headerlink" title="传输特征 :"></a>传输特征 :</h4><p>提供可靠的数据传输,可靠性指的是传输。过程中无丢失,无失序,无差错,无重复</p><h4 id="实现手段"><a href="#实现手段" class="headerlink" title="实现手段"></a>实现手段</h4><p>在通信前需要建立通信连接，通信结束需要断开连接。</p><h4 id="连接过程-三次握手"><a href="#连接过程-三次握手" class="headerlink" title="连接过程 (三次握手)"></a>连接过程 (三次握手)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 客户端向服务端发起连接请求</span><br><span class="line">2. 服务端收到客户端请求报文(消息序列号),回复报文    消息表示可以连接</span><br><span class="line">3. 客户端收到服务端回复,再从发送报文最终建立连接</span><br></pre></td></tr></table></figure><h4 id="连接断开-四次挥手"><a href="#连接断开-四次挥手" class="headerlink" title="连接断开 (四次挥手)"></a>连接断开 (四次挥手)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 主动方发送报文提出断开连接</span><br><span class="line">2. 被动方接收到断开请求,立即返回消息表示开始准备    断开</span><br><span class="line">3. 被动方处理消息完毕,完成断开准备,再次发送报文    表示可以断开</span><br><span class="line">4. 主动方收到断开指令,发送报文最终确认断开</span><br></pre></td></tr></table></figure><h4 id="适用情况"><a href="#适用情况" class="headerlink" title="适用情况"></a>适用情况</h4><p>对数据传输有准确性的要求,传输文件较大;<br>需要确保传输可靠性。比如 : 网页获取,文件下载,邮件收发</p><h3 id="面向无连接的传输服务"><a href="#面向无连接的传输服务" class="headerlink" title="面向无连接的传输服务"></a>面向无连接的传输服务</h3><p>基于UDP协议的传输</p><h4 id="传输特征-1"><a href="#传输特征-1" class="headerlink" title="传输特征"></a>传输特征</h4><p>不保证传输的可靠性,数据传输不需要提前           建立连接</p><h4 id="适用情况-1"><a href="#适用情况-1" class="headerlink" title="适用情况"></a>适用情况</h4><p>网络情况较差,对传输可靠性要求不高。比如:网络视频,群聊,广播</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-教程01</title>
      <link href="/2019/07/02/mysql/%E6%95%99%E7%A8%8B01/"/>
      <url>/2019/07/02/mysql/%E6%95%99%E7%A8%8B01/</url>
      
        <content type="html"><![CDATA[<p>数据库软件：一个软件,看的见,可操作,实现数据库的逻辑功能<br>数据库：是一种逻辑概念,用来存放数据的仓库,侧重存储<br>数据仓库：从数据量上来说,比数据库庞大的多,主要用于数据分析和</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">存储数据的仓库</span><br></pre></td></tr></table></figure><h3 id="都有哪些公司在用数据库"><a href="#都有哪些公司在用数据库" class="headerlink" title="都有哪些公司在用数据库"></a>都有哪些公司在用数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">金融机构、游戏网站、购物网站、论坛网站 ... ...</span><br></pre></td></tr></table></figure><h3 id="提供数据库服务的软件"><a href="#提供数据库服务的软件" class="headerlink" title="提供数据库服务的软件"></a>提供数据库服务的软件</h3><ol><li>软件分类</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL、Oracle、SQL_Server、DB2、MongoDB、MariaDB </span><br></pre></td></tr></table></figure><ol start="2"><li>生产环境中,如何选择使用哪个数据库软件<ol><li><p>是否开源</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  1. 开源软件：MySQL、Mariadb、MongoDB</span><br><span class="line">2. 商业软件：Oracle、DB2、SQL_Server</span><br></pre></td></tr></table></figure></li><li><p>是否跨平台<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 不跨平台 ：SQL_Server</span><br><span class="line">2. 跨平台 ：...</span><br></pre></td></tr></table></figure></p></li><li><p>公司的类型<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 商业软件 ：政府部门、金融机构</span><br><span class="line">2. 开源软件 ：游戏网站、购物网站、论坛网站 ..</span><br></pre></td></tr></table></figure></p></li></ol></li></ol><h3 id="MySQL的特点"><a href="#MySQL的特点" class="headerlink" title="MySQL的特点"></a>MySQL的特点</h3><h4 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h4><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 数据是以行和列(表格)的形式去存储的</span><br><span class="line">2. 表中的每一行叫一条记录,每一列叫一个字段</span><br><span class="line">3. 表和表之间的逻辑关联叫关系</span><br></pre></td></tr></table></figure>**示例**<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">关系型数据库存储</span><br><span class="line"></span><br><span class="line">表1、学生信息表</span><br><span class="line"> 姓名   年龄  班级</span><br><span class="line"> 星矢    25   三班</span><br><span class="line"> 水冰月  25   六班</span><br><span class="line"></span><br><span class="line">表2、班级信息表</span><br><span class="line"> 班级   班主任</span><br><span class="line"> 三班   大空翼</span><br><span class="line"> 六班   松人</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 非关系型数据库中存储</span><br><span class="line"> </span><br><span class="line"> &#123;&quot;姓名&quot;:&quot;水冰月&quot;,&quot;年龄&quot;:25,&quot;班级&quot;:&quot;六班&quot;&#125;</span><br><span class="line">&#123;&quot;姓名&quot;:&quot;星矢&quot;,&quot;年龄&quot;:25,&quot;班级&quot;:&quot;三班&quot;,&quot;班主任&quot;:&quot;大空翼&quot;&#125;</span><br></pre></td></tr></table></figure>  </code></pre><h5 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以在Unix、Linux、Windows上运行数据库服务</span><br></pre></td></tr></table></figure><h5 id="支持多种编程语言"><a href="#支持多种编程语言" class="headerlink" title="支持多种编程语言"></a>支持多种编程语言</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python、java、php ... ...</span><br></pre></td></tr></table></figure><h4 id="数据库软件、数据库、数据仓库的概念"><a href="#数据库软件、数据库、数据仓库的概念" class="headerlink" title="数据库软件、数据库、数据仓库的概念"></a>数据库软件、数据库、数据仓库的概念</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 数据库软件</span><br><span class="line">    一个软件,看的见,可操作,实现数据库的逻辑功能</span><br><span class="line">2. 数据库</span><br><span class="line">      是一种逻辑概念,用来存放数据的仓库,侧重存储</span><br><span class="line">3. 数据仓库</span><br><span class="line">    从数据量上来说,比数据库庞大的多,主要用于数据分析和数据挖掘</span><br></pre></td></tr></table></figure><h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><h3 id="Ubuntu安装软件"><a href="#Ubuntu安装软件" class="headerlink" title="Ubuntu安装软件"></a>Ubuntu安装软件</h3><ol><li><p>更新apt-get</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>把本地已安装软件与刚下载的软件列表进行对比,如果发现已安装软件版本低,则更新</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></li><li><p>修复依赖关系</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -f install</span><br></pre></td></tr></table></figure><blockquote><p>访问源列表中的每个网址,读取软件列表,保存到本地<br><code>/var/lib/apt/lists/</code></p></blockquote></li></ol><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><ol><li>下载MySQL安装包(windows)<br>   mysql-installer<em><strong>5.7.</strong></em>.msi</li><li>安装教程去安装</li></ol><h3 id="Mac安装"><a href="#Mac安装" class="headerlink" title="Mac安装"></a>Mac安装</h3><ol><li>cd</li><li>vi .bash_profile<br>添加 ：PATH&#x3D;”$PATH”:&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin</li><li>source .bash_profile</li></ol><h2 id="启动和连接MySQL服务"><a href="#启动和连接MySQL服务" class="headerlink" title="启动和连接MySQL服务"></a>启动和连接MySQL服务</h2><ol><li><p>服务端启动</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看MySQL状态</span><br><span class="line">sudo /etc/init.d/mysql status</span><br><span class="line">启动，停止，重启</span><br><span class="line">sudo /etc/init.d/mysql start | stop | restart</span><br></pre></td></tr></table></figure></li><li><p>客户端连接</p><ol><li>命令格式</li></ol> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -h主机地址 -u用户名 -p密码</span><br><span class="line">mysql -hlocalhost -uroot -p123456</span><br></pre></td></tr></table></figure><p> 2、本地连接可省略 -h 选项<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure></p></li></ol><h2 id="基本SQL命令"><a href="#基本SQL命令" class="headerlink" title="基本SQL命令"></a>基本SQL命令</h2><h3 id="SQL命令的使用规则"><a href="#SQL命令的使用规则" class="headerlink" title="SQL命令的使用规则"></a>SQL命令的使用规则</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、每条命令必须以 ; 结尾</span><br><span class="line">2、SQL命令不区分字母大小写</span><br><span class="line">3、使用 \c 来终止当前命令的执行</span><br></pre></td></tr></table></figure><h3 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h3><h4 id="库的基本操作"><a href="#库的基本操作" class="headerlink" title="库的基本操作"></a>库的基本操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、查看已有库</span><br><span class="line">show databases;</span><br><span class="line">2、创建库(指定字符集)</span><br><span class="line">create database 库名 [character set utf8];</span><br><span class="line">3、查看创建库的语句(字符集)</span><br><span class="line">show create database 库名;</span><br><span class="line">4、查看当前所在库</span><br><span class="line">select database();</span><br><span class="line">5、切换库</span><br><span class="line">use 库名;</span><br><span class="line">6、查看库中已有表</span><br><span class="line">show tables;</span><br><span class="line">7、删除库</span><br><span class="line">drop database 库名;</span><br></pre></td></tr></table></figure><h4 id="库名的命名规则"><a href="#库名的命名规则" class="headerlink" title="库名的命名规则"></a>库名的命名规则</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、数字、字母、下划线,但不能使用纯数字</span><br><span class="line">2、库名区分字母大小写</span><br><span class="line">3、不能使用特殊字符和mysql关键字</span><br></pre></td></tr></table></figure><h3 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h3><h4 id="表的基本操作"><a href="#表的基本操作" class="headerlink" title="表的基本操作"></a>表的基本操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1、创建表(指定字符集)</span><br><span class="line">create table 表名(</span><br><span class="line">   字段名 数据类型,</span><br><span class="line">   字段名 数据类型,</span><br><span class="line">   ...</span><br><span class="line">   字段名 数据类型</span><br><span class="line">);</span><br><span class="line">2、查看已有表的字符集</span><br><span class="line">show create table 表名;</span><br><span class="line">3、查看表结构</span><br><span class="line">desc 表名;</span><br><span class="line">4、删除表</span><br><span class="line">drop table 表名;</span><br></pre></td></tr></table></figure><blockquote><p>1、所有的数据都是以文件的形式存放在数据库目录下<br>    2、数据库目录 ：&#x2F;var&#x2F;lib&#x2F;mysql</p></blockquote><h4 id="表记录管理"><a href="#表记录管理" class="headerlink" title="表记录管理"></a>表记录管理</h4><ol><li>插入(insert)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、insert into 表名 values(值1),(值2),...;</span><br><span class="line">2、insert into 表名(字段1,...) values(值1),...;</span><br></pre></td></tr></table></figure><ol start="2"><li>查询(select)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、select * from 表名 [where 条件];</span><br><span class="line">2、select 字段1,字段名2 from 表名 [where 条件];</span><br></pre></td></tr></table></figure><h2 id="如何更改默认字符集"><a href="#如何更改默认字符集" class="headerlink" title="如何更改默认字符集"></a>如何更改默认字符集</h2><p>方法(通过更改MySQL配置文件实现)<br>步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、获取root权限</span><br><span class="line">sudo -i</span><br><span class="line">2、cd /etc/mysql/mysql.conf.d/</span><br><span class="line">3、备份 ：cp mysqld.cnf mysqld.cnf.bak</span><br><span class="line">4、vim mysqld.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">character_set_server = utf8</span><br><span class="line">5、重启mysql服务</span><br><span class="line">/etc/init.d/mysql restart</span><br></pre></td></tr></table></figure><p>mac上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">配置文件路径</span><br><span class="line">/etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">character_set_server = utf8</span><br></pre></td></tr></table></figure><h2 id="客户端把数据存储到数据库服务器上的过程"><a href="#客户端把数据存储到数据库服务器上的过程" class="headerlink" title="客户端把数据存储到数据库服务器上的过程"></a>客户端把数据存储到数据库服务器上的过程</h2><ol><li>连接到数据服务器 mysql -uroot -p123456</li><li>选择一个库  use 库名</li><li>创建表&#x2F;修改表  update 表名…</li><li>断开与数据库连接  exit; | quit; | \q;</li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><ol><li>int 大整型(4个字节)<br>取值范围 ：2**32 - 1(42亿多)</li><li>tinyint 微小整型(1个字节)<ol><li>有符号(signed默认) : -128 ~ 127</li><li>无符号(unsigned) : 0 ~ 255<br>   age tinyint unsigned,</li></ol></li><li>smallint 小整型(2个字节)</li><li>bigint 极大整型(8个字节)</li></ol><h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><ol><li>float(4个字节,最多显示7个有效位)<br>字段名 float(m,n)  m-&gt;总位数 n-&gt;小数位位数<br>   float(5,2)取值范围？ -999.99 ~ 999.99</li><li>decimal(最多显示28个有效位)<br> 1、decimal(m,n)<br> 2、存储空间(整数、小数分开存储)<br>   规则：将9的倍数包装成4个字节</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">余数    字节</span><br><span class="line">  0       0</span><br><span class="line"> 1-2      1</span><br><span class="line"> 3-4      2</span><br><span class="line"> 5-6      3</span><br><span class="line"> 7-9      4</span><br><span class="line"></span><br><span class="line">示例：decimal(19,9)</span><br><span class="line">整数部分：10/9=商1余1 4字节+1字节=5字节</span><br><span class="line">小数部分：9/9=商1余0 4字节+0字节=4字节</span><br><span class="line">占：9字节</span><br></pre></td></tr></table></figure><h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><ol><li>char(定长)<br>取值范围：1~255;浪费存储空间,性能高</li><li>varchar(变长)<br>取值范围：1~65535;节省存储空间,性能低</li><li>text &#x2F; longtext(4G) &#x2F; blob &#x2F; longblob(4G)</li></ol><h5 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h5><ol><li>字符类型宽度和数值类型宽度的区别</li><li>数值类型宽度为显示宽度,只用于select查询显示,和占用存储无关,可用zerofill查看效果</li><li>字符类型的宽度超过之后则无法存储</li></ol><h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h4><ol><li>单选(enum) ：字段名 enum(值1,值2,…)</li><li>多选(set)  ：字段名 set(值1,值2,…)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table t5(</span><br><span class="line">id int(3) zerofill,</span><br><span class="line">name varchar(15),</span><br><span class="line">sex enum(&quot;M&quot;,&quot;F&quot;,&quot;Secret&quot;),</span><br><span class="line">likes set(&quot;F&quot;,&quot;M&quot;,&quot;study&quot;,&quot;Python&quot;)</span><br><span class="line">);</span><br><span class="line">insert into t5(likes) values(&quot;F,study,Python&quot;);</span><br></pre></td></tr></table></figure><h4 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h4><ol><li>date ：”YYYY-MM-DD”</li><li>time ：”HH:MM:SS”</li><li>datetime ：”YYYY-MM-DD HH:MM:SS”</li><li>timestamp ：”YYYY-MM-DD HH:MM:SS”</li><li>注意<ol><li>datetime ：不给值默认返回NULL值</li><li>timestamp ：不给值默认返回系统当前时间</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table t7(</span><br><span class="line">id int,</span><br><span class="line">name varchar(15),</span><br><span class="line">birthday date,</span><br><span class="line">money int,</span><br><span class="line">shijian datetime</span><br><span class="line">);</span><br><span class="line">insert into t7 values(2,&quot;王&quot;,date(now()),10000,now());</span><br></pre></td></tr></table></figure><h5 id="日期时间函数"><a href="#日期时间函数" class="headerlink" title="日期时间函数"></a>日期时间函数</h5><ol><li><strong>now()</strong>  返回服务器当前时间</li><li><strong>curdate()</strong> 返回当前日期</li><li><strong>curtime()</strong> 返回当前时间</li><li><strong>year(date)</strong> 返回指定时间的年份</li><li><strong>date(date)</strong> 返回指定时间的日期</li><li><strong>time(date)</strong> 返回指定时间的时间</li><li>示例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1、在表中插入3条记录</span><br><span class="line">insert into t7 values</span><br><span class="line">(3,&quot;小昭&quot;,19000520,3000,20180630000000),</span><br><span class="line">(4,&quot;赵敏&quot;,19000521,4000,20180702000000),</span><br><span class="line">(5,&quot;周芷若&quot;,19010522,3500,20180702100000);</span><br><span class="line">2、查找2018年7月2日有哪些用户充值了</span><br><span class="line">   select * from t7 where date(shijian)=&quot;2018-07-02&quot;;</span><br><span class="line"></span><br><span class="line">    3、查找2018年7月份充值的信息</span><br><span class="line">      select * from t7 </span><br><span class="line">      where </span><br><span class="line">      date(shijian)&gt;=&quot;2018-07-01&quot; and date(shijian)&lt;=&quot;2018-07-31&quot;;</span><br><span class="line"></span><br><span class="line">    4、查找7月30日10:00-12:00充值的信息</span><br><span class="line">      select * from t7</span><br><span class="line">      where</span><br><span class="line">      date(shijian)=&quot;2018-07-31&quot; and </span><br><span class="line">      time(shijian)&gt;=&quot;10:00:00&quot; and </span><br><span class="line">      time(shijian)&lt;=&quot;12:00:00&quot;;</span><br></pre></td></tr></table></figure></li></ol><h5 id="日期时间运算"><a href="#日期时间运算" class="headerlink" title="日期时间运算"></a>日期时间运算</h5><ol><li>语法格式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名</span><br><span class="line">where 字段名 运算符 (时间-interval 时间间隔单位);</span><br><span class="line">    </span><br><span class="line">时间间隔单位：</span><br><span class="line">1 day | 2 hour | 1 minute | 2 year | 3 month</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、查询1天以内的记录</span><br><span class="line">  select * from t7 </span><br><span class="line">  where shijian &gt; (now()-interval 1 day);</span><br><span class="line">        age     &gt;   20</span><br><span class="line">2、查询1年以前的记录</span><br><span class="line">  select * from t7</span><br><span class="line">  where shijian &lt; (now()-interval 1 year);</span><br><span class="line">3、查询1天以前,3天以内的记录</span><br><span class="line">select * from t7</span><br><span class="line">where</span><br><span class="line">shijian &lt; (now()-interval 1 day) and</span><br><span class="line">shijian &gt; (now()-interval 3 day);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-教程02</title>
      <link href="/2019/07/02/mysql/%E6%95%99%E7%A8%8B02/"/>
      <url>/2019/07/02/mysql/%E6%95%99%E7%A8%8B02/</url>
      
        <content type="html"><![CDATA[<p>数据库软件：一个软件,看的见,可操作,实现数据库的逻辑功能<br>数据库：是一种逻辑概念,用来存放数据的仓库,侧重存储<br>数据仓库：从数据量上来说,比数据库庞大的多,主要用于数据分析和</p><span id="more"></span><h2 id="表字段的操作"><a href="#表字段的操作" class="headerlink" title="表字段的操作"></a>表字段的操作</h2><p>1、语法 ：alter table 表名 执行动作;<br>2、添加字段(add)<br>    alter table 表名 add 字段名 数据类型;<br>    alter table 表名 add 字段名 数据类型 first;<br>    alter table 表名 add 字段名 数据类型 after 字段名;<br>  3、删除字段(drop)<br>    alter table 表名 drop 字段名;<br>  4、修改数据类型(modify)<br>    alter table 表名 modify 字段名 新数据类型;<br>  5、表重命名(rename)<br>    alter table 表名 rename 新表名;<br>  6、练习<br>    1、创建库 studb2<br>    2、在库中创建表 t1 ,字段有3个：name、age、phnumber<br>      use studb2;<br>      create table t1(<br>      name char(20),<br>      age tinyint unsigned,<br>      phnumber char(11)<br>      );<br>    3、查看表结构<br>      desc t1;<br>    4、在表中第一列添加一个 id 字段<br>      alter table t1 add id int first;<br>    5、把 phnumber 的数据类型改为 bigint<br>      alter table t1 modify phnumber bigint;<br>    6、在表中最后一列添加一个字段 address<br>      alter table t1 add address varchar(50);<br>    7、删除表中的 age 字段<br>      alter table t1 drop age;<br>    8、查看表结构<br>      desc t1;</p><p>5、表记录管理<br>  1、删除表记录<br>    1、delete from 表名 where 条件;<br>    2、注意<br>      delete语句后如果不加where条件,所有记录全部清空<br>  2、更新表记录<br>    1、update 表名 set 字段1&#x3D;值1,字段2&#x3D;值2,… where 条件;<br>    2、注意<br>      必须加where条件<br>  3、练习(表hero)<br>    1、查找所有蜀国人的信息<br>      select * from hero where country&#x3D;”蜀国”;<br>    2、查找所有女英雄的姓名、性别和国家<br>      select name,sex,country from hero<br>      where sex&#x3D;”女”;<br>    3、把id为2的记录改为典韦,性别男,国家魏国<br>      update hero set name&#x3D;”典韦”,sex&#x3D;”男”,country&#x3D;”魏国” where id&#x3D;2;<br>    4、删除所有蜀国英雄<br>      delete from hero where country&#x3D;”蜀国”;<br>    5、把貂蝉的国籍改为魏国<br>      update hero set country&#x3D;”魏国”<br>      where name&#x3D;”貂蝉”;<br>    6、删除所有表记录<br>      delete from hero;<br>4、运算符操作<br>  1、数值比较&#x2F;字符比较<br>    1、数值比较 ：&#x3D; !&#x3D; &gt; &gt;&#x3D; &lt; &lt;&#x3D;<br>    2、字符比较 ：&#x3D; !&#x3D;<br>    3、练习<br>      1、查找攻击力高于150的英雄的名字和攻击值<br>        select name,gongji from sanguo where gongji&gt;150;<br>      2、将赵云的攻击力设置为360,防御力设置为68<br>        update sanguo set gongji&#x3D;360,fangyu&#x3D;68<br>        where name&#x3D;”赵云”;<br>  2、逻辑比较<br>    1、and (两个或多个条件同时成立)<br>    2、or (任意一个条件成立即可)<br>    3、练习<br>      1、找出攻击值高于200的蜀国英雄的名字、攻击力<br>        select name as n,gongji as g from sanguo<br>    where gongji&gt;200 and country&#x3D;”蜀国”;<br>      2、将吴国英雄中攻击值为110的英雄的攻击值改为100,防御力改为60<br>        update sanguo set gongji&#x3D;100,fangyu&#x3D;60<br>    where country&#x3D;”吴国” and gongji&#x3D;110;<br>      3、查找蜀国和魏国的英雄信息<br>        select * from sanguo<br>    where country&#x3D;”蜀国” or country&#x3D;”魏国”;<br>  3、范围内比较<br>    1、between 值1 and 值2<br>    2、where 字段名 in(值1,值2,…)<br>    3、where 字段名 not in(值1,值2,…)<br>    4、练习<br>      1、查找攻击值100-200的蜀国英雄信息<br>        select * from sanguo<br>    where gongji between 100 and 200 and<br>    country&#x3D;”蜀国”;<br>      2、找到蜀国和吴国以外的国家的女英雄信息<br>        select * from sanguo<br>    where country not in(“蜀国”,”吴国”)<br>    and sex&#x3D;”女”;<br>      3、找到id为1、3或5的蜀国英雄 和 貂蝉的信息<br>        select * from sanguo<br>    where<br>    (id in(1,3,5) and country&#x3D;”蜀国”) or name&#x3D;”貂蝉”;<br>  4、匹配空、非空<br>    1、空 ：where name is null<br>    2、非空:where name is not null<br>    3、示例<br>      1、姓名为NULL值的蜀国女英雄信息<br>        select * from sanguo<br>        where<br>        name is null and country&#x3D;”蜀国” and sex&#x3D;”女”;<br>      2、姓名为 “” 的英雄信息<br>        select * from sanguo where name&#x3D;””;<br>    4、注意<br>      1、NULL ：空值,只能用 is 或者 is not 去匹配<br>      2、””   ：空字符串,用 &#x3D; 或者 !&#x3D; 去匹配<br>  5、模糊比较<br>    1、where 字段名 like 表达式<br>    2、表达式<br>      1、_ : 匹配单个字符<br>      2、% : 匹配0到多个字符<br>    3、示例<br>      select name from sanguo where name like “<em>%</em>“;<br>      select name from sanguo where name like “%”;<br>        ## NULL不会被统计,只能用is、is not去匹配<br>      select name from sanguo where name like “___”;<br>      select name from sanguo where name like “赵%”;<br>5、SQL查询<br>  1、总结<br>    3、select …聚合函数 from 表名<br>    1、where …<br>    2、group by …<br>    4、having …<br>    5、order by …<br>    6、limit …;<br>  2、order by<br>    1、给查询结果进行排序<br>    2、… order by 字段名 ASC&#x2F;DESC<br>    3、升序：ASC(默认)<br>       降序：DESC<br>    4、示例<br>      1、将英雄按防御值从高到低排序</p><pre><code>  2、将蜀国英雄按攻击值从高到低排序  3、将魏蜀两国英雄中名字为三个字的按防御值升序排列    select * from sanguo     where    country in(&quot;蜀国&quot;,&quot;魏国&quot;) and name like &quot;___&quot;    order by fangyu ASC;select * from sanguo    where    (country=&quot;魏国&quot; or country=&quot;蜀国&quot;) and name like &quot;___&quot;    order by fangyu;</code></pre><p>  3、limit (永远放在SQL语句的最后写)<br>    1、作用 ：限制显示查询记录的个数<br>    2、用法<br>      1、limit n  -&gt; 显示 n 条记录<br>      2、limit m,n<br>        m 表示 从第m+1条记录开始显示,显示 n 条<br>        limit 2,3  : 第 3、4、5 三条记录<br>    3、示例<br>      1、在蜀国英雄中,查找防御值倒数第二名至倒数第四名的英雄的记录<br>        select * from sanguo<br>        where country&#x3D;”蜀国”<br>        order by fangyu asc<br>        limit 1,3;<br>      2、在蜀国英雄中,查找攻击值前3名且名字不为 NULL 的英雄的姓名、攻击值和国家<br>        select name,gongji,country from sanguo<br>        where<br>        country&#x3D;”蜀国” and name is not NULL<br>        order by gongji DESC<br>        limit 3;<br>    4、分页<br>      每页显示5条记录,显示第4页的内容</p><pre><code>  第1页 ：limit 0,5        # 1 2 3 4 5   第2页 ：limit (2-1)*5,5  # 6 7 8 9 10  第3页 ：limit (3-1)*5,5  # 11 12 13 14 15  第4页 ：limit (4-1)*5,5  # 16 17 18 19 20  每页显示n条记录,显示第m页 ：limit (m-1)*n,n</code></pre><p>  4、聚合函数<br>    1、分类<br>      avg(字段名) : 求该字段平均值<br>      sum(字段名) : 求和<br>      max(字段名) : 最大值<br>      min(字段名) : 最小值<br>      count(字段名) : 统计该字段记录的个数<br>    2、示例<br>      1、攻击力最强值是多少<br>        select max(gongji) from MOSHOU.sanguo;<br>      2、统计id 、name 两个字段分别有几条记录<br>        select count(id),count(name) from sanguo;<br>    ## 空值 NULL 不会被统计,””会被统计</p><pre><code>  3、计算蜀国英雄的总攻击力    select sum(gongji) from MOSHOU.sanguowhere country=&quot;蜀国&quot;;  4、统计蜀国英雄中攻击值大于200的英雄的数量    select count(*) from MOSHOU.sanguowhere gongji&gt;200 and country=&quot;蜀国&quot;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-数学基础</title>
      <link href="/2019/06/02/ml/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/06/02/ml/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>深度学习通常又需要哪些数学基础？深度学习里的数学到底难在哪里？通常初学者都会有这些问题，在网络推荐及书本推荐里，经常看到会列出一系列数学科目，比如微积分、线性代数、概率论、复变函数、数值计算、优化理论、信息论等等。这些数学知识有相关性，但实际上按照这样的知识范围来学习，学习成本会很久，而且会很枯燥，本章我们通过选举一些数学基础里容易混淆的一些概念做以介绍，帮助大家更好的理清这些易混淆概念之间的关系。</p><span id="more"></span><h2 id="1-1-向量和矩阵"><a href="#1-1-向量和矩阵" class="headerlink" title="1.1 向量和矩阵"></a>1.1 向量和矩阵</h2><h3 id="1-1-1-标量、向量、矩阵、张量之间的联系"><a href="#1-1-1-标量、向量、矩阵、张量之间的联系" class="headerlink" title="1.1.1 标量、向量、矩阵、张量之间的联系"></a>1.1.1 标量、向量、矩阵、张量之间的联系</h3><p><strong>标量（scalar）</strong><br>一个标量表示一个单独的数，它不同于线性代数中研究的其他大部分对象（通常是多个数的数组）。我们用斜体表示标量。标量通常被赋予小写的变量名称。 </p><p><strong>向量（vector）</strong><br>​一个向量表示一组有序排列的数。通过次序中的索引，我们可以确定每个单独的数。通常我们赋予向量粗体的小写变量名称，比如xx。向量中的元素可以通过带脚标的斜体表示。向量$X$的第一个元素是$X_1$，第二个元素是$X_2$，以此类推。我们也会注明存储在向量中的元素的类型（实数、虚数等）。</p><p><strong>矩阵（matrix）</strong><br>​矩阵是具有相同特征和纬度的对象的集合，表现为一张二维数据表。其意义是一个对象表示为矩阵中的一行，一个特征表示为矩阵中的一列，每个特征都有数值型的取值。通常会赋予矩阵粗体的大写变量名称，比如$A$。</p><p><strong>张量（tensor）</strong><br>​在某些情况下，我们会讨论坐标超过两维的数组。一般地，一个数组中的元素分布在若干维坐标的规则网格中，我们将其称之为张量。使用 $A$ 来表示张量“A”。张量$A$中坐标为$(i,j,k)$的元素记作$A_{(i,j,k)}$。 </p><p><strong>四者之间关系</strong>  </p><blockquote><p>标量是0阶张量，向量是一阶张量。举例：<br>​标量就是知道棍子的长度，但是你不会知道棍子指向哪儿。<br>​向量就是不但知道棍子的长度，还知道棍子指向前面还是后面。<br>​张量就是不但知道棍子的长度，也知道棍子指向前面还是后面，还能知道这棍子又向上&#x2F;下和左&#x2F;右偏转了多少。</p></blockquote><h3 id="1-1-2-张量与矩阵的区别"><a href="#1-1-2-张量与矩阵的区别" class="headerlink" title="1.1.2 张量与矩阵的区别"></a>1.1.2 张量与矩阵的区别</h3><ul><li>从代数角度讲， 矩阵它是向量的推广。向量可以看成一维的“表格”（即分量按照顺序排成一排）， 矩阵是二维的“表格”（分量按照纵横位置排列）， 那么$n$阶张量就是所谓的$n$维的“表格”。 张量的严格定义是利用线性映射来描述。</li><li>从几何角度讲， 矩阵是一个真正的几何量，也就是说，它是一个不随参照系的坐标变换而变化的东西。向量也具有这种特性。</li><li>张量可以用3×3矩阵形式来表达。 </li><li>表示标量的数和表示向量的三维数组也可分别看作1×1，1×3的矩阵。</li></ul><h3 id="1-1-3-矩阵和向量相乘结果"><a href="#1-1-3-矩阵和向量相乘结果" class="headerlink" title="1.1.3 矩阵和向量相乘结果"></a>1.1.3 矩阵和向量相乘结果</h3><p>若使用爱因斯坦求和约定（Einstein summation convention），矩阵$A$, $B$相乘得到矩阵$C$可以用下式表示：<br>$$ a_{ik}*b_{kj}&#x3D;c_{ij} \tag{1.3-1} $$<br>其中，$a_{ik}$, $b_{kj}$, $c_{ij}$分别表示矩阵$A, B, C$的元素，$k$出现两次，是一个哑变量（Dummy Variables）表示对该参数进行遍历求和。<br>而矩阵和向量相乘可以看成是矩阵相乘的一个特殊情况，例如：矩阵$B$是一个$n \times 1$的矩阵。</p><h3 id="1-1-4-向量和矩阵的范数归纳"><a href="#1-1-4-向量和矩阵的范数归纳" class="headerlink" title="1.1.4 向量和矩阵的范数归纳"></a>1.1.4 向量和矩阵的范数归纳</h3><p><strong>向量的范数(norm)</strong><br>​定义一个向量为：$\vec{a}&#x3D;[-5, 6, 8, -10]$。任意一组向量设为$\vec{x}&#x3D;(x_1,x_2,…,x_N)$。其不同范数求解如下：</p><ul><li>向量的1范数：向量的各个元素的绝对值之和，上述向量$\vec{a}$的1范数结果就是：29。</li></ul><p>$$<br>\Vert\vec{x}\Vert_1&#x3D;\sum_{i&#x3D;1}^N\vert{x_i}\vert<br>$$</p><ul><li>向量的2范数：向量的每个元素的平方和再开平方根，上述$\vec{a}$的2范数结果就是：15。</li></ul><p>$$<br>\Vert\vec{x}\Vert_2&#x3D;\sqrt{\sum_{i&#x3D;1}^N{\vert{x_i}\vert}^2}<br>$$</p><ul><li>向量的负无穷范数：向量的所有元素的绝对值中最小的：上述向量$\vec{a}$的负无穷范数结果就是：5。</li></ul><p>$$<br>\Vert\vec{x}\Vert_{-\infty}&#x3D;\min{|{x_i}|}<br>$$</p><ul><li>向量的正无穷范数：向量的所有元素的绝对值中最大的：上述向量$\vec{a}$的正无穷范数结果就是：10。</li></ul><p>$$<br>\Vert\vec{x}\Vert_{+\infty}&#x3D;\max{|{x_i}|}<br>$$</p><ul><li>向量的p范数：</li></ul><p>$$<br>L_p&#x3D;\Vert\vec{x}\Vert_p&#x3D;\sqrt[p]{\sum_{i&#x3D;1}^{N}|{x_i}|^p}<br>$$</p><p><strong>矩阵的范数</strong>  </p><p>定义一个矩阵$A&#x3D;[-1, 2, -3; 4, -6, 6]$。 任意矩阵定义为：$A_{m\times n}$，其元素为 $a_{ij}$。</p><p>矩阵的范数定义为</p><p>$$<br>\Vert{A}\Vert_p :&#x3D;\sup_{x\neq 0}\frac{\Vert{Ax}\Vert_p}{\Vert{x}\Vert_p}<br>$$</p><p>当向量取不同范数时, 相应得到了不同的矩阵范数。</p><ul><li><p><strong>矩阵的1范数（列范数）</strong>：矩阵的每一列上的元</p><p>素绝对值先求和，再从中取个最大的,（列和最大），上述矩阵$A$的1范数先得到$[5,8,9]$，再取最大的最终结果就是：9。</p></li></ul><p>$$<br>\Vert A\Vert_1&#x3D;\max_{1\le j\le n}\sum_{i&#x3D;1}^m|{a_{ij}}|<br>$$</p><ul><li><strong>矩阵的2范数</strong>：矩阵$A^TA$的最大特征值开平方根，上述矩阵$A$的2范数得到的最终结果是：10.0623。</li></ul><p>$$<br>\Vert A\Vert_2&#x3D;\sqrt{\lambda_{max}(A^T A)}<br>$$</p><p>其中， $\lambda_{max}(A^T A)$ 为 $A^T A​$ 的特征值绝对值的最大值。</p><ul><li><p><strong>矩阵的无穷范数（行范数）</strong>：矩阵的每一行上的元素绝对值先求和，再从中取个最大的，（行和最大），上述矩阵$A$的行范数先得到$[6；16]$，再取最大的最终结果就是：16。<br>$$<br>\Vert A\Vert_{\infty}&#x3D;\max_{1\le i \le m}\sum_{j&#x3D;1}^n |{a_{ij}}|<br>$$</p></li><li><p><strong>矩阵的核范数</strong>：矩阵的奇异值（将矩阵svd分解）之和，这个范数可以用来低秩表示（因为最小化核范数，相当于最小化矩阵的秩——低秩），上述矩阵A最终结果就是：10.9287。  </p></li><li><p><strong>矩阵的L0范数</strong>：矩阵的非0元素的个数，通常用它来表示稀疏，L0范数越小0元素越多，也就越稀疏，上述矩阵$A$最终结果就是：6。</p></li><li><p><strong>矩阵的L1范数</strong>：矩阵中的每个元素绝对值之和，它是L0范数的最优凸近似，因此它也可以表示稀疏，上述矩阵$A$最终结果就是：22。  </p></li><li><p><strong>矩阵的F范数</strong>：矩阵的各个元素平方之和再开平方根，它通常也叫做矩阵的L2范数，它的优点在于它是一个凸函数，可以求导求解，易于计算，上述矩阵A最终结果就是：10.0995。</p></li></ul><p>$$<br>\Vert A\Vert_F&#x3D;\sqrt{(\sum_{i&#x3D;1}^m\sum_{j&#x3D;1}^n{| a_{ij}|}^2)}<br>$$</p><ul><li><strong>矩阵的L21范数</strong>：矩阵先以每一列为单位，求每一列的F范数（也可认为是向量的2范数），然后再将得到的结果求L1范数（也可认为是向量的1范数），很容易看出它是介于L1和L2之间的一种范数，上述矩阵$A$最终结果就是：17.1559。 </li><li><strong>矩阵的 p范数</strong></li></ul><p>$$<br>\Vert A\Vert_p&#x3D;\sqrt[p]{(\sum_{i&#x3D;1}^m\sum_{j&#x3D;1}^n{| a_{ij}|}^p)}<br>$$</p><h3 id="1-1-5-如何判断一个矩阵为正定"><a href="#1-1-5-如何判断一个矩阵为正定" class="headerlink" title="1.1.5 如何判断一个矩阵为正定"></a>1.1.5 如何判断一个矩阵为正定</h3><p>判定一个矩阵是否为正定，通常有以下几个方面：  </p><ul><li>顺序主子式全大于0；  </li><li>存在可逆矩阵$C$使$C^TC$等于该矩阵；</li><li>正惯性指数等于$n$；</li><li>合同于单位矩阵$E$（即：规范形为$E$）</li><li>标准形中主对角元素全为正；</li><li>特征值全为正；</li><li>是某基的度量矩阵。</li></ul><h2 id="1-2-导数和偏导数"><a href="#1-2-导数和偏导数" class="headerlink" title="1.2 导数和偏导数"></a>1.2 导数和偏导数</h2><h3 id="1-2-1-导数偏导计算"><a href="#1-2-1-导数偏导计算" class="headerlink" title="1.2.1 导数偏导计算"></a>1.2.1 导数偏导计算</h3><p><strong>导数定义</strong>:</p><p>导数(derivative)代表了在自变量变化趋于无穷小的时候，函数值的变化与自变量的变化的比值。几何意义是这个点的切线。物理意义是该时刻的（瞬时）变化率。<br>​</p><p><em>注意</em>：在一元函数中，只有一个自变量变动，也就是说只存在一个方向的变化率，这也就是为什么一元函数没有偏导数的原因。在物理学中有平均速度和瞬时速度之说。平均速度有</p><p>$$<br>v&#x3D;\frac{s}{t}<br>$$</p><p>其中$v$表示平均速度，$s$表示路程，$t$表示时间。这个公式可以改写为</p><p>$$<br>\bar{v}&#x3D;\frac{\Delta s}{\Delta t}&#x3D;\frac{s(t_0+\Delta t)-s(t_0)}{\Delta t}<br>$$</p><p>其中$\Delta s$表示两点之间的距离，而$\Delta t$表示走过这段距离需要花费的时间。当$\Delta t$趋向于0（$\Delta t \to 0$）时，也就是时间变得很短时，平均速度也就变成了在$t_0$时刻的瞬时速度，表示成如下形式：</p><p>$$<br>v(t_0)&#x3D;\lim_{\Delta t \to 0}{\bar{v}}&#x3D;\lim_{\Delta t \to 0}{\frac{\Delta s}{\Delta t}}&#x3D;\lim_{\Delta t \to 0}{\frac{s(t_0+\Delta t)-s(t_0)}{\Delta t}}<br>$$</p><p>实际上，上式表示的是路程$s$关于时间$t$的函数在$t&#x3D;t_0$处的导数。一般的，这样定义导数：如果平均变化率的极限存在，即有</p><p>$$<br>\lim_{\Delta x \to 0}{\frac{\Delta y}{\Delta x}}&#x3D;\lim_{\Delta x \to 0}{\frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}}<br>$$</p><p>则称此极限为函数 $y&#x3D;f(x)$ 在点 $x_0$ 处的导数。记作 $f’(x_0)$ 或 $y’\vert_{x&#x3D;x_0}$ 或 $\frac{dy}{dx}\vert_{x&#x3D;x_0}$ 或 $\frac{df(x)}{dx}\vert_{x&#x3D;x_0}$。</p><p>通俗地说，导数就是曲线在某一点切线的斜率。</p><p><strong>偏导数</strong>:</p><p>既然谈到偏导数(partial derivative)，那就至少涉及到两个自变量。以两个自变量为例，$z&#x3D;f(x,y)​$，从导数到偏导数，也就是从曲线来到了曲面。曲线上的一点，其切线只有一条。但是曲面上的一点，切线有无数条。而偏导数就是指多元函数沿着坐标轴的变化率。 </p><p><em>注意</em>：直观地说，偏导数也就是函数在某一点上沿坐标轴正方向的的变化率。</p><p>设函数$z&#x3D;f(x,y)​$在点$(x_0,y_0)​$的领域内有定义，当$y&#x3D;y_0​$时，$z​$可以看作关于$x​$的一元函数$f(x,y_0)​$，若该一元函数在$x&#x3D;x_0​$处可导，即有</p><p>$$<br>\lim_{\Delta x \to 0}{\frac{f(x_0+\Delta x,y_0)-f(x_0,y_0)}{\Delta x}}&#x3D;A<br>$$</p><p>函数的极限$A$存在。那么称$A$为函数$z&#x3D;f(x,y)$在点$(x_0,y_0)$处关于自变量$x$的偏导数，记作$f_x(x_0,y_0)$或$\frac{\partial z}{\partial x}\vert_{y&#x3D;y_0}^{x&#x3D;x_0}$或$\frac{\partial f}{\partial x}\vert_{y&#x3D;y_0}^{x&#x3D;x_0}$或$z_x\vert_{y&#x3D;y_0}^{x&#x3D;x_0}$。</p><p>偏导数在求解时可以将另外一个变量看做常数，利用普通的求导方式求解，比如$z&#x3D;3x^2+xy$关于$x$的偏导数就为$z_x&#x3D;6x+y$，这个时候$y$相当于$x$的系数。</p><p>某点$(x_0,y_0)$处的偏导数的几何意义为曲面$z&#x3D;f(x,y)$与面$x&#x3D;x_0$或面$y&#x3D;y_0$交线在$y&#x3D;y_0$或$x&#x3D;x_0$处切线的斜率。  </p><h3 id="1-2-2-导数和偏导数有什么区别？"><a href="#1-2-2-导数和偏导数有什么区别？" class="headerlink" title="1.2.2 导数和偏导数有什么区别？"></a>1.2.2 导数和偏导数有什么区别？</h3><p>导数和偏导没有本质区别，如果极限存在，都是当自变量的变化量趋于0时，函数值的变化量与自变量变化量比值的极限。  </p><blockquote><ul><li>一元函数，一个$y$对应一个$x$，导数只有一个。  </li><li>二元函数，一个$z$对应一个$x$和一个$y$，有两个导数：一个是$z$对$x$的导数，一个是$z$对$y$的导数，称之为偏导。  </li><li>求偏导时要注意，对一个变量求导，则视另一个变量为常数，只对改变量求导，从而将偏导的求解转化成了一元函数的求导。</li></ul></blockquote><h2 id="1-3-特征值和特征向量"><a href="#1-3-特征值和特征向量" class="headerlink" title="1.3 特征值和特征向量"></a>1.3 特征值和特征向量</h2><h3 id="1-3-1-特征值分解与特征向量"><a href="#1-3-1-特征值分解与特征向量" class="headerlink" title="1.3.1 特征值分解与特征向量"></a>1.3.1 特征值分解与特征向量</h3><ul><li><p>特征值分解可以得到特征值(eigenvalues)与特征向量(eigenvectors)；</p></li><li><p>特征值表示的是这个特征到底有多重要，而特征向量表示这个特征是什么。  </p><p>如果说一个向量$\vec{v}$是方阵$A$的特征向量，将一定可以表示成下面的形式：</p></li></ul><p>$$<br>A\nu &#x3D; \lambda \nu<br>$$</p><p>$\lambda$为特征向量$\vec{v}$对应的特征值。特征值分解是将一个矩阵分解为如下形式： </p><p>$$<br>A&#x3D;Q\sum Q^{-1}<br>$$</p><p>其中，$Q$是这个矩阵$A$的特征向量组成的矩阵，$\sum$是一个对角矩阵，每一个对角线元素就是一个特征值，里面的特征值是由大到小排列的，这些特征值所对应的特征向量就是描述这个矩阵变化方向（从主要的变化到次要的变化排列）。也就是说矩阵$A$的信息可以由其特征值和特征向量表示。</p><h3 id="1-3-2-奇异值与特征值有什么关系"><a href="#1-3-2-奇异值与特征值有什么关系" class="headerlink" title="1.3.2 奇异值与特征值有什么关系"></a>1.3.2 奇异值与特征值有什么关系</h3><p>那么奇异值和特征值是怎么对应起来的呢？我们将一个矩阵$A$的转置乘以$A$，并对$A^TA​$求特征值，则有下面的形式：</p><p>$$<br>(A^TA)V &#x3D; \lambda V<br>$$</p><p>这里$V​$就是上面的右奇异向量，另外还有：</p><p>$$<br>\sigma_i &#x3D; \sqrt{\lambda_i}, u_i&#x3D;\frac{1}{\sigma_i}A\mu_i<br>$$</p><p>这里的$\sigma​$就是奇异值，$u​$就是上面说的左奇异向量。【证明那个哥们也没给】<br>​奇异值$\sigma​$跟特征值类似，在矩阵$\sum​$中也是从大到小排列，而且$\sigma​$的减少特别的快，在很多情况下，前10%甚至1%的奇异值的和就占了全部的奇异值之和的99%以上了。也就是说，我们也可以用前$r​$（$r​$远小于$m、n​$）个的奇异值来近似描述矩阵，即部分奇异值分解：<br>$$<br>A_{m\times n}\approx U_{m \times r}\sum_{r\times r}V_{r \times n}^T<br>$$</p><p>右边的三个矩阵相乘的结果将会是一个接近于$A$的矩阵，在这儿，$r$越接近于$n$，则相乘的结果越接近于$A$。</p><h2 id="1-4-概率分布与随机变量"><a href="#1-4-概率分布与随机变量" class="headerlink" title="1.4 概率分布与随机变量"></a>1.4 概率分布与随机变量</h2><h3 id="1-4-1-机器学习为什么要使用概率"><a href="#1-4-1-机器学习为什么要使用概率" class="headerlink" title="1.4.1 机器学习为什么要使用概率"></a>1.4.1 机器学习为什么要使用概率</h3><p>事件的概率是衡量该事件发生的可能性的量度。虽然在一次随机试验中某个事件的发生是带有偶然性的，但那些可在相同条件下大量重复的随机试验却往往呈现出明显的数量规律。<br>​机器学习除了处理不确定量，也需处理随机量。不确定性和随机性可能来自多个方面，使用概率论来量化不确定性。<br>​概率论在机器学习中扮演着一个核心角色，因为机器学习算法的设计通常依赖于对数据的概率假设。  </p><blockquote><p>​例如在机器学习（Andrew Ng）的课中，会有一个朴素贝叶斯假设就是条件独立的一个例子。该学习算法对内容做出假设，用来分辨电子邮件是否为垃圾邮件。假设无论邮件是否为垃圾邮件，单词x出现在邮件中的概率条件独立于单词y。很明显这个假设不是不失一般性的，因为某些单词几乎总是同时出现。然而，最终结果是，这个简单的假设对结果的影响并不大，且无论如何都可以让我们快速判别垃圾邮件。</p></blockquote><h3 id="1-4-2-变量与随机变量有什么区别"><a href="#1-4-2-变量与随机变量有什么区别" class="headerlink" title="1.4.2 变量与随机变量有什么区别"></a>1.4.2 变量与随机变量有什么区别</h3><p><strong>随机变量</strong>（random variable）</p><p>表示随机现象（在一定条件下，并不总是出现相同结果的现象称为随机现象）中各种结果的实值函数（一切可能的样本点）。例如某一时间内公共汽车站等车乘客人数，电话交换台在一定时间内收到的呼叫次数等，都是随机变量的实例。<br>​随机变量与模糊变量的不确定性的本质差别在于，后者的测定结果仍具有不确定性，即模糊性。</p><p><strong>变量与随机变量的区别：</strong><br>​当变量的取值的概率不是1时,变量就变成了随机变量；当随机变量取值的概率为1时,随机变量就变成了变量。</p><blockquote><p>比如：<br>​当变量$x$值为100的概率为1的话,那么$x&#x3D;100$就是确定了的,不会再有变化,除非有进一步运算.<br>​当变量$x$的值为100的概率不为1,比如为50的概率是0.5,为100的概率是0.5,那么这个变量就是会随不同条件而变化的,是随机变量,取到50或者100的概率都是0.5,即50%。  </p></blockquote><h3 id="1-4-3-随机变量与概率分布的联系"><a href="#1-4-3-随机变量与概率分布的联系" class="headerlink" title="1.4.3 随机变量与概率分布的联系"></a>1.4.3 随机变量与概率分布的联系</h3><p>一个随机变量仅仅表示一个可能取得的状态，还必须给定与之相伴的概率分布来制定每个状态的可能性。用来描述随机变量或一簇随机变量的每一个可能的状态的可能性大小的方法，就是 <strong>概率分布(probability distribution)</strong>.</p><p>随机变量可以分为离散型随机变量和连续型随机变量。</p><p>相应的描述其概率分布的函数是 </p><p>概率质量函数(Probability Mass Function, PMF):描述离散型随机变量的概率分布，通常用大写字母 $P$表示。</p><p>概率密度函数(Probability Density Function, PDF):描述连续型随机变量的概率分布，通常用小写字母$p$表示。</p><h3 id="1-4-4-离散型随机变量和概率质量函数"><a href="#1-4-4-离散型随机变量和概率质量函数" class="headerlink" title="1.4.4 离散型随机变量和概率质量函数"></a>1.4.4 离散型随机变量和概率质量函数</h3><p>PMF 将随机变量能够取得的每个状态映射到随机变量取得该状态的概率。</p><ul><li>一般而言，$P(x)​$ 表示时$X&#x3D;x​$的概率.</li><li>有时候为了防止混淆，要明确写出随机变量的名称$P(​$x$&#x3D;x)​$ </li><li>有时候需要先定义一个随机变量，然后制定它遵循的概率分布x服从$P(​$x​$)​$</li></ul><p>PMF 可以同时作用于多个随机变量，即联合概率分布(joint probability distribution) $P(X&#x3D;x,Y&#x3D;y)$*表示 $X&#x3D;x$和$Y&#x3D;y$同时发生的概率，也可以简写成 $P(x,y)$.</p><p>如果一个函数$P​$是随机变量 $X​$ 的 PMF， 那么它必须满足如下三个条件</p><ul><li>$P​$的定义域必须是的所有可能状态的集合</li><li>$∀x∈​$x, $0 \leq P(x) \leq 1 ​$. </li><li>$∑_{x∈X} P(x)&#x3D;1$. 我们把这一条性质称之为 归一化的(normalized)</li></ul><h3 id="1-4-5-连续型随机变量和概率密度函数"><a href="#1-4-5-连续型随机变量和概率密度函数" class="headerlink" title="1.4.5 连续型随机变量和概率密度函数"></a>1.4.5 连续型随机变量和概率密度函数</h3><p>如果一个函数$p​$是x的PDF，那么它必须满足如下几个条件</p><ul><li>$p$的定义域必须是 xx 的所有可能状态的集合。</li><li>$∀x∈X,p(x)≥0$. 注意，我们并不要求$ p(x)≤1$，因为此处 $p(x)$不是表示的对应此状态具体的概率，而是概率的一个相对大小(密度)。具体的概率，需要积分去求。</li><li>$∫p(x)dx&#x3D;1$, 积分下来，总和还是1，概率之和还是1.</li></ul><p>注：PDF$p(x)$并没有直接对特定的状态给出概率，给出的是密度，相对的，它给出了落在面积为 $δx$的无线小的区域内的概率为$ p(x)δx$. 由此，我们无法求得具体某个状态的概率，我们可以求得的是 某个状态 $x$ 落在 某个区间$[a,b]$内的概率为$ \int_{a}^{b}p(x)dx$.</p><h3 id="1-4-6-举例理解条件概率"><a href="#1-4-6-举例理解条件概率" class="headerlink" title="1.4.6 举例理解条件概率"></a>1.4.6 举例理解条件概率</h3><p>条件概率公式如下：<br>$$<br>P(A|B) &#x3D; P(A\cap B) &#x2F; P(B)<br>$$<br>说明：在同一个样本空间$\Omega$中的事件或者子集$A$与$B$，如果随机从$\Omega$中选出的一个元素属于$B$，那么下一个随机选择的元素属于$A$ 的概率就定义为在$B$的前提下$A$的条件概率。条件概率文氏图示意如图1.1所示。<br><img src="./img/ch1/conditional_probability.jpg" alt="条件概率"></p><p>图1.1 条件概率文氏图示意</p><p>根据文氏图，可以很清楚地看到在事件B发生的情况下，事件A发生的概率就是$P(A\bigcap B)$除以$P(B)$。<br>​举例：一对夫妻有两个小孩，已知其中一个是女孩，则另一个是女孩子的概率是多少？（面试、笔试都碰到过）<br>​<strong>穷举法</strong>：已知其中一个是女孩，那么样本空间为男女，女女，女男，则另外一个仍然是女生的概率就是1&#x2F;3。<br>​<strong>条件概率法</strong>：$P(女|女)&#x3D;P(女女)&#x2F;P(女)$,夫妻有两个小孩，那么它的样本空间为女女，男女，女男，男男，则$P(女女)$为1&#x2F;4，$P（女）&#x3D; 1-P(男男)&#x3D;3&#x2F;4$,所以最后$1&#x2F;3$。<br>这里大家可能会误解，男女和女男是同一种情况，但实际上类似姐弟和兄妹是不同情况。 </p><h3 id="1-4-7-联合概率与边缘概率联系区别"><a href="#1-4-7-联合概率与边缘概率联系区别" class="headerlink" title="1.4.7 联合概率与边缘概率联系区别"></a>1.4.7 联合概率与边缘概率联系区别</h3><p><strong>区别：</strong><br>​联合概率：联合概率指类似于$P(X&#x3D;a,Y&#x3D;b)$这样，包含多个条件，且所有条件同时成立的概率。联合概率是指在多元的概率分布中多个随机变量分别满足各自条件的概率。<br>​边缘概率：边缘概率是某个事件发生的概率，而与其它事件无关。边缘概率指类似于$P(X&#x3D;a)$，$P(Y&#x3D;b)$这样，仅与单个随机变量有关的概率。</p><p><strong>联系：</strong><br>​联合分布可求边缘分布，但若只知道边缘分布，无法求得联合分布。  </p><h3 id="1-4-8-条件概率的链式法则"><a href="#1-4-8-条件概率的链式法则" class="headerlink" title="1.4.8 条件概率的链式法则"></a>1.4.8 条件概率的链式法则</h3><p>由条件概率的定义，可直接得出下面的乘法公式：<br>​乘法公式 设$A, B$是两个事件，并且$P(A) &gt; 0$, 则有<br>$$<br>P(AB) &#x3D; P(B|A)P(A)<br>$$<br>推广<br>$$<br>P(ABC)&#x3D;P(C|AB)P(B|A)P(A)<br>$$<br>一般地，用归纳法可证：若$P(A_1A_2…A_n)&gt;0$，则有<br>$$<br>P(A_1A_2…A_n)&#x3D;P(A_n|A_1A_2…A_{n-1})P(A_{n-1}|A_1A_2…A_{n-2})…P(A_2|A_1)P(A_1)<br>&#x3D;P(A_1)\prod_{i&#x3D;2}^{n}P(A_i|A_1A_2…A_{i-1})<br>$$<br>任何多维随机变量联合概率分布，都可以分解成只有一个变量的条件概率相乘形式。 </p><h3 id="1-4-9-独立性和条件独立性"><a href="#1-4-9-独立性和条件独立性" class="headerlink" title="1.4.9 独立性和条件独立性"></a>1.4.9 独立性和条件独立性</h3><p><strong>独立性</strong><br>​两个随机变量$x$和$y$，概率分布表示成两个因子乘积形式，一个因子只包含$x$，另一个因子只包含$y$，两个随机变量相互独立(independent)。<br>​条件有时为不独立的事件之间带来独立，有时也会把本来独立的事件，因为此条件的存在，而失去独立性。<br>​举例：$P(XY)&#x3D;P(X)P(Y)$, 事件$X$和事件$Y$独立。此时给定$Z$，<br>$$<br>P(X,Y|Z) \not &#x3D; P(X|Z)P(Y|Z)<br>$$<br>事件独立时，联合概率等于概率的乘积。这是一个非常好的数学性质，然而不幸的是，无条件的独立是十分稀少的，因为大部分情况下，事件之间都是互相影响的。 </p><p><strong>条件独立性</strong><br>​给定$Z$的情况下,$X$和$Y$条件独立，当且仅当<br>$$<br>X\bot Y|Z \iff P(X,Y|Z) &#x3D; P(X|Z)P(Y|Z)<br>$$<br>$X$和$Y$的关系依赖于$Z$，而不是直接产生。  </p><blockquote><p><strong>举例</strong>定义如下事件：<br>$X$：明天下雨；<br>$Y$：今天的地面是湿的；<br>$Z$：今天是否下雨；<br>$Z$事件的成立，对$X$和$Y$均有影响，然而，在$Z$事件成立的前提下，今天的地面情况对明天是否下雨没有影响。 </p></blockquote><h2 id="1-5-常见概率分布"><a href="#1-5-常见概率分布" class="headerlink" title="1.5 常见概率分布"></a>1.5 常见概率分布</h2><h3 id="1-5-1-Bernoulli分布"><a href="#1-5-1-Bernoulli分布" class="headerlink" title="1.5.1 Bernoulli分布"></a>1.5.1 Bernoulli分布</h3><p><strong>Bernoulli分布</strong>是单个二值随机变量分布, 单参数$\phi​$∈[0,1]控制,$\phi​$给出随机变量等于1的概率. 主要性质有:<br>$$<br>\begin{align*}<br>P(x&#x3D;1) &amp;&#x3D; \phi \<br>P(x&#x3D;0) &amp;&#x3D; 1-\phi  \<br>P(x&#x3D;x) &amp;&#x3D; \phi^x(1-\phi)^{1-x} \<br>\end{align*}<br>$$<br>其期望和方差为：<br>$$<br>\begin{align*}<br>E_x[x] &amp;&#x3D; \phi \<br>Var_x(x) &amp;&#x3D; \phi{(1-\phi)}<br>\end{align*}<br>$$<br><strong>Multinoulli分布</strong>也叫<strong>范畴分布</strong>, 是单个<em>k</em>值随机分布,经常用来表示<strong>对象分类的分布</strong>. 其中$k$是有限值.Multinoulli分布由向量$\vec{p}\in[0,1]^{k-1}$参数化,每个分量$p_i$表示第$i$个状态的概率, 且$p_k&#x3D;1-1^Tp​$.</p><p><strong>适用范围</strong>: <strong>伯努利分布</strong>适合对<strong>离散型</strong>随机变量建模.</p><h3 id="1-5-2-高斯分布"><a href="#1-5-2-高斯分布" class="headerlink" title="1.5.2 高斯分布"></a>1.5.2 高斯分布</h3><p>高斯也叫正态分布(Normal Distribution), 概率度函数如下:<br>$$<br>N(x;\mu,\sigma^2) &#x3D; \sqrt{\frac{1}{2\pi\sigma^2}}exp\left ( -\frac{1}{2\sigma^2}(x-\mu)^2 \right )<br>$$<br>其中, $\mu​$和$\sigma​$分别是均值和方差, 中心峰值x坐标由$\mu​$给出, 峰的宽度受$\sigma​$控制, 最大点在$x&#x3D;\mu​$处取得, 拐点为$x&#x3D;\mu\pm\sigma​$</p><p>正态分布中，±1$\sigma$、±2$\sigma$、±3$\sigma$下的概率分别是68.3%、95.5%、99.73%，这3个数最好记住。 </p><p>此外, 令$\mu&#x3D;0,\sigma&#x3D;1​$高斯分布即简化为标准正态分布:<br>$$<br>N(x;\mu,\sigma^2) &#x3D; \sqrt{\frac{1}{2\pi}}exp\left ( -\frac{1}{2}x^2 \right )<br>$$<br>对概率密度函数高效求值:<br>$$<br>N(x;\mu,\beta^{-1})&#x3D;\sqrt{\frac{\beta}{2\pi}}exp\left(-\frac{1}{2}\beta(x-\mu)^2\right)<br>$$</p><p>其中，$\beta&#x3D;\frac{1}{\sigma^2}$通过参数$\beta∈（0，\infty）​$来控制分布精度。</p><h3 id="1-5-3-何时采用正态分布"><a href="#1-5-3-何时采用正态分布" class="headerlink" title="1.5.3 何时采用正态分布"></a>1.5.3 何时采用正态分布</h3><p>问: 何时采用正态分布?<br>答: 缺乏实数上分布的先验知识, 不知选择何种形式时, 默认选择正态分布总是不会错的, 理由如下: </p><ol><li>中心极限定理告诉我们, 很多独立随机变量均近似服从正态分布, 现实中很多复杂系统都可以被建模成正态分布的噪声, 即使该系统可以被结构化分解. </li><li>正态分布是具有相同方差的所有概率分布中, 不确定性最大的分布, 换句话说, 正态分布是对模型加入先验知识最少的分布.</li></ol><p>正态分布的推广:<br>正态分布可以推广到$R^n$空间, 此时称为<strong>多位正态分布</strong>, 其参数是一个正定对称矩阵$\Sigma​$:<br>$$<br>N(x;\vec\mu,\Sigma)&#x3D;\sqrt{\frac{1}{(2\pi)^ndet(\Sigma)}}exp\left(-\frac{1}{2}(\vec{x}-\vec{\mu})^T\Sigma^{-1}(\vec{x}-\vec{\mu})\right)<br>$$<br>对多为正态分布概率密度高效求值:<br>$$<br>N(x;\vec{\mu},\vec\beta^{-1}) &#x3D; \sqrt{det(\vec\beta)}{(2\pi)^n}exp\left(-\frac{1}{2}(\vec{x}-\vec\mu)^T\beta(\vec{x}-\vec\mu)\right)<br>$$<br>此处，$\vec\beta$是一个精度矩阵。</p><h3 id="1-5-4-指数分布"><a href="#1-5-4-指数分布" class="headerlink" title="1.5.4 指数分布"></a>1.5.4 指数分布</h3><p>深度学习中, 指数分布用来描述在$x&#x3D;0​$点处取得边界点的分布, 指数分布定义如下:<br>$$<br>p(x;\lambda)&#x3D;\lambda I_{x\geq 0}exp(-\lambda{x})<br>$$<br>指数分布用指示函数$I_{x\geq 0}​$来使$x​$取负值时的概率为零。</p><h3 id="1-5-5-Laplace-分布"><a href="#1-5-5-Laplace-分布" class="headerlink" title="1.5.5 Laplace 分布"></a>1.5.5 Laplace 分布</h3><p>一个联系紧密的概率分布是 Laplace 分布（Laplace distribution），它允许我们在任意一点 $\mu$处设置概率质量的峰值<br>$$<br>Laplace(x;\mu;\gamma)&#x3D;\frac{1}{2\gamma}exp\left(-\frac{|x-\mu|}{\gamma}\right)<br>$$</p><h3 id="1-5-6-Dirac分布和经验分布"><a href="#1-5-6-Dirac分布和经验分布" class="headerlink" title="1.5.6 Dirac分布和经验分布"></a>1.5.6 Dirac分布和经验分布</h3><p>Dirac分布可保证概率分布中所有质量都集中在一个点上. Diract分布的狄拉克$\delta​$函数(也称为<strong>单位脉冲函数</strong>)定义如下:<br>$$<br>p(x)&#x3D;\delta(x-\mu), x\neq \mu<br>$$</p><p>$$<br>\int_{a}^{b}\delta(x-\mu)dx &#x3D; 1, a &lt; \mu &lt; b<br>$$</p><p>Dirac 分布经常作为 经验分布（empirical distribution）的一个组成部分出现<br>$$<br>\hat{p}(\vec{x})&#x3D;\frac{1}{m}\sum_{i&#x3D;1}^{m}\delta(\vec{x}-{\vec{x}}^{(i)})<br>$$<br>, 其中, m个点$x^{1},…,x^{m}$是给定的数据集, <strong>经验分布</strong>将概率密度$\frac{1}{m}​$赋给了这些点.</p><p>当我们在训练集上训练模型时, 可以认为从这个训练集上得到的经验分布指明了<strong>采样来源</strong>.</p><p><strong>适用范围</strong>: 狄拉克δ函数适合对<strong>连续型</strong>随机变量的经验分布.</p><blockquote></blockquote><h2 id="1-6-期望、方差、协方差、相关系数"><a href="#1-6-期望、方差、协方差、相关系数" class="headerlink" title="1.6 期望、方差、协方差、相关系数"></a>1.6 期望、方差、协方差、相关系数</h2><h3 id="1-6-1-期望"><a href="#1-6-1-期望" class="headerlink" title="1.6.1 期望"></a>1.6.1 期望</h3><p>在概率论和统计学中，数学期望（或均值，亦简称期望）是试验中每次可能结果的概率乘以其结果的总和。它反映随机变量平均取值的大小。</p><ul><li>线性运算： $E(ax+by+c) &#x3D; aE(x)+bE(y)+c$  </li><li>推广形式： $E(\sum_{k&#x3D;1}^{n}{a_ix_i+c}) &#x3D; \sum_{k&#x3D;1}^{n}{a_iE(x_i)+c}$ </li><li>函数期望：设$f(x)$为$x$的函数，则$f(x)$的期望为<ul><li>离散函数： $E(f(x))&#x3D;\sum_{k&#x3D;1}^{n}{f(x_k)P(x_k)}$</li><li>连续函数： $E(f(x))&#x3D;\int_{-\infty}^{+\infty}{f(x)p(x)dx}$</li></ul></li></ul><blockquote><p>注意：</p><ul><li>函数的期望大于等于期望的函数（Jensen不等式），即$E(f(x))\geqslant f(E(x))$  </li><li>一般情况下，乘积的期望不等于期望的乘积。  </li><li>如果$X$和$Y$相互独立，则$E(xy)&#x3D;E(x)E(y)​$。</li></ul></blockquote><h3 id="1-6-2-方差"><a href="#1-6-2-方差" class="headerlink" title="1.6.2 方差"></a>1.6.2 方差</h3><p>概率论中方差用来度量随机变量和其数学期望（即均值）之间的偏离程度。方差是一种特殊的期望。定义为：</p><p>$$<br>Var(x) &#x3D; E((x-E(x))^2)<br>$$</p><blockquote><p>方差性质：  </p><p>1）$Var(x) &#x3D; E(x^2) -E(x)^2$<br>2）常数的方差为0;<br>3）方差不满足线性性质;<br>4）如果$X$和$Y$相互独立, $Var(ax+by)&#x3D;a^2Var(x)+b^2Var(y)$   </p></blockquote><h3 id="1-6-3-协方差"><a href="#1-6-3-协方差" class="headerlink" title="1.6.3 协方差"></a>1.6.3 协方差</h3><p>协方差是衡量两个变量线性相关性强度及变量尺度。  两个随机变量的协方差定义为：<br>$$<br>Cov(x,y)&#x3D;E((x-E(x))(y-E(y)))<br>$$</p><p>方差是一种特殊的协方差。当$X&#x3D;Y$时，$Cov(x,y)&#x3D;Var(x)&#x3D;Var(y)$。</p><blockquote><p>协方差性质：  </p><p>1）独立变量的协方差为0。<br>2）协方差计算公式：</p></blockquote><p>$$<br>Cov(\sum_{i&#x3D;1}^{m}{a_ix_i}, \sum_{j&#x3D;1}^{m}{b_jy_j}) &#x3D; \sum_{i&#x3D;1}^{m} \sum_{j&#x3D;1}^{m}{a_ib_jCov(x_iy_i)}<br>$$</p><blockquote><p>3）特殊情况：</p></blockquote><p>$$<br>Cov(a+bx, c+dy) &#x3D; bdCov(x, y)<br>$$</p><h3 id="1-6-4-相关系数"><a href="#1-6-4-相关系数" class="headerlink" title="1.6.4 相关系数"></a>1.6.4 相关系数</h3><p>相关系数是研究变量之间线性相关程度的量。两个随机变量的相关系数定义为：<br>$$<br>Corr(x,y) &#x3D; \frac{Cov(x,y)}{\sqrt{Var(x)Var(y)}}<br>$$</p><blockquote><p>相关系数的性质：<br>1）有界性。相关系数的取值范围是 [-1,1]，可以看成无量纲的协方差。<br>2）值越接近1，说明两个变量正相关性（线性）越强。越接近-1，说明负相关性越强，当为0时，表示两个变量没有相关性。  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI进阶 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-人脸识别</title>
      <link href="/2019/05/17/ml/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
      <url>/2019/05/17/ml/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>人脸识别，是基于人的脸部特征信息进行身份识别的一种生物识别技术。用摄像机或摄像头采集含有人脸的图像或视频流，并自动在图像中检测和跟踪人脸，进而对检测到的人脸进行脸部识别的一系列相关技术，通常也叫做人像识别、面部识别。</p><span id="more"></span><h1 id="视频捕捉"><a href="#视频捕捉" class="headerlink" title="视频捕捉"></a>视频捕捉</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">vc = cv.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">frame = vc.read()[<span class="number">1</span>]</span><br><span class="line">cv.imshow(<span class="string">&#x27;VideoCapture&#x27;</span>, frame)</span><br><span class="line"><span class="keyword">if</span> cv.waitKey(<span class="number">33</span>) == <span class="number">27</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">vc.release()</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h1 id="人脸定位"><a href="#人脸定位" class="headerlink" title="人脸定位"></a>人脸定位</h1><p>从整个画面中定位人脸的位置和范围</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI进阶 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 图像识别 </tag>
            
            <tag> 人脸识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-图像识别</title>
      <link href="/2019/05/01/ml/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"/>
      <url>/2019/05/01/ml/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>图像识别技术是人工智能的一个重要领域。它是指对图像进行对象识别，以识别各种不同模式的目标和对像的技术。</p><span id="more"></span><h1 id="图像识别"><a href="#图像识别" class="headerlink" title="图像识别"></a>图像识别</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">业务数据---------&gt;特征数据-&gt;学习模型</span><br><span class="line">|    特征工程               ^</span><br><span class="line">|   TFIDF、MFCC、SIFT      |</span><br><span class="line">+--------------------------+</span><br></pre></td></tr></table></figure><h2 id="OpenCV基础"><a href="#OpenCV基础" class="headerlink" title="OpenCV基础"></a>OpenCV基础</h2><p>开源计算机视觉库<br>图像处理<br>提取图像特征<br>针对的图像的机器学习</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">original = cv.imread(<span class="string">&#x27;../data/forest.jpg&#x27;</span>)</span><br><span class="line">cv.imshow(<span class="string">&#x27;Original&#x27;</span>, original)</span><br><span class="line">blue = np.zeros_like(original)</span><br><span class="line">blue[..., <span class="number">0</span>] = original[..., <span class="number">0</span>]</span><br><span class="line">cv.imshow(<span class="string">&#x27;Blue&#x27;</span>, blue)</span><br><span class="line">green = np.zeros_like(original)</span><br><span class="line">green[..., <span class="number">1</span>] = original[..., <span class="number">1</span>]</span><br><span class="line">cv.imshow(<span class="string">&#x27;Green&#x27;</span>, green)</span><br><span class="line">red = np.zeros_like(original)</span><br><span class="line">red[..., <span class="number">2</span>] = original[..., <span class="number">2</span>]</span><br><span class="line">cv.imshow(<span class="string">&#x27;Red&#x27;</span>, red)</span><br><span class="line">h, w = original.shape[:<span class="number">2</span>]</span><br><span class="line">l, t = <span class="built_in">int</span>(w / <span class="number">4</span>), <span class="built_in">int</span>(h / <span class="number">4</span>)</span><br><span class="line">r, b = <span class="built_in">int</span>(w * <span class="number">3</span> / <span class="number">4</span>), <span class="built_in">int</span>(h * <span class="number">3</span> / <span class="number">4</span>)</span><br><span class="line">cropped = original[t:b, l:r]</span><br><span class="line">cv.imshow(<span class="string">&#x27;Cropped&#x27;</span>, cropped)</span><br><span class="line"><span class="comment">#scaled = cv.resize(original,</span></span><br><span class="line"><span class="comment">#(int(w / 2), int(h / 2)),</span></span><br><span class="line"><span class="comment">#interpolation=cv.INTER_LINEAR)</span></span><br><span class="line">scaled = cv.resize(original, <span class="literal">None</span>,</span><br><span class="line">fx=<span class="number">2</span>, fy=<span class="number">2</span>,</span><br><span class="line">interpolation=cv.INTER_LINEAR)</span><br><span class="line">cv.imshow(<span class="string">&#x27;Scaled&#x27;</span>, scaled)</span><br><span class="line">cv.waitKey();</span><br><span class="line">cv.imwrite(<span class="string">&#x27;./cropped.bmp&#x27;</span>, cropped)</span><br><span class="line">cv.imwrite(<span class="string">&#x27;./cropped.png&#x27;</span>, cropped)</span><br><span class="line">cv.imwrite(<span class="string">&#x27;./cropped.jpg&#x27;</span>, cropped)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">original = cv.imread(<span class="string">&#x27;../data/chair.jpg&#x27;</span>,</span><br><span class="line">cv.IMREAD_GRAYSCALE)</span><br><span class="line">cv.imshow(<span class="string">&#x27;Original&#x27;</span>, original)</span><br><span class="line">canny = cv.Canny(original, <span class="number">50</span>, <span class="number">240</span>)</span><br><span class="line">cv.imshow(<span class="string">&#x27;Canny&#x27;</span>, canny)</span><br><span class="line">cv.waitKey()</span><br></pre></td></tr></table></figure><h2 id="亮度提升"><a href="#亮度提升" class="headerlink" title="亮度提升"></a>亮度提升</h2><p>直方图均衡化</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">original = cv.imread(<span class="string">&#x27;../data/sunrise.jpg&#x27;</span>)</span><br><span class="line">cv.imshow(<span class="string">&#x27;Original&#x27;</span>, original)</span><br><span class="line">gray = cv.cvtColor(original, cv.COLOR_BGR2GRAY)</span><br><span class="line">cv.imshow(<span class="string">&#x27;Gray&#x27;</span>, gray)</span><br><span class="line">eq_gray = cv.equalizeHist(gray)</span><br><span class="line">cv.imshow(<span class="string">&#x27;EQ-Gray&#x27;</span>, eq_gray)</span><br><span class="line">yuv = cv.cvtColor(original, cv.COLOR_BGR2YUV)</span><br><span class="line">yuv[..., <span class="number">0</span>] = cv.equalizeHist(yuv[..., <span class="number">0</span>])</span><br><span class="line">eq_color = cv.cvtColor(yuv, cv.COLOR_YUV2BGR)</span><br><span class="line">cv.imshow(<span class="string">&#x27;EQ-Color&#x27;</span>, eq_color)</span><br><span class="line">cv.waitKey()</span><br></pre></td></tr></table></figure><h2 id="角点检测"><a href="#角点检测" class="headerlink" title="角点检测"></a>角点检测</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">original = cv.imread(<span class="string">&#x27;../data/box.png&#x27;</span>,</span><br><span class="line">cv.IMREAD_GRAYSCALE)</span><br><span class="line">cv.imshow(<span class="string">&#x27;Original&#x27;</span>, original)</span><br><span class="line">corners = cv.cornerHarris(original, <span class="number">7</span>, <span class="number">5</span>, <span class="number">0.04</span>)</span><br><span class="line">corners = cv.dilate(corners, <span class="literal">None</span>)</span><br><span class="line">mixture = original.copy()</span><br><span class="line">mixture[corners &gt; corners.<span class="built_in">max</span>() * <span class="number">0.01</span>] = <span class="number">255</span></span><br><span class="line">cv.imshow(<span class="string">&#x27;Mixture&#x27;</span>, mixture)</span><br><span class="line">cv.waitKey()</span><br></pre></td></tr></table></figure><h2 id="STAR特征检测"><a href="#STAR特征检测" class="headerlink" title="STAR特征检测"></a>STAR特征检测</h2><p>几何结构</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">original = cv.imread(<span class="string">&#x27;../data/table.jpg&#x27;</span>)</span><br><span class="line">cv.imshow(<span class="string">&#x27;Original&#x27;</span>, original)</span><br><span class="line">gray = cv.cvtColor(original, cv.COLOR_BGR2GRAY)</span><br><span class="line">cv.imshow(<span class="string">&#x27;Gray&#x27;</span>, gray)</span><br><span class="line">star = cv.xfeatures2d.StarDetector_create()</span><br><span class="line">keypoints = star.detect(gray)</span><br><span class="line">mixture = original.copy()</span><br><span class="line">cv.drawKeypoints(original, keypoints, mixture,</span><br><span class="line">flags=cv.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)</span><br><span class="line">cv.imshow(<span class="string">&#x27;Mixture&#x27;</span>, mixture)</span><br><span class="line">cv.waitKey()</span><br></pre></td></tr></table></figure><h2 id="SIFT特征检测"><a href="#SIFT特征检测" class="headerlink" title="SIFT特征检测"></a>SIFT特征检测</h2><p>突出亮度变化的方向</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">original = cv.imread(<span class="string">&#x27;../data/table.jpg&#x27;</span>)</span><br><span class="line">cv.imshow(<span class="string">&#x27;Original&#x27;</span>, original)</span><br><span class="line">gray = cv.cvtColor(original, cv.COLOR_BGR2GRAY)</span><br><span class="line">cv.imshow(<span class="string">&#x27;Gray&#x27;</span>, gray)</span><br><span class="line">sift = cv.xfeatures2d.SIFT_create()</span><br><span class="line">keypoints = sift.detect(gray)</span><br><span class="line">mixture = original.copy()</span><br><span class="line">cv.drawKeypoints(original, keypoints, mixture,</span><br><span class="line">flags=cv.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)</span><br><span class="line">cv.imshow(<span class="string">&#x27;Mixture&#x27;</span>, mixture)</span><br><span class="line">cv.waitKey()</span><br></pre></td></tr></table></figure><h2 id="STAR-SIFT特征描述矩阵"><a href="#STAR-SIFT特征描述矩阵" class="headerlink" title="STAR-SIFT特征描述矩阵"></a>STAR-SIFT特征描述矩阵</h2><p>通过对STAR特征点做进一步基于SIFT算法的筛选，以样本矩阵的形式表现的图像特征信息。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">original = cv.imread(<span class="string">&#x27;../data/table.jpg&#x27;</span>)</span><br><span class="line">cv.imshow(<span class="string">&#x27;Original&#x27;</span>, original)</span><br><span class="line">gray = cv.cvtColor(original, cv.COLOR_BGR2GRAY)</span><br><span class="line">cv.imshow(<span class="string">&#x27;Gray&#x27;</span>, gray)</span><br><span class="line">star = cv.xfeatures2d.StarDetector_create()</span><br><span class="line">keypoints = star.detect(gray)</span><br><span class="line">sift = cv.xfeatures2d.SIFT_create()</span><br><span class="line">_, desc = sift.compute(gray, keypoints)</span><br><span class="line"><span class="built_in">print</span>(desc.shape)</span><br><span class="line">mp.matshow(desc, cmap=<span class="string">&#x27;gist_rainbow&#x27;</span>,</span><br><span class="line">fignum=<span class="string">&#x27;DESC&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;DESC&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;Feature&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;Sample&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(which=<span class="string">&#x27;both&#x27;</span>, top=<span class="literal">False</span>,</span><br><span class="line">labeltop=<span class="literal">False</span>, labelbottom=<span class="literal">True</span>,</span><br><span class="line">labelsize=<span class="number">10</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="图像识别-1"><a href="#图像识别-1" class="headerlink" title="图像识别"></a>图像识别</h2><p>类似的特征描述矩阵必然源自类似的图像</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> hmmlearn.hmm <span class="keyword">as</span> hl</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>,</span><br><span class="line">category=DeprecationWarning)</span><br><span class="line">np.seterr(<span class="built_in">all</span>=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_objects</span>(<span class="params">directory</span>):</span><br><span class="line">directory = os.path.normpath(directory)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(directory):</span><br><span class="line"><span class="keyword">raise</span> IOError(<span class="string">&quot;The directory &#x27;&quot;</span> +</span><br><span class="line">directory + <span class="string">&quot;&#x27; doesn&#x27;t exist!&quot;</span>)</span><br><span class="line">objects = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> curdir, subdirs, files <span class="keyword">in</span> os.walk(</span><br><span class="line">directory):</span><br><span class="line"><span class="keyword">for</span> jpeg <span class="keyword">in</span> (file <span class="keyword">for</span> file <span class="keyword">in</span> files</span><br><span class="line"><span class="keyword">if</span> file.endswith(<span class="string">&#x27;.jpg&#x27;</span>)):</span><br><span class="line">path = os.path.join(curdir, jpeg)</span><br><span class="line">label = path.split(os.path.sep)[-<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> label <span class="keyword">not</span> <span class="keyword">in</span> objects:</span><br><span class="line">objects[label] = []</span><br><span class="line">objects[label].append(path)</span><br><span class="line"><span class="keyword">return</span> objects</span><br><span class="line">train_objects = search_objects(</span><br><span class="line"><span class="string">&#x27;../data/objects/training&#x27;</span>)</span><br><span class="line">train_x, train_y = [], []</span><br><span class="line"><span class="keyword">for</span> label, filenames <span class="keyword">in</span> train_objects.items():</span><br><span class="line">descs = np.array([])</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">image = cv.imread(filename)</span><br><span class="line">gray = cv.cvtColor(image,</span><br><span class="line">cv.COLOR_BGR2GRAY)</span><br><span class="line">h, w = gray.shape[:<span class="number">2</span>]</span><br><span class="line">f = <span class="number">200</span> / <span class="built_in">min</span>(h, w)</span><br><span class="line">gray = cv.resize(gray, <span class="literal">None</span>,</span><br><span class="line">fx=f, fy=f)</span><br><span class="line">star = cv.xfeatures2d.StarDetector_create()</span><br><span class="line">keypoints = star.detect(gray)</span><br><span class="line">sift = cv.xfeatures2d.SIFT_create()</span><br><span class="line">_, desc = sift.compute(gray, keypoints)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(descs) == <span class="number">0</span>:</span><br><span class="line">descs = desc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">descs = np.append(descs, desc, axis=<span class="number">0</span>)</span><br><span class="line">train_x.append(descs)</span><br><span class="line">train_y.append(label)</span><br><span class="line">models = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> descs, label <span class="keyword">in</span> <span class="built_in">zip</span>(train_x, train_y):</span><br><span class="line">model = hl.GaussianHMM(</span><br><span class="line">n_components=<span class="number">4</span>, covariance_type=<span class="string">&#x27;diag&#x27;</span>,</span><br><span class="line">n_iter=<span class="number">1000</span>)</span><br><span class="line">models[label] = model.fit(descs)</span><br><span class="line">test_objects = search_objects(</span><br><span class="line"><span class="string">&#x27;../data/objects/testing&#x27;</span>)</span><br><span class="line">test_x, test_y, test_z = [], [], []</span><br><span class="line"><span class="keyword">for</span> label, filenames <span class="keyword">in</span> test_objects.items():</span><br><span class="line">test_z.append([])</span><br><span class="line">descs = np.array([])</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">image = cv.imread(filename)</span><br><span class="line">test_z[-<span class="number">1</span>].append(image)</span><br><span class="line">gray = cv.cvtColor(image,</span><br><span class="line">cv.COLOR_BGR2GRAY)</span><br><span class="line">h, w = gray.shape[:<span class="number">2</span>]</span><br><span class="line">f = <span class="number">200</span> / <span class="built_in">min</span>(h, w)</span><br><span class="line">gray = cv.resize(gray, <span class="literal">None</span>,</span><br><span class="line">fx=f, fy=f)</span><br><span class="line">star = cv.xfeatures2d.StarDetector_create()</span><br><span class="line">keypoints = star.detect(gray)</span><br><span class="line">sift = cv.xfeatures2d.SIFT_create()</span><br><span class="line">_, desc = sift.compute(gray, keypoints)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(descs) == <span class="number">0</span>:</span><br><span class="line">descs = desc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">descs = np.append(descs, desc, axis=<span class="number">0</span>)</span><br><span class="line">test_x.append(descs)</span><br><span class="line">test_y.append(label)</span><br><span class="line">pred_test_y = []</span><br><span class="line"><span class="keyword">for</span> descs <span class="keyword">in</span> test_x:</span><br><span class="line">best_score, best_label = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"><span class="keyword">for</span> label, model <span class="keyword">in</span> models.items():</span><br><span class="line">score = model.score(descs)</span><br><span class="line"><span class="keyword">if</span> (best_score <span class="keyword">is</span> <span class="literal">None</span>) <span class="keyword">or</span> \</span><br><span class="line">(best_score &lt; score):</span><br><span class="line">best_score, best_label = \</span><br><span class="line">score, label</span><br><span class="line">pred_test_y.append(best_label)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> label, pred_label, images <span class="keyword">in</span> <span class="built_in">zip</span>(</span><br><span class="line">test_y, pred_test_y, test_z):</span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">cv.imshow(<span class="string">&#x27;&#123;&#125; - &#123;&#125; &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">i, label, <span class="string">&#x27;==&#x27;</span> <span class="keyword">if</span></span><br><span class="line">label == pred_label <span class="keyword">else</span> <span class="string">&#x27;!=&#x27;</span>,</span><br><span class="line">pred_label), image)</span><br><span class="line">cv.waitKey()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI进阶 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 图像识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-语音识别</title>
      <link href="/2019/04/20/ml/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/"/>
      <url>/2019/04/20/ml/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>声音(.wav)-&gt;文本(字符串)<br>文本(字符串)-&gt;声音</p><span id="more"></span><h2 id="音频识别"><a href="#音频识别" class="headerlink" title="音频识别"></a>音频识别</h2><h3 id="声音的时域和频域表示"><a href="#声音的时域和频域表示" class="headerlink" title="声音的时域和频域表示"></a>声音的时域和频域表示</h3><p>时域：位移&#x3D;f(时间)<br>频域：(振幅, 相位)&#x3D;f(频率)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> numpy.fft <span class="keyword">as</span> nf</span><br><span class="line"><span class="keyword">import</span> scipy.io.wavfile <span class="keyword">as</span> wf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">sample_rate, sigs = wf.read(<span class="string">&#x27;../data/freq.wav&#x27;</span>)</span><br><span class="line">sigs = sigs / <span class="number">2</span> ** <span class="number">15</span></span><br><span class="line">times = np.arange(<span class="built_in">len</span>(sigs)) / sample_rate</span><br><span class="line">freqs = nf.fftfreq(sigs.size, <span class="number">1</span> / sample_rate)</span><br><span class="line">ffts = nf.fft(sigs)</span><br><span class="line">pows = np.<span class="built_in">abs</span>(ffts)</span><br><span class="line">mp.figure(<span class="string">&#x27;Time Domain&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Time Domain&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;Time&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;Signal&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.plot(times, sigs, c=<span class="string">&#x27;dodgerblue&#x27;</span>,</span><br><span class="line">label=<span class="string">&#x27;Signal=f(Time)&#x27;</span>)</span><br><span class="line">mp.legend()</span><br><span class="line">mp.figure(<span class="string">&#x27;Frequency Domain&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Frequency Domain&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;Frequency&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;Power&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.plot(freqs[freqs&gt;=<span class="number">0</span>], pows[freqs&gt;=<span class="number">0</span>],</span><br><span class="line">c=<span class="string">&#x27;orangered&#x27;</span>, label=<span class="string">&#x27;Power=F(Frequency)&#x27;</span>)</span><br><span class="line">mp.legend()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h3 id="梅尔频率倒谱系数-MFCC-矩阵"><a href="#梅尔频率倒谱系数-MFCC-矩阵" class="headerlink" title="梅尔频率倒谱系数(MFCC)矩阵"></a>梅尔频率倒谱系数(MFCC)矩阵</h3><p>将一段音频样本划分成若干片段，其中每一个片段对应MFCC矩阵中的一行，构成一个子样本。将每个子样本做傅里叶变换得到频率谱线，从中选择与音频内容关系最为紧密的13个特征频率，形成一个特征向量。将多个子样本的特征向量组合成矩阵，即MFCC矩阵。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.io.wavfile <span class="keyword">as</span> wf</span><br><span class="line"><span class="keyword">import</span> python_speech_features <span class="keyword">as</span> sf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">sample_rate, sigs = wf.read(</span><br><span class="line"><span class="string">&#x27;D:/ML/data/speeches/training/banana/banana01.wav&#x27;</span>)</span><br><span class="line">mfcc = sf.mfcc(sigs, sample_rate)</span><br><span class="line">mp.matshow(mfcc.T, cmap=<span class="string">&#x27;gist_rainbow&#x27;</span>,</span><br><span class="line">fignum=<span class="string">&#x27;MFCC&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;MFCC&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;Sample&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;Feature&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(which=<span class="string">&#x27;both&#x27;</span>, top=<span class="literal">False</span>,</span><br><span class="line">labeltop=<span class="literal">False</span>, labelbottom=<span class="literal">True</span>,</span><br><span class="line">labelsize=<span class="number">10</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h3 id="语音识别"><a href="#语音识别" class="headerlink" title="语音识别"></a>语音识别</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.io.wavfile <span class="keyword">as</span> wf</span><br><span class="line"><span class="keyword">import</span> python_speech_features <span class="keyword">as</span> sf</span><br><span class="line"><span class="keyword">import</span> hmmlearn.hmm <span class="keyword">as</span> hl</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>,</span><br><span class="line">category=DeprecationWarning)</span><br><span class="line">np.seterr(<span class="built_in">all</span>=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_speeches</span>(<span class="params">directory, speeches</span>):</span><br><span class="line">directory = os.path.normpath(directory)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(directory):</span><br><span class="line"><span class="keyword">raise</span> IOError(<span class="string">&quot;The directory &#x27;&quot;</span> +</span><br><span class="line">directory + <span class="string">&quot;&#x27; doesn&#x27;t exist!&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> entry <span class="keyword">in</span> os.listdir(directory):</span><br><span class="line">label = directory[directory.rfind(</span><br><span class="line">os.path.sep) + <span class="number">1</span>:]</span><br><span class="line">path = os.path.join(directory, entry)</span><br><span class="line"><span class="keyword">if</span> os.path.isdir(path):</span><br><span class="line">search_speeches(path, speeches)</span><br><span class="line"><span class="keyword">elif</span> os.path.isfile(path) <span class="keyword">and</span> \</span><br><span class="line">path.endswith(<span class="string">&#x27;.wav&#x27;</span>):</span><br><span class="line"><span class="keyword">if</span> label <span class="keyword">not</span> <span class="keyword">in</span> speeches:</span><br><span class="line">speeches[label] = []</span><br><span class="line">speeches[label].append(path)</span><br><span class="line">train_speeches = &#123;&#125;</span><br><span class="line">search_speeches(<span class="string">&#x27;../data/speeches/training&#x27;</span>,</span><br><span class="line">train_speeches)</span><br><span class="line">train_x, train_y = [], []</span><br><span class="line"><span class="keyword">for</span> label, filenames <span class="keyword">in</span> train_speeches.items():</span><br><span class="line">mfccs = np.array([])</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">sample_rate, sigs = wf.read(filename)</span><br><span class="line">mfcc = sf.mfcc(sigs, sample_rate)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(mfccs) == <span class="number">0</span>:</span><br><span class="line">mfccs = mfcc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">mfccs = np.append(</span><br><span class="line">mfccs, mfcc, axis=<span class="number">0</span>)</span><br><span class="line">train_x.append(mfccs)</span><br><span class="line">train_y.append(label)</span><br><span class="line">modles = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> mfccs, label <span class="keyword">in</span> <span class="built_in">zip</span>(train_x, train_y):</span><br><span class="line">model = hl.GaussianHMM(</span><br><span class="line">n_components=<span class="number">4</span>, covariance_type=<span class="string">&#x27;diag&#x27;</span>,</span><br><span class="line">n_iter=<span class="number">1000</span>)</span><br><span class="line">modles[label] = model.fit(mfccs)</span><br><span class="line">test_speeches = &#123;&#125;</span><br><span class="line">search_speeches(<span class="string">&#x27;../data/speeches/testing&#x27;</span>,</span><br><span class="line">test_speeches)</span><br><span class="line">test_x, test_y = [], []</span><br><span class="line"><span class="keyword">for</span> label, filenames <span class="keyword">in</span> test_speeches.items():</span><br><span class="line">mfccs = np.array([])</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">sample_rate, sigs = wf.read(filename)</span><br><span class="line">mfcc = sf.mfcc(sigs, sample_rate)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(mfccs) == <span class="number">0</span>:</span><br><span class="line">mfccs = mfcc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">mfccs = np.append(mfccs, mfcc, axis=<span class="number">0</span>)</span><br><span class="line">test_x.append(mfccs)</span><br><span class="line">test_y.append(label)</span><br><span class="line">pred_test_y = []</span><br><span class="line"><span class="keyword">for</span> mfccs <span class="keyword">in</span> test_x:</span><br><span class="line">best_score, best_label = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"><span class="keyword">for</span> label, model <span class="keyword">in</span> modles.items():</span><br><span class="line">score = model.score(mfccs)</span><br><span class="line"><span class="keyword">if</span> (best_score <span class="keyword">is</span> <span class="literal">None</span>) <span class="keyword">or</span> \</span><br><span class="line">(best_score &lt; score):</span><br><span class="line">best_score, best_label = \</span><br><span class="line">score, label</span><br><span class="line">pred_test_y.append(best_label)</span><br><span class="line"><span class="built_in">print</span>(test_y)</span><br><span class="line"><span class="built_in">print</span>(pred_test_y)</span><br></pre></td></tr></table></figure><h2 id="声音合成"><a href="#声音合成" class="headerlink" title="声音合成"></a>声音合成</h2><p>根据需求获取某个声音的模型频域数据，根据业务需要可以修改模型数据，逆向生成时域数据，完成声音的合成。</p><p>案例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.io.wavfile <span class="keyword">as</span> wf</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/12.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    freqs = json.loads(f.read())</span><br><span class="line">tones = [</span><br><span class="line">    (<span class="string">&#x27;G5&#x27;</span>, <span class="number">1.5</span>),</span><br><span class="line">    (<span class="string">&#x27;A5&#x27;</span>, <span class="number">0.5</span>),</span><br><span class="line">    (<span class="string">&#x27;G5&#x27;</span>, <span class="number">1.5</span>),</span><br><span class="line">    (<span class="string">&#x27;E5&#x27;</span>, <span class="number">0.5</span>),</span><br><span class="line">    (<span class="string">&#x27;D5&#x27;</span>, <span class="number">0.5</span>),</span><br><span class="line">    (<span class="string">&#x27;E5&#x27;</span>, <span class="number">0.25</span>),</span><br><span class="line">    (<span class="string">&#x27;D5&#x27;</span>, <span class="number">0.25</span>),</span><br><span class="line">    (<span class="string">&#x27;C5&#x27;</span>, <span class="number">0.5</span>),</span><br><span class="line">    (<span class="string">&#x27;A4&#x27;</span>, <span class="number">0.5</span>),</span><br><span class="line">    (<span class="string">&#x27;C5&#x27;</span>, <span class="number">0.75</span>)]</span><br><span class="line">sample_rate = <span class="number">44100</span></span><br><span class="line">music = np.empty(shape=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> tone, duration <span class="keyword">in</span> tones:</span><br><span class="line">    times = np.linspace(<span class="number">0</span>, duration, duration * sample_rate)</span><br><span class="line">    sound = np.sin(<span class="number">2</span> * np.pi * freqs[tone] * times)</span><br><span class="line">    music = np.append(music, sound)</span><br><span class="line">music *= <span class="number">2</span> ** <span class="number">15</span></span><br><span class="line">music = music.astype(np.int16)</span><br><span class="line">wf.write(<span class="string">&#x27;../data/music.wav&#x27;</span>, sample_rate, music)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI进阶 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 语音识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-NLP</title>
      <link href="/2019/04/15/ml/NLP/"/>
      <url>/2019/04/15/ml/NLP/</url>
      
        <content type="html"><![CDATA[<p>自然语言是人类智慧的结晶，自然语言处理是人工智能中最为困难的问题之一，而对自然语言处理的研究也是充满魅力和挑战的。</p><span id="more"></span><h2 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h2><p>文本-&gt;语义<br>分类器<br>文本-&gt;特征值<br>今天 中午 我要 吃 饺子<br>NLTK - 自然语言工具包</p><h2 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h2><p>使用指南</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk.tokenize <span class="keyword">as</span> tk</span><br><span class="line">tk.sent_tokenize(段落) -&gt; 按句拆分</span><br><span class="line">首字母大写、句尾标点(.!?...)</span><br><span class="line">tk.word_tokenize(句子) -&gt; 按单词拆分</span><br><span class="line">n个连续&lt;空格&gt;、换行、标点</span><br><span class="line">分词器 = tk.WordPunctTokenizer()</span><br><span class="line">分词器.tokenize(句子)-&gt;按单词拆分</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk.tokenize <span class="keyword">as</span> tk</span><br><span class="line">doc = <span class="string">&quot;Are you curious about tokenization? &quot;</span> \</span><br><span class="line">      <span class="string">&quot;Let&#x27;s see how it works! &quot;</span> \</span><br><span class="line">      <span class="string">&quot;We need to analyze a couple of sentences &quot;</span> \</span><br><span class="line">      <span class="string">&quot;with punctuations to see it in action.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(doc)</span><br><span class="line">tokens = tk.sent_tokenize(doc)</span><br><span class="line"><span class="keyword">for</span> i, token <span class="keyword">in</span> <span class="built_in">enumerate</span>(tokens):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%2d&#x27;</span> % (i + <span class="number">1</span>), token)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">15</span>)</span><br><span class="line">tokens = tk.word_tokenize(doc)</span><br><span class="line"><span class="keyword">for</span> i, token <span class="keyword">in</span> <span class="built_in">enumerate</span>(tokens):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%2d&#x27;</span> % (i + <span class="number">1</span>), token)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">15</span>)</span><br><span class="line">tokenizer = tk.WordPunctTokenizer()</span><br><span class="line">tokens = tokenizer.tokenize(doc)</span><br><span class="line"><span class="keyword">for</span> i, token <span class="keyword">in</span> <span class="built_in">enumerate</span>(tokens):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%2d&#x27;</span> % (i + <span class="number">1</span>), token)</span><br></pre></td></tr></table></figure><h2 id="词干提取"><a href="#词干提取" class="headerlink" title="词干提取"></a>词干提取</h2><p>波特：偏宽松，保留更多的字母<br>兰卡斯特：偏严格，只保留较少的字母<br>思诺博：偏中庸，严格程度居于二者这间<br>词干!&#x3D;词根!&#x3D;原型<br>语义识别单位</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk.stem.porter <span class="keyword">as</span> pt</span><br><span class="line"><span class="keyword">import</span> nltk.stem.lancaster <span class="keyword">as</span> lc</span><br><span class="line"><span class="keyword">import</span> nltk.stem.snowball <span class="keyword">as</span> sb</span><br><span class="line">words = [<span class="string">&#x27;table&#x27;</span>, <span class="string">&#x27;probably&#x27;</span>, <span class="string">&#x27;wolves&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;playing&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;the&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;beaches&#x27;</span>, <span class="string">&#x27;grounded&#x27;</span>, <span class="string">&#x27;dreamt&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;envision&#x27;</span>]</span><br><span class="line">pt_stemmer = pt.PorterStemmer()</span><br><span class="line">lc_stemmer = lc.LancasterStemmer()</span><br><span class="line">sb_stemmer = sb.SnowballStemmer(<span class="string">&#x27;english&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">pt_stem = pt_stemmer.stem(word)</span><br><span class="line">lc_stem = lc_stemmer.stem(word)</span><br><span class="line">sb_stem = sb_stemmer.stem(word)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%8s %8s %8s %8s&quot;</span> % (word, pt_stem,</span><br><span class="line">lc_stem, sb_stem))</span><br></pre></td></tr></table></figure><h2 id="词型还原"><a href="#词型还原" class="headerlink" title="词型还原"></a>词型还原</h2><p>名词：变成单数<br>动词：动词原型</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk.stem <span class="keyword">as</span> ns</span><br><span class="line">words = [<span class="string">&#x27;table&#x27;</span>, <span class="string">&#x27;probably&#x27;</span>, <span class="string">&#x27;wolves&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;playing&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;the&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;beaches&#x27;</span>, <span class="string">&#x27;grounded&#x27;</span>, <span class="string">&#x27;dreamt&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;envision&#x27;</span>]</span><br><span class="line">lemmatizer = ns.WordNetLemmatizer()</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">n_lema = lemmatizer.lemmatize(word, pos=<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">v_lema = lemmatizer.lemmatize(word, pos=<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%8s %8s %8s&quot;</span> % (word, n_lema, v_lema))</span><br></pre></td></tr></table></figure><h2 id="词袋模型"><a href="#词袋模型" class="headerlink" title="词袋模型"></a>词袋模型</h2><p>词表：包含段落中不同单词的个数。<br>[1]The brown dog is running.<br>[2]The black dog is in the black room.<br>[3]Running in the room is forbidden.<br>the brown dog is running black in room forbidden<br>           black brown dog forbidden in is room running the<br>[1]         0         1         1           0         0  1    0           1         1<br>[2]         2         0         1           0         1  1    1           0         2<br>[3]         0         0         0           1         1  1    1           1         1 </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk.tokenize <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> sklearn.feature_extraction.text <span class="keyword">as</span> ft</span><br><span class="line">doc = <span class="string">&#x27;The brown dog is running. &#x27;</span> \</span><br><span class="line">      <span class="string">&#x27;The black dog is in the black room. &#x27;</span> \</span><br><span class="line">      <span class="string">&#x27;Running in the room is forbidden.&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(doc)</span><br><span class="line">setences = tk.sent_tokenize(doc)</span><br><span class="line"><span class="built_in">print</span>(setences)</span><br><span class="line"><span class="comment"># 计数矢量化器</span></span><br><span class="line">cv = ft.CountVectorizer()</span><br><span class="line">bow = cv.fit_transform(setences).toarray()</span><br><span class="line">words = cv.get_feature_names()</span><br><span class="line"><span class="built_in">print</span>(words)</span><br><span class="line"><span class="built_in">print</span>(bow)</span><br></pre></td></tr></table></figure><h2 id="词频"><a href="#词频" class="headerlink" title="词频"></a>词频</h2><p>对词袋矩阵做归一化，用词表中的每个单词在每个样本中出现的频率，表示该单词对具体语句语义的价值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk.tokenize <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> sklearn.feature_extraction.text <span class="keyword">as</span> ft</span><br><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> sp</span><br><span class="line">doc = <span class="string">&#x27;The brown dog is running. &#x27;</span> \</span><br><span class="line">      <span class="string">&#x27;The black dog is in the black room. &#x27;</span> \</span><br><span class="line">      <span class="string">&#x27;Running in the room is forbidden.&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(doc)</span><br><span class="line">setences = tk.sent_tokenize(doc)</span><br><span class="line"><span class="built_in">print</span>(setences)</span><br><span class="line"><span class="comment"># 计数矢量化器</span></span><br><span class="line">cv = ft.CountVectorizer()</span><br><span class="line">bow = cv.fit_transform(setences).toarray()</span><br><span class="line">words = cv.get_feature_names()</span><br><span class="line"><span class="built_in">print</span>(words)</span><br><span class="line"><span class="built_in">print</span>(bow)</span><br><span class="line">tf = sp.normalize(bow, norm=<span class="string">&#x27;l1&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(tf)</span><br></pre></td></tr></table></figure><p>$$逆文档频率 &#x3D; \frac{样本总数}{包含某个特定单词的样本数}$$</p><p>词频逆文档频率：TF-IDF，自然语言的数学模型</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk.tokenize <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> sklearn.feature_extraction.text <span class="keyword">as</span> ft</span><br><span class="line">doc = <span class="string">&#x27;The brown dog is running. &#x27;</span> \</span><br><span class="line">      <span class="string">&#x27;The black dog is in the black room. &#x27;</span> \</span><br><span class="line">      <span class="string">&#x27;Running in the room is forbidden.&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(doc)</span><br><span class="line">setences = tk.sent_tokenize(doc)</span><br><span class="line"><span class="built_in">print</span>(setences)</span><br><span class="line"><span class="comment"># 计数矢量化器</span></span><br><span class="line">cv = ft.CountVectorizer()</span><br><span class="line">bow = cv.fit_transform(setences).toarray()</span><br><span class="line">words = cv.get_feature_names()</span><br><span class="line"><span class="built_in">print</span>(words)</span><br><span class="line"><span class="built_in">print</span>(bow)</span><br><span class="line"><span class="comment"># TF-IDF转换器</span></span><br><span class="line">tt = ft.TfidfTransformer()</span><br><span class="line">tfidf = tt.fit_transform(bow).toarray()</span><br><span class="line"><span class="built_in">print</span>(tfidf)</span><br></pre></td></tr></table></figure><h2 id="文本分类"><a href="#文本分类" class="headerlink" title="文本分类"></a>文本分类</h2><p>1 2 3 4 5 6<br>2 3 0 0 4 1<br>0 8 0 0 0 2<br>…</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn.datasets <span class="keyword">as</span> sd</span><br><span class="line"><span class="keyword">import</span> sklearn.feature_extraction.text <span class="keyword">as</span> ft</span><br><span class="line"><span class="keyword">import</span> sklearn.naive_bayes <span class="keyword">as</span> nb</span><br><span class="line">train = sd.load_files(<span class="string">&#x27;../data/20news&#x27;</span>,</span><br><span class="line">encoding=<span class="string">&#x27;latin1&#x27;</span>, shuffle=<span class="literal">True</span>,</span><br><span class="line">random_state=<span class="number">7</span>)</span><br><span class="line">train_data = train.data</span><br><span class="line">train_y = train.target</span><br><span class="line">categories = train.target_names</span><br><span class="line">cv = ft.CountVectorizer()</span><br><span class="line">train_bow = cv.fit_transform(train_data)</span><br><span class="line">tt = ft.TfidfTransformer()</span><br><span class="line"><span class="comment"># TF-IDF</span></span><br><span class="line">train_x = tt.fit_transform(train_bow);</span><br><span class="line"><span class="comment"># 基于多项分布的朴素贝叶斯分类器</span></span><br><span class="line">model = nb.MultinomialNB()</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">test_data = [</span><br><span class="line"><span class="string">&#x27;The curveballs of right handed pitchers tend to curve to the left&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Caesar cipher is an ancient form of encryption&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;This two-wheeler is realy good on slippery roads&#x27;</span>]</span><br><span class="line">test_bow = cv.transform(test_data)</span><br><span class="line">test_x = tt.transform(test_bow)</span><br><span class="line">pred_test_y = model.predict(test_x)</span><br><span class="line"><span class="keyword">for</span> sentence, index <span class="keyword">in</span> <span class="built_in">zip</span>(</span><br><span class="line">test_data, pred_test_y):</span><br><span class="line"><span class="built_in">print</span>(sentence, <span class="string">&#x27;-&gt;&#x27;</span>, categories[index])</span><br></pre></td></tr></table></figure><h2 id="情感分析"><a href="#情感分析" class="headerlink" title="情感分析"></a>情感分析</h2><p>一个样本一个tuple: (dict: {特征名: 特征值}, 输出)<br>整个样本集就是一个tuple的list</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk.corpus <span class="keyword">as</span> nc</span><br><span class="line"><span class="keyword">import</span> nltk.classify <span class="keyword">as</span> cf</span><br><span class="line"><span class="keyword">import</span> nltk.classify.util <span class="keyword">as</span> cu</span><br><span class="line">pdata = []</span><br><span class="line">fileids = nc.movie_reviews.fileids(<span class="string">&#x27;pos&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> fileid <span class="keyword">in</span> fileids:</span><br><span class="line">feature = &#123;&#125;</span><br><span class="line">words = nc.movie_reviews.words(fileid)</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">feature[word] = <span class="literal">True</span>;</span><br><span class="line">pdata.append((feature, <span class="string">&#x27;POSITIVE&#x27;</span>))</span><br><span class="line">ndata = []</span><br><span class="line">fileids = nc.movie_reviews.fileids(<span class="string">&#x27;neg&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> fileid <span class="keyword">in</span> fileids:</span><br><span class="line">feature = &#123;&#125;</span><br><span class="line">words = nc.movie_reviews.words(fileid)</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">feature[word] = <span class="literal">True</span>;</span><br><span class="line">ndata.append((feature, <span class="string">&#x27;NEGATIVE&#x27;</span>))</span><br><span class="line">pnumb, nnumb = <span class="built_in">int</span>(<span class="number">0.8</span> * <span class="built_in">len</span>(pdata)), \</span><br><span class="line"><span class="built_in">int</span>(<span class="number">0.8</span> * <span class="built_in">len</span>(ndata))</span><br><span class="line">train_data = pdata[:pnumb] + ndata[:nnumb]</span><br><span class="line">test_data = pdata[pnumb:] + ndata[nnumb:]</span><br><span class="line">model = cf.NaiveBayesClassifier.train(</span><br><span class="line">train_data)</span><br><span class="line">ac = cu.accuracy(model, test_data)</span><br><span class="line">reviews = [</span><br><span class="line"><span class="string">&#x27;It is an amazing movie.&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;This is a dull movie. I would never recommend it to anyone.&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;The cinematography is pretty great in this movie.&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;The direction was terrible and the story was all over the place.&#x27;</span>]</span><br><span class="line">sents, probs = [], []</span><br><span class="line"><span class="keyword">for</span> review <span class="keyword">in</span> reviews:</span><br><span class="line">feature = &#123;&#125;</span><br><span class="line">words = review.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">feature[word] = <span class="literal">True</span></span><br><span class="line">pcls = model.prob_classify(feature)</span><br><span class="line">sent = pcls.<span class="built_in">max</span>()</span><br><span class="line">prob = pcls.prob(sent)</span><br><span class="line">sents.append(sent)</span><br><span class="line">probs.append(prob)</span><br><span class="line"><span class="keyword">for</span> review, sent, prob <span class="keyword">in</span> <span class="built_in">zip</span>(</span><br><span class="line">reviews, sents, probs):</span><br><span class="line"><span class="built_in">print</span>(review, <span class="string">&#x27;-&gt;&#x27;</span>, sent, prob)</span><br></pre></td></tr></table></figure><h2 id="主题抽取"><a href="#主题抽取" class="headerlink" title="主题抽取"></a>主题抽取</h2><p>基于LDA，隐狄利克雷分布</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(</span><br><span class="line"><span class="string">&#x27;ignore&#x27;</span>, category=UserWarning)</span><br><span class="line"><span class="keyword">import</span> nltk.tokenize <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> nltk.corpus <span class="keyword">as</span> nc</span><br><span class="line"><span class="keyword">import</span> nltk.stem.snowball <span class="keyword">as</span> sb</span><br><span class="line"><span class="keyword">import</span> gensim.models.ldamodel <span class="keyword">as</span> gm</span><br><span class="line"><span class="keyword">import</span> gensim.corpora <span class="keyword">as</span> gc</span><br><span class="line">doc = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/topic.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">doc.append(line[:-<span class="number">1</span>])</span><br><span class="line">tokenizer = tk.RegexpTokenizer(<span class="string">r&#x27;\w+&#x27;</span>)</span><br><span class="line">stopwords = nc.stopwords.words(<span class="string">&#x27;english&#x27;</span>)</span><br><span class="line">stemmer = sb.SnowballStemmer(<span class="string">&#x27;english&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="结巴分词"><a href="#结巴分词" class="headerlink" title="结巴分词"></a>结巴分词</h2><p><a href="https://github.com/fxsjy/jieba">GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI进阶 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-推荐系统</title>
      <link href="/2019/04/11/ml/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/04/11/ml/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>推荐系统是一种信息过滤系统，用于预测用户对物品的评分或偏好。这个定义不是很好理解，因为它用“怎么做”来定义“是什么”，我们可以换个角度来理解：</p><span id="more"></span><h3 id="推荐引擎"><a href="#推荐引擎" class="headerlink" title="推荐引擎"></a>推荐引擎</h3><p>推荐引擎意在把最需要的推荐给用户。</p><p>在不同的机器学习场景中通常需要分析相似样本。而统计相似样本的方式可以基于欧氏距离分数，也可基于皮氏距离分数。</p><p><strong>欧氏距离分数</strong><br>$$<br>欧氏距离分数 &#x3D; \frac{1}{1+欧氏距离}<br>$$<br>计算所得欧氏距离分数区间处于：[0, 1]，越趋于0样本间的欧氏距离越远，样本越不相似；越趋于1，样本间的欧氏距离越近，越相似。</p><p>构建样本之间的欧氏距离得分矩阵：<br>$$<br>\left[ \begin{array}{c}    &amp; a &amp; b &amp; c &amp; d &amp; .. \  a &amp; 1 &amp; 0.2 &amp; 0.3 &amp; 0.4 &amp; .. \  b &amp; 0.2 &amp; 1 &amp; x &amp; x &amp; .. \  c &amp; 0.3 &amp; x &amp; 1 &amp; x &amp; .. \  d &amp; 0.4 &amp; x &amp; x &amp; 1 &amp; .. \  .. &amp; .. &amp; .. &amp; .. &amp; .. &amp; .. \  \end{array}  \right]<br>$$<br>案例：解析ratings.json，根据每个用户对已观看电影的打分计算样本间的欧氏距离，输出欧氏距离得分矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/ratings.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ratings = json.loads(f.read())</span><br><span class="line">users, scmat = <span class="built_in">list</span>(ratings.keys()), []</span><br><span class="line"><span class="keyword">for</span> user1 <span class="keyword">in</span> users:</span><br><span class="line">    scrow = []</span><br><span class="line">    <span class="keyword">for</span> user2 <span class="keyword">in</span> users:</span><br><span class="line">        movies = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> movie <span class="keyword">in</span> ratings[user1]:</span><br><span class="line">            <span class="keyword">if</span> movie <span class="keyword">in</span> ratings[user2]:</span><br><span class="line">                movies.add(movie)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(movies) == <span class="number">0</span>:</span><br><span class="line">            score = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x, y = [], []</span><br><span class="line">            <span class="keyword">for</span> movie <span class="keyword">in</span> movies:</span><br><span class="line">                x.append(ratings[user1][movie])</span><br><span class="line">                y.append(ratings[user2][movie])</span><br><span class="line">            x = np.array(x)</span><br><span class="line">            y = np.array(y)</span><br><span class="line">            score = <span class="number">1</span> / (<span class="number">1</span> + np.sqrt(((x - y) ** <span class="number">2</span>).<span class="built_in">sum</span>()))</span><br><span class="line">        scrow.append(score)</span><br><span class="line">    scmat.append(scrow)</span><br><span class="line">users = np.array(users)</span><br><span class="line">scmat = np.array(scmat)</span><br><span class="line"><span class="keyword">for</span> scrow <span class="keyword">in</span> scmat:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;  &#x27;</span>.join(<span class="string">&#x27;&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(score) <span class="keyword">for</span> score <span class="keyword">in</span> scrow)) </span><br></pre></td></tr></table></figure><p><strong>皮尔逊相关系数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A = [1,2,3,1,2] </span><br><span class="line">B = [3,4,5,3,4] </span><br><span class="line">m = np.corrcoef(A, B)</span><br></pre></td></tr></table></figure><p>皮尔逊相关系数 &#x3D; 协方差 &#x2F; 标准差之积</p><p>相关系数处于[-1, 1]区间。越靠近-1代表两组样本反相关，越靠近1代表两组样本正相关。</p><p>案例：使用皮尔逊相关系数计算两用户对一组电影评分的相关性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">score = np.corrcoef(x, y)[<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>按照相似度从高到低排列每个用户的相似用户</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scmat矩阵中每一行为 每一个用户对所有用户的皮尔逊相关系数</span></span><br><span class="line"><span class="keyword">for</span> i, user <span class="keyword">in</span> <span class="built_in">enumerate</span>(users):</span><br><span class="line">    <span class="comment"># 拿到所有相似用户与相似用户所对应的皮尔逊相关系数</span></span><br><span class="line">    sorted_indices = scmat[i].argsort()[::-<span class="number">1</span>]</span><br><span class="line">    sorted_indices = sorted_indices[sorted_indices != i]</span><br><span class="line">    similar_users = users[sorted_indices]</span><br><span class="line">    similar_scores = scmat[i, sorted_indices]</span><br><span class="line">    <span class="built_in">print</span>(user, similar_users, similar_scores, sep=<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>生成推荐清单</strong></p><ol><li>找到所有皮尔逊系数正相关的用户</li><li>遍历当前用户的每个相似用户，拿到相似用户看过但是当前用户没有看过的电影作为推荐电影</li><li>多个相似用户有可能推荐同一部电影，则取每个相似用户对该电影的评分得均值作为推荐度。</li><li>可以把相似用户的皮尔逊系数作为权重，皮尔逊系数越大，推荐度越高。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到所有皮尔逊系数正相关的用户</span></span><br><span class="line">positive_mask = similar_scores &gt; <span class="number">0</span></span><br><span class="line">similar_users = similar_users[positive_mask]</span><br><span class="line"><span class="comment"># 相似用户对应的皮尔逊相关系数</span></span><br><span class="line">similar_scores = similar_scores[positive_mask]</span><br><span class="line"><span class="comment">#存储对于当前用户所推荐的电影以及电影的推荐度(推荐电影的平均分)</span></span><br><span class="line">recomm_movies = &#123;&#125;</span><br><span class="line"><span class="comment">#遍历当前用户的每个相似用户</span></span><br><span class="line"><span class="keyword">for</span> i, similar_user <span class="keyword">in</span> <span class="built_in">enumerate</span>(similar_users):</span><br><span class="line">    <span class="comment">#拿到相似用户看过但是当前用户没有看过的电影</span></span><br><span class="line">    <span class="keyword">for</span> movie, score <span class="keyword">in</span> ratings[similar_user].items():</span><br><span class="line">        <span class="keyword">if</span> (movie <span class="keyword">not</span> <span class="keyword">in</span> ratings[user].keys()):</span><br><span class="line">            <span class="keyword">if</span> movie <span class="keyword">not</span> <span class="keyword">in</span> recomm_movies:</span><br><span class="line">                recomm_movies[movie] = []</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                recomm_movies[movie].append(score)</span><br><span class="line">                </span><br><span class="line"><span class="built_in">print</span>(user)</span><br><span class="line">movie_list = <span class="built_in">sorted</span>(recomm_movies.items(), key=<span class="keyword">lambda</span> x:np.average(x[<span class="number">1</span>]), reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(movie_list)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI进阶 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 推荐系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS - App架构</title>
      <link href="/2019/04/08/ios/general/iOS-App%E6%9E%B6%E6%9E%84/"/>
      <url>/2019/04/08/ios/general/iOS-App%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>不想成为架构的程序员不是好程序员。这篇文章主要是对App架构的理解<span id="more"></span></p><h2 id="常见概念剖析"><a href="#常见概念剖析" class="headerlink" title="常见概念剖析"></a>常见概念剖析</h2><p>在做系统初始框架设计与系统重构的过程中，我们都会遇见下面的词。</p><h3 id="系统与子系统"><a href="#系统与子系统" class="headerlink" title="系统与子系统"></a>系统与子系统</h3><h4 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h4><p><code>系统</code>泛指由一群有关联的个体组成，根据某种规则运作，能完成<code>个别元件</code>不能单独完成的工作的<code>群体</code>。它的意思是<code>总体</code> <code>整体</code>或<code>联盟</code>。<br><strong>提炼一下关键内容：</strong></p><ul><li><strong>关联</strong>：<code>系统</code>是由一群_有关联的_<code>个体</code>组成的。例如：把一个发动机和一台 PC 放在一起不能称之为一个系统，把发动机、底盘、轮胎、车架组合起来才能成为一台汽车。</li><li><strong>规则</strong>：系统内的个体需要按照指定的规则运作，而不是单个个体各自为政。规则规定了系统内个体分工和协作的方式。例如：汽车发动机负责产生动力，然后通过变速器和传动轴，将动力输出到车轮上，从而驱动汽车前进。</li><li><strong>能力</strong>：系统能力与个体能力有本质的差别，系统能力不是个体能力之和，而是产生了新的能力。例如：汽车能够载重前进，而发动机、变速器、传动轴、车轮本身都不具备这样的能力。</li></ul><blockquote><p>没有关联的个体堆在一起不能成为一个系统。</p></blockquote><h4 id="子系统"><a href="#子系统" class="headerlink" title="子系统"></a>子系统</h4><p>子系统也是由一群有关联的个体所组成的系统，多半会是更大系统中的一部分。</p><blockquote><p>其实子系统的定义和系统定义是一样的，只是观察的角度有差异，一个系统可能是另外一个更大系统的子系统。</p></blockquote><p><strong>以微信为例来做分析</strong></p><ol><li>微信本身是一个系统，包含聊天、登录、支付、朋友圈等子系统。</li><li>朋友圈这个系统又包括动态、评论、点赞等子系统。</li><li>评论这个系统可能又包括防刷子系统、审核子系统、发布子系统、存储子系统。</li><li>评论审核子系统不再包含业务意义上的子系统，而是包括各个模块或者组件，这些模块或者组件本身也是另外一个维度上的系统。例如，MySQL、Redis 等是存储系统，但不是业务子系统。</li></ol><h3 id="模块与组件"><a href="#模块与组件" class="headerlink" title="模块与组件"></a>模块与组件</h3><p><code>模块</code>和<code>组件</code>都是系统的组成部分，只是从不同的角度拆分系统而已。</p><table><thead><tr><th></th><th align="left">模块</th><th align="left">组件</th></tr></thead><tbody><tr><td>拆分角度</td><td align="left">逻辑</td><td align="left">物理</td></tr><tr><td>划分目的</td><td align="left">职责分离</td><td align="left">单元复用</td></tr></tbody></table><p><strong>最简单的网站系统为例</strong><br>假设我们要做一个学生信息管理系统</p><ul><li>从逻辑的角度来拆分，可以分为<code>登录注册模块</code>,<code>个人信息模块</code>,<code>个人成绩模块</code>等；</li><li>从物理的角度来拆分，可以拆分为 <code>Nginx</code>、<code>Web 服务器</code>、<code>MySQL</code>。</li></ul><h3 id="框架与架构"><a href="#框架与架构" class="headerlink" title="框架与架构"></a>框架与架构</h3><p>框架是和架构比较相似的概念，且两者有较强的关联关系，所以在实际工作中，这两个概念有时我们容易分不清楚。</p><p>从软件系统来说，框架是规范也是约束，可以理解为封闭性的话题，定义好，让别人如何去使用，而架构是一种结构，是一种开放性的话题，如何去设计组织架构，如何让架构更具有拓展性，减少沟通错误成本。</p><p>框架是规矩，架构是按照规矩做规划。系统是学校，子系统是班级，模块是学生老师，组件是课桌椅。每一层级的作用意义和范围不一样，要求和可复用度也不一样。</p><p><strong>但是在iOS中</strong><br>框架</p><ul><li>编程规范，比如说MVC，MVVM等</li><li>静态库和动态库，比如Foundation，AFNetworking</li></ul><p>架构</p><ul><li>CPU架构</li><li>分层架构</li><li>上面的框架</li><li>软件开发中的设计方案</li><li>类与类之间的关系、模块与模块之间的关系、客户端与服务端的关系</li></ul><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="MVC-Apple官方推荐"><a href="#MVC-Apple官方推荐" class="headerlink" title="MVC - Apple官方推荐"></a>MVC - Apple官方推荐</h3><ul><li>Model</li><li>View</li><li>Controller</li></ul><p><img src="https://cdn.rencheng.cc/blog/tctei.png"></p><p>优点：View、Model可以重复利用，可以独立使用<br>缺点：Controller的代码过于臃肿</p><h3 id="MVC-变种"><a href="#MVC-变种" class="headerlink" title="MVC - 变种"></a>MVC - 变种</h3><p><img src="https://cdn.rencheng.cc/blog/2fquy.png"></p><p>优点：对Controller进行瘦身，将View内部的细节封装起来了，外界不知道View内部的具体实现<br>缺点：View依赖于Model</p><h3 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h3><p><img src="https://cdn.rencheng.cc/blog/4llxs.png"></p><p>优点：对Controller进行瘦身，将Controller的一些业务代码移植到了Presenter里面</p><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p><img src="https://cdn.rencheng.cc/blog/al2uf.png"><br>一般搭配KVO实现双向绑定；</p><h3 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h3><p>架构进行分层理解<br><img src="https://cdn.rencheng.cc/blog/8xdfb.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能优化</title>
      <link href="/2019/04/06/ios/general/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2019/04/06/ios/general/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>公司的项目已经上线运营有2年了，不管是启动速度，还是个别界面都有些卡顿</p><span id="more"></span><h2 id="CPU-和-GPU"><a href="#CPU-和-GPU" class="headerlink" title="CPU 和 GPU"></a>CPU 和 GPU</h2><p>在屏幕成像的过程中，CPU和GPU起着至关重要的作用<br><strong>CPU（Central Processing Unit，中央处理器）</strong><br>对象的创建和销毁、对象属性的调整、布局计算、文本的计算和排版、图片的格式转换和解码、图像的绘制（Core Graphics）</p><p><strong>GPU（Graphics Processing Unit，图形处理器）</strong><br>纹理的渲染</p><p><img src="https://cdn.rencheng.cc/blog/ua7kk.png"></p><blockquote><p>在iOS中是双缓冲机制，有前帧缓存、后帧缓存</p></blockquote><h2 id="屏幕成像原理"><a href="#屏幕成像原理" class="headerlink" title="屏幕成像原理"></a>屏幕成像原理</h2><p>每一帧渲染，都会先触发垂直同步，然后触发每一行的水平同步<br><img src="https://cdn.rencheng.cc/blog/g0xby.png"></p><h2 id="卡顿"><a href="#卡顿" class="headerlink" title="卡顿"></a>卡顿</h2><p>“卡顿”主要是因为在主线程执行了比较耗时的操作</p><h3 id="卡顿的原因"><a href="#卡顿的原因" class="headerlink" title="卡顿的原因"></a>卡顿的原因</h3><p><img src="https://cdn.rencheng.cc/blog/bdh1i.png"></p><h3 id="卡顿优化"><a href="#卡顿优化" class="headerlink" title="卡顿优化"></a>卡顿优化</h3><p>尽可能减少CPU、GPU资源消耗</p><blockquote><p>按照60FPS的刷帧率，每隔16ms就会有一次VSync信号</p></blockquote><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><ul><li>尽量用轻量级的对象，比如用不到事件处理的地方，可以考虑使用CALayer取代UIView</li><li>不要频繁地调用UIView的相关属性，比如frame、bounds、transform等属性，尽量减少不必要的修改</li><li>尽量提前计算好布局，在有需要时一次性调整对应的属性，不要多次修改属性</li><li>Autolayout会比直接设置frame消耗更多的CPU资源</li><li>图片的size最好刚好跟UIImageView的size保持一致</li><li>控制一下线程的最大并发数量</li><li>尽量把耗时的操作放到子线程<ul><li>文本处理（尺寸计算、绘制）</li><li>图片处理（解码、绘制）</li></ul></li></ul><h4 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h4><ul><li>尽量避免短时间内大量图片的显示，尽可能将多张图片合成一张进行显示</li><li>GPU能处理的最大纹理尺寸是4096x4096，一旦超过这个尺寸，就会占用CPU资源进行处理，所以纹理尽量不要超过这个尺寸</li><li>尽量减少视图数量和层次</li><li>减少透明的视图（alpha&lt;1），不透明的就设置opaque为YES</li><li>尽量避免出现离屏渲染</li></ul><h4 id="离屏渲染"><a href="#离屏渲染" class="headerlink" title="离屏渲染"></a>离屏渲染</h4><h5 id="在OpenGL中，GPU有2种渲染方式"><a href="#在OpenGL中，GPU有2种渲染方式" class="headerlink" title="在OpenGL中，GPU有2种渲染方式"></a>在OpenGL中，GPU有2种渲染方式</h5><p>On-Screen Rendering：当前屏幕渲染，在当前用于显示的屏幕缓冲区进行渲染操作<br>Off-Screen Rendering：离屏渲染，在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作</p><h5 id="离屏渲染消耗性能的原因"><a href="#离屏渲染消耗性能的原因" class="headerlink" title="离屏渲染消耗性能的原因"></a>离屏渲染消耗性能的原因</h5><p>需要创建新的缓冲区<br>离屏渲染的整个过程，需要多次切换上下文环境，先是从当前屏幕（On-Screen）切换到离屏（Off-Screen）；等到离屏渲染结束以后，将离屏缓冲区的渲染结果显示到屏幕上，又需要将上下文环境从离屏切换到当前屏幕</p><h5 id="哪些操作会触发离屏渲染？"><a href="#哪些操作会触发离屏渲染？" class="headerlink" title="哪些操作会触发离屏渲染？"></a>哪些操作会触发离屏渲染？</h5><ul><li>光栅化，layer.shouldRasterize &#x3D; YES</li><li>遮罩，layer.mask</li><li>圆角，同时设置layer.masksToBounds &#x3D; YES、layer.cornerRadius大于0<br>考虑通过CoreGraphics绘制裁剪圆角，或者叫美工提供圆角图片</li><li>阴影，layer.shadowXXX<br>如果设置了layer.shadowPath就不会产生离屏渲染</li></ul><h3 id="卡顿检测"><a href="#卡顿检测" class="headerlink" title="卡顿检测"></a>卡顿检测</h3><p><a href="https://github.com/sindrilin/LXDAppMonitor">LXDAppMonitor</a><br><strong>实现原理</strong><br>添加Observer到主线程RunLoop中，通过监听RunLoop状态切换的耗时，以达到监控卡顿的目的；<em>LXDAppMonitor中是5次都是卡顿才记录</em></p><h2 id="耗电"><a href="#耗电" class="headerlink" title="耗电"></a>耗电</h2><h3 id="耗电的主要来源"><a href="#耗电的主要来源" class="headerlink" title="耗电的主要来源"></a>耗电的主要来源</h3><ul><li>CPU处理，Processing</li><li>网络，Networking</li><li>定位，Location</li><li>图像，Graphics</li></ul><h3 id="耗电优化"><a href="#耗电优化" class="headerlink" title="耗电优化"></a>耗电优化</h3><ul><li>尽可能降低CPU、GPU功耗</li><li>少用定时器</li><li>优化I&#x2F;O操作<ul><li>尽量不要频繁写入小数据，最好批量一次性写入</li><li>读写大量重要数据时，考虑用dispatch_io，其提供了基于GCD的异步操作文件I&#x2F;O的API。用dispatch_io系统会优化磁盘访问</li><li>数据量比较大的，建议使用数据库（比如SQLite、CoreData）</li></ul></li><li>网络优化<ul><li>减少、压缩网络数据。例如可采用google的<code>protocol buffer</code>是数据格式去替换json和xml；或使用gzip来压缩数据</li><li>使用缓存。如果多次请求的结果是相同的</li><li>断点续传。尽可能使用断点续传，否则网络不稳定时可能多次传输相同的内容</li><li>频繁请求。网络不可用时，不要尝试执行网络请求</li><li>设置超时时间。让用户可以取消长时间运行或者速度很慢的网络操作</li><li>批量传输。比如，下载视频流时，不要传输很小的数据包，直接下载整个文件或者一大块一大块地下载。如果下载广告，一次性多下载一些，然后再慢慢展示。如果下载电子邮件，一次下载多封，不要一封一封地下载</li></ul></li><li>定位优化<ul><li>如果只是需要快速确定用户位置，最好用CLLocationManager的requestLocation方法。定位完成后，会自动让定位硬件断电</li><li>如果不是导航应用，尽量不要实时更新位置，定位完毕就关掉定位服务</li><li>尽量降低定位精度，比如尽量不要使用精度最高的<code>kCLLocationAccuracyBest</code></li><li>需要后台定位时，尽量设置<code>pausesLocationUpdatesAutomatically=YES</code>，如果用户不太可能移动的时候系统会自动暂停位置更新</li><li>尽量不要使用<code>startMonitoringSignificantLocationChanges</code>，优先考虑<code>startMonitoringForRegion:</code></li></ul></li><li>硬件检测优化<ul><li>用户移动、摇晃、倾斜设备时，会产生动作(motion)事件，这些事件由加速度计、陀螺仪、磁力计等硬件检测。在不需要检测的场合，应该及时关闭这些硬件</li></ul></li></ul><h2 id="App启动"><a href="#App启动" class="headerlink" title="App启动"></a>App启动</h2><h3 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h3><ul><li><strong>冷启动（Cold Launch）</strong>：从零开始启动APP</li><li><strong>热启动（Warm Launch）</strong>：APP已经在内存中，在后台存活着，再次点击图标启动APP</li></ul><h3 id="冷启动的优化"><a href="#冷启动的优化" class="headerlink" title="冷启动的优化"></a>冷启动的优化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过添加环境变量可以打印出APP的启动时间分析（Edit scheme -&gt; Run -&gt; Arguments）</span><br><span class="line">DYLD_PRINT_STATISTICS设置为1</span><br><span class="line">如果需要更详细的信息，那就将DYLD_PRINT_STATISTICS_DETAILS设置为1</span><br></pre></td></tr></table></figure><h3 id="冷启动的三个阶段"><a href="#冷启动的三个阶段" class="headerlink" title="冷启动的三个阶段"></a>冷启动的三个阶段</h3><ul><li>dyld</li><li>runtime</li><li>main<br><img src="https://cdn.rencheng.cc/blog/v1co6.jpg"></li></ul><h4 id="dyld"><a href="#dyld" class="headerlink" title="dyld"></a>dyld</h4><p>dyld（dynamic link editor），Apple的动态链接器，可以用来装载Mach-O文件（可执行文件、动态库等）</p><p>装载APP的可执行文件，同时会递归加载所有依赖的动态库，完成会通知Runtime进行下一步的处理</p><h4 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h4><ul><li>调用<code>map_images</code>进行可执行文件内容的解析和处理</li><li>在<code>load_images</code>中调用<code>call_load_methods</code>，调用所有Class和Category的+load方法</li><li>各种objc结构的初始化（注册Objc类 、初始化类对象等等）</li><li>调用C++静态初始化器和__attribute__((constructor))修饰的函数</li></ul><h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><p>调用UIApplicationMain函数，AppDelegate的<code>application:didFinishLaunchingWithOptions:</code>方法</p><h3 id="启动优化"><a href="#启动优化" class="headerlink" title="启动优化"></a>启动优化</h3><p><strong>dyld</strong></p><ul><li>减少动态库、合并一些动态库（定期清理不必要的动态库）</li><li>减少Objc类、分类的数量、减少Selector数量（定期清理不必要的类、分类）</li><li>减少C++虚函数数量</li><li>Swift尽量使用struct</li></ul><p><strong>Runtime</strong></p><ul><li>用+initialize方法和dispatch_once取代所有的__attribute__((constructor))、C++静态构造器、ObjC的+load</li></ul><p><strong>main</strong></p><ul><li>在不影响用户体验的前提下，尽可能将一些操作延迟，不要全部都放在finishLaunching方法中</li><li>按需加载</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> App优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-聚类问题</title>
      <link href="/2019/03/01/ml/%E8%81%9A%E7%B1%BB/"/>
      <url>/2019/03/01/ml/%E8%81%9A%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>分类（class）与聚类（cluster）不同，分类是有监督学习模型，聚类属于无监督学习模型。聚类讲究使用一些算法把样本划分为n个群落。一般情况下，这种算法都需要计算欧氏距离。</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在输出未知的前提下，仅根据已知的输入寻找样本之间的内在联系，据此将输入样本划分为不同的族群。</p><h2 id="量化相似度"><a href="#量化相似度" class="headerlink" title="量化相似度"></a>量化相似度</h2><h3 id="欧式距离"><a href="#欧式距离" class="headerlink" title="欧式距离"></a>欧式距离</h3><p>$P(x1,y1)$<br>$Q(x2,y2)$<br>$|PQ|&#x3D;\sqrt{(x1 - x2)^2 + (y1 - y2)^2}$</p><p>$P(x1,y1,z1)$<br>$Q(x2,y2,z2)$<br>$|PQ|&#x3D;\sqrt{(x1-x2)^2+(y1-y2)^2+(z1-z2)^2}$</p><p>$P(x1,y1,z1,…)$<br>$Q(x2,y2,z2,…)$</p><p>张三(1.7,60)<br>李四(1.75,200)<br>王五(2.5,65)<br>赵六(1.72,61)<br>两个N维样本之间的欧氏距离越小，就越相似，反而反之。</p><p>用两个样本对应特征值之差的平方和之平方根，即欧氏距离，来表示这两个样本的相似性。</p><h2 id="K均值聚类"><a href="#K均值聚类" class="headerlink" title="K均值聚类"></a>K均值聚类</h2><p>第一步：随机选择k个样本作为k个聚类的中心，计算每个样本到各个聚类中心的欧氏距离，将该样本分配到与之距离最近的聚类中心所在的类别中。</p><p>第二步：根据第一步所得到的聚类划分，分别计算每个聚类的几何中心，将几何中心作为新的聚类中心，重复第一步，直到计算所得几何中心与聚类中心重合或接近重合为止。</p><p><strong>注意：</strong></p><ol><li>聚类数k必须事先已知。借助某些评估指标，优选最好的聚类数。</li><li>聚类中心的初始选择会影响到最终聚类划分的结果。初始中心尽量选择距离较远的样本。</li></ol><p>K均值算法相关API：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn.cluster <span class="keyword">as</span> sc</span><br><span class="line"><span class="comment"># n_clusters: 聚类数</span></span><br><span class="line">model = sc.KMeans(n_clusters=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 不断调整聚类中心，知道最终聚类中心稳定则聚类完成</span></span><br><span class="line">model.fit(x)</span><br><span class="line"><span class="comment"># 获取训练结果的聚类中心</span></span><br><span class="line">centers = model.cluster_centers_</span><br></pre></td></tr></table></figure><p>案例：加载multiple3.txt，基于K均值算法完成样本的聚类。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.cluster <span class="keyword">as</span> sc</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/multiple3.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data)</span><br><span class="line">x = np.array(x)</span><br><span class="line"><span class="comment"># K均值聚类器</span></span><br><span class="line">model = sc.KMeans(n_clusters=<span class="number">4</span>)</span><br><span class="line">model.fit(x)</span><br><span class="line">centers = model.cluster_centers_ <span class="comment"># 聚类中心</span></span><br><span class="line">l, r, h = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">b, t, v = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()]</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">mp.figure(<span class="string">&#x27;K-Means&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;K-Means&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">mp.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=model.labels_,</span><br><span class="line">cmap=<span class="string">&#x27;brg&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.scatter(centers[:, <span class="number">0</span>], centers[:, <span class="number">1</span>],</span><br><span class="line">marker=<span class="string">&#x27;+&#x27;</span>, c=<span class="string">&#x27;gold&#x27;</span>, s=<span class="number">1000</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p>图像预处理之颜色量化</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.misc <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> sklearn.cluster <span class="keyword">as</span> sc</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">image = sm.imread(<span class="string">&#x27;../data/lily.jpg&#x27;</span>,</span><br><span class="line"><span class="literal">True</span>).astype(np.uint8)</span><br><span class="line">x = image.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">model = sc.KMeans(n_clusters=<span class="number">4</span>)</span><br><span class="line">model.fit(x)</span><br><span class="line">y = model.labels_</span><br><span class="line">centers = model.cluster_centers_.squeeze()</span><br><span class="line">z = centers[y]</span><br><span class="line">image4 = z.reshape(image.shape)</span><br><span class="line">model = sc.KMeans(n_clusters=<span class="number">3</span>)</span><br><span class="line">model.fit(x)</span><br><span class="line">y = model.labels_</span><br><span class="line">centers = model.cluster_centers_.squeeze()</span><br><span class="line">z = centers[y]</span><br><span class="line">image3 = z.reshape(image.shape)</span><br><span class="line">model = sc.KMeans(n_clusters=<span class="number">2</span>)</span><br><span class="line">model.fit(x)</span><br><span class="line">y = model.labels_</span><br><span class="line">centers = model.cluster_centers_.squeeze()</span><br><span class="line">z = centers[y]</span><br><span class="line">image2 = z.reshape(image.shape)</span><br><span class="line">mp.figure(<span class="string">&#x27;Image Quantization&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.subplot(<span class="number">221</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Original&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">mp.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">mp.imshow(image, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">mp.subplot(<span class="number">222</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;4 Colors&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">mp.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">mp.imshow(image4, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">mp.subplot(<span class="number">223</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;3 Colors&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">mp.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">mp.imshow(image3, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">mp.subplot(<span class="number">224</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;2 Colors&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">mp.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">mp.imshow(image2, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">mp.tight_layout()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="均值漂移聚类"><a href="#均值漂移聚类" class="headerlink" title="均值漂移聚类"></a>均值漂移聚类</h2><p>将每个聚类中的样本看作是服从某种概率模型的随机分布，利用已知样本的统计直方图，拟合某个特定的概率模型，以概率密度的峰值点作为相应聚类的中心。然后，根据每个样本与聚类中心的距离，则其近者而从之，完成聚类划分。</p><p>1)无需事先给定聚类数<br>2)样本本身从业务上服从某种概率规律</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.cluster <span class="keyword">as</span> sc</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/multiple3.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data)</span><br><span class="line">x = np.array(x)</span><br><span class="line"><span class="comment"># 均值漂移聚类器</span></span><br><span class="line">bw = sc.estimate_bandwidth(x,</span><br><span class="line">n_samples=<span class="built_in">len</span>(x), quantile=<span class="number">0.1</span>)</span><br><span class="line">model = sc.MeanShift(bandwidth=bw,</span><br><span class="line">bin_seeding=<span class="literal">True</span>)</span><br><span class="line">model.fit(x)</span><br><span class="line">centers = model.cluster_centers_ <span class="comment"># 聚类中心</span></span><br><span class="line">l, r, h = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">b, t, v = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()]</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">mp.figure(<span class="string">&#x27;Mean Shift&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Mean Shift&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">mp.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=model.labels_,</span><br><span class="line">cmap=<span class="string">&#x27;brg&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.scatter(centers[:, <span class="number">0</span>], centers[:, <span class="number">1</span>],</span><br><span class="line">marker=<span class="string">&#x27;+&#x27;</span>, c=<span class="string">&#x27;gold&#x27;</span>, s=<span class="number">1000</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="凝聚层次聚类"><a href="#凝聚层次聚类" class="headerlink" title="凝聚层次聚类"></a>凝聚层次聚类</h2><p>首先假定每个样本都是一个独立的聚类，统计总聚类数，如果大于所要求的聚类数，就从每个样本出发，连接离它欧氏距离最近的样本，在扩大聚类的规模的同时减少聚类数，重复以上过程，直到总聚类数满足要求为止。</p><p>1)没有所谓聚类中心，适用于中心特性不明显的样本<br>2)无需事先给定聚类中心<br>3)在选择被凝聚样本的过程中，还可以分别按照距离优先和连续性优先两种方式选连接的样本。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.cluster <span class="keyword">as</span> sc</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/multiple3.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data)</span><br><span class="line">x = np.array(x)</span><br><span class="line"><span class="comment"># 凝聚层次聚类器</span></span><br><span class="line">model = sc.AgglomerativeClustering(n_clusters=<span class="number">4</span>)</span><br><span class="line">model.fit(x)</span><br><span class="line">mp.figure(<span class="string">&#x27;Agglomerative&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Agglomerative&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=model.labels_,</span><br><span class="line">cmap=<span class="string">&#x27;brg&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.cluster <span class="keyword">as</span> sc</span><br><span class="line"><span class="keyword">import</span> sklearn.neighbors <span class="keyword">as</span> sn</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">n_samples=<span class="number">500</span></span><br><span class="line">t = <span class="number">2.5</span> * np.pi * (<span class="number">1</span> + <span class="number">2</span> * np.random.rand(</span><br><span class="line">n_samples, <span class="number">1</span>))</span><br><span class="line">x = <span class="number">0.05</span> * t * np.cos(t)</span><br><span class="line">y = <span class="number">0.05</span> * t * np.sin(t)</span><br><span class="line">n = <span class="number">0.05</span> * np.random.rand(n_samples, <span class="number">2</span>)</span><br><span class="line">x = np.hstack((x, y)) + n</span><br><span class="line"><span class="comment"># 无连续性凝聚层次聚类</span></span><br><span class="line">model = sc.AgglomerativeClustering(</span><br><span class="line">linkage=<span class="string">&#x27;average&#x27;</span>, n_clusters=<span class="number">3</span>)</span><br><span class="line">y1 = model.fit_predict(x)</span><br><span class="line"><span class="comment"># 有连续性凝聚层次聚类</span></span><br><span class="line">nb = sn.kneighbors_graph(x, <span class="number">10</span>,</span><br><span class="line">include_self=<span class="literal">False</span>)</span><br><span class="line">model = sc.AgglomerativeClustering(</span><br><span class="line">linkage=<span class="string">&#x27;average&#x27;</span>, n_clusters=<span class="number">3</span>,</span><br><span class="line">connectivity=nb)</span><br><span class="line">y2 = model.fit_predict(x)</span><br><span class="line">mp.figure(<span class="string">&#x27;Nonconnectivity&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Nonconnectivity&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=y1, cmap=<span class="string">&#x27;brg&#x27;</span>,</span><br><span class="line">s=<span class="number">80</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">mp.figure(<span class="string">&#x27;Connectivity&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Connectivity&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=y2, cmap=<span class="string">&#x27;brg&#x27;</span>,</span><br><span class="line">s=<span class="number">80</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="聚类的评价指标"><a href="#聚类的评价指标" class="headerlink" title="聚类的评价指标"></a>聚类的评价指标</h2><p>内密外疏<br>对于每个样本计算内部距离a和外部距离b，得到该样本的轮廓系数s&#x3D;(b-a)&#x2F;max(a, b)，对所有样本的轮廓系数取平均值，即为整个样本空间的轮廓系数S&#x3D;ave(s)。<br>内部距离a: 一个样本与同聚类其它样本的平均欧氏距离<br>外部距离b: 一个样本与离其聚类最近的另一个聚类中所有样本的平均欧氏距离。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.cluster <span class="keyword">as</span> sc</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/multiple3.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data)</span><br><span class="line">x = np.array(x)</span><br><span class="line"><span class="comment"># K均值聚类器</span></span><br><span class="line">model = sc.KMeans(n_clusters=<span class="number">4</span>)</span><br><span class="line">model.fit(x)</span><br><span class="line">centers = model.cluster_centers_ <span class="comment"># 聚类中心</span></span><br><span class="line"><span class="comment"># 轮廓系数得分</span></span><br><span class="line">s = sm.silhouette_score(x, model.labels_,</span><br><span class="line">sample_size=<span class="built_in">len</span>(x), metric=<span class="string">&#x27;euclidean&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">l, r, h = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">b, t, v = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()]</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">mp.figure(<span class="string">&#x27;K-Means&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;K-Means&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">mp.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=model.labels_,</span><br><span class="line">cmap=<span class="string">&#x27;brg&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.scatter(centers[:, <span class="number">0</span>], centers[:, <span class="number">1</span>],</span><br><span class="line">marker=<span class="string">&#x27;+&#x27;</span>, c=<span class="string">&#x27;gold&#x27;</span>, s=<span class="number">1000</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="噪声密度聚类"><a href="#噪声密度聚类" class="headerlink" title="噪声密度聚类"></a>噪声密度聚类</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.cluster <span class="keyword">as</span> sc</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/perf.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data)</span><br><span class="line">x = np.array(x)</span><br><span class="line">epsilons, scores, models = \</span><br><span class="line">    np.linspace(<span class="number">0.3</span>, <span class="number">1.2</span>, <span class="number">10</span>), [], []</span><br><span class="line"><span class="keyword">for</span> epsilon <span class="keyword">in</span> epsilons:</span><br><span class="line"><span class="comment"># DBSCAN(噪声密度)聚类器</span></span><br><span class="line">model = sc.DBSCAN(eps=epsilon,</span><br><span class="line">min_samples=<span class="number">5</span>)</span><br><span class="line">model.fit(x)</span><br><span class="line">score = sm.silhouette_score(</span><br><span class="line">x, model.labels_, sample_size=<span class="built_in">len</span>(x),</span><br><span class="line">metric=<span class="string">&#x27;euclidean&#x27;</span>)</span><br><span class="line">scores.append(score)</span><br><span class="line">models.append(model)</span><br><span class="line">scores = np.array(scores)</span><br><span class="line">best_index = scores.argmax()</span><br><span class="line">best_epsilon = epsilons[best_index]</span><br><span class="line"><span class="built_in">print</span>(best_epsilon)</span><br><span class="line">best_score = scores[best_index]</span><br><span class="line"><span class="built_in">print</span>(best_score)</span><br><span class="line">best_model = models[best_index]</span><br><span class="line">pred_y = best_model.labels_</span><br><span class="line">core_mask = np.zeros(<span class="built_in">len</span>(x), dtype=<span class="built_in">bool</span>)</span><br><span class="line">core_mask[</span><br><span class="line">best_model.core_sample_indices_] = <span class="literal">True</span></span><br><span class="line">offset_mask = pred_y == -<span class="number">1</span></span><br><span class="line">periphery_mask = ~(core_mask | offset_mask)</span><br><span class="line">mp.figure(<span class="string">&#x27;DBSCAN&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;DBSCAN&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">labels = <span class="built_in">set</span>(pred_y)</span><br><span class="line">cs = mp.get_cmap(<span class="string">&#x27;brg&#x27;</span>, <span class="built_in">len</span>(labels))(</span><br><span class="line"><span class="built_in">range</span>(<span class="built_in">len</span>(labels)))</span><br><span class="line">mp.scatter(x[core_mask][:, <span class="number">0</span>],</span><br><span class="line">x[core_mask][:, <span class="number">1</span>],</span><br><span class="line">c=cs[pred_y[core_mask]],</span><br><span class="line">s=<span class="number">80</span>, label=<span class="string">&#x27;Core&#x27;</span>)</span><br><span class="line">mp.scatter(x[periphery_mask][:, <span class="number">0</span>],</span><br><span class="line">x[periphery_mask][:, <span class="number">1</span>],</span><br><span class="line">edgecolor=cs[pred_y[periphery_mask]],</span><br><span class="line">facecolor=<span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">s=<span class="number">80</span>, label=<span class="string">&#x27;Periphery&#x27;</span>)</span><br><span class="line">mp.scatter(x[offset_mask][:, <span class="number">0</span>],</span><br><span class="line">x[offset_mask][:, <span class="number">1</span>],</span><br><span class="line">c=cs[pred_y[offset_mask]],</span><br><span class="line">marker=<span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">s=<span class="number">80</span>, label=<span class="string">&#x27;Offset&#x27;</span>)</span><br><span class="line">mp.legend()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="最近邻"><a href="#最近邻" class="headerlink" title="最近邻"></a>最近邻</h2><h2 id="代码：knnc-py、knnr-py"><a href="#代码：knnc-py、knnr-py" class="headerlink" title="代码：knnc.py、knnr.py"></a>代码：knnc.py、knnr.py</h2><h2 id="回归：线性、岭、多项式、决策树、SVM、KNNR2得分分类：逻辑、朴素贝叶斯、决策树、SVM、KNNF1得分聚类：K均值、均值漂移、凝聚层次、DBSCAN轮廓系数"><a href="#回归：线性、岭、多项式、决策树、SVM、KNNR2得分分类：逻辑、朴素贝叶斯、决策树、SVM、KNNF1得分聚类：K均值、均值漂移、凝聚层次、DBSCAN轮廓系数" class="headerlink" title="回归：线性、岭、多项式、决策树、SVM、KNNR2得分分类：逻辑、朴素贝叶斯、决策树、SVM、KNNF1得分聚类：K均值、均值漂移、凝聚层次、DBSCAN轮廓系数"></a>回归：线性、岭、多项式、决策树、SVM、KNN<br>R2得分<br>分类：逻辑、朴素贝叶斯、决策树、SVM、KNN<br>F1得分<br>聚类：K均值、均值漂移、凝聚层次、DBSCAN<br>轮廓系数</h2>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI进阶 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-分类问题</title>
      <link href="/2019/02/22/ml/%E5%88%86%E7%B1%BB/"/>
      <url>/2019/02/22/ml/%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>将特定类别出现的概率与该类别出现时每一个特征值出现的概率取乘积，以此表示该组特征值被归属为该类别的概率。以此计算该组特征值被归属为每一个类别的概率，择其最大的概率所对应的类别作为预测结果。</p><span id="more"></span><h1 id="简单分类"><a href="#简单分类" class="headerlink" title="简单分类"></a>简单分类</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x1 x2  -&gt;  y</span><br><span class="line">3   1      0</span><br><span class="line">2   5      1</span><br><span class="line">1   8      1</span><br><span class="line">6   4      0</span><br><span class="line">5   2      0</span><br><span class="line">3   5      1</span><br><span class="line">4   7      1</span><br><span class="line">4   1      0   </span><br><span class="line">3   9      ? -&gt; 1</span><br></pre></td></tr></table></figure><p>$x_1 &gt; x_2: y &#x3D; 0$<br>$x_1 &lt; x_2: y &#x3D; 1$</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x = np.array([</span><br><span class="line">[<span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">8</span>],</span><br><span class="line">[<span class="number">6</span>, <span class="number">4</span>],</span><br><span class="line">[<span class="number">5</span>, <span class="number">2</span>],</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>],</span><br><span class="line">[<span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">[<span class="number">4</span>,-<span class="number">1</span>]])</span><br><span class="line">y = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">l, r, h = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">b, t, v = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()]</span><br><span class="line">flat_y = np.zeros(<span class="built_in">len</span>(flat_x), dtype=<span class="built_in">int</span>)</span><br><span class="line">flat_y[flat_x[:, <span class="number">0</span>] &lt; flat_x[:, <span class="number">1</span>]] = <span class="number">1</span> <span class="comment"># 分类规则</span></span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">mp.figure(<span class="string">&#x27;Simple Classification&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Simple Classification&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">mp.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=y, cmap=<span class="string">&#x27;brg&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h1 id="逻辑回归分类器"><a href="#逻辑回归分类器" class="headerlink" title="逻辑回归分类器"></a>逻辑回归分类器</h1><p>$y &#x3D; w0 + w1x$</p><p>$z &#x3D; \frac{1}{1 + e^{-y}}$</p><p>x样本被归属为1类别的概率</p><p><strong>梯度下降</strong><br>model&#x3D;LogisticRegression(solver&#x3D;’liblinear’, C&#x3D;正则强度)<br>$w0 + w1 \times 1 + w2 \times 2 &#x3D; 0$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">``` py</span><br><span class="line">import numpy as np</span><br><span class="line">import sklearn.linear_model as lm</span><br><span class="line">import matplotlib.pyplot as mp</span><br><span class="line">x = np.array([</span><br><span class="line">[3, 1],</span><br><span class="line">[2, 5],</span><br><span class="line">[1, 8],</span><br><span class="line">[6, 4],</span><br><span class="line">[5, 2],</span><br><span class="line">[3, 5],</span><br><span class="line">[4, 7],</span><br><span class="line">[4,-1]])</span><br><span class="line">y = np.array([0, 1, 1, 0, 0, 1, 1, 0])</span><br><span class="line"># 逻辑回归分类器</span><br><span class="line">model = lm.LogisticRegression(</span><br><span class="line">solver=&#x27;liblinear&#x27;, C=1)</span><br><span class="line">model.fit(x, y)</span><br><span class="line">l, r, h = x[:, 0].min() - 1, x[:, 0].max() + 1, 0.005</span><br><span class="line">b, t, v = x[:, 1].min() - 1, x[:, 1].max() + 1, 0.005</span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[0].ravel(), grid_x[1].ravel()]</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[0].shape)</span><br><span class="line">mp.figure(&#x27;Logistic Classification&#x27;,</span><br><span class="line">facecolor=&#x27;lightgray&#x27;)</span><br><span class="line">mp.title(&#x27;Logistic Classification&#x27;, fontsize=20)</span><br><span class="line">mp.xlabel(&#x27;x&#x27;, fontsize=14)</span><br><span class="line">mp.ylabel(&#x27;y&#x27;, fontsize=14)</span><br><span class="line">mp.tick_params(labelsize=10)</span><br><span class="line">mp.pcolormesh(grid_x[0], grid_x[1], grid_y, cmap=&#x27;gray&#x27;)</span><br><span class="line">mp.scatter(x[:, 0], x[:, 1], c=y, cmap=&#x27;brg&#x27;, s=80)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xxxx A 1    0     0</span><br><span class="line">xxxx B 0    1     0</span><br><span class="line">xxxx C 0    0     1</span><br><span class="line">            A    B     C</span><br><span class="line">........   0.2  0.6  0.4   B</span><br><span class="line">........   0.6  0.1  0.3   A</span><br><span class="line">........   0.4  0.2  0.8   C</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.linear_model <span class="keyword">as</span> lm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x = np.array([</span><br><span class="line">[<span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">[<span class="number">3.5</span>, <span class="number">8</span>],</span><br><span class="line">[<span class="number">3.1</span>, <span class="number">6.2</span>],</span><br><span class="line">[<span class="number">0.5</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">[<span class="number">1.2</span>, <span class="number">1.9</span>],</span><br><span class="line">[<span class="number">6</span>, <span class="number">2</span>],</span><br><span class="line">[<span class="number">5.7</span>,<span class="number">1.5</span>],</span><br><span class="line">[<span class="number">5.4</span>, <span class="number">2.2</span>]])</span><br><span class="line">y = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line"><span class="comment"># 逻辑回归分类器</span></span><br><span class="line">model = lm.LogisticRegression(</span><br><span class="line">solver=<span class="string">&#x27;liblinear&#x27;</span>, C=<span class="number">1000</span>)</span><br><span class="line">model.fit(x, y)</span><br><span class="line">l, r, h = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">b, t, v = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()]</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">mp.figure(<span class="string">&#x27;Logistic Classification&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Logistic Classification&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">mp.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=y, cmap=<span class="string">&#x27;brg&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h1 id="朴素贝叶斯分类"><a href="#朴素贝叶斯分类" class="headerlink" title="朴素贝叶斯分类"></a>朴素贝叶斯分类</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 -&gt; 0</span><br><span class="line">4 5 6 -&gt; 1</span><br><span class="line">7 8 9 -&gt; 2</span><br><span class="line">...</span><br><span class="line">1 5 9 -&gt; ? 0  0.7</span><br><span class="line">                  1  0.5</span><br><span class="line">                  2  0.8 *</span><br><span class="line">P(x1,x2,x3,C)</span><br><span class="line">=P(x1|x2,x3,C)P(x2,x3,C)</span><br><span class="line">=P(x1|x2,x3,C)P(x2|x3,C)P(x3,C)</span><br><span class="line">=P(x1|x2,x3,C)P(x2|x3,C)P(x3|C)P(C)</span><br><span class="line">朴素：条件独立，特征值之间没有约束性。</span><br><span class="line">=P(x1|C)P(x2|C)P(x3|C)P(C)</span><br></pre></td></tr></table></figure><p>将特定类别出现的概率与该类别出现时每一个特征值出现的概率取乘积，以此表示该组特征值被归属为该类别的概率。以此计算该组特征值被归属为每一个类别的概率，择其最大的概率所对应的类别作为预测结果。<br>关于某个特征值在特定类别出现时的概率，可以通过事先已知的概率密度函数或概率质量函数计算得到。<br>体现历史数据所表现出的统计规律，同时不存在对分类边界的线性约束，但是对于统计规则不明且样本数量较少的场合不适用。<br>import sklearn.naive_bayes as nb<br>model &#x3D; nb.GaussianNB()<br>基于高斯分布即正态分布的朴素贝叶斯分类器</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.naive_bayes <span class="keyword">as</span> nb</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x, y = [], []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/multiple1.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data[:-<span class="number">1</span>])</span><br><span class="line">y.append(data[-<span class="number">1</span>])</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line"><span class="comment"># 朴素贝叶斯分类器</span></span><br><span class="line">model = nb.GaussianNB()</span><br><span class="line">model.fit(x, y)</span><br><span class="line">l, r, h = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">b, t, v = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()]</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">mp.figure(<span class="string">&#x27;NB Classification&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;NB Classification&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">mp.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=y, cmap=<span class="string">&#x27;brg&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="1-划分训练集和测试集"><a href="#1-划分训练集和测试集" class="headerlink" title="1. 划分训练集和测试集"></a>1. 划分训练集和测试集</h2><p>import sklearn.model_selection as ms;<br>ms.train_test_split(<br>    输入集, 输出集, test_size&#x3D;测试集比例,<br>    random_state&#x3D;随机种子)-&gt;<br>    训练输入集，测试输入集，训练输出集，测试输出集<br>该函数对每一个类别单独洗牌，然后根据test_size参数提取相应比例的样本用于测试，其余样本用于训练，各个类别的分布比例在训练集和测试集中都是一致的。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">import</span> sklearn.naive_bayes <span class="keyword">as</span> nb</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x, y = [], []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/multiple1.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data[:-<span class="number">1</span>])</span><br><span class="line">y.append(data[-<span class="number">1</span>])</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line"><span class="comment"># 按3:1的比例划分训练集和测试集</span></span><br><span class="line">train_x, test_x, train_y, test_y = \</span><br><span class="line">ms.train_test_split(x, y, test_size=<span class="number">0.25</span>,</span><br><span class="line">random_state=<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 朴素贝叶斯分类器</span></span><br><span class="line">model = nb.GaussianNB()</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">l, r, h = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">b, t, v = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()]</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">pred_test_y = model.predict(test_x)</span><br><span class="line"><span class="built_in">print</span>((pred_test_y == test_y).<span class="built_in">sum</span>() /</span><br><span class="line">pred_test_y.size)</span><br><span class="line">mp.figure(<span class="string">&#x27;NB Classification&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;NB Classification&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y,</span><br><span class="line">cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">mp.scatter(test_x[:, <span class="number">0</span>], test_x[:, <span class="number">1</span>],</span><br><span class="line">c=test_y, cmap=<span class="string">&#x27;brg&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="2-评价分类器的性能"><a href="#2-评价分类器的性能" class="headerlink" title="2. 评价分类器的性能"></a>2. 评价分类器的性能</h2><p>查准率：对于某个类别，找对的&#x2F;找出来的，正确性。<br>召回率：对于某个类别，找对的&#x2F;该类别样本数，完整性。<br>F1得分：2x查准率x召回率&#x2F;(查准率+召回率)</p><h2 id="3-交叉验证"><a href="#3-交叉验证" class="headerlink" title="3. 交叉验证"></a>3. 交叉验证</h2><p>ms.cross_val_score(模型对象, 输入集, 输出集,<br>    cv&#x3D;验证次数, scoring&#x3D;评价指标)-&gt;<br>    每次验证测试集各个类别指标的平均值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">import</span> sklearn.naive_bayes <span class="keyword">as</span> nb</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x, y = [], []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/multiple1.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data[:-<span class="number">1</span>])</span><br><span class="line">y.append(data[-<span class="number">1</span>])</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line"><span class="comment"># 按3:1的比例划分训练集和测试集</span></span><br><span class="line">train_x, test_x, train_y, test_y = \</span><br><span class="line">ms.train_test_split(x, y, test_size=<span class="number">0.25</span>,</span><br><span class="line">random_state=<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 朴素贝叶斯分类器</span></span><br><span class="line">model = nb.GaussianNB()</span><br><span class="line"><span class="comment"># 交叉验证</span></span><br><span class="line">pw = ms.cross_val_score(model, train_x,</span><br><span class="line">train_y, cv=<span class="number">5</span>, scoring=<span class="string">&#x27;precision_weighted&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pw.mean())</span><br><span class="line">rw = ms.cross_val_score(model, train_x,</span><br><span class="line">train_y, cv=<span class="number">5</span>, scoring=<span class="string">&#x27;recall_weighted&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(rw.mean())</span><br><span class="line">fw = ms.cross_val_score(model, train_x,</span><br><span class="line">train_y, cv=<span class="number">5</span>, scoring=<span class="string">&#x27;f1_weighted&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(fw.mean())</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">l, r, h = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">b, t, v = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()]</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">pred_test_y = model.predict(test_x)</span><br><span class="line"><span class="built_in">print</span>((pred_test_y == test_y).<span class="built_in">sum</span>() /</span><br><span class="line">pred_test_y.size)</span><br><span class="line">mp.figure(<span class="string">&#x27;NB Classification&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;NB Classification&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y,</span><br><span class="line">cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">mp.scatter(test_x[:, <span class="number">0</span>], test_x[:, <span class="number">1</span>],</span><br><span class="line">c=test_y, cmap=<span class="string">&#x27;brg&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="4-混淆矩阵"><a href="#4-混淆矩阵" class="headerlink" title="4. 混淆矩阵"></a>4. 混淆矩阵</h2><p>import sklearn.metrics as sm<br>sm.confusion_matrix(实际输出, 预测输出)-&gt;混淆矩阵<br>每一行对应一个实际类别<br>每一列对应一个预测类别<br>对角线上元素表示各个类别分类正确的样本数，其它位置的元素表示分类误差。<br>对角线上元素&#x2F;其所在列元素之和 &#x3D; 该类别的查准率 \ F1得分<br>对角线上元素&#x2F;其所在行元素之和 &#x3D; 该类别的召回率 &#x2F;</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">import</span> sklearn.naive_bayes <span class="keyword">as</span> nb</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x, y = [], []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/multiple1.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data[:-<span class="number">1</span>])</span><br><span class="line">y.append(data[-<span class="number">1</span>])</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line"><span class="comment"># 按3:1的比例划分训练集和测试集</span></span><br><span class="line">train_x, test_x, train_y, test_y = \</span><br><span class="line">ms.train_test_split(x, y, test_size=<span class="number">0.25</span>,</span><br><span class="line">random_state=<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 朴素贝叶斯分类器</span></span><br><span class="line">model = nb.GaussianNB()</span><br><span class="line"><span class="comment"># 交叉验证</span></span><br><span class="line">pw = ms.cross_val_score(model, train_x,</span><br><span class="line">train_y, cv=<span class="number">5</span>, scoring=<span class="string">&#x27;precision_weighted&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pw.mean())</span><br><span class="line">rw = ms.cross_val_score(model, train_x,</span><br><span class="line">train_y, cv=<span class="number">5</span>, scoring=<span class="string">&#x27;recall_weighted&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(rw.mean())</span><br><span class="line">fw = ms.cross_val_score(model, train_x,</span><br><span class="line">train_y, cv=<span class="number">5</span>, scoring=<span class="string">&#x27;f1_weighted&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(fw.mean())</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">l, r, h = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">b, t, v = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()]</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">pred_test_y = model.predict(test_x)</span><br><span class="line"><span class="built_in">print</span>((pred_test_y == test_y).<span class="built_in">sum</span>() /</span><br><span class="line">pred_test_y.size)</span><br><span class="line"><span class="comment"># 混淆矩阵</span></span><br><span class="line">cm = sm.confusion_matrix(test_y, pred_test_y)</span><br><span class="line"><span class="built_in">print</span>(cm)</span><br><span class="line">mp.figure(<span class="string">&#x27;NB Classification&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;NB Classification&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y,</span><br><span class="line">cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">mp.scatter(test_x[:, <span class="number">0</span>], test_x[:, <span class="number">1</span>],</span><br><span class="line">c=test_y, cmap=<span class="string">&#x27;brg&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="5-分类报告"><a href="#5-分类报告" class="headerlink" title="5. 分类报告"></a>5. 分类报告</h2><p>针对每一个类别的评价指标及平均值。<br>sm.classification_report(实际输出, 预测输出)-&gt;分类报告</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">import</span> sklearn.naive_bayes <span class="keyword">as</span> nb</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x, y = [], []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/multiple1.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data[:-<span class="number">1</span>])</span><br><span class="line">y.append(data[-<span class="number">1</span>])</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line"><span class="comment"># 按3:1的比例划分训练集和测试集</span></span><br><span class="line">train_x, test_x, train_y, test_y = \</span><br><span class="line">ms.train_test_split(x, y, test_size=<span class="number">0.25</span>,</span><br><span class="line">random_state=<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 朴素贝叶斯分类器</span></span><br><span class="line">model = nb.GaussianNB()</span><br><span class="line"><span class="comment"># 交叉验证</span></span><br><span class="line">pw = ms.cross_val_score(model, train_x,</span><br><span class="line">train_y, cv=<span class="number">5</span>, scoring=<span class="string">&#x27;precision_weighted&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pw.mean())</span><br><span class="line">rw = ms.cross_val_score(model, train_x,</span><br><span class="line">train_y, cv=<span class="number">5</span>, scoring=<span class="string">&#x27;recall_weighted&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(rw.mean())</span><br><span class="line">fw = ms.cross_val_score(model, train_x,</span><br><span class="line">train_y, cv=<span class="number">5</span>, scoring=<span class="string">&#x27;f1_weighted&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(fw.mean())</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">l, r, h = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">b, t, v = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()]</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">pred_test_y = model.predict(test_x)</span><br><span class="line"><span class="built_in">print</span>((pred_test_y == test_y).<span class="built_in">sum</span>() /</span><br><span class="line">pred_test_y.size)</span><br><span class="line"><span class="comment"># 混淆矩阵</span></span><br><span class="line">cm = sm.confusion_matrix(test_y, pred_test_y)</span><br><span class="line"><span class="built_in">print</span>(cm)</span><br><span class="line"><span class="comment"># 分类报告</span></span><br><span class="line">cr = sm.classification_report(test_y, pred_test_y)</span><br><span class="line"><span class="built_in">print</span>(cr)</span><br><span class="line">mp.figure(<span class="string">&#x27;NB Classification&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;NB Classification&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y,</span><br><span class="line">cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">mp.scatter(test_x[:, <span class="number">0</span>], test_x[:, <span class="number">1</span>],</span><br><span class="line">c=test_y, cmap=<span class="string">&#x27;brg&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h1 id="十一、决策树分类"><a href="#十一、决策树分类" class="headerlink" title="十一、决策树分类"></a>十一、决策树分类</h1><p>投票<br>基于随机森林分类器的汽车品质评估</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">import</span> sklearn.ensemble <span class="keyword">as</span> se</span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> ms</span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/car.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data.append(line[:-<span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line">data = np.array(data).T</span><br><span class="line">encoders, train_x = [], []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">encoder = sp.LabelEncoder()</span><br><span class="line"><span class="keyword">if</span> row &lt; <span class="built_in">len</span>(data) - <span class="number">1</span>:</span><br><span class="line">train_x.append(</span><br><span class="line">encoder.fit_transform(data[row]))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">train_y = encoder.fit_transform(data[row])</span><br><span class="line">encoders.append(encoder)</span><br><span class="line">train_x = np.array(train_x).T</span><br><span class="line"><span class="comment"># 随机森林分类器</span></span><br><span class="line">model = se.RandomForestClassifier(</span><br><span class="line">max_depth=<span class="number">8</span>, n_estimators=<span class="number">200</span>,</span><br><span class="line">random_state=<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(ms.cross_val_score(model, train_x,</span><br><span class="line">train_y, cv=<span class="number">3</span>, scoring=<span class="string">&#x27;f1_weighted&#x27;</span>).mean())</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">data = [</span><br><span class="line">[<span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;med&#x27;</span>, <span class="string">&#x27;5more&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;big&#x27;</span>, <span class="string">&#x27;low&#x27;</span>],</span><br><span class="line">[<span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;med&#x27;</span>, <span class="string">&#x27;med&#x27;</span>],</span><br><span class="line">[<span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;small&#x27;</span>, <span class="string">&#x27;high&#x27;</span>],</span><br><span class="line">[<span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;med&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;med&#x27;</span>, <span class="string">&#x27;high&#x27;</span>]]</span><br><span class="line">data = np.array(data).T</span><br><span class="line">test_x = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">encoder = encoders[row]</span><br><span class="line">test_x.append(encoder.transform(data[row]))</span><br><span class="line">test_x = np.array(test_x).T</span><br><span class="line">pred_test_y = model.predict(test_x)</span><br><span class="line"><span class="built_in">print</span>(encoders[-<span class="number">1</span>].inverse_transform(pred_test_y))</span><br></pre></td></tr></table></figure><h2 id="1-验证曲线"><a href="#1-验证曲线" class="headerlink" title="1. 验证曲线"></a>1. 验证曲线</h2><p>模型的交叉验证得分&#x3D;f(模型超参数)<br>ms.validation_curve(<br>    模型对象, 输入集, 输出集, 超参数名, 超参数表, cv&#x3D;验证次数)<br>    -&gt;训练集得分矩阵, 测试集得分矩阵<br>                     验证1 验证2 …<br>超参数取值1                          -&gt; 平均<br>超参数取值2<br>…</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">import</span> sklearn.ensemble <span class="keyword">as</span> se</span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/car.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data.append(line[:-<span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line">data = np.array(data).T</span><br><span class="line">x = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">encoder = sp.LabelEncoder()</span><br><span class="line"><span class="keyword">if</span> row &lt; <span class="built_in">len</span>(data) - <span class="number">1</span>:</span><br><span class="line">x.append(</span><br><span class="line">encoder.fit_transform(data[row]))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">y = encoder.fit_transform(data[row])</span><br><span class="line">x = np.array(x).T</span><br><span class="line"><span class="comment"># 随机森林分类器</span></span><br><span class="line">model = se.RandomForestClassifier(</span><br><span class="line">max_depth=<span class="number">8</span>, random_state=<span class="number">7</span>)</span><br><span class="line">n_estimators = np.arange(<span class="number">50</span>, <span class="number">550</span>, <span class="number">50</span>)</span><br><span class="line">train_scores1, test_scores1 = \</span><br><span class="line">ms.validation_curve(model, x, y,</span><br><span class="line"><span class="string">&#x27;n_estimators&#x27;</span>, n_estimators, cv=<span class="number">5</span>)</span><br><span class="line">train_means1 = train_scores1.mean(axis=<span class="number">1</span>)</span><br><span class="line">model = se.RandomForestClassifier(</span><br><span class="line">n_estimators=<span class="number">150</span>, random_state=<span class="number">7</span>)</span><br><span class="line">max_depth = np.arange(<span class="number">1</span>, <span class="number">11</span>)</span><br><span class="line">train_scores2, test_scores2 = \</span><br><span class="line">ms.validation_curve(model, x, y,</span><br><span class="line"><span class="string">&#x27;max_depth&#x27;</span>, max_depth, cv=<span class="number">5</span>)</span><br><span class="line">train_means2 = train_scores2.mean(axis=<span class="number">1</span>)</span><br><span class="line">mp.figure(<span class="string">&#x27;n_estimators&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;n_estimators&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;n_estimators&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;F1 Score&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.plot(n_estimators, train_means1, <span class="string">&#x27;o-&#x27;</span>,</span><br><span class="line">c=<span class="string">&#x27;dodgerblue&#x27;</span>, label=<span class="string">&#x27;Training&#x27;</span>)</span><br><span class="line">mp.legend()</span><br><span class="line">mp.tight_layout()</span><br><span class="line">mp.figure(<span class="string">&#x27;max_depth&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;max_depth&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;max_depth&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;F1 Score&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.plot(max_depth, train_means2, <span class="string">&#x27;o-&#x27;</span>,</span><br><span class="line">c=<span class="string">&#x27;limegreen&#x27;</span>, label=<span class="string">&#x27;Training&#x27;</span>)</span><br><span class="line">mp.legend()</span><br><span class="line">mp.tight_layout()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="2-学习曲线"><a href="#2-学习曲线" class="headerlink" title="2. 学习曲线"></a>2. 学习曲线</h2><p>模型的交叉验证得分&#x3D;f(训练集大小)<br>ms.learning_curve(<br>    模型对象, 输入集, 输出集, 训练集大小列表, cv&#x3D;验证次数)<br>    -&gt;训练集大小列表, 训练集得分矩阵, 测试集得分矩阵</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">import</span> sklearn.ensemble <span class="keyword">as</span> se</span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/car.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data.append(line[:-<span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line">data = np.array(data).T</span><br><span class="line">x = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">encoder = sp.LabelEncoder()</span><br><span class="line"><span class="keyword">if</span> row &lt; <span class="built_in">len</span>(data) - <span class="number">1</span>:</span><br><span class="line">x.append(</span><br><span class="line">encoder.fit_transform(data[row]))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">y = encoder.fit_transform(data[row])</span><br><span class="line">x = np.array(x).T</span><br><span class="line"><span class="comment"># 随机森林分类器</span></span><br><span class="line">model = se.RandomForestClassifier(</span><br><span class="line">max_depth=<span class="number">8</span>, n_estimators=<span class="number">150</span>,</span><br><span class="line">random_state=<span class="number">7</span>)</span><br><span class="line">train_sizes = np.linspace(<span class="number">0.1</span>, <span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(train_sizes)</span><br><span class="line">train_sizes, train_scores, test_scores = \</span><br><span class="line">ms.learning_curve(model, x, y,</span><br><span class="line">train_sizes=train_sizes, cv=<span class="number">5</span>)</span><br><span class="line">train_means = train_scores.mean(axis=<span class="number">1</span>)</span><br><span class="line">test_means = test_scores.mean(axis=<span class="number">1</span>)</span><br><span class="line">mp.figure(<span class="string">&#x27;Leaning Curve&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Leaning Curve&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;train_size&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;F1 Score&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.plot(train_sizes, train_means, <span class="string">&#x27;o-&#x27;</span>,</span><br><span class="line">c=<span class="string">&#x27;dodgerblue&#x27;</span>, label=<span class="string">&#x27;Training&#x27;</span>)</span><br><span class="line">mp.plot(train_sizes, test_means, <span class="string">&#x27;o-&#x27;</span>,</span><br><span class="line">c=<span class="string">&#x27;orangered&#x27;</span>, label=<span class="string">&#x27;Testing&#x27;</span>)</span><br><span class="line">mp.legend()</span><br><span class="line">mp.tight_layout()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h1 id="十二、支持向量机"><a href="#十二、支持向量机" class="headerlink" title="十二、支持向量机"></a>十二、支持向量机</h1><h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h2><p>寻求最优的分类边界，即被支持向量所夹持的分类带宽度达到最大值，取其中心线作为分类边界。<br>    * 安全性：分类带最宽<br>    * 公平性：分类带中心线<br>    * 简单性：线性边界，分割超平面<br>    * 对于在原始维度空间中无法线性分割的样本，通过特定的核函数增加特征，即升高维度，在高维度空间寻求分割超平面。</p><h2 id="2-接口"><a href="#2-接口" class="headerlink" title="2. 接口"></a>2. 接口</h2><p>import sklearn.svm as svm<br>分类器模型&#x3D;svm.SVC(kernel&#x3D;核函数类型, …)<br>回归器模型&#x3D;svm.SVR(kernel&#x3D;核函数类型, …)</p><h2 id="3-线性核函数"><a href="#3-线性核函数" class="headerlink" title="3. 线性核函数"></a>3. 线性核函数</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">import</span> sklearn.svm <span class="keyword">as</span> svm</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x, y = [], []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/multiple2.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data[:-<span class="number">1</span>])</span><br><span class="line">y.append(data[-<span class="number">1</span>])</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line">train_x, test_x, train_y, test_y = \</span><br><span class="line">ms.train_test_split(x, y, test_size=<span class="number">0.25</span>,</span><br><span class="line">random_state=<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 支持向量机分类器</span></span><br><span class="line">model = svm.SVC(kernel=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">l, r, h = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">b, t, v = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()]</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">pred_test_y = model.predict(test_x)</span><br><span class="line"><span class="built_in">print</span>(sm.classification_report(test_y, pred_test_y))</span><br><span class="line">mp.figure(<span class="string">&#x27;SVM Classification&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;SVM Classification&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y,</span><br><span class="line">cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">C0, C1 = y == <span class="number">0</span>, y == <span class="number">1</span></span><br><span class="line">mp.scatter(x[C0][:, <span class="number">0</span>], x[C0][:, <span class="number">1</span>],</span><br><span class="line">c=<span class="string">&#x27;orangered&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.scatter(x[C1][:, <span class="number">0</span>], x[C1][:, <span class="number">1</span>],</span><br><span class="line">c=<span class="string">&#x27;limegreen&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="4-多项式核函数"><a href="#4-多项式核函数" class="headerlink" title="4. 多项式核函数"></a>4. 多项式核函数</h2><p>x1 x2<br>x1 x2 x1^2 x2^2 x1x2 x1^2x2 x1x2^2 x1^3 x2^3</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">import</span> sklearn.svm <span class="keyword">as</span> svm</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x, y = [], []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/multiple2.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data[:-<span class="number">1</span>])</span><br><span class="line">y.append(data[-<span class="number">1</span>])</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line">train_x, test_x, train_y, test_y = \</span><br><span class="line">ms.train_test_split(x, y, test_size=<span class="number">0.25</span>,</span><br><span class="line">random_state=<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 支持向量机分类器</span></span><br><span class="line">model = svm.SVC(kernel=<span class="string">&#x27;poly&#x27;</span>, degree=<span class="number">3</span>)</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">l, r, h = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">b, t, v = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()]</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">pred_test_y = model.predict(test_x)</span><br><span class="line"><span class="built_in">print</span>(sm.classification_report(test_y, pred_test_y))</span><br><span class="line">mp.figure(<span class="string">&#x27;SVM Classification&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;SVM Classification&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y,</span><br><span class="line">cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">C0, C1 = y == <span class="number">0</span>, y == <span class="number">1</span></span><br><span class="line">mp.scatter(x[C0][:, <span class="number">0</span>], x[C0][:, <span class="number">1</span>], c=<span class="string">&#x27;orangered&#x27;</span>,</span><br><span class="line">s=<span class="number">80</span>)</span><br><span class="line">mp.scatter(x[C1][:, <span class="number">0</span>], x[C1][:, <span class="number">1</span>], c=<span class="string">&#x27;limegreen&#x27;</span>,</span><br><span class="line">s=<span class="number">80</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="5-径向基核函数"><a href="#5-径向基核函数" class="headerlink" title="5. 径向基核函数"></a>5. 径向基核函数</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">import</span> sklearn.svm <span class="keyword">as</span> svm</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x, y = [], []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/multiple2.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data[:-<span class="number">1</span>])</span><br><span class="line">y.append(data[-<span class="number">1</span>])</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line">train_x, test_x, train_y, test_y = \</span><br><span class="line">ms.train_test_split(x, y, test_size=<span class="number">0.25</span>,</span><br><span class="line">random_state=<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 支持向量机分类器</span></span><br><span class="line">model = svm.SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>, gamma=<span class="number">0.01</span>, C=<span class="number">600</span>)</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">l, r, h = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">b, t, v = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()]</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">pred_test_y = model.predict(test_x)</span><br><span class="line"><span class="built_in">print</span>(sm.classification_report(test_y, pred_test_y))</span><br><span class="line">mp.figure(<span class="string">&#x27;SVM Classification&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;SVM Classification&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y,</span><br><span class="line">cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">C0, C1 = y == <span class="number">0</span>, y == <span class="number">1</span></span><br><span class="line">mp.scatter(x[C0][:, <span class="number">0</span>], x[C0][:, <span class="number">1</span>], c=<span class="string">&#x27;orangered&#x27;</span>,</span><br><span class="line">s=<span class="number">80</span>)</span><br><span class="line">mp.scatter(x[C1][:, <span class="number">0</span>], x[C1][:, <span class="number">1</span>], c=<span class="string">&#x27;limegreen&#x27;</span>,</span><br><span class="line">s=<span class="number">80</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="6-样本均衡"><a href="#6-样本均衡" class="headerlink" title="6. 样本均衡"></a>6. 样本均衡</h2><p>svm.SVC(…, class_weight&#x3D;’balanced’)<br>通过为不同类别的样本设置不同的权重，平衡比例相差较大的类别为分类器所带来的不同影响。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">import</span> sklearn.svm <span class="keyword">as</span> svm</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x, y = [], []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/imbalance.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data[:-<span class="number">1</span>])</span><br><span class="line">y.append(data[-<span class="number">1</span>])</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line">train_x, test_x, train_y, test_y = \</span><br><span class="line">ms.train_test_split(x, y, test_size=<span class="number">0.25</span>,</span><br><span class="line">random_state=<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 支持向量机分类器</span></span><br><span class="line">model = svm.SVC(kernel=<span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">class_weight=<span class="string">&#x27;balanced&#x27;</span>)</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">l, r, h = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">b, t, v = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()]</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">pred_test_y = model.predict(test_x)</span><br><span class="line"><span class="built_in">print</span>(sm.classification_report(test_y, pred_test_y))</span><br><span class="line">mp.figure(<span class="string">&#x27;SVM Classification&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;SVM Classification&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y,</span><br><span class="line">cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">C0, C1 = y == <span class="number">0</span>, y == <span class="number">1</span></span><br><span class="line">mp.scatter(x[C0][:, <span class="number">0</span>], x[C0][:, <span class="number">1</span>],</span><br><span class="line">c=<span class="string">&#x27;orangered&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.scatter(x[C1][:, <span class="number">0</span>], x[C1][:, <span class="number">1</span>],</span><br><span class="line">c=<span class="string">&#x27;limegreen&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="7-置信概率"><a href="#7-置信概率" class="headerlink" title="7. 置信概率"></a>7. 置信概率</h2><p>根据样本与分类边界的距离表示该样本被分类器归属每个类别的概率。<br>model &#x3D; svm.SVC(…, probablity&#x3D;True, …)<br>model.predict_proba(输入集)-&gt;概率矩阵<br>概率矩阵中的一行对应输入集中的要给样本，一列表示一个的类别，而其中的值表示该样本被归属为特定类别的概率。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">import</span> sklearn.svm <span class="keyword">as</span> svm</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x, y = [], []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/multiple2.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data[:-<span class="number">1</span>])</span><br><span class="line">y.append(data[-<span class="number">1</span>])</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line">train_x, test_x, train_y, test_y = \</span><br><span class="line">ms.train_test_split(x, y, test_size=<span class="number">0.25</span>,</span><br><span class="line">random_state=<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 支持向量机分类器</span></span><br><span class="line">model = svm.SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>, gamma=<span class="number">0.01</span>, C=<span class="number">600</span>,</span><br><span class="line">probability=<span class="literal">True</span>)</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">l, r, h = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">b, t, v = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()]</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">pred_test_y = model.predict(test_x)</span><br><span class="line"><span class="built_in">print</span>(sm.classification_report(test_y, pred_test_y))</span><br><span class="line">prob_x = np.array([</span><br><span class="line">[<span class="number">2</span>, <span class="number">1.5</span>],</span><br><span class="line">[<span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">[<span class="number">4.8</span>, <span class="number">5.2</span>],</span><br><span class="line">[<span class="number">4</span>, <span class="number">4</span>],</span><br><span class="line">[<span class="number">2.5</span>, <span class="number">7</span>],</span><br><span class="line">[<span class="number">7.6</span>, <span class="number">2</span>],</span><br><span class="line">[<span class="number">5.4</span>, <span class="number">5.9</span>]])</span><br><span class="line"><span class="built_in">print</span>(prob_x)</span><br><span class="line">pred_prob_y = model.predict(prob_x)</span><br><span class="line"><span class="built_in">print</span>(pred_prob_y)</span><br><span class="line">probs = model.predict_proba(prob_x)</span><br><span class="line"><span class="built_in">print</span>(probs)</span><br><span class="line">mp.figure(<span class="string">&#x27;SVM Classification&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;SVM Classification&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y,</span><br><span class="line">cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">C0, C1 = y == <span class="number">0</span>, y == <span class="number">1</span></span><br><span class="line">mp.scatter(x[C0][:, <span class="number">0</span>], x[C0][:, <span class="number">1</span>], c=<span class="string">&#x27;orangered&#x27;</span>,</span><br><span class="line">s=<span class="number">80</span>)</span><br><span class="line">mp.scatter(x[C1][:, <span class="number">0</span>], x[C1][:, <span class="number">1</span>], c=<span class="string">&#x27;limegreen&#x27;</span>,</span><br><span class="line">s=<span class="number">80</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="8-网格搜索"><a href="#8-网格搜索" class="headerlink" title="8. 网格搜索"></a>8. 网格搜索</h2><p>超参数组合列表:<br>[{超参数名: [取值列表], 超参数名: [取值列表]}, {…}, …]<br>model &#x3D; ms.GridSearchCV(<br>    基本模型, 超参数组合列表, cv&#x3D;交叉验证数)<br>model.fit(输入集, 输出集)<br>model -&gt; 用最优超参数组合设置的模型</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">import</span> sklearn.svm <span class="keyword">as</span> svm</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x, y = [], []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/multiple2.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data[:-<span class="number">1</span>])</span><br><span class="line">y.append(data[-<span class="number">1</span>])</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line">train_x, test_x, train_y, test_y = \</span><br><span class="line">ms.train_test_split(x, y, test_size=<span class="number">0.25</span>,</span><br><span class="line">random_state=<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 超参数组合列表</span></span><br><span class="line">params = [</span><br><span class="line">    &#123;<span class="string">&#x27;kernel&#x27;</span>: [<span class="string">&#x27;linear&#x27;</span>], <span class="string">&#x27;C&#x27;</span>: [<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>]&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;kernel&#x27;</span>: [<span class="string">&#x27;poly&#x27;</span>], <span class="string">&#x27;C&#x27;</span>: [<span class="number">1</span>], <span class="string">&#x27;degree&#x27;</span>: [<span class="number">2</span>, <span class="number">3</span>]&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;kernel&#x27;</span>: [<span class="string">&#x27;rbf&#x27;</span>], <span class="string">&#x27;C&#x27;</span>: [<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>],</span><br><span class="line">     <span class="string">&#x27;gamma&#x27;</span>: [<span class="number">1</span>, <span class="number">0.1</span>, <span class="number">0.01</span>, <span class="number">0.001</span>]&#125;]</span><br><span class="line">model = ms.GridSearchCV(</span><br><span class="line">svm.SVC(probability=<span class="literal">True</span>), params, cv=<span class="number">5</span>);</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line"><span class="keyword">for</span> param, score <span class="keyword">in</span> <span class="built_in">zip</span>(</span><br><span class="line">model.cv_results_[<span class="string">&#x27;params&#x27;</span>],</span><br><span class="line">model.cv_results_[<span class="string">&#x27;mean_test_score&#x27;</span>]):</span><br><span class="line"><span class="built_in">print</span>(param, score)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(model.best_params_)</span><br><span class="line">l, r, h = x[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">b, t, v = x[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span>, <span class="number">0.005</span></span><br><span class="line">grid_x = np.meshgrid(np.arange(l, r, h),</span><br><span class="line">np.arange(b, t, v))</span><br><span class="line">flat_x = np.c_[grid_x[<span class="number">0</span>].ravel(), grid_x[<span class="number">1</span>].ravel()]</span><br><span class="line">flat_y = model.predict(flat_x)</span><br><span class="line">grid_y = flat_y.reshape(grid_x[<span class="number">0</span>].shape)</span><br><span class="line">pred_test_y = model.predict(test_x)</span><br><span class="line"><span class="built_in">print</span>(sm.classification_report(test_y, pred_test_y))</span><br><span class="line">prob_x = np.array([</span><br><span class="line">[<span class="number">2</span>, <span class="number">1.5</span>],</span><br><span class="line">[<span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">[<span class="number">4.8</span>, <span class="number">5.2</span>],</span><br><span class="line">[<span class="number">4</span>, <span class="number">4</span>],</span><br><span class="line">[<span class="number">2.5</span>, <span class="number">7</span>],</span><br><span class="line">[<span class="number">7.6</span>, <span class="number">2</span>],</span><br><span class="line">[<span class="number">5.4</span>, <span class="number">5.9</span>]])</span><br><span class="line"><span class="built_in">print</span>(prob_x)</span><br><span class="line">pred_prob_y = model.predict(prob_x)</span><br><span class="line"><span class="built_in">print</span>(pred_prob_y)</span><br><span class="line">probs = model.predict_proba(prob_x)</span><br><span class="line"><span class="built_in">print</span>(probs)</span><br><span class="line">mp.figure(<span class="string">&#x27;SVM Classification&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;SVM Classification&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.pcolormesh(grid_x[<span class="number">0</span>], grid_x[<span class="number">1</span>], grid_y,</span><br><span class="line">cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">C0, C1 = y == <span class="number">0</span>, y == <span class="number">1</span></span><br><span class="line">mp.scatter(x[C0][:, <span class="number">0</span>], x[C0][:, <span class="number">1</span>], c=<span class="string">&#x27;orangered&#x27;</span>,</span><br><span class="line">s=<span class="number">80</span>)</span><br><span class="line">mp.scatter(x[C1][:, <span class="number">0</span>], x[C1][:, <span class="number">1</span>], c=<span class="string">&#x27;limegreen&#x27;</span>,</span><br><span class="line">s=<span class="number">80</span>)</span><br><span class="line">C0, C1 = pred_prob_y == <span class="number">0</span>, pred_prob_y == <span class="number">1</span>;</span><br><span class="line">mp.scatter(prob_x[C0][:, <span class="number">0</span>], prob_x[C0][:, <span class="number">1</span>],</span><br><span class="line">marker=<span class="string">&#x27;D&#x27;</span>, c=<span class="string">&#x27;dodgerblue&#x27;</span>, s=<span class="number">70</span>)</span><br><span class="line">mp.scatter(prob_x[C1][:, <span class="number">0</span>], prob_x[C1][:, <span class="number">1</span>],</span><br><span class="line">marker=<span class="string">&#x27;D&#x27;</span>, c=<span class="string">&#x27;deeppink&#x27;</span>, s=<span class="number">70</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(probs[C0])):</span><br><span class="line">mp.annotate(<span class="string">&#x27;&#123;&#125;% &#123;&#125;%&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line"><span class="built_in">round</span>(probs[C0][:, <span class="number">0</span>][i] * <span class="number">100</span>, <span class="number">2</span>),</span><br><span class="line"><span class="built_in">round</span>(probs[C0][:, <span class="number">1</span>][i] * <span class="number">100</span>, <span class="number">2</span>)),</span><br><span class="line">xy=(prob_x[C0][:, <span class="number">0</span>][i],</span><br><span class="line">prob_x[C0][:, <span class="number">1</span>][i]),</span><br><span class="line">xytext=(<span class="number">12</span>, -<span class="number">12</span>),</span><br><span class="line">textcoords=<span class="string">&#x27;offset points&#x27;</span>,</span><br><span class="line">horizontalalignment=<span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">verticalalignment=<span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">fontsize=<span class="number">9</span>,</span><br><span class="line">bbox=&#123;<span class="string">&#x27;boxstyle&#x27;</span>: <span class="string">&#x27;round,pad=0.6&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;fc&#x27;</span>: <span class="string">&#x27;deepskyblue&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;alpha&#x27;</span>: <span class="number">0.8</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(probs[C1])):</span><br><span class="line">mp.annotate(<span class="string">&#x27;&#123;&#125;% &#123;&#125;%&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line"><span class="built_in">round</span>(probs[C1][:, <span class="number">0</span>][i] * <span class="number">100</span>, <span class="number">2</span>),</span><br><span class="line"><span class="built_in">round</span>(probs[C1][:, <span class="number">1</span>][i] * <span class="number">100</span>, <span class="number">2</span>)),</span><br><span class="line">xy=(prob_x[C1][:, <span class="number">0</span>][i],</span><br><span class="line">prob_x[C1][:, <span class="number">1</span>][i]),</span><br><span class="line">xytext=(<span class="number">12</span>, -<span class="number">12</span>),</span><br><span class="line">textcoords=<span class="string">&#x27;offset points&#x27;</span>,</span><br><span class="line">horizontalalignment=<span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">verticalalignment=<span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">fontsize=<span class="number">9</span>,</span><br><span class="line">bbox=&#123;<span class="string">&#x27;boxstyle&#x27;</span>: <span class="string">&#x27;round,pad=0.6&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;fc&#x27;</span>: <span class="string">&#x27;violet&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;alpha&#x27;</span>: <span class="number">0.8</span>&#125;)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p>事件预测</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">import</span> sklearn.svm <span class="keyword">as</span> svm</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DigitEncoder</span>():</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fit_transform</span>(<span class="params">self, x</span>):</span><br><span class="line"><span class="keyword">return</span> x.astype(<span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">self, x</span>):</span><br><span class="line"><span class="keyword">return</span> x.astype(<span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_transform</span>(<span class="params">self, x</span>):</span><br><span class="line"><span class="keyword">return</span> x.astype(<span class="built_in">str</span>)</span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../data/event.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data.append(line[:-<span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line">data = np.delete(np.array(data).T, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">encoders, x = [], []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line"><span class="keyword">if</span> data[row, <span class="number">0</span>].isdigit():</span><br><span class="line">encoder = DigitEncoder()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">encoder = sp.LabelEncoder()</span><br><span class="line"><span class="keyword">if</span> row &lt; <span class="built_in">len</span>(data) - <span class="number">1</span>:</span><br><span class="line">x.append(encoder.fit_transform(</span><br><span class="line">data[row]))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">y = encoder.fit_transform(data[row])</span><br><span class="line">encoders.append(encoder)</span><br><span class="line">x = np.array(x).T</span><br><span class="line">train_x, test_x, train_y, test_y = \</span><br><span class="line">ms.train_test_split(x, y, test_size=<span class="number">0.25</span>,</span><br><span class="line">random_state=<span class="number">5</span>)</span><br><span class="line">model = svm.SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>,</span><br><span class="line">class_weight=<span class="string">&#x27;balanced&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ms.cross_val_score(model, train_x,</span><br><span class="line">train_y, cv=<span class="number">5</span>, scoring=<span class="string">&#x27;accuracy&#x27;</span>).mean())</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">pred_test_y = model.predict(test_x)</span><br><span class="line"><span class="built_in">print</span>((pred_test_y == test_y).<span class="built_in">sum</span>() /</span><br><span class="line">pred_test_y.size)</span><br><span class="line">data = [[<span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;12:30:00&#x27;</span>, <span class="string">&#x27;21&#x27;</span>, <span class="string">&#x27;23&#x27;</span>]]</span><br><span class="line">data = np.array(data).T</span><br><span class="line">x = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">encoder = encoders[row]</span><br><span class="line">x.append(encoder.transform(data[row]))</span><br><span class="line">x = np.array(x).T</span><br><span class="line">pred_y = model.predict(x)</span><br><span class="line"><span class="built_in">print</span>(encoders[-<span class="number">1</span>].inverse_transform(pred_y))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI进阶 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-回归问题</title>
      <link href="/2019/02/20/ml/%E5%9B%9E%E5%BD%92/"/>
      <url>/2019/02/20/ml/%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<p>普通的线性回归，在计算总样本误差即损失值时，对所有训练样本一视同仁，因此极少数”坏”样本会使得预测模型偏离于大多数好样本所遵循的规则，影响模型的预测精度。</p><span id="more"></span><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>import sklearn.linear_model as lm<br>创建学习模型对象：model&#x3D;lm.LinearRegression()<br>训练学习模型对象：model.fit(x, y) # [x, y]-BGD-&gt;[w0, w1]<br>预测给定输入的输出：pred_y &#x3D; model.predict(pred_x)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.linear_model <span class="keyword">as</span> lm</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x, y = [], []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/single.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data[:-<span class="number">1</span>])</span><br><span class="line">y.append(data[-<span class="number">1</span>])</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line"><span class="comment"># 创建线性回归器</span></span><br><span class="line">model = lm.LinearRegression()</span><br><span class="line"><span class="comment"># 训练线性回归器</span></span><br><span class="line">model.fit(x, y) <span class="comment"># 根据梯度下降算法寻找最优的模型参数</span></span><br><span class="line"><span class="comment"># 测试线性回归器</span></span><br><span class="line">pred_y = model.predict(x)</span><br><span class="line"><span class="keyword">for</span> train, pred <span class="keyword">in</span> <span class="built_in">zip</span>(y, pred_y):</span><br><span class="line"><span class="built_in">print</span>(train, <span class="string">&#x27;-&gt;&#x27;</span>, pred)</span><br><span class="line"><span class="comment"># 平均绝对值误差：mean(|y-y&#x27;|)</span></span><br><span class="line"><span class="built_in">print</span>(sm.mean_absolute_error(y, pred_y))</span><br><span class="line"><span class="comment"># 平均平方误差：mean((y-y&#x27;)^2)</span></span><br><span class="line"><span class="built_in">print</span>(sm.mean_squared_error(y, pred_y))</span><br><span class="line"><span class="comment"># 中位数绝对值误差：median(|y-y&#x27;|)</span></span><br><span class="line"><span class="built_in">print</span>(sm.median_absolute_error(y, pred_y))</span><br><span class="line"><span class="comment"># 协方差误差分值：[-1, 1]</span></span><br><span class="line"><span class="built_in">print</span>(sm.explained_variance_score(y, pred_y))</span><br><span class="line"><span class="comment"># R2分值：综合以上所有指标得到的综合评价，[0, 1]</span></span><br><span class="line"><span class="built_in">print</span>(sm.r2_score(y, pred_y))</span><br><span class="line"><span class="comment"># 保存训练好的模型</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/linear.pkl&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">pickle.dump(model, f)</span><br><span class="line">mp.figure(<span class="string">&#x27;Linear Regression&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Linear Regression&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.scatter(x, y, c=<span class="string">&#x27;dodgerblue&#x27;</span>, alpha=<span class="number">0.75</span>,</span><br><span class="line">s=<span class="number">60</span>, label=<span class="string">&#x27;Sample&#x27;</span>)</span><br><span class="line">sorted_indices = x.T[<span class="number">0</span>].argsort()</span><br><span class="line">mp.plot(x[sorted_indices], pred_y[sorted_indices],</span><br><span class="line">c=<span class="string">&#x27;orangered&#x27;</span>, label=<span class="string">&#x27;Regression&#x27;</span>)</span><br><span class="line">mp.legend()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.linear_model <span class="keyword">as</span> lm</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x, y = [], []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/single.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data[:-<span class="number">1</span>])</span><br><span class="line">y.append(data[-<span class="number">1</span>])</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line"><span class="comment"># 从文件中加载模型</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/linear.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">model = pickle.load(f)</span><br><span class="line"><span class="comment"># 测试线性回归器</span></span><br><span class="line">pred_y = model.predict(x)</span><br><span class="line"><span class="keyword">for</span> train, pred <span class="keyword">in</span> <span class="built_in">zip</span>(y, pred_y):</span><br><span class="line"><span class="built_in">print</span>(train, <span class="string">&#x27;-&gt;&#x27;</span>, pred)</span><br><span class="line"><span class="comment"># 平均绝对值误差：mean(|y-y&#x27;|)</span></span><br><span class="line"><span class="built_in">print</span>(sm.mean_absolute_error(y, pred_y))</span><br><span class="line"><span class="comment"># 平均平方误差：mean((y-y&#x27;)^2)</span></span><br><span class="line"><span class="built_in">print</span>(sm.mean_squared_error(y, pred_y))</span><br><span class="line"><span class="comment"># 中位数绝对值误差：median(|y-y&#x27;|)</span></span><br><span class="line"><span class="built_in">print</span>(sm.median_absolute_error(y, pred_y))</span><br><span class="line"><span class="comment"># 协方差误差分值：[-1, 1]</span></span><br><span class="line"><span class="built_in">print</span>(sm.explained_variance_score(y, pred_y))</span><br><span class="line"><span class="comment"># R2分值：综合以上所有指标得到的综合评价，[0, 1]</span></span><br><span class="line"><span class="built_in">print</span>(sm.r2_score(y, pred_y))</span><br><span class="line">mp.figure(<span class="string">&#x27;Linear Regression&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Linear Regression&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.scatter(x, y, c=<span class="string">&#x27;dodgerblue&#x27;</span>, alpha=<span class="number">0.75</span>,</span><br><span class="line">s=<span class="number">60</span>, label=<span class="string">&#x27;Sample&#x27;</span>)</span><br><span class="line">sorted_indices = x.T[<span class="number">0</span>].argsort()</span><br><span class="line">mp.plot(x[sorted_indices], pred_y[sorted_indices],</span><br><span class="line">c=<span class="string">&#x27;orangered&#x27;</span>, label=<span class="string">&#x27;Regression&#x27;</span>)</span><br><span class="line">mp.legend()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="岭回归"><a href="#岭回归" class="headerlink" title="岭回归"></a>岭回归</h2><p>普通的线性回归，在计算总样本误差即损失值时，对所有训练样本一视同仁，因此极少数”坏”样本会使得预测模型偏离于大多数好样本所遵循的规则，影响模型的预测精度。岭回归就是在线性回归的基础之上，为每个训练样本分配不同的权重，越是能够反应一般规律的大多数好样本所得到的权重越大，而极少数偏离于一般规律的坏样本则只能获得较低的权重，从而使得最终的预测模型尽可能偏向于多数好样本，而弱化少数坏样本对模型的影响。<br>因此：超参数，人为给定<br>model &#x3D; lm.Ridge(正则强度&#x2F;惩罚力度)<br>正则强度&#x2F;惩罚力度：[0, oo)<br>正则强度越小，权重差异就越小，0表示无差异，等同线性回归</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.linear_model <span class="keyword">as</span> lm</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">x, y = [], []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/abnormal.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">x.append(data[:-<span class="number">1</span>])</span><br><span class="line">y.append(data[-<span class="number">1</span>])</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line"><span class="comment"># 创建线性回归器</span></span><br><span class="line">model1 = lm.LinearRegression()</span><br><span class="line"><span class="comment"># 训练线性回归器</span></span><br><span class="line">model1.fit(x, y) <span class="comment"># 根据梯度下降算法寻找最优的模型参数</span></span><br><span class="line"><span class="comment"># 测试线性回归器</span></span><br><span class="line">pred_y1 = model1.predict(x)</span><br><span class="line"><span class="comment"># 线性回归的R2分值</span></span><br><span class="line"><span class="built_in">print</span>(sm.r2_score(y, pred_y1))</span><br><span class="line"><span class="comment"># 创建岭回归器</span></span><br><span class="line">model2 = lm.Ridge(<span class="number">250</span>)</span><br><span class="line"><span class="comment"># 训练岭回归器</span></span><br><span class="line">model2.fit(x, y) <span class="comment"># 通过差异化权重削弱异常样本的影响</span></span><br><span class="line"><span class="comment"># 测试岭回归器</span></span><br><span class="line">pred_y2 = model2.predict(x)</span><br><span class="line"><span class="comment"># 岭回归的R2分值</span></span><br><span class="line"><span class="built_in">print</span>(sm.r2_score(y, pred_y2))</span><br><span class="line">mp.figure(<span class="string">&#x27;Linear &amp; Ridge Regression&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Linear &amp; Ridge Regression&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.scatter(x, y, c=<span class="string">&#x27;dodgerblue&#x27;</span>, alpha=<span class="number">0.75</span>,</span><br><span class="line">s=<span class="number">60</span>, label=<span class="string">&#x27;Sample&#x27;</span>)</span><br><span class="line">sorted_indices = x.T[<span class="number">0</span>].argsort()</span><br><span class="line">mp.plot(x[sorted_indices], pred_y1[sorted_indices],</span><br><span class="line">c=<span class="string">&#x27;orangered&#x27;</span>, label=<span class="string">&#x27;Linear&#x27;</span>)</span><br><span class="line">mp.plot(x[sorted_indices], pred_y2[sorted_indices],</span><br><span class="line">c=<span class="string">&#x27;limegreen&#x27;</span>, label=<span class="string">&#x27;Ridge&#x27;</span>)</span><br><span class="line">mp.legend()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h2><p>$y &#x3D; w_1 + w_1x + w_2x^2 + w_3x^3 + … + w_nx^n$<br>$loss &#x3D; Loss(w_0, w_1, …, w_n)$<br>$y &#x3D; w_0 + w_1 \times 1 + w_2 \times 2 + w_3 \times 3 + … + w_n \times n$<br>$x_1 -&gt; x_1, x_2, x_3, …, x_n$<br>$\Downarrow$<br>x1-&gt;多项式特征扩展-x1,x2,x3,…,xn-&gt;线性回归-&gt;w0~wn<br>$\Downarrow$<br>管线</p><p>import sklearn.pipeline as pl<br>import sklearn.preprocessing as sp<br>多项式特征扩展器&#x3D;sp.PolynomialFeatures(n&#x3D;最高次幂)<br>线性回归器&#x3D;lm.LinearRegression()<br>管线模型&#x3D;pl.make_pipeline(多项式特征扩展器,线性回归器)<br>管线模型.fit(x,y) # [x,y]-BGD-&gt;[w0,w1,w2,w3,…,wn]<br>管线模型.predict(x)-&gt;pred_y<br>**<em>欠拟合</em>**：过于简单的模型，或者训练集的规模过小，导致模型无法真实地反应输入和输出之间的规律，出现训练集和测试集的评估分值都比较低的现象。可以通过增加模型的复杂度，或者增加训练集的规模，提高模型的拟合度，优化其性能。<br>**<em>过拟合</em>**：过于复杂的模型，或者特征数过多，大致模型失去足够的一般性，即太过于倾向训练数据，反而对训练集以外的其它样本的预测性能大幅下降。可以减少特征数，或者降低模型的复杂度，在训练集和测试集的拟合程度上寻求一个折衷，提高模型的泛化能力。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.pipeline <span class="keyword">as</span> pl</span><br><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">import</span> sklearn.linear_model <span class="keyword">as</span> lm</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">train_x, train_y = [], []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/single.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">data = [<span class="built_in">float</span>(substr) <span class="keyword">for</span> substr</span><br><span class="line"><span class="keyword">in</span> line.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">train_x.append(data[:-<span class="number">1</span>])</span><br><span class="line">train_y.append(data[-<span class="number">1</span>])</span><br><span class="line">train_x = np.array(train_x)</span><br><span class="line">train_y = np.array(train_y)</span><br><span class="line">model = pl.make_pipeline(sp.PolynomialFeatures(<span class="number">10</span>),</span><br><span class="line">lm.LinearRegression())</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">pred_train_y = model.predict(train_x)</span><br><span class="line"><span class="built_in">print</span>(sm.r2_score(train_y, pred_train_y))</span><br><span class="line">test_x = np.linspace(train_x.<span class="built_in">min</span>(),</span><br><span class="line">train_x.<span class="built_in">max</span>(), <span class="number">1000</span>)[:, np.newaxis]</span><br><span class="line">pred_test_y = model.predict(test_x)</span><br><span class="line">mp.figure(<span class="string">&#x27;Polynomial Regression&#x27;</span>,</span><br><span class="line">facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Polynomial Regression&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.scatter(train_x, train_y, c=<span class="string">&#x27;dodgerblue&#x27;</span>,</span><br><span class="line">alpha=<span class="number">0.75</span>, s=<span class="number">60</span>, label=<span class="string">&#x27;Sample&#x27;</span>)</span><br><span class="line">mp.plot(test_x, pred_test_y, c=<span class="string">&#x27;orangered&#x27;</span>,</span><br><span class="line">label=<span class="string">&#x27;Regression&#x27;</span>)</span><br><span class="line">mp.legend()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><p>既可用于解决回归问题，也可用于解决分类问题。</p><ol><li><p>相似的输入必会产生相似的输出</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">年龄：0-青年，1-中年，2-老年</span><br><span class="line">学历：0-大专，1-大本，2-硕士，3-博士</span><br><span class="line">资历：0-小白，1-小牛，2-大牛，3-骨灰</span><br><span class="line">性别：0-女性，1-男性</span><br><span class="line">等级：0-低收入，1-中等收入，2-高收入</span><br><span class="line"></span><br><span class="line">年龄  学历  资历  性别  月薪      等级</span><br><span class="line">  0       1       0       1    6000       0</span><br><span class="line">  0       0       1       1    7000       1</span><br><span class="line">  1       2       2       1    10000      2</span><br><span class="line">--&gt;</span><br><span class="line">  0      0       1        1    对输出取平均/对输出做投票</span><br></pre></td></tr></table></figure></li><li><p>构建树状模型提高对相似输入的检索性能<br>依次选取总样本空间中的每一个特征作为划分子表的依据，将样本矩阵划分为若干层级的多个子矩阵，每一个层级对应一个特征，组成树状结构。预测时，根据待预测样本的每个特征值，找到与之对应的叶级子表，将该子表的输出按照平均或者投票的方式计算预测值。</p></li><li><p>优先选择对输出影响最大的部分特征划分子表<br>根据按照某个特征划分子表前后，其信息熵或基尼不纯度的减少量来判断该特征对输出的影响，信息熵或基尼不纯度减少量越大的特征，对输出的影响也越大，越应该优先作为子表划分的依据。</p></li><li><p>集成算法</p><ol><li>自助聚合：每次从总样本空间中随机抽取一部分样本构建决策树，这样共构建B棵决策树</li><li>随机森林：每次从总样本空间中随机抽取一部分样本及特征构建决策树，这样共构建B棵决策树</li><li>正向激励：为样本空间中的每个样本分配初始权重，构建第一颗决策树，针对训练集中预测错误的样本，提升其权重，再构建第二棵决策树，以此类推，共构建B棵权重各不相同的决策树</li></ol> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.datasets <span class="keyword">as</span> sd</span><br><span class="line"><span class="keyword">import</span> sklearn.utils <span class="keyword">as</span> su</span><br><span class="line"><span class="keyword">import</span> sklearn.tree <span class="keyword">as</span> st</span><br><span class="line"><span class="keyword">import</span> sklearn.ensemble <span class="keyword">as</span> se</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line">boston = sd.load_boston()</span><br><span class="line">x, y = su.shuffle(boston.data, boston.target,</span><br><span class="line">random_state=<span class="number">7</span>)</span><br><span class="line">train_size = <span class="built_in">int</span>(<span class="built_in">len</span>(x) * <span class="number">0.8</span>)</span><br><span class="line">train_x, test_x, train_y, test_y = \</span><br><span class="line">x[:train_size], x[train_size:], \</span><br><span class="line">y[:train_size], y[train_size:]</span><br><span class="line"><span class="comment"># 决策树回归器</span></span><br><span class="line">model = st.DecisionTreeRegressor(max_depth=<span class="number">4</span>)</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">pred_test_y = model.predict(test_x)</span><br><span class="line"><span class="built_in">print</span>(sm.r2_score(test_y, pred_test_y))</span><br><span class="line"><span class="comment"># 正向激励集成决策树回归器</span></span><br><span class="line">model = se.AdaBoostRegressor(</span><br><span class="line">st.DecisionTreeRegressor(max_depth=<span class="number">4</span>),</span><br><span class="line">n_estimators=<span class="number">400</span>, random_state=<span class="number">7</span>)</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">pred_test_y = model.predict(test_x)</span><br><span class="line"><span class="built_in">print</span>(sm.r2_score(test_y, pred_test_y))</span><br></pre></td></tr></table></figure></li><li><p>特征重要性<br>决策树模型在确定子表划分依据的过程中，会计算按照每个特征划分子表所引起的信息熵或基尼不纯度减少量，从业务上看该指标即体现了，每个特征对输出的影响力度。<br>model &#x3D; …<br>model.fit(…)<br>model.feature_importances_</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.datasets <span class="keyword">as</span> sd</span><br><span class="line"><span class="keyword">import</span> sklearn.utils <span class="keyword">as</span> su</span><br><span class="line"><span class="keyword">import</span> sklearn.tree <span class="keyword">as</span> st</span><br><span class="line"><span class="keyword">import</span> sklearn.ensemble <span class="keyword">as</span> se</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">boston = sd.load_boston()</span><br><span class="line">fn = boston.feature_names</span><br><span class="line">x, y = su.shuffle(boston.data, boston.target,</span><br><span class="line">random_state=<span class="number">7</span>)</span><br><span class="line">train_size = <span class="built_in">int</span>(<span class="built_in">len</span>(x) * <span class="number">0.8</span>)</span><br><span class="line">train_x, test_x, train_y, test_y = \</span><br><span class="line">x[:train_size], x[train_size:], \</span><br><span class="line">y[:train_size], y[train_size:]</span><br><span class="line"><span class="comment"># 正向激励集成决策树回归器</span></span><br><span class="line">model = se.AdaBoostRegressor(</span><br><span class="line">st.DecisionTreeRegressor(max_depth=<span class="number">4</span>),</span><br><span class="line">n_estimators=<span class="number">400</span>, random_state=<span class="number">7</span>)</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">fi = model.feature_importances_</span><br><span class="line"><span class="keyword">for</span> n, i <span class="keyword">in</span> <span class="built_in">zip</span>(fn, fi):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:&gt;10&#125; : &#123;:.4f&#125;&#x27;</span>.<span class="built_in">format</span>(n, i))</span><br><span class="line">mp.figure(<span class="string">&#x27;Feature Importance&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Feature Importance&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;Feature&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;Importance&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(axis=<span class="string">&#x27;y&#x27;</span>, linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">sorted_indices = fi.argsort()[::-<span class="number">1</span>]</span><br><span class="line">pos = np.arange(sorted_indices.size)</span><br><span class="line">mp.bar(pos, fi[sorted_indices], facecolor=<span class="string">&#x27;lightcoral&#x27;</span>,</span><br><span class="line">edgecolor=<span class="string">&#x27;indianred&#x27;</span>)</span><br><span class="line">mp.xticks(pos, fn[sorted_indices], rotation=<span class="number">30</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p>特征重要性与模型的算法有关，还与数据的粒度有关。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.utils <span class="keyword">as</span> su</span><br><span class="line"><span class="keyword">import</span> sklearn.ensemble <span class="keyword">as</span> se</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/bike_day.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">reader = csv.reader(f)</span><br><span class="line">x, y = [], []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">x.append(row[<span class="number">2</span>:<span class="number">13</span>])</span><br><span class="line">y.append(row[-<span class="number">1</span>])</span><br><span class="line">fn_dy = np.array(x[<span class="number">0</span>])</span><br><span class="line">x = np.array(x[<span class="number">1</span>:], dtype=<span class="built_in">float</span>)</span><br><span class="line">y = np.array(y[<span class="number">1</span>:], dtype=<span class="built_in">float</span>)</span><br><span class="line">x, y = su.shuffle(x, y, random_state=<span class="number">7</span>)</span><br><span class="line">train_size = <span class="built_in">int</span>(<span class="built_in">len</span>(x) * <span class="number">0.9</span>)</span><br><span class="line">train_x, test_x, train_y, test_y = \</span><br><span class="line">x[:train_size], x[train_size:], \</span><br><span class="line">y[:train_size], y[train_size:]</span><br><span class="line"><span class="comment"># 随机森林集成决策树回归器</span></span><br><span class="line">model = se.RandomForestRegressor(</span><br><span class="line">max_depth=<span class="number">10</span>, n_estimators=<span class="number">1000</span>,</span><br><span class="line">min_samples_split=<span class="number">2</span>)</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">fi_dy = model.feature_importances_</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/bike_hour.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">reader = csv.reader(f)</span><br><span class="line">x, y = [], []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">x.append(row[<span class="number">2</span>:<span class="number">14</span>])</span><br><span class="line">y.append(row[-<span class="number">1</span>])</span><br><span class="line">fn_hr = np.array(x[<span class="number">0</span>])</span><br><span class="line">x = np.array(x[<span class="number">1</span>:], dtype=<span class="built_in">float</span>)</span><br><span class="line">y = np.array(y[<span class="number">1</span>:], dtype=<span class="built_in">float</span>)</span><br><span class="line">x, y = su.shuffle(x, y, random_state=<span class="number">7</span>)</span><br><span class="line">train_size = <span class="built_in">int</span>(<span class="built_in">len</span>(x) * <span class="number">0.9</span>)</span><br><span class="line">train_x, test_x, train_y, test_y = \</span><br><span class="line">x[:train_size], x[train_size:], \</span><br><span class="line">y[:train_size], y[train_size:]</span><br><span class="line"><span class="comment"># 随机森林集成决策树回归器</span></span><br><span class="line">model = se.RandomForestRegressor(</span><br><span class="line">max_depth=<span class="number">10</span>, n_estimators=<span class="number">1000</span>,</span><br><span class="line">min_samples_split=<span class="number">2</span>)</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">fi_hr = model.feature_importances_</span><br><span class="line">mp.figure(<span class="string">&#x27;Bike&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.subplot(<span class="number">211</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Day&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;Importance&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(axis=<span class="string">&#x27;y&#x27;</span>, linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">sorted_indices = fi_dy.argsort()[::-<span class="number">1</span>]</span><br><span class="line">pos = np.arange(sorted_indices.size)</span><br><span class="line">mp.bar(pos, fi_dy[sorted_indices], facecolor=<span class="string">&#x27;deepskyblue&#x27;</span>,</span><br><span class="line">edgecolor=<span class="string">&#x27;steelblue&#x27;</span>)</span><br><span class="line">mp.xticks(pos, fn_dy[sorted_indices], rotation=<span class="number">30</span>)</span><br><span class="line">mp.subplot(<span class="number">212</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Hour&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;Feature&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;Importance&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(axis=<span class="string">&#x27;y&#x27;</span>, linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">sorted_indices = fi_hr.argsort()[::-<span class="number">1</span>]</span><br><span class="line">pos = np.arange(sorted_indices.size)</span><br><span class="line">mp.bar(pos, fi_hr[sorted_indices], facecolor=<span class="string">&#x27;lightcoral&#x27;</span>,</span><br><span class="line">edgecolor=<span class="string">&#x27;indianred&#x27;</span>)</span><br><span class="line">mp.xticks(pos, fn_hr[sorted_indices], rotation=<span class="number">30</span>)</span><br><span class="line">mp.tight_layout()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>对于回归问题，模型关注的是回归曲线，该曲线反映了输入数据和输出数据之间的函数关系。<br>对于分类问题，模型关注的是分类边界，边界线反映了不同类别之间的划分依据。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI进阶 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-梯度下降算法</title>
      <link href="/2019/02/12/ml/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
      <url>/2019/02/12/ml/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/</url>
      
        <content type="html"><![CDATA[<p>梯度下降法（英语：Gradient descent）是一个一阶最优化算法，通常也称为最速下降法。 要使用梯度下降法找到一个函数的局部极小值，必须向函数上当前点对应梯度（或者是近似梯度）的反方向的规定步长距离点进行迭代搜索。如果相反地向梯度正方向迭代进行搜索，则会接近函数的局部极大值点；这个过程则被称为梯度上升法。</p><span id="more"></span><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>梯度下降法（英语：Gradient descent）是一个一阶最优化算法，通常也称为最速下降法。 要使用梯度下降法找到一个函数的局部极小值，必须向函数上当前点对应梯度（或者是近似梯度）的反方向的规定步长距离点进行迭代搜索。如果相反地向梯度正方向迭代进行搜索，则会接近函数的局部极大值点；这个过程则被称为梯度上升法。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[输入] --&gt; B[学习模型]</span><br><span class="line">B --&gt; C[预测输出]</span><br><span class="line">C --&gt; D[尽可能接近实际输出]</span><br><span class="line">D --&gt; B</span><br></pre></td></tr></table></figure><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0.5            5.0</span><br><span class="line">0.6            5.5</span><br><span class="line">0.8            6.0</span><br><span class="line">1.1            6.8</span><br><span class="line">1.4            7.0  预测函数 -&gt; 寻找w0和w1 -&gt; 模型参数</span><br><span class="line">x              y    y&#x27;=w0+w1x</span><br></pre></td></tr></table></figure><p><strong>单样本误差：</strong></p><p>根据预测函数求出输入为x时的预测值：$y’ &#x3D; w_0 + w_1x$</p><p><strong>总样本误差：</strong></p><p>把所有单样本误差相加即是总样本误差：$\frac{1}{2}\sum(y-y’)^2$</p><p><strong>损失函数</strong>：反映总样本误差因模型参数的变化而变化的规律</p><p>$loss &#x3D; \frac{1}{2}\sum(y-(w_0+w_1x))^2$</p><p>所以损失函数就是总样本误差关于模型参数的函数，该函数属于三维数学模型，即需要找到一组 $w_0$, $w_1$ 使得 $loss$ 取极小值。</p><h2 id="案例：画图模拟梯度下降的过程"><a href="#案例：画图模拟梯度下降的过程" class="headerlink" title="案例：画图模拟梯度下降的过程"></a>案例：画图模拟梯度下降的过程</h2><p><strong>整理训练集数据，自定义梯度下降算法规则，求出w<sub>0</sub> ， w<sub>1</sub> ，绘制回归线。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line">train_x = np.array([<span class="number">0.5</span>, <span class="number">0.6</span>, <span class="number">0.8</span>, <span class="number">1.1</span>, <span class="number">1.4</span>])</span><br><span class="line">train_y = np.array([<span class="number">5.0</span>, <span class="number">5.5</span>, <span class="number">6.0</span>, <span class="number">6.8</span>, <span class="number">7.0</span>])</span><br><span class="line">test_x = np.array([<span class="number">0.45</span>, <span class="number">0.55</span>, <span class="number">1.0</span>, <span class="number">1.3</span>, <span class="number">1.5</span>])</span><br><span class="line">test_y = np.array([<span class="number">4.8</span>, <span class="number">5.3</span>, <span class="number">6.4</span>, <span class="number">6.9</span>, <span class="number">7.3</span>])</span><br><span class="line"></span><br><span class="line">times = <span class="number">1000</span><span class="comment"># 定义梯度下降次数</span></span><br><span class="line">lrate = <span class="number">0.01</span><span class="comment"># 记录每次梯度下降参数变化率</span></span><br><span class="line">epoches = []<span class="comment"># 记录每次梯度下降的索引</span></span><br><span class="line">w0, w1, losses = [<span class="number">1</span>], [<span class="number">1</span>], []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, times + <span class="number">1</span>):</span><br><span class="line">    epoches.append(i)</span><br><span class="line">    loss = (((w0[-<span class="number">1</span>] + w1[-<span class="number">1</span>] * train_x) - train_y) ** <span class="number">2</span>).<span class="built_in">sum</span>() / <span class="number">2</span></span><br><span class="line">    losses.append(loss)</span><br><span class="line">    d0 = ((w0[-<span class="number">1</span>] + w1[-<span class="number">1</span>] * train_x) - train_y).<span class="built_in">sum</span>()</span><br><span class="line">    d1 = (((w0[-<span class="number">1</span>] + w1[-<span class="number">1</span>] * train_x) - train_y) * train_x).<span class="built_in">sum</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:4&#125;&gt; w0=&#123;:.8f&#125;, w1=&#123;:.8f&#125;, loss=&#123;:.8f&#125;&#x27;</span>.<span class="built_in">format</span>(epoches[-<span class="number">1</span>], w0[-<span class="number">1</span>], w1[-<span class="number">1</span>], losses[-<span class="number">1</span>]))</span><br><span class="line">    w0.append(w0[-<span class="number">1</span>] - lrate * d0)</span><br><span class="line">    w1.append(w1[-<span class="number">1</span>] - lrate * d1)</span><br><span class="line"></span><br><span class="line">pred_test_y = w0[-<span class="number">1</span>] + w1[-<span class="number">1</span>] * test_x</span><br><span class="line">mp.figure(<span class="string">&#x27;Linear Regression&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Linear Regression&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.scatter(train_x, train_y, marker=<span class="string">&#x27;s&#x27;</span>, c=<span class="string">&#x27;dodgerblue&#x27;</span>, alpha=<span class="number">0.5</span>, s=<span class="number">80</span>, label=<span class="string">&#x27;Training&#x27;</span>)</span><br><span class="line">mp.scatter(test_x, test_y, marker=<span class="string">&#x27;D&#x27;</span>, c=<span class="string">&#x27;orangered&#x27;</span>, alpha=<span class="number">0.5</span>, s=<span class="number">60</span>, label=<span class="string">&#x27;Testing&#x27;</span>)</span><br><span class="line">mp.scatter(test_x, pred_test_y, c=<span class="string">&#x27;orangered&#x27;</span>, alpha=<span class="number">0.5</span>, s=<span class="number">80</span>, label=<span class="string">&#x27;Predicted&#x27;</span>)</span><br><span class="line">mp.plot(test_x, pred_test_y, <span class="string">&#x27;--&#x27;</span>, c=<span class="string">&#x27;limegreen&#x27;</span>, label=<span class="string">&#x27;Regression&#x27;</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">mp.legend()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.rencheng.cc/blog/a1q5t.jpg"></p><p><strong>2. 绘制随着每次梯度下降，w<sub>0</sub>，w<sub>1</sub>，loss的变化曲线。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">w0 = w0[:-<span class="number">1</span>]</span><br><span class="line">w1 = w1[:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">mp.figure(<span class="string">&#x27;Training Progress&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.subplot(<span class="number">311</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Training Progress&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;w0&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.gca().xaxis.set_major_locator(mp.MultipleLocator(<span class="number">100</span>))</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.plot(epoches, w0, c=<span class="string">&#x27;dodgerblue&#x27;</span>, label=<span class="string">&#x27;w0&#x27;</span>)</span><br><span class="line">mp.legend()</span><br><span class="line">mp.subplot(<span class="number">312</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;w1&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.gca().xaxis.set_major_locator(mp.MultipleLocator(<span class="number">100</span>))</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.plot(epoches, w1, c=<span class="string">&#x27;limegreen&#x27;</span>, label=<span class="string">&#x27;w1&#x27;</span>)</span><br><span class="line">mp.legend()</span><br><span class="line"></span><br><span class="line">mp.subplot(<span class="number">313</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;epoch&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;loss&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.gca().xaxis.set_major_locator(mp.MultipleLocator(<span class="number">100</span>))</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.plot(epoches, losses, c=<span class="string">&#x27;orangered&#x27;</span>, label=<span class="string">&#x27;loss&#x27;</span>)</span><br><span class="line">mp.legend()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.rencheng.cc/blog/nofpa.jpg"></p><p><strong>3. 基于三维曲面绘制梯度下降过程中的每一个点。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mpl_toolkits.mplot3d <span class="keyword">as</span> axes3d</span><br><span class="line"></span><br><span class="line">grid_w0, grid_w1 = np.meshgrid(</span><br><span class="line">    np.linspace(<span class="number">0</span>, <span class="number">9</span>, <span class="number">500</span>),</span><br><span class="line">    np.linspace(<span class="number">0</span>, <span class="number">3.5</span>, <span class="number">500</span>))</span><br><span class="line"></span><br><span class="line">grid_loss = np.zeros_like(grid_w0)</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(train_x, train_y):</span><br><span class="line">    grid_loss += ((grid_w0 + x*grid_w1 - y) ** <span class="number">2</span>) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">mp.figure(<span class="string">&#x27;Loss Function&#x27;</span>)</span><br><span class="line">ax = mp.gca(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Loss Function&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;w0&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;w1&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">&#x27;loss&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">ax.plot_surface(grid_w0, grid_w1, grid_loss, rstride=<span class="number">10</span>, cstride=<span class="number">10</span>, cmap=<span class="string">&#x27;jet&#x27;</span>)</span><br><span class="line">ax.plot(w0, w1, losses, <span class="string">&#x27;o-&#x27;</span>, c=<span class="string">&#x27;orangered&#x27;</span>, label=<span class="string">&#x27;BGD&#x27;</span>)</span><br><span class="line">mp.legend()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.rencheng.cc/blog/f172l.jpg"></p><p><strong>4. 以等高线的方式绘制梯度下降的过程。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mp.figure(<span class="string">&#x27;Batch Gradient Descent&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Batch Gradient Descent&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.contourf(grid_w0, grid_w1, grid_loss, <span class="number">10</span>, cmap=<span class="string">&#x27;jet&#x27;</span>)</span><br><span class="line">cntr = mp.contour(grid_w0, grid_w1, grid_loss, <span class="number">10</span>,</span><br><span class="line">                  colors=<span class="string">&#x27;black&#x27;</span>, linewidths=<span class="number">0.5</span>)</span><br><span class="line">mp.clabel(cntr, inline_spacing=<span class="number">0.1</span>, fmt=<span class="string">&#x27;%.2f&#x27;</span>,</span><br><span class="line">          fontsize=<span class="number">8</span>)</span><br><span class="line">mp.plot(w0, w1, <span class="string">&#x27;o-&#x27;</span>, c=<span class="string">&#x27;orangered&#x27;</span>, label=<span class="string">&#x27;BGD&#x27;</span>)</span><br><span class="line">mp.legend()</span><br><span class="line">mp.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.rencheng.cc/blog/kg5du.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI进阶 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-数据预处理</title>
      <link href="/2019/02/11/ml/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
      <url>/2019/02/11/ml/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>数据预处理，为后续的机器学习搭建数据基础，避免个别样本对结果产生大的误差</p><span id="more"></span><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>数据预处理的过程： 输入数据 -&gt; 模型 -&gt; 输出数据</p><p><strong>数据样本矩阵</strong></p><table><thead><tr><th>年龄</th><th>学历</th><th>经验</th><th>性别</th><th>月薪</th></tr></thead><tbody><tr><td>25</td><td>硕士</td><td>2</td><td>女</td><td>10000</td></tr><tr><td>20</td><td>本科</td><td>3</td><td>男</td><td>8000</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td><strong>样本矩阵</strong>：一行一样本，一列一特征</td><td></td><td></td><td></td><td></td></tr><tr><td><strong>输出向量</strong>：其中的每个元素与一个样本相对应</td><td></td><td></td><td></td><td></td></tr></tbody></table><p><code>sci-kit learn</code>(又称<strong>sklearn</strong>)经典 <em>机器学习框架</em></p><p><strong>引入方式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决机器学习问题的科学计算工具包</span></span><br><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> sp</span><br></pre></td></tr></table></figure><h2 id="均值移除"><a href="#均值移除" class="headerlink" title="均值移除"></a>均值移除</h2><p>将样本矩阵中的各个列(特征)的平均值调整为0，标准差调整为1，以此均化不同的特征，使它们对模型预测结果的贡献度趋于近似一致。</p><blockquote><p>标准差：又称均方差,标准偏差。方差的算术平方根。标准差能反映一个数据集的离散程度。<br>公式如下：<br>$\sigma&#x3D;\sqrt{\frac{1}{N}\sum^{N}_{i&#x3D;1}{(x_i-\overline{x})^2}}$</p></blockquote><p>如何使样本矩阵中的每一列的平均值为0呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如有一列特征值表示年龄： 17, 20, 23</span><br><span class="line">mean = (17 + 20 + 23)/3 = 20</span><br><span class="line">a&#x27; = -3</span><br><span class="line">b&#x27; =  0</span><br><span class="line">c&#x27; =  3</span><br><span class="line">完成！</span><br></pre></td></tr></table></figure><p>如何使样本矩阵中的每一列的标准差为1呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a&#x27; = -3</span><br><span class="line">b&#x27; =  0</span><br><span class="line">c&#x27; =  3</span><br><span class="line">s&#x27; = std(a&#x27;, b&#x27;, c&#x27;) </span><br><span class="line">[a&#x27;/s&#x27;,  b&#x27;/s&#x27;,  c&#x27;/s&#x27;]</span><br></pre></td></tr></table></figure><p>均值移除API：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> sp</span><br><span class="line"><span class="comment"># scale函数用于对函数进行预处理，实现均值移除。</span></span><br><span class="line"><span class="comment"># array为原数组，返回A为均值移除后的结果。</span></span><br><span class="line">A = sp.scale(array)</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> sp</span><br><span class="line">raw_samples = np.array([</span><br><span class="line">    [<span class="number">17.</span>, <span class="number">100.</span>, <span class="number">4000</span>],</span><br><span class="line">    [<span class="number">20.</span>, <span class="number">80.</span>, <span class="number">5000</span>],</span><br><span class="line">    [<span class="number">23.</span>, <span class="number">75.</span>, <span class="number">5500</span>]])</span><br><span class="line"></span><br><span class="line">std_samples = sp.scale(raw_samples)</span><br><span class="line"><span class="built_in">print</span>(std_samples)</span><br><span class="line"><span class="built_in">print</span>(std_samples.mean(axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(std_samples.std(axis=<span class="number">0</span>))</span><br></pre></td></tr></table></figure><h2 id="范围缩放"><a href="#范围缩放" class="headerlink" title="范围缩放"></a>范围缩放</h2><p>将样本矩阵中的每一列的最小值和最大值设定为相同的区间，统一各列特征值的范围。一般情况下会把特征值缩放至[0, 1]区间。</p><p><strong>举例说明</strong><br>A班 数学平均成绩：90&#x2F;150<br>B班 数学平均成绩：80&#x2F;100<br>C班 数学平均成绩：5&#x2F;5<br>从数据上面看，A班的数学成绩是最高的，但是看到总分150之后，发现才刚刚及格，所以这个分数我们要做范围处理</p><p>如何使一组特征值的最小值为0呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如有一列特征值表示年龄： [<span class="number">17</span>, <span class="number">20</span>, <span class="number">23</span>]</span><br><span class="line">每个元素减去特征值数组所有元素的最小值即可：[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>如何使一组特征值的最大值为1呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line">把特征值数组的每个元素除以最大值即可：[<span class="number">0</span>, <span class="number">1</span>/<span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>范围缩放API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建MinMax缩放器</span></span><br><span class="line">mms = sp.MinMaxScaler(feature_range=(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 调用mms对象的方法执行缩放操作, 返回缩放过后的结果</span></span><br><span class="line">result = mms.fit_transform(原始样本矩阵)</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> sp</span><br><span class="line">raw_samples = np.array([</span><br><span class="line">    [<span class="number">17.</span>, <span class="number">100.</span>, <span class="number">4000</span>],</span><br><span class="line">    [<span class="number">20.</span>, <span class="number">80.</span>, <span class="number">5000</span>],</span><br><span class="line">    [<span class="number">23.</span>, <span class="number">75.</span>, <span class="number">5500</span>]])</span><br><span class="line"><span class="built_in">print</span>(raw_samples)</span><br><span class="line">mms_samples = raw_samples.copy()</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> mms_samples.T:</span><br><span class="line">    col_min = col.<span class="built_in">min</span>()</span><br><span class="line">    col_max = col.<span class="built_in">max</span>()</span><br><span class="line">    a = np.array([</span><br><span class="line">        [col_min, <span class="number">1</span>],</span><br><span class="line">        [col_max, <span class="number">1</span>]])</span><br><span class="line">    b = np.array([<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">    x = np.linalg.solve(a, b)</span><br><span class="line">    col *= x[<span class="number">0</span>]</span><br><span class="line">    col += x[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(mms_samples)</span><br><span class="line"><span class="comment"># 根据给定范围创建一个范围缩放器</span></span><br><span class="line">mms = sp.MinMaxScaler(feature_range=(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 用范围缩放器实现特征值的范围缩放</span></span><br><span class="line">mms_samples = mms.fit_transform(raw_samples)</span><br><span class="line"><span class="built_in">print</span>(mms_samples)</span><br></pre></td></tr></table></figure><h2 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h2><p>有些情况每个样本的每个特征值具体的值并不重要，但是每个样本特征值的占比更加重要。</p><table><thead><tr><th></th><th>Python</th><th>Java</th><th>PHP</th></tr></thead><tbody><tr><td>2017</td><td>10</td><td>20</td><td>5</td></tr><tr><td>2018</td><td>8</td><td>5</td><td>0</td></tr></tbody></table><p>所以归一化即是用每个样本的每个特征值除以该样本各个特征值绝对值的总和。变换后的样本矩阵，每个样本的特征值绝对值之和为1。</p><p>归一化相关API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># array 原始样本矩阵</span></span><br><span class="line"><span class="comment"># norm  范数</span></span><br><span class="line"><span class="comment">#    l1 - l1范数，向量中个元素绝对值之和</span></span><br><span class="line"><span class="comment">#    l2 - l2范数，向量中个元素平方之和</span></span><br><span class="line"><span class="comment"># 返回归一化预处理后的样本矩阵</span></span><br><span class="line">sp.normalize(array, norm=<span class="string">&#x27;l1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> sp</span><br><span class="line">raw_samples = np.array([</span><br><span class="line">    [<span class="number">17.</span>, <span class="number">100.</span>, <span class="number">4000</span>],</span><br><span class="line">    [<span class="number">20.</span>, <span class="number">80.</span>, <span class="number">5000</span>],</span><br><span class="line">    [<span class="number">23.</span>, <span class="number">75.</span>, <span class="number">5500</span>]])</span><br><span class="line"><span class="built_in">print</span>(raw_samples)</span><br><span class="line">nor_samples = raw_samples.copy()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> nor_samples:</span><br><span class="line">    row /= <span class="built_in">abs</span>(row).<span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">print</span>(nor_samples)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(nor_samples).<span class="built_in">sum</span>(axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 归一化预处理</span></span><br><span class="line">nor_samples = sp.normalize(raw_samples, norm=<span class="string">&#x27;l1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(nor_samples)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(nor_samples).<span class="built_in">sum</span>(axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="二值化"><a href="#二值化" class="headerlink" title="二值化"></a>二值化</h2><p>有些业务并不需要分析矩阵的详细完整数据（比如图像边缘识别只需要分析出图像边缘即可），可以根据一个事先给定的阈值，用0和1表示特征值不高于或高于阈值。二值化后的数组中每个元素非0即1，达到简化数学模型的目的。</p><p>二值化相关API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给出阈值, 获取二值化器</span></span><br><span class="line"><span class="built_in">bin</span> = sp.Binarizer(threshold=阈值)</span><br><span class="line"><span class="comment"># 调用transform方法对原始样本矩阵进行二值化预处理操作</span></span><br><span class="line">result = <span class="built_in">bin</span>.transform(原始样本矩阵)</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> sp</span><br><span class="line">raw_samples = np.array([</span><br><span class="line">    [<span class="number">17.</span>, <span class="number">100.</span>, <span class="number">4000</span>],</span><br><span class="line">    [<span class="number">20.</span>, <span class="number">80.</span>, <span class="number">5000</span>],</span><br><span class="line">    [<span class="number">23.</span>, <span class="number">75.</span>, <span class="number">5500</span>]])</span><br><span class="line"><span class="built_in">print</span>(raw_samples)</span><br><span class="line">bin_samples = raw_samples.copy()</span><br><span class="line">bin_samples[bin_samples &lt;= <span class="number">80</span>] = <span class="number">0</span></span><br><span class="line">bin_samples[bin_samples &gt; <span class="number">80</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(bin_samples)</span><br><span class="line"><span class="comment"># 根据给定的阈值创建一个二值化器</span></span><br><span class="line"><span class="built_in">bin</span> = sp.Binarizer(threshold=<span class="number">80</span>)</span><br><span class="line"><span class="comment"># 通过二值化器进行二值化预处理</span></span><br><span class="line">bin_samples = <span class="built_in">bin</span>.transform(raw_samples)</span><br><span class="line"><span class="built_in">print</span>(bin_samples)</span><br></pre></td></tr></table></figure><h2 id="独热编码"><a href="#独热编码" class="headerlink" title="独热编码"></a>独热编码</h2><p>为样本特征的每个值建立一个由一个1和若干个0组成的序列，用该序列对所有的特征值进行编码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">两个数   三个数四个数</span><br><span class="line">132</span><br><span class="line">754</span><br><span class="line">186  </span><br><span class="line">739</span><br><span class="line">为每一个数字进行独热编码：</span><br><span class="line">1-10    3-1002-1000</span><br><span class="line">7-01    5-010   4-0100</span><br><span class="line">        8-001   6-0010</span><br><span class="line">                9-0001</span><br><span class="line">编码完毕后得到最终经过独热编码后的样本矩阵：</span><br><span class="line">101001000</span><br><span class="line">010100100</span><br><span class="line">100010010</span><br><span class="line">011000001</span><br></pre></td></tr></table></figure><p>独热编码相关API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个独热编码器</span></span><br><span class="line"><span class="comment"># sparse： 是否使用紧缩格式（稀疏矩阵）</span></span><br><span class="line"><span class="comment"># dtyle：  数据类型</span></span><br><span class="line">ohe = sp.OneHotEncoder(sparse=是否采用紧缩格式, dtype=数据类型)</span><br><span class="line"><span class="comment"># 对原始样本矩阵进行处理，返回独热编码后的样本矩阵。</span></span><br><span class="line">result = ohe.fit_transform(原始样本矩阵)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ohe = sp.OneHotEncoder(sparse=是否采用紧缩格式, dtype=数据类型)</span><br><span class="line"><span class="comment"># 对原始样本矩阵进行训练，得到编码字典</span></span><br><span class="line">encode_dict = ohe.fit(原始样本矩阵)</span><br><span class="line"><span class="comment"># 调用encode_dict字典的transform方法 对数据样本矩阵进行独热编码</span></span><br><span class="line">result = encode_dict.transform(原始样本矩阵)</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> sp</span><br><span class="line">raw_samples = np.array([</span><br><span class="line">    [<span class="number">17.</span>, <span class="number">100.</span>, <span class="number">4000</span>],</span><br><span class="line">    [<span class="number">20.</span>, <span class="number">80.</span>, <span class="number">5000</span>],</span><br><span class="line">    [<span class="number">23.</span>, <span class="number">75.</span>, <span class="number">5500</span>]])</span><br><span class="line"><span class="comment"># 创建独热编码器</span></span><br><span class="line">ohe = sp.OneHotEncoder(sparse=<span class="literal">False</span>, dtype=<span class="built_in">int</span>)</span><br><span class="line"><span class="comment"># 用独特编码器对原始样本矩阵做独热编码</span></span><br><span class="line">ohe_dict = ohe.fit(raw_samples)</span><br><span class="line">ohe_samples = ohe_dict.transform(raw_samples)</span><br><span class="line"></span><br><span class="line">ohe_samples = ohe.fit_transform(raw_samples)</span><br><span class="line"><span class="built_in">print</span>(ohe_samples)</span><br></pre></td></tr></table></figure><h2 id="标签编码"><a href="#标签编码" class="headerlink" title="标签编码"></a>标签编码</h2><p>根据字符串形式的特征值在特征序列中的位置，为其指定一个数字标签，用于提供给基于数值算法的学习模型。</p><p>标签编码相关API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取标签编码器</span></span><br><span class="line">lbe = sp.LabelEncoder()</span><br><span class="line"><span class="comment"># 调用标签编码器的fit_transform方法训练并且为原始样本矩阵进行标签编码</span></span><br><span class="line">result = lbe.fit_transform(原始样本矩阵)</span><br><span class="line"><span class="comment"># 根据标签编码的结果矩阵反查字典 得到原始数据矩阵</span></span><br><span class="line">samples = lbe.inverse_transform(result)</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> sp</span><br><span class="line">raw_samples = np.array([</span><br><span class="line">    <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;ford&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ford&#x27;</span>, <span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;ford&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;audi&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(raw_samples)</span><br><span class="line">lbe = sp.LabelEncoder()</span><br><span class="line">lbe_samples = lbe.fit_transform(raw_samples)</span><br><span class="line"><span class="built_in">print</span>(lbe_samples)</span><br><span class="line">inv_samples = lbe.inverse_transform(lbe_samples)</span><br><span class="line"><span class="built_in">print</span>(inv_samples)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI进阶 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-学习路线</title>
      <link href="/2019/02/10/ml/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2019/02/10/ml/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>机器学习是一个非常大的概念，设计到很多领域的技术，但是其应用几乎可以覆盖到任何领域。这边介绍机器学习入门需要掌握的技术基础。</p><span id="more"></span><h2 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a>数学基础</h2><h3 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h3><h3 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h3><h3 id="概率统计"><a href="#概率统计" class="headerlink" title="概率统计"></a>概率统计</h3><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><p><a href="https://www.python.org/">Python</a>目前机器学习最火的编程语言</p><h2 id="Python依赖的库"><a href="#Python依赖的库" class="headerlink" title="Python依赖的库"></a>Python依赖的库</h2><table><thead><tr><th align="left">库</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><a href="https://rencheng.cc/2018/11/30/datascience/Numpy/">numpy</a></td><td align="left">张量运算</td></tr><tr><td align="left"><a href="https://www.pypandas.cn/">pandas</a></td><td align="left">进行数据浏览与预处理</td></tr><tr><td align="left"><a href="https://www.scipy.org/">scipy</a></td><td align="left">高效的科学计算库</td></tr><tr><td align="left"><a href="https://rencheng.cc/2018/12/03/datascience/Matplotlib/">matplotlib</a></td><td align="left">数据可视化工具</td></tr></tbody></table><h2 id="经典算法"><a href="#经典算法" class="headerlink" title="经典算法"></a>经典算法</h2><h3 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a><a href="https://rencheng.cc/2019/02/22/ml/%E5%88%86%E7%B1%BB/," title="跳转站内教程">分类问题</a></h3><table><thead><tr><th align="left">算法模型</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">逻辑回归</td><td align="left">工业界最常用</td></tr><tr><td align="left">支持向量机</td><td align="left"></td></tr><tr><td align="left">决策树，随机森林</td><td align="left">相似的输入，产生相似的输出</td></tr><tr><td align="left">朴素贝叶斯</td><td align="left">NLP中常用</td></tr><tr><td align="left">深度神经网络</td><td align="left">视频、图片、语音等多媒体数据中使用</td></tr></tbody></table><h3 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a><a href="https://rencheng.cc/2019/02/20/ml/%E5%9B%9E%E5%BD%92/," title="跳转站内教程">回归问题</a></h3><table><thead><tr><th align="left">算法模型</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">线性回归</td><td align="left"></td></tr><tr><td align="left">普通最小二乘回归（Ordinary Least Squares Regression）</td><td align="left"></td></tr><tr><td align="left">逐步回归（Stepwise Regression）</td><td align="left"></td></tr><tr><td align="left">多元自适应回归样条（Multivariate Adaptive Regression Splines）</td><td align="left"></td></tr></tbody></table><h3 id="聚类问题"><a href="#聚类问题" class="headerlink" title="聚类问题"></a><a href="https://rencheng.cc/2019/03/01/ml/%E8%81%9A%E7%B1%BB/," title="跳转站内教程">聚类问题</a></h3><table><thead><tr><th align="left">算法模型</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">K均值（K-means）</td><td align="left"></td></tr><tr><td align="left">DBSCAN</td><td align="left"></td></tr><tr><td align="left">均值漂移</td><td align="left"></td></tr><tr><td align="left">凝聚层次</td><td align="left"></td></tr></tbody></table><h3 id="降维问题"><a href="#降维问题" class="headerlink" title="降维问题"></a>降维问题</h3><table><thead><tr><th align="left">算法模型</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">主成分分析（PCA）</td><td align="left"></td></tr><tr><td align="left">奇异值分解（SVD)</td><td align="left"></td></tr></tbody></table><h2 id="机器学习框架"><a href="#机器学习框架" class="headerlink" title="机器学习框架"></a>机器学习框架</h2><h3 id="scikit-learn"><a href="#scikit-learn" class="headerlink" title="scikit-learn"></a>scikit-learn</h3><p>远近闻名的机器学习package。未必是最高效的，但是接口真心封装得好，几乎所有的机器学习算法输入输出部分格式都一致。而它的支持文档甚至可以直接当做教程来学习，非常用心。对于不是非常高纬度、高量级的数据，<code>scikit-learn</code>胜任得非常好</p><table><thead><tr><th align="left">方法</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><a href="http://surpriselib.com/">surprise</a></td><td align="left">推荐系统</td></tr><tr><td align="left"><a href="https://rencheng.cc/2019/02/11/ml/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/">preprocessing</a></td><td align="left">数据预处理</td></tr><tr><td align="left"><a href="https://rencheng.cc/2019/03/01/ml/%E8%81%9A%E7%B1%BB/," title="跳转站内教程">cluster</a></td><td align="left">聚类算法</td></tr><tr><td align="left">metrics</td><td align="left">衡量指标</td></tr><tr><td align="left">feature_extraction.text</td><td align="left">NLP</td></tr><tr><td align="left">datasets</td><td align="left">数据集</td></tr><tr><td align="left">naive_bayes</td><td align="left">朴素贝叶斯</td></tr><tr><td align="left">linear_model</td><td align="left">回归</td></tr><tr><td align="left">pipeline</td><td align="left">模型管线</td></tr><tr><td align="left">tree</td><td align="left">决策数</td></tr><tr><td align="left">utils.shuffle</td><td align="left">打乱样本</td></tr><tr><td align="left">ensemble</td><td align="left">随机森林</td></tr><tr><td align="left">model_selection</td><td align="left">交叉验证，测试集切割</td></tr><tr><td align="left">svm</td><td align="left">svm</td></tr><tr><td align="left">neighbors</td><td align="left">近邻筛选器</td></tr></tbody></table><h3 id="keras-TensorFlow-pyTorch"><a href="#keras-TensorFlow-pyTorch" class="headerlink" title="keras&#x2F;TensorFlow&#x2F;pyTorch"></a>keras&#x2F;TensorFlow&#x2F;pyTorch</h3><p>对深度学习感兴趣的同学，也能很方便地搭建自己的神经网络了。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI进阶 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-概述</title>
      <link href="/2019/02/09/ml/%E6%A6%82%E8%BF%B0/"/>
      <url>/2019/02/09/ml/%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>机器学习是一门能够让编程计算机从数据中学习的计算机科学。<br>一个计算机程序在完成任务T之后，获得经验E，其表现效果为P，如果随着任务的增加，其表征经验的效果也能随之增加，即P与T成正增长关系，这样的系统就是一个机器学习系统。</p><span id="more"></span><h2 id="什么是机器学习"><a href="#什么是机器学习" class="headerlink" title="什么是机器学习"></a>什么是机器学习</h2><p>机器学习是一门能够让编程计算机从数据中学习的计算机科学。<br>一个计算机程序在完成任务T之后，获得经验E，其表现效果为P，如果随着任务的增加，其表征经验的效果也能随之增加，即P与T成正增长关系，这样的系统就是一个机器学习系统。</p><blockquote><p>人工智能，智能手机也算智能，通过编写逻辑智能就可以称之为人工智能<br>机器学习，是从现有流程中学习经验<br>深度学习，由神经网络算法构建的机器学习模型</p></blockquote><h2 id="为什么需要机器学习"><a href="#为什么需要机器学习" class="headerlink" title="为什么需要机器学习"></a>为什么需要机器学习</h2><ol><li>有助于提高系统的可维护性和可扩展性</li><li>用于解决算法非常复杂或没有算法的问题<br>经验主义</li><li>规则发现，算法自动生成，获得对业务的洞见</li></ol><h2 id="机器学习的问题"><a href="#机器学习的问题" class="headerlink" title="机器学习的问题"></a>机器学习的问题</h2><ol><li>建模问题<br>所谓机器学习，在形式上可这样理解：在数据对象中通过统计或推理的方法，寻找一个接受特定输入X，并给出预期输出Y的功能函数f，即Y&#x3D;f(X)。</li><li>评估问题<br>针对已知的输入，函数给出的输出(预测值)与实际输出(目标值)之间存在一定的误差，因此需要构建一个评估体系，根据误差的大小判定函数的优劣。</li><li>优化问题<br>学习的核心在于改善性能，通过数据对算法的反复锤炼，不断提升函数预测的准确性，直至获得能够满足实际需求的最优解，这个过程就是机器学习。</li></ol><h2 id="机器学习的类型"><a href="#机器学习的类型" class="headerlink" title="机器学习的类型"></a>机器学习的类型</h2><p><strong>按照学习方式划分：</strong>有监督学习、无监督学习、半监督学习、强化学习</p><ul><li><strong>有监督学习</strong>：用已知输出评估模型的性能；考试选择题：给出标准答案</li><li><strong>无监督学习</strong>：在没有已知输出的情况下，仅仅根据输入信息的相关性，进行类别的划分；考试写作文：没有标准答案</li><li><strong>半监督学习</strong>：先通过无监督学习划分类别，再根据人工标记通过有监督学习预测输出。</li><li><strong>强化学习</strong>：通过对不同决策结果的奖励和惩罚，使机器学习系统在经过足够长时间的训练以后，越来越倾向于给出接近期望结果的输出。类似于小孩，做对了，会得到夸奖，做错了，会得到惩罚。</li></ul><p><strong>按照学习过程划分：</strong>批量学习、增量学习</p><ul><li><strong>批量学习</strong>：将学习的过程和应用的过程截然分开，用全部的训练数据训练模型，然后再在应用场景中实现预测，当预测结果不够理想时，重新回到学习过程，如此循环。</li><li><strong>增量学习</strong>：将学习的过程和应用的过程统一起来，在应用的同时以增量的方式，不断学习新的内容，边训练边预测。</li></ul><p><strong>按照学习策略划分：</strong>基于实例的学习，基于模型的学习</p><ul><li><p><strong>实例学习</strong>：根据以往的经验，寻找与待预测输入最接近的样本，以其输出作为预测结果。</p><table><thead><tr><th>年龄</th><th>学历</th><th>经验</th><th>性别</th><th>月薪</th></tr></thead><tbody><tr><td>25</td><td>硕士</td><td>2</td><td>女</td><td>10000</td></tr><tr><td>20</td><td>本科</td><td>3</td><td></td><td>8000</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td>20</td><td>本科</td><td>3</td><td>男</td><td>？</td></tr></tbody></table></li><li><p><strong>模型学习</strong>：根据以往的经验，建立用于联系输出和输入的某种数学模型，将待预测输入代入该模型，预测其结果。</p><table><thead><tr><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>4</td></tr><tr><td>3</td><td>6</td></tr><tr><td>…</td><td>…</td></tr><tr><td>2x</td><td>&#x3D;Y</td></tr><tr><td>…</td><td>…</td></tr><tr><td>9?</td><td>18</td></tr></tbody></table></li></ul><h2 id="机器学习的基本流程"><a href="#机器学习的基本流程" class="headerlink" title="机器学习的基本流程"></a>机器学习的基本流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[数据收集] --&gt; B[数据清洗]</span><br><span class="line">B --&gt; C[数据预处理]</span><br><span class="line">C --&gt; D[选择模型]</span><br><span class="line">D --&gt; E[训练模型]</span><br><span class="line">E --&gt; F[验证模型]</span><br><span class="line">F --&gt; G[使用模型]</span><br><span class="line">G --&gt; H[维护模型]</span><br></pre></td></tr></table></figure><p><strong>数据处理</strong></p><ol><li>数据收集 （数据检索、数据挖掘、爬虫）</li><li>数据清洗</li></ol><p><strong>机器学习</strong></p><ol><li>选择模型 （算法）</li><li>训练模型 （算法）</li><li>评估模型 （工具、框架、算法知识）</li><li>测试模型</li></ol><p><strong>业务运维</strong></p><ol><li>应用模型</li><li>维护模型</li></ol><h2 id="机器学习的典型应用"><a href="#机器学习的典型应用" class="headerlink" title="机器学习的典型应用"></a>机器学习的典型应用</h2><p>股价预测、推荐引擎、自然语言识别、语音识别、图像识别、人脸识别</p><h2 id="机器学习的基本问题"><a href="#机器学习的基本问题" class="headerlink" title="机器学习的基本问题"></a>机器学习的基本问题</h2><ul><li><p>回归问题：根据已知的输入和输出寻找某种性能最佳的模型，将未知输出的输入代入模型，得到连续的输出。</p></li><li><p>分类问题：根据已知的输入和输出寻找某种性能最佳的模型，将未知输出的输入代入模型，得到离散的输出。</p></li><li><p>聚类问题：根据样本特征的相似程度，将其划分为不同的群落。</p></li><li><p>降维问题：在性能损失尽可能小的前提下，降低数据的复杂度(样本特征)。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI进阶 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年终总结</title>
      <link href="/2018/12/31/summary/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2018/12/31/summary/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>今年到了新公司，团队氛围非常不错，每个人都乐于分享技术，而我由之前的光头司令，有了伙伴。而且我的伙伴是个大牛<a href="https://maimai.cn/contact/share/card?u=2ks64ra6y0jh8">周康</a>，😸。<br>今年总结主要关键词：<strong>拥抱Team</strong></p><span id="more"></span><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>今年任务比较重，邻近年根了还要赶版本，主要的感觉就是一直在迭代，一直在开发，会的更会了，不会的依旧不会。从大牛身上学到了很多敏捷开发的思想，对我受益颇多。<br>团队领导的领导力很强，画饼的能力也挺厉害，虽知道在画饼，但总是不自觉的点点头。<br>今年使用了 <a href="https://ai.baidu.com/">Baidu的AI技术</a> 人脸识别和人体关键点分析；觉得太神奇了。</p><h2 id="反省"><a href="#反省" class="headerlink" title="反省"></a>反省</h2><p>今年不断的做业务开发，赶工期，对UI框架熟练程度增加了，但是对于个人的技术储备没有很大的提升，马上工作就满3年了，如果再这么下去处境就会很尴尬。</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>未来会抽出时间为自己技术增加深度或广度，不能固步自封。</p><p>2019年TODO：</p><ol><li>作为个人兴趣了解AI</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>越狱指南</title>
      <link href="/2018/12/10/ios/general/%E8%B6%8A%E7%8B%B1%E6%8C%87%E5%8D%97/"/>
      <url>/2018/12/10/ios/general/%E8%B6%8A%E7%8B%B1%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>为什么要越狱？</p><ul><li>增强设备可玩性（目前这个原因少了）</li><li>付费-&gt;免费</li><li>调研其他App的实现</li><li>逆向，脱壳，更改再签名</li></ul><blockquote><p>缺点：耗电，不予保修，不安全，变砖风险</p></blockquote><span id="more"></span><h2 id="硬件条件"><a href="#硬件条件" class="headerlink" title="硬件条件"></a>硬件条件</h2><ul><li>iPhone：iPhone 5S及以上</li><li>iPad：iPad Air、iPad mini2等</li></ul><blockquote><p>支持arm64架构<br>系统：iOS8+</p></blockquote><h2 id="越狱工具"><a href="#越狱工具" class="headerlink" title="越狱工具"></a>越狱工具</h2><ul><li><a href="https://www.i4.cn/">爱思助手</a></li><li><a href="https://checkra.in/">checkra1n</a></li></ul><blockquote><p>建议使用<code>checkra1n</code>, 2020.10.10亲测可用。</p></blockquote><h2 id="越狱种类"><a href="#越狱种类" class="headerlink" title="越狱种类"></a>越狱种类</h2><p><strong>完美越狱</strong><br>越狱后的iPhone可以正常关机和重启</p><p><strong>不完美越狱</strong><br>iPhone一旦关机后再开机时，屏幕就会一直停留在启动画面，也就是“白苹果”状态。或者能正常开机，但已经安装的破解软件都无法正常使用，需要将设备与PC连接后，使用软件进行引导才能使用</p><blockquote><p>一般较新的系统版本，均为不完美越狱</p></blockquote><h2 id="如何判断是否越狱成功？"><a href="#如何判断是否越狱成功？" class="headerlink" title="如何判断是否越狱成功？"></a>如何判断是否越狱成功？</h2><p><strong>1. 桌面是否有Cydia</strong><br><img src="https://cdn.rencheng.cc/blog/btwr5.jpg"><br><strong>2. 工具判断（比如爱思助手）</strong><br><img src="https://cdn.rencheng.cc/blog/q9cpc.png-thumb100"></p><h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><h3 id="WIFI"><a href="#WIFI" class="headerlink" title="WIFI"></a>WIFI</h3><p>ssh 远程访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@xx.xx.xx.xx</span><br></pre></td></tr></table></figure><p>键入密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alpine</span><br></pre></td></tr></table></figure><p><strong>修改密码</strong><br><img src="https://cdn.rencheng.cc/blog/wwl9z.jpg-thumb100"></p><h3 id="usbmuxd服务（推荐）"><a href="#usbmuxd服务（推荐）" class="headerlink" title="usbmuxd服务（推荐）"></a>usbmuxd服务（推荐）</h3><blockquote><p>服务默认启动，不需要手动启动</p></blockquote><p>服务可执行文件路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/System/Library/PrivateFrameworks/MobileDevice.framework/Resources/</span><br></pre></td></tr></table></figure><h4 id="搭桥"><a href="#搭桥" class="headerlink" title="搭桥"></a>搭桥</h4><ol><li>下载<a href="https://cgit.sukimashita.com/usbmuxd.git/snapshot/usbmuxd-1.0.8.tar.gz">usbmuxd</a>工具包</li><li>解压后只保留<code>python-client</code>文件夹，其他删掉</li><li>将<code>python-client</code>文件夹移动到<code>Documents</code>文件夹中，重命名为<code>connect_iphone</code></li><li>切换目录<code>cd ~/Documents/connect_iphone</code></li><li>执行命令<code>python tcprelay.py -t 22:10010</code><br> <img src="https://cdn.rencheng.cc/blog/dop9v.png-thumb100"></li></ol><blockquote><p>不一定非要10010端口，只要不是保留端口就行<br>端口映射完毕后，以后如果想跟iPhone的22端口通信，直接跟Mac本地的10010端口通信就可以了</p></blockquote><p><strong>注意</strong>：要想保持端口映射状态，不能终止此命令行（如果要执行其他终端命令行，请新开一个终端界面）</p><h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh root@localhost -p 10010</span><br><span class="line">或</span><br><span class="line">ssh root@127.0.0.1 -p 10010</span><br></pre></td></tr></table></figure><p><strong>远程拷贝文件</strong><br>将Mac上的<del>&#x2F;Desktop&#x2F;1.txt文件，拷贝到iPhone上的</del>&#x2F;test路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 10010 ~/Desktop/1.txt root@localhost:~/test</span><br></pre></td></tr></table></figure><blockquote><p>scp的端口号参数是大写的-P</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib</title>
      <link href="/2018/12/03/datascience/Matplotlib/"/>
      <url>/2018/12/03/datascience/Matplotlib/</url>
      
        <content type="html"><![CDATA[<p>Matplotlib 是 Python 的绘图库。 它可与 NumPy 一起使用，提供了一种有效的 MatLab 开源替代方案。使用它可以很方便的绘制出版质量级别的图形。</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><a href="https://matplotlib.org/">官网</a></p><p><a href="https://matplotlib.org/gallery/index.html">效果展示</a></p><h3 id="matplotlib基本功能"><a href="#matplotlib基本功能" class="headerlink" title="matplotlib基本功能"></a>matplotlib基本功能</h3><ol><li>基本绘图 （在二维平面坐标系中绘制连续的线）<ol><li>设置线型、线宽和颜色  </li><li>设置坐标轴范围</li><li>设置坐标刻度</li><li>设置坐标轴</li><li>图例</li><li>特殊点</li><li>备注</li></ol></li><li>图形对象(图形窗口)<ol><li>子图</li><li>刻度定位器</li><li>刻度网格线</li><li>半对数坐标</li><li>散点图</li><li>填充</li><li>条形图（柱状图）</li><li>饼图</li><li>等高线图</li><li>热成像图</li><li>极坐标系</li><li>三维曲面</li><li>简单动画</li></ol></li></ol><h2 id="基本绘图"><a href="#基本绘图" class="headerlink" title="基本绘图"></a>基本绘图</h2><p>案例：绘制一条正弦曲线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line"><span class="comment"># xarray: &lt;序列&gt; 水平坐标序列</span></span><br><span class="line"><span class="comment"># yarray: &lt;序列&gt; 垂直坐标序列</span></span><br><span class="line">mp.plot(xarray, yarray)</span><br><span class="line"><span class="comment">#显示图表</span></span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h3 id="绘制水平线与垂直线："><a href="#绘制水平线与垂直线：" class="headerlink" title="绘制水平线与垂直线："></a>绘制水平线与垂直线：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line"><span class="comment"># vertical 绘制垂直线</span></span><br><span class="line">mp.vlines(vval, ymin, ymax, ...)</span><br><span class="line"><span class="comment"># horizotal 绘制水平线</span></span><br><span class="line">mp.hlines(xval, xmin, xmax, ...)</span><br><span class="line"><span class="comment">#显示图表</span></span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h3 id="线型、线宽和颜色"><a href="#线型、线宽和颜色" class="headerlink" title="线型、线宽和颜色"></a>线型、线宽和颜色</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#linestyle: &#x27;-&#x27; 实线  &#x27;--&#x27; 虚线  &#x27;:&#x27; 点线</span></span><br><span class="line"><span class="comment">#linewidth: 线宽</span></span><br><span class="line"><span class="comment">#数字</span></span><br><span class="line"><span class="comment">#color: &lt;关键字参数&gt; 颜色</span></span><br><span class="line"><span class="comment">#英文颜色单词 或 常见颜色英文单词首字母 或 #495434 或 (1,1,1) 或 (1,1,1,1)</span></span><br><span class="line"><span class="comment">#alpha: &lt;关键字参数&gt; 透明度</span></span><br><span class="line"><span class="comment">#浮点数值</span></span><br><span class="line">mp.plot(xarray, yarray, linestyle=<span class="string">&#x27;&#x27;</span>, linewidth=<span class="number">1</span>, color=<span class="string">&#x27;&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p>linestyle 见附录<br>linecolor 见附录</p><h3 id="设置坐标轴范围"><a href="#设置坐标轴范围" class="headerlink" title="设置坐标轴范围"></a>设置坐标轴范围</h3><p>案例：把坐标轴范围设置为 -π ~ π</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#x_limt_min:&lt;float&gt; x轴范围最小值</span></span><br><span class="line"><span class="comment">#x_limit_max:&lt;float&gt; x轴范围最大值</span></span><br><span class="line">mp.xlim(x_limt_min, x_limit_max)</span><br><span class="line"><span class="comment">#y_limt_min:&lt;float&gt; y轴范围最小值</span></span><br><span class="line"><span class="comment">#y_limit_max:&lt;float&gt; y轴范围最大值</span></span><br><span class="line">mp.ylim(y_limt_min, y_limit_max)</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong><br>查看可视范围，例如只看第一象限；</p><h3 id="设置坐标刻度"><a href="#设置坐标刻度" class="headerlink" title="设置坐标刻度"></a>设置坐标刻度</h3><p>案例：把横坐标的刻度显示为：0, π&#x2F;2, π, 3π&#x2F;2, 2π</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#x_val_list: x轴刻度值序列</span></span><br><span class="line"><span class="comment">#x_text_list:x轴刻度标签文本序列 [可选]</span></span><br><span class="line">mp.xticks(x_val_list , x_text_list )</span><br><span class="line"><span class="comment">#y_val_list: y轴刻度值序列</span></span><br><span class="line"><span class="comment">#y_text_list:y轴刻度标签文本序列 [可选]</span></span><br><span class="line">mp.yticks(y_val_list , y_text_list )</span><br></pre></td></tr></table></figure><p><em><strong>刻度文本的特殊语法</strong></em> – <em>LaTex排版语法字符串</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r&#x27;$x^n+y^n=z^n$&#x27;</span>,   <span class="string">r&#x27;$\int\frac&#123;1&#125;&#123;x&#125; dx = \ln |x| + C$&#x27;</span>,     <span class="string">r&#x27;$-\frac&#123;\pi&#125;&#123;2&#125;$&#x27;</span></span><br></pre></td></tr></table></figure><p>$$<br>x^n+y^n&#x3D;z^n,  \int\frac{1}{x} dx &#x3D; \ln |x| + C,     -\frac{\pi}{2}<br>$$<br>具体见附录</p><h3 id="设置坐标轴"><a href="#设置坐标轴" class="headerlink" title="设置坐标轴"></a>设置坐标轴</h3><p>坐标轴名：left &#x2F; right &#x2F; bottom &#x2F; top</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前坐标轴对象，&#123;&#x27;left&#x27;:左轴,&#x27;right&#x27;:右轴,&#x27;bottom&#x27;:下轴,&#x27;top&#x27;:上轴 &#125;</span></span><br><span class="line">ax = mp.gca()</span><br><span class="line"><span class="comment"># 获取其中某个坐标轴</span></span><br><span class="line">axis = ax.spines[<span class="string">&#x27;坐标轴名&#x27;</span>]</span><br><span class="line"><span class="comment"># 设置坐标轴的位置。 该方法需要传入2个元素的元组作为参数</span></span><br><span class="line"><span class="comment"># type: &lt;<span class="built_in">str</span>&gt; 移动坐标轴的参照类型  一般为&#x27;data&#x27; (以数据的值作为移动参照值)</span></span><br><span class="line"><span class="comment"># val:  参照值</span></span><br><span class="line">axis.set_position((<span class="built_in">type</span>, val))</span><br><span class="line"><span class="comment"># 设置坐标轴的颜色</span></span><br><span class="line"><span class="comment"># color: &lt;str&gt; 颜色值字符串</span></span><br><span class="line">axis.set_color(color)</span><br></pre></td></tr></table></figure><p>案例：设置坐标轴至中心。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置坐标轴</span></span><br><span class="line">ax = mp.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))</span><br><span class="line">mp.yticks([-<span class="number">1</span>, -<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h3><blockquote><p>图例就是标注哪条线是什么意思</p></blockquote><p>显示两条曲线的图例，并测试loc属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 再绘制曲线时定义曲线的label</span></span><br><span class="line"><span class="comment"># label: &lt;关键字参数 str&gt; 支持LaTex排版语法字符串</span></span><br><span class="line">mp.plot(xarray, yarray ... label=<span class="string">&#x27;&#x27;</span>, ...)</span><br><span class="line"><span class="comment"># 设置图例的位置</span></span><br><span class="line"><span class="comment"># loc: &lt;关键字参数&gt; 制定图例的显示位置 (若不设置loc，则显示默认位置)</span></span><br><span class="line"><span class="comment"># ===============   =============</span></span><br><span class="line"><span class="comment">#    Location String   Location Code</span></span><br><span class="line"><span class="comment">#    ===============   =============</span></span><br><span class="line"><span class="comment">#    &#x27;best&#x27;            0</span></span><br><span class="line"><span class="comment">#    &#x27;upper right&#x27;     1</span></span><br><span class="line"><span class="comment">#    &#x27;upper left&#x27;      2</span></span><br><span class="line"><span class="comment">#    &#x27;lower left&#x27;      3</span></span><br><span class="line"><span class="comment">#    &#x27;lower right&#x27;     4</span></span><br><span class="line"><span class="comment">#    &#x27;right&#x27;           5</span></span><br><span class="line"><span class="comment">#    &#x27;center left&#x27;     6</span></span><br><span class="line"><span class="comment">#    &#x27;center right&#x27;    7</span></span><br><span class="line"><span class="comment">#    &#x27;lower center&#x27;    8</span></span><br><span class="line"><span class="comment">#    &#x27;upper center&#x27;    9</span></span><br><span class="line"><span class="comment">#    &#x27;center&#x27;          10</span></span><br><span class="line"><span class="comment">#    ===============   =============</span></span><br><span class="line">mp.legend(loc=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="特殊点"><a href="#特殊点" class="headerlink" title="特殊点"></a>特殊点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xarray: &lt;序列&gt; 所有需要标注点的水平坐标组成的序列</span></span><br><span class="line"><span class="comment"># yarray: &lt;序列&gt; 所有需要标注点的垂直坐标组成的序列</span></span><br><span class="line">mp.scatter(xarray, yarray, </span><br><span class="line">           marker=<span class="string">&#x27;&#x27;</span>, <span class="comment">#点型 ~ matplotlib.markers</span></span><br><span class="line">           s=<span class="number">60</span>, <span class="comment">#大小</span></span><br><span class="line">           edgecolor=<span class="string">&#x27;&#x27;</span>, <span class="comment">#边缘色</span></span><br><span class="line">           facecolor=<span class="string">&#x27;&#x27;</span>,<span class="comment">#填充色</span></span><br><span class="line">           zorder=<span class="number">3</span><span class="comment">#绘制图层编号 （编号越大，图层越靠上）</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><em>marker点型可参照：help(matplotlib.markers)</em></p><p>也可参照附录：point样式</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>为在某条曲线上的点添加备注，指明函数方程与值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在图表中为某个点添加备注。包含备注文本，备注箭头等图像的设置。</span></span><br><span class="line">mp.annotate(</span><br><span class="line">    <span class="string">r&#x27;$\frac&#123;\pi&#125;&#123;2&#125;$&#x27;</span>, <span class="comment">#备注中显示的文本内容</span></span><br><span class="line">    xycoords=<span class="string">&#x27;data&#x27;</span>,    <span class="comment">#备注目标点所使用的坐标系（data表示数据坐标系）</span></span><br><span class="line">    xy=(x, y),          <span class="comment">#备注目标点的坐标</span></span><br><span class="line">    textcoords=<span class="string">&#x27;offset points&#x27;</span>, <span class="comment">#备注文本所使用的坐标系（offset points表示参照点的偏移坐标系）</span></span><br><span class="line">    xytext=(x, y),      <span class="comment">#备注文本的坐标</span></span><br><span class="line">    fontsize=<span class="number">14</span>,        <span class="comment">#备注文本的字体大小</span></span><br><span class="line">    arrowprops=<span class="built_in">dict</span>()   <span class="comment">#使用字典定义文本指向目标点的箭头样式</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>arrowprops参数使用字典定义指向目标点的箭头样式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#arrowprops字典参数的常用key</span></span><br><span class="line">arrowprops=<span class="built_in">dict</span>(</span><br><span class="line">    arrowstyle=<span class="string">&#x27;&#x27;</span>,<span class="comment">#定义箭头样式</span></span><br><span class="line">    connectionstyle=<span class="string">&#x27;&#x27;</span><span class="comment">#定义连接线的样式</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>箭头样式（arrowstyle）字符串如下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">============   =============================================</span><br><span class="line">Name           Attrs</span><br><span class="line">============   =============================================</span><br><span class="line">  &#x27;-&#x27;          None</span><br><span class="line">  &#x27;-&gt;&#x27;         head_length=0.4,head_width=0.2</span><br><span class="line">  &#x27;-[&#x27;         widthB=1.0,lengthB=0.2,angleB=None</span><br><span class="line">  &#x27;|-|&#x27;        widthA=1.0,widthB=1.0</span><br><span class="line">  &#x27;-|&gt;&#x27;        head_length=0.4,head_width=0.2</span><br><span class="line">  &#x27;&lt;-&#x27;         head_length=0.4,head_width=0.2</span><br><span class="line">  &#x27;&lt;-&gt;&#x27;        head_length=0.4,head_width=0.2</span><br><span class="line">  &#x27;&lt;|-&#x27;        head_length=0.4,head_width=0.2</span><br><span class="line">  &#x27;&lt;|-|&gt;&#x27;      head_length=0.4,head_width=0.2</span><br><span class="line">  &#x27;fancy&#x27;      head_length=0.4,head_width=0.4,tail_width=0.4</span><br><span class="line">  &#x27;simple&#x27;     head_length=0.5,head_width=0.5,tail_width=0.2</span><br><span class="line">  &#x27;wedge&#x27;      tail_width=0.3,shrink_factor=0.5</span><br><span class="line">============   =============================================</span><br></pre></td></tr></table></figure><p><strong>连接线样式（connectionstyle）字符串如下</strong></p><table><thead><tr><th align="left">Name</th><th align="left">Attrs</th></tr></thead><tbody><tr><td align="left">‘angle’</td><td align="left">angleA&#x3D;90,angleB&#x3D;0,rad&#x3D;0.0</td></tr><tr><td align="left">‘angle3’</td><td align="left">angleA&#x3D;90,angleB&#x3D;0&#96;</td></tr><tr><td align="left">‘arc’</td><td align="left">angleA&#x3D;0,angleB&#x3D;0,armA&#x3D;None,armB&#x3D;None,rad&#x3D;0.0</td></tr><tr><td align="left">‘arc3’</td><td align="left">rad&#x3D;0.0</td></tr><tr><td align="left">‘bar’</td><td align="left">armA&#x3D;0.0,armB&#x3D;0.0,fraction&#x3D;0.3,angle&#x3D;None</td></tr></tbody></table><h2 id="图形对象（图形窗口）"><a href="#图形对象（图形窗口）" class="headerlink" title="图形对象（图形窗口）"></a>图形对象（图形窗口）</h2><p>绘制两个窗口，一起显示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手动构建 matplotlib 窗口</span></span><br><span class="line">mp.figure(</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>,            <span class="comment">#窗口标题栏文本 </span></span><br><span class="line">    facecolor=<span class="string">&#x27;&#x27;</span><span class="comment">#图表背景色</span></span><br><span class="line">)</span><br><span class="line">mp.figure(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">mp.figure(<span class="string">&#x27;A&#x27;</span>)  <span class="comment"># 把A创建置为当前窗口</span></span><br><span class="line">mp.plot(....) <span class="comment"># 将会作用在A窗口中</span></span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p>mp.figure方法不仅可以构建一个新窗口，如果已经构建过title&#x3D;’xxx’的窗口，又使用figure方法构建了title&#x3D;’xxx’ 的窗口的话，mp将不会创建新的窗口，而是把title&#x3D;’xxx’的窗口置为当前操作窗口。</p><p><strong>设置当前窗口的参数</strong></p><p>案例：测试窗口相关参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置图表标题 显示在图表上方</span></span><br><span class="line">mp.title(title, fontsize=<span class="number">12</span>)</span><br><span class="line"><span class="comment"># 设置水平轴的文本</span></span><br><span class="line">mp.xlabel(x_label_str, fontsize=<span class="number">12</span>)</span><br><span class="line"><span class="comment"># 设置垂直轴的文本</span></span><br><span class="line">mp.ylabel(y_label_str, fontsize=<span class="number">12</span>)</span><br><span class="line"><span class="comment"># 设置刻度参数   labelsize设置刻度字体大小</span></span><br><span class="line">mp.tick_params(labelsize=<span class="number">8</span>)</span><br><span class="line"><span class="comment"># 设置图表网格线  linestyle设置网格线的样式</span></span><br><span class="line"><span class="comment">#-  or solid 粗线</span></span><br><span class="line"><span class="comment">#   -- or dashed 虚线</span></span><br><span class="line"><span class="comment">#   -. or dashdot 点虚线</span></span><br><span class="line"><span class="comment">#   :  or dotted 点线</span></span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置紧凑布局，把图表相关参数都显示在窗口中</span></span><br><span class="line">mp.tight_layout() </span><br></pre></td></tr></table></figure><h3 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h3><p><strong>矩阵式布局</strong></p><p>绘制矩阵式子图布局相关API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mp.figure(<span class="string">&#x27;Subplot Layout&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line"><span class="comment"># 拆分矩阵</span></span><br><span class="line"><span class="comment"># rows:行数</span></span><br><span class="line">    <span class="comment"># cols:列数</span></span><br><span class="line">    <span class="comment"># num:编号</span></span><br><span class="line">mp.subplot(rows, cols, num)</span><br><span class="line"><span class="comment">#1 2 3</span></span><br><span class="line"><span class="comment">#4 5 6</span></span><br><span class="line"><span class="comment">#7 8 9 </span></span><br><span class="line">mp.subplot(<span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>)<span class="comment">#操作3*3的矩阵中编号为5的子图</span></span><br><span class="line">mp.plot()</span><br><span class="line">mp.subplot(<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>)<span class="comment">#操作3*3的矩阵中编号为1的子图</span></span><br><span class="line">mp.plot()</span><br><span class="line">mp.subplot(<span class="number">335</span>)<span class="comment">#简写</span></span><br></pre></td></tr></table></figure><p>案例：绘制9宫格矩阵式子图，每个子图中写一个数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mp.figure(<span class="string">&#x27;Subplot Layout&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">mp.subplot(<span class="number">3</span>, <span class="number">3</span>, i+<span class="number">1</span>)</span><br><span class="line">mp.text(</span><br><span class="line"><span class="number">0.5</span>, <span class="number">0.5</span>, i+<span class="number">1</span>, </span><br><span class="line">ha=<span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">va=<span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">size=<span class="number">36</span>,</span><br><span class="line">alpha=<span class="number">0.5</span></span><br><span class="line">)</span><br><span class="line">mp.xticks([])</span><br><span class="line">mp.yticks([])</span><br><span class="line"></span><br><span class="line">mp.tight_layout()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p><strong>网格式布局</strong></p><p>网格式布局支持单元格的合并。</p><p>绘制网格式子图布局相关API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> mg</span><br><span class="line">mp.figure(<span class="string">&#x27;Grid Layout&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line"><span class="comment"># 调用GridSpec方法拆分网格式布局</span></span><br><span class="line"><span class="comment"># rows:行数</span></span><br><span class="line"><span class="comment"># cols:列数</span></span><br><span class="line"><span class="comment"># gs = mg.GridSpec(rows, cols)拆分成3行3列</span></span><br><span class="line">gs = mg.GridSpec(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 合并0行与0、1列为一个子图表</span></span><br><span class="line">mp.subplot(gs[<span class="number">0</span>, :<span class="number">2</span>])</span><br><span class="line">mp.text(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="string">&#x27;1&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;center&#x27;</span>, size=<span class="number">36</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p>案例：绘制一个自定义网格布局。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> mg</span><br><span class="line">mp.figure(<span class="string">&#x27;GridLayout&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">gridsubs = mp.GridSpec(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 合并0行、0/1列为一个子图</span></span><br><span class="line">mp.subplot(gridsubs[<span class="number">0</span>, :<span class="number">2</span>])</span><br><span class="line">mp.text(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1</span>, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;center&#x27;</span>, size=<span class="number">36</span>)</span><br><span class="line">mp.tight_layout()</span><br><span class="line">mp.xticks([])</span><br><span class="line">mp.yticks([])</span><br></pre></td></tr></table></figure><p><strong>自由式布局</strong></p><p>自由式布局相关API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mp.figure(<span class="string">&#x27;Flow Layout&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置图标的位置，给出左下角点坐标与宽高即可</span></span><br><span class="line"><span class="comment"># left_bottom_x: 坐下角点x坐标</span></span><br><span class="line"><span class="comment"># left_bottom_x: 坐下角点y坐标</span></span><br><span class="line"><span class="comment"># width: 宽度</span></span><br><span class="line"><span class="comment"># height: 高度</span></span><br><span class="line"><span class="comment"># mp.axes([left_bottom_x, left_bottom_y, width, height])</span></span><br><span class="line">mp.axes([<span class="number">0.03</span>, <span class="number">0.03</span>, <span class="number">0.94</span>, <span class="number">0.94</span>])</span><br><span class="line">mp.text(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="string">&#x27;1&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;center&#x27;</span>, size=<span class="number">36</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p>案例：测试自由式布局，定位子图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mp.figure(<span class="string">&#x27;FlowLayout&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line"></span><br><span class="line">mp.axes([<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.5</span>, <span class="number">0.3</span>])</span><br><span class="line">mp.text(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="string">&#x27;1&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;center&#x27;</span>, size=<span class="number">36</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h3 id="刻度定位器"><a href="#刻度定位器" class="headerlink" title="刻度定位器"></a>刻度定位器</h3><p>刻度定位器相关API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前坐标轴</span></span><br><span class="line">ax = mp.gca()</span><br><span class="line"><span class="comment"># 设置水平坐标轴的主刻度定位器</span></span><br><span class="line">ax.xaxis.set_major_locator(mp.NullLocator())</span><br><span class="line"><span class="comment"># 设置水平坐标轴的次刻度定位器为多点定位器，间隔0.1</span></span><br><span class="line">ax.xaxis.set_minor_locator(mp.MultipleLocator(<span class="number">0.1</span>))</span><br></pre></td></tr></table></figure><p>案例：绘制一个数轴。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mp.figure(<span class="string">&#x27;Locators&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取当前坐标轴</span></span><br><span class="line">ax = mp.gca()</span><br><span class="line"><span class="comment"># 隐藏除底轴以外的所有坐标轴</span></span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line"><span class="comment"># 将底坐标轴调整到子图中心位置</span></span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># 设置水平坐标轴的主刻度定位器</span></span><br><span class="line">ax.xaxis.set_major_locator(mp.NullLocator())</span><br><span class="line"><span class="comment"># 设置水平坐标轴的次刻度定位器为多点定位器，间隔0.1</span></span><br><span class="line">ax.xaxis.set_minor_locator(mp.MultipleLocator(<span class="number">0.1</span>))</span><br><span class="line"><span class="comment"># 标记所用刻度定位器类名 </span></span><br><span class="line">mp.text(<span class="number">5</span>, <span class="number">0.3</span>, <span class="string">&#x27;NullLocator()&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, size=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>案例：使用for循环测试刻度器样式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">locators = [<span class="string">&#x27;mp.NullLocator()&#x27;</span>, <span class="string">&#x27;mp.MaxNLocator(nbins=4)&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, locator <span class="keyword">in</span> <span class="built_in">enumerate</span>(locators):</span><br><span class="line">    mp.subplot(<span class="built_in">len</span>(locators), <span class="number">1</span>, i+<span class="number">1</span>)</span><br><span class="line">mp.xlim(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">mp.ylim(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">mp.yticks([])</span><br><span class="line"><span class="comment"># 获取当前坐标轴</span></span><br><span class="line">ax = mp.gca()</span><br><span class="line"><span class="comment"># 隐藏除底轴以外的所有坐标轴</span></span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line"><span class="comment"># 将底坐标轴调整到子图中心位置</span></span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># 设置水平坐标轴的主刻度定位器</span></span><br><span class="line">ax.xaxis.set_major_locator(<span class="built_in">eval</span>( ))</span><br><span class="line"><span class="comment"># 设置水平坐标轴的次刻度定位器为多点定位器，间隔0.1</span></span><br><span class="line">ax.xaxis.set_minor_locator(mp.MultipleLocator(<span class="number">0.1</span>))</span><br><span class="line">mp.plot(np.arange(<span class="number">11</span>), np.zeros(<span class="number">11</span>), c=<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line"><span class="comment"># 标记所用刻度定位器类名</span></span><br><span class="line">mp.text(<span class="number">5</span>, <span class="number">0.3</span>, locator, ha=<span class="string">&#x27;center&#x27;</span>, size=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>常用刻度器如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空定位器：不绘制刻度</span></span><br><span class="line">mp.NullLocator()</span><br><span class="line"><span class="comment"># 最大值定位器：</span></span><br><span class="line"><span class="comment"># 最多绘制nbins+1个刻度</span></span><br><span class="line">mp.MaxNLocator(nbins=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 定点定位器：根据locs参数中的位置绘制刻度</span></span><br><span class="line">mp.FixedLocator(locs=[<span class="number">0</span>, <span class="number">2.5</span>, <span class="number">5</span>, <span class="number">7.5</span>, <span class="number">10</span>])</span><br><span class="line"><span class="comment"># 自动定位器：由系统自动选择刻度的绘制位置</span></span><br><span class="line">mp.AutoLocator()</span><br><span class="line"><span class="comment"># 索引定位器：由offset确定起始刻度，由base确定相邻刻度的间隔</span></span><br><span class="line">mp.IndexLocator(offset=<span class="number">0.5</span>, base=<span class="number">1.5</span>)</span><br><span class="line"><span class="comment"># 多点定位器：从0开始，按照参数指定的间隔(缺省1)绘制刻度</span></span><br><span class="line">mp.MultipleLocator()</span><br><span class="line"><span class="comment"># 线性定位器：等分numticks-1份，绘制numticks个刻度</span></span><br><span class="line">mp.LinearLocator(numticks=<span class="number">21</span>)</span><br><span class="line"><span class="comment"># 对数定位器：以base为底，绘制刻度</span></span><br><span class="line">mp.LogLocator(base=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="刻度网格线"><a href="#刻度网格线" class="headerlink" title="刻度网格线"></a>刻度网格线</h3><p>绘制刻度网格线的相关API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ax = mp.gca()</span><br><span class="line"><span class="comment">#绘制刻度网格线</span></span><br><span class="line">ax.grid(</span><br><span class="line">    which=<span class="string">&#x27;&#x27;</span>,<span class="comment"># &#x27;major&#x27;/&#x27;minor&#x27; &lt;-&gt; &#x27;主刻度&#x27;/&#x27;次刻度&#x27; </span></span><br><span class="line">    axis=<span class="string">&#x27;&#x27;</span>,<span class="comment"># &#x27;x&#x27;/&#x27;y&#x27;/&#x27;both&#x27; &lt;-&gt; 绘制x或y轴</span></span><br><span class="line">    linewidth=<span class="number">1</span>, <span class="comment"># 线宽</span></span><br><span class="line">    linestyle=<span class="string">&#x27;&#x27;</span>, <span class="comment"># 线型</span></span><br><span class="line">    color=<span class="string">&#x27;&#x27;</span>,<span class="comment"># 颜色</span></span><br><span class="line">    alpha=<span class="number">0.5</span><span class="comment"># 透明度</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>案例：绘制曲线 [1, 10, 100, 1000, 100, 10, 1]，然后设置刻度网格线，测试刻度网格线的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">y = np.array([<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>, <span class="number">100</span>, <span class="number">10</span>, <span class="number">1</span>])</span><br><span class="line">mp.figure(<span class="string">&#x27;Normal &amp; Log&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.subplot(<span class="number">211</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Normal&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">ax = mp.gca()</span><br><span class="line">ax.xaxis.set_major_locator(mp.MultipleLocator(<span class="number">1.0</span>))</span><br><span class="line">ax.xaxis.set_minor_locator(mp.MultipleLocator(<span class="number">0.1</span>))</span><br><span class="line">ax.yaxis.set_major_locator(mp.MultipleLocator(<span class="number">250</span>))</span><br><span class="line">ax.yaxis.set_minor_locator(mp.MultipleLocator(<span class="number">50</span>))</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">ax.grid(which=<span class="string">&#x27;major&#x27;</span>, axis=<span class="string">&#x27;both&#x27;</span>, linewidth=<span class="number">0.75</span>,</span><br><span class="line">        linestyle=<span class="string">&#x27;-&#x27;</span>, color=<span class="string">&#x27;orange&#x27;</span>)</span><br><span class="line">ax.grid(which=<span class="string">&#x27;minor&#x27;</span>, axis=<span class="string">&#x27;both&#x27;</span>, linewidth=<span class="number">0.25</span>,</span><br><span class="line">        linestyle=<span class="string">&#x27;-&#x27;</span>, color=<span class="string">&#x27;orange&#x27;</span>)</span><br><span class="line">mp.plot(y, <span class="string">&#x27;o-&#x27;</span>, c=<span class="string">&#x27;dodgerblue&#x27;</span>, label=<span class="string">&#x27;plot&#x27;</span>)</span><br><span class="line">mp.legend()</span><br></pre></td></tr></table></figure><h3 id="半对数坐标"><a href="#半对数坐标" class="headerlink" title="半对数坐标"></a>半对数坐标</h3><p>y轴将以指数方式递增。 基于半对数坐标绘制第二个子图，表示曲线：[1, 10, 100, 1000, 100, 10, 1]。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mp.figure(<span class="string">&#x27;Grid&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>, <span class="number">100</span>, <span class="number">10</span>, <span class="number">1</span>]</span><br><span class="line">mp.semilogy(y)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><p>可以通过每个点的坐标、颜色、大小和形状表示不同的特征值。</p><table><thead><tr><th>身高</th><th>体重</th><th>性别</th><th>年龄段</th><th>种族</th></tr></thead><tbody><tr><td>180</td><td>80</td><td>男</td><td>中年</td><td>亚洲</td></tr><tr><td>160</td><td>50</td><td>女</td><td>青少</td><td>美洲</td></tr></tbody></table><p>绘制散点图的相关API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mp.scatter(</span><br><span class="line">    x, <span class="comment"># x轴坐标数组</span></span><br><span class="line">    y,<span class="comment"># y轴坐标数组</span></span><br><span class="line">    marker=<span class="string">&#x27;&#x27;</span>, <span class="comment"># 点型</span></span><br><span class="line">    s=<span class="number">10</span>,<span class="comment"># 大小</span></span><br><span class="line">    color=<span class="string">&#x27;&#x27;</span>,<span class="comment"># 颜色</span></span><br><span class="line">    edgecolor=<span class="string">&#x27;&#x27;</span>, <span class="comment"># 边缘颜色</span></span><br><span class="line">    facecolor=<span class="string">&#x27;&#x27;</span>,<span class="comment"># 填充色</span></span><br><span class="line">    zorder=<span class="string">&#x27;&#x27;</span><span class="comment"># 图层序号</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>numpy.random提供了normal函数用于产生符合 正态分布 的随机数 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">100</span></span><br><span class="line"><span class="comment"># 172:期望值</span></span><br><span class="line"><span class="comment"># 10:标准差</span></span><br><span class="line"><span class="comment"># n:数字生成数量</span></span><br><span class="line">x = np.random.normal(<span class="number">172</span>, <span class="number">20</span>, n)</span><br><span class="line">y = np.random.normal(<span class="number">60</span>, <span class="number">10</span>, n)</span><br></pre></td></tr></table></figure><p>案例：绘制平面散点图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mp.figure(<span class="string">&#x27;scatter&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;scatter&#x27;</span>)</span><br><span class="line">mp.scatter(x, y)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p>设置点的颜色</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mp.scatter(x, y, c=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"><span class="comment">#直接设置颜色</span></span><br><span class="line">d = (x-<span class="number">172</span>)**<span class="number">2</span> + (y-<span class="number">60</span>)**<span class="number">2</span></span><br><span class="line">mp.scatter(x, y, c=d, cmap=<span class="string">&#x27;jet&#x27;</span>)<span class="comment">#以c作为参数，取cmap颜色映射表中的颜色值</span></span><br></pre></td></tr></table></figure><p><em>cmap颜色映射表参附录cmap颜色映射表</em></p><h3 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h3><p>以某种颜色自动填充两条曲线的闭合区域。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mp.fill_between(</span><br><span class="line">x,<span class="comment"># x轴的水平坐标</span></span><br><span class="line">    sin_x,<span class="comment"># 下边界曲线上点的垂直坐标</span></span><br><span class="line">    cos_x,<span class="comment"># 上边界曲线上点的垂直坐标</span></span><br><span class="line">    sin_x&lt;cos_x, <span class="comment"># 填充条件，为True时填充</span></span><br><span class="line">    color=<span class="string">&#x27;&#x27;</span>, <span class="comment"># 填充颜色</span></span><br><span class="line">    alpha=<span class="number">0.2</span><span class="comment"># 透明度</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>案例：绘制两条曲线： sin_x &#x3D; sin(x)    cos_x &#x3D; cos(x &#x2F; 2) &#x2F; 2[0-8π]  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">1000</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">8</span> * np.pi, n)</span><br><span class="line">sin_y = np.sin(x)</span><br><span class="line">cos_y = np.cos(x / <span class="number">2</span>) / <span class="number">2</span></span><br><span class="line">mp.figure(<span class="string">&#x27;Fill&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Fill&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.plot(x, sin_y, c=<span class="string">&#x27;dodgerblue&#x27;</span>,</span><br><span class="line">        label=<span class="string">r&#x27;$y=sin(x)$&#x27;</span>)</span><br><span class="line">mp.plot(x, cos_y, c=<span class="string">&#x27;orangered&#x27;</span>,</span><br><span class="line">        label=<span class="string">r&#x27;$y=\frac&#123;1&#125;&#123;2&#125;cos(\frac&#123;x&#125;&#123;2&#125;)$&#x27;</span>)</span><br><span class="line">mp.fill_between(x, cos_y, sin_y, cos_y &lt; sin_y,</span><br><span class="line">                color=<span class="string">&#x27;dodgerblue&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">mp.fill_between(x, cos_y, sin_y, cos_y &gt; sin_y,</span><br><span class="line">                color=<span class="string">&#x27;orangered&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">mp.legend()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h3 id="条形图（柱状图）"><a href="#条形图（柱状图）" class="headerlink" title="条形图（柱状图）"></a>条形图（柱状图）</h3><p>绘制柱状图的相关API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mp.figure(<span class="string">&#x27;Bar&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.bar(</span><br><span class="line">x,<span class="comment"># 水平坐标数组</span></span><br><span class="line">    y,<span class="comment"># 柱状图高度数组</span></span><br><span class="line">    width,<span class="comment"># 柱子的宽度</span></span><br><span class="line">    color=<span class="string">&#x27;&#x27;</span>, <span class="comment"># 填充颜色</span></span><br><span class="line">    label=<span class="string">&#x27;&#x27;</span>,<span class="comment">#</span></span><br><span class="line">    alpha=<span class="number">0.2</span><span class="comment">#</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>案例：先以柱状图绘制苹果12个月的销量，然后再绘制橘子的销量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">apples = np.array([<span class="number">30</span>, <span class="number">25</span>, <span class="number">22</span>, <span class="number">36</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">33</span>, <span class="number">19</span>, <span class="number">27</span>, <span class="number">15</span>])</span><br><span class="line">oranges = np.array([<span class="number">24</span>, <span class="number">33</span>, <span class="number">19</span>, <span class="number">27</span>, <span class="number">35</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">32</span>, <span class="number">20</span>, <span class="number">22</span>])</span><br><span class="line">mp.figure(<span class="string">&#x27;Bar&#x27;</span>  , facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Bar&#x27;</span>, font size=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;Month&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;Price&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(axis=<span class="string">&#x27;y&#x27;</span>, linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.ylim((<span class="number">0</span>, <span class="number">40</span>))</span><br><span class="line">x = np.arange(<span class="built_in">len</span>(apples))</span><br><span class="line">mp.bar(x-<span class="number">0.2</span>, apples, <span class="number">0.4</span>, color=<span class="string">&#x27;dodgerblue&#x27;</span>,label=<span class="string">&#x27;Apple&#x27;</span>)</span><br><span class="line">mp.bar(x + <span class="number">0.2</span>, oranges, <span class="number">0.4</span>, color=<span class="string">&#x27;orangered&#x27;</span>,label=<span class="string">&#x27;Orange&#x27;</span>, alpha=<span class="number">0.75</span>)</span><br><span class="line">mp.xticks(x, [</span><br><span class="line">    <span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>, <span class="string">&#x27;Apr&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Jun&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Jul&#x27;</span>, <span class="string">&#x27;Aug&#x27;</span>, <span class="string">&#x27;Sep&#x27;</span>, <span class="string">&#x27;Oct&#x27;</span>, <span class="string">&#x27;Nov&#x27;</span>, <span class="string">&#x27;Dec&#x27;</span>])</span><br><span class="line">mp.legend()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h3 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h3><p>绘制饼状图的基本API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mp.pie(</span><br><span class="line">    values, <span class="comment"># 值列表</span></span><br><span class="line">    spaces, <span class="comment"># 扇形之间的间距列表</span></span><br><span class="line">    labels, <span class="comment"># 标签列表</span></span><br><span class="line">    colors, <span class="comment"># 颜色列表</span></span><br><span class="line">    <span class="string">&#x27;%d%%&#x27;</span>,<span class="comment"># 标签所占比例格式</span></span><br><span class="line">shadow=<span class="literal">True</span>, <span class="comment"># 是否显示阴影</span></span><br><span class="line">    startangle=<span class="number">90</span><span class="comment"># 逆时针绘制饼状图时的起始角度</span></span><br><span class="line">    radius=<span class="number">1</span><span class="comment"># 半径</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>案例：绘制饼状图显示5门语言的流行程度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mp.figure(<span class="string">&#x27;pie&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line"><span class="comment">#整理数据</span></span><br><span class="line">values = [<span class="number">26</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">11</span>]</span><br><span class="line">spaces = [<span class="number">0.05</span>, <span class="number">0.01</span>, <span class="number">0.01</span>, <span class="number">0.01</span>, <span class="number">0.01</span>]</span><br><span class="line">labels = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;PHP&#x27;</span>]</span><br><span class="line">colors = [<span class="string">&#x27;dodgerblue&#x27;</span>, <span class="string">&#x27;orangered&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;limegreen&#x27;</span>, <span class="string">&#x27;violet&#x27;</span>, <span class="string">&#x27;gold&#x27;</span>]</span><br><span class="line">mp.figure(<span class="string">&#x27;Pie&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Pie&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 等轴比例</span></span><br><span class="line">mp.axis(<span class="string">&#x27;equal&#x27;</span>)</span><br><span class="line">mp.pie(</span><br><span class="line">    values, <span class="comment"># 值列表</span></span><br><span class="line">    spaces, <span class="comment"># 扇形之间的间距列表</span></span><br><span class="line">    labels, <span class="comment"># 标签列表</span></span><br><span class="line">    colors, <span class="comment"># 颜色列表</span></span><br><span class="line">    <span class="string">&#x27;%d%%&#x27;</span>,<span class="comment"># 标签所占比例格式</span></span><br><span class="line">shadow=<span class="literal">True</span>, <span class="comment"># 是否显示阴影</span></span><br><span class="line">    startanle=<span class="number">90</span><span class="comment"># 逆时针绘制饼状图时的起始角度</span></span><br><span class="line">    radius=<span class="number">1</span><span class="comment"># 半径</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="等高线图"><a href="#等高线图" class="headerlink" title="等高线图"></a>等高线图</h3><p>组成等高线需要网格点坐标矩阵，也需要每个点的高度。所以等高线属于3D数学模型范畴。</p><p>绘制等高线的相关API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mp.contourf(x, y, z, <span class="number">8</span>, cmap=<span class="string">&#x27;jet&#x27;</span>)</span><br><span class="line">cntr = mp.contour(</span><br><span class="line">    x, <span class="comment"># 网格坐标矩阵的x坐标 （2维数组）</span></span><br><span class="line">    y, <span class="comment"># 网格坐标矩阵的y坐标 （2维数组）</span></span><br><span class="line">    z, <span class="comment"># 网格坐标矩阵的z坐标 （2维数组）</span></span><br><span class="line">    <span class="number">8</span>, <span class="comment"># 把等高线绘制成8部分</span></span><br><span class="line">    colors=<span class="string">&#x27;black&#x27;</span>,<span class="comment"># 等高线的颜色</span></span><br><span class="line">linewidths=<span class="number">0.5</span><span class="comment"># 线宽</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>案例：生成网格坐标矩阵，并且绘制等高线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">1000</span></span><br><span class="line"><span class="comment"># 生成网格化坐标矩阵</span></span><br><span class="line">x, y = np.meshgrid(np.linspace(-<span class="number">3</span>, <span class="number">3</span>, n),</span><br><span class="line">                   np.linspace(-<span class="number">3</span>, <span class="number">3</span>, n))</span><br><span class="line"><span class="comment"># 根据每个网格点坐标，通过某个公式计算z高度坐标</span></span><br><span class="line">z = (<span class="number">1</span> - x/<span class="number">2</span> + x**<span class="number">5</span> + y**<span class="number">3</span>) * np.exp(-x**<span class="number">2</span> - y**<span class="number">2</span>)</span><br><span class="line">mp.figure(<span class="string">&#x27;Contour&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Contour&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"><span class="comment"># 绘制等高线图</span></span><br><span class="line">mp.contourf(x, y, z, <span class="number">8</span>, cmap=<span class="string">&#x27;jet&#x27;</span>)</span><br><span class="line">cntr = mp.contour(x, y, z, <span class="number">8</span>, colors=<span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">                  linewidths=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 为等高线图添加高度标签</span></span><br><span class="line">mp.clabel(cntr, inline_spacing=<span class="number">1</span>, fmt=<span class="string">&#x27;%.1f&#x27;</span>,</span><br><span class="line">          fontsize=<span class="number">10</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h3 id="热成像图"><a href="#热成像图" class="headerlink" title="热成像图"></a>热成像图</h3><p>用图形的方式显示矩阵及矩阵中值的大小<br>1 2 3<br>4 5 6<br>7 8 9</p><p>绘制热成像图的相关API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把矩阵z图形化，使用cmap表示矩阵中每个元素值的大小</span></span><br><span class="line"><span class="comment"># origin: 坐标轴方向</span></span><br><span class="line"><span class="comment">#    upper: 缺省值，原点在左上角</span></span><br><span class="line"><span class="comment">#    lower: 原点在左下角</span></span><br><span class="line">mp.imshow(z, cmap=<span class="string">&#x27;jet&#x27;</span>, origin=<span class="string">&#x27;low&#x27;</span>)</span><br></pre></td></tr></table></figure><p>使用颜色条显示热度值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mp.colorbar()</span><br></pre></td></tr></table></figure><h3 id="极坐标系"><a href="#极坐标系" class="headerlink" title="极坐标系"></a>极坐标系</h3><p>与笛卡尔坐标系不同，某些情况下极坐标系适合显示与角度有关的图像。例如雷达等。极坐标系可以描述极径&rho;与极角&theta;的线性关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mp.figure(<span class="string">&quot;Polar&quot;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.gca(projection=<span class="string">&#x27;polar&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Porlar&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">r&#x27;$\theta$&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">r&#x27;$\rho$&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p>在极坐标系中绘制曲线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#准备数据</span></span><br><span class="line">t = np.linspace(<span class="number">0</span>, <span class="number">4</span>*np.pi, <span class="number">1000</span>)</span><br><span class="line">r = <span class="number">0.8</span> * t</span><br><span class="line">mp.plot(t, r)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p>案例，在极坐标系中绘制正弦函数。 y&#x3D;3 sin(6x)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">6</span>*np.pi, <span class="number">1000</span>)</span><br><span class="line">y = <span class="number">3</span>*np.sin(<span class="number">6</span>*x)</span><br><span class="line">mp.plot(x, y)</span><br></pre></td></tr></table></figure><h3 id="3D图像绘制"><a href="#3D图像绘制" class="headerlink" title="3D图像绘制"></a>3D图像绘制</h3><p> matplotlib支持绘制三维曲面。若希望绘制三维曲面，需要使用axes3d提供的3d坐标系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> axes3d</span><br><span class="line">ax3d = mp.gca(projection=<span class="string">&#x27;3d&#x27;</span>)   <span class="comment"># class axes3d</span></span><br></pre></td></tr></table></figure><p>matplotlib支持绘制三维点阵、三维曲面、三维线框图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ax3d.scatter(..)<span class="comment"># 绘制三维点阵</span></span><br><span class="line">ax3d.plot_surface(..)<span class="comment"># 绘制三维曲面</span></span><br><span class="line">ax3d.plot_wireframe(..)<span class="comment"># 绘制三维线框图</span></span><br></pre></td></tr></table></figure><p>3d散点图的绘制相关API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ax3d.scatter(</span><br><span class="line">    x, <span class="comment"># x轴坐标数组</span></span><br><span class="line">    y,<span class="comment"># y轴坐标数组</span></span><br><span class="line">    marker=<span class="string">&#x27;&#x27;</span>, <span class="comment"># 点型</span></span><br><span class="line">    s=<span class="number">10</span>,<span class="comment"># 大小</span></span><br><span class="line">    zorder=<span class="string">&#x27;&#x27;</span>,<span class="comment"># 图层序号</span></span><br><span class="line">    color=<span class="string">&#x27;&#x27;</span>,<span class="comment"># 颜色</span></span><br><span class="line">    edgecolor=<span class="string">&#x27;&#x27;</span>, <span class="comment"># 边缘颜色</span></span><br><span class="line">    facecolor=<span class="string">&#x27;&#x27;</span>,<span class="comment"># 填充色</span></span><br><span class="line">    c=v,<span class="comment"># 颜色值 根据cmap映射应用相应颜色</span></span><br><span class="line">    cmap=<span class="string">&#x27;&#x27;</span><span class="comment"># </span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>案例：随机生成3组坐标，程标准正态分布规则，并且绘制它们。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">1000</span></span><br><span class="line">x = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n)</span><br><span class="line">y = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n)</span><br><span class="line">z = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n)</span><br><span class="line">d = np.sqrt(x ** <span class="number">2</span> + y ** <span class="number">2</span> + z ** <span class="number">2</span>)</span><br><span class="line">mp.figure(<span class="string">&#x27;3D Scatter&#x27;</span>)</span><br><span class="line">ax = mp.gca(projection=<span class="string">&#x27;3d&#x27;</span>)  <span class="comment"># 创建三维坐标系</span></span><br><span class="line">mp.title(<span class="string">&#x27;3D Scatter&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">&#x27;z&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">ax.scatter(x, y, z, s=<span class="number">60</span>, c=d, cmap=<span class="string">&#x27;jet_r&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p>3d平面图的绘制相关API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ax3d.plot_surface(</span><br><span class="line">    x, <span class="comment"># 网格坐标矩阵的x坐标 （2维数组）</span></span><br><span class="line">    y, <span class="comment"># 网格坐标矩阵的y坐标 （2维数组）</span></span><br><span class="line">    z, <span class="comment"># 网格坐标矩阵的z坐标 （2维数组）</span></span><br><span class="line">    rstride=<span class="number">30</span>,<span class="comment"># 行跨距</span></span><br><span class="line">    cstride=<span class="number">30</span>, <span class="comment"># 列跨距</span></span><br><span class="line">    cmap=<span class="string">&#x27;jet&#x27;</span><span class="comment"># 颜色映射</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>案例：绘制3d平面图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">1000</span></span><br><span class="line"><span class="comment"># 生成网格化坐标矩阵</span></span><br><span class="line">x, y = np.meshgrid(np.linspace(-<span class="number">3</span>, <span class="number">3</span>, n),</span><br><span class="line">                   np.linspace(-<span class="number">3</span>, <span class="number">3</span>, n))</span><br><span class="line"><span class="comment"># 根据每个网格点坐标，通过某个公式计算z高度坐标</span></span><br><span class="line">z = (<span class="number">1</span> - x/<span class="number">2</span> + x**<span class="number">5</span> + y**<span class="number">3</span>) * np.exp(-x**<span class="number">2</span> - y**<span class="number">2</span>)</span><br><span class="line">mp.figure(<span class="string">&#x27;3D&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax3d = mp.gca(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;3D&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">ax3d.set_xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">ax3d.set_ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">ax3d.set_zlabel(<span class="string">&#x27;z&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 绘制3D平面图</span></span><br><span class="line"><span class="comment"># rstride: 行跨距</span></span><br><span class="line"><span class="comment"># cstride: 列跨距 </span></span><br><span class="line">ax3d.plot_surface(x,y,z,rstride=<span class="number">30</span>,cstride=<span class="number">30</span>, cmap=<span class="string">&#x27;jet&#x27;</span>)</span><br></pre></td></tr></table></figure><p>案例：3d线框图的绘制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制3D平面图 </span></span><br><span class="line"><span class="comment"># rstride: 行跨距</span></span><br><span class="line"><span class="comment"># cstride: 列跨距 </span></span><br><span class="line">ax3d.plot_wireframe(x,y,z,rstride=<span class="number">30</span>,cstride=<span class="number">30</span>, </span><br><span class="line">linewidth=<span class="number">1</span>, color=<span class="string">&#x27;dodgerblue&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="简单动画"><a href="#简单动画" class="headerlink" title="简单动画"></a>简单动画</h3><p>动画即是在一段时间内快速连续的重新绘制图像的过程。</p><p>matplotlib提供了方法用于处理简单动画的绘制。定义update函数用于即时更新图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.animation <span class="keyword">as</span> ma</span><br><span class="line"><span class="comment">#定义更新函数行为</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 每隔10毫秒执行一次update更新函数，作用于mp.gcf()当前窗口对象</span></span><br><span class="line"><span class="comment"># mp.gcf()：获取当前窗口</span></span><br><span class="line"><span class="comment"># update：更新函数</span></span><br><span class="line"><span class="comment"># interval：间隔时间（单位：毫秒）</span></span><br><span class="line">anim = ma.FuncAnimation(mp.gcf(), update, interval=<span class="number">10</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p>案例：随机生成各种颜色的100个气泡。让他们不断的增大。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自定义一种可以存放在ndarray里的类型，用于保存一个球</span></span><br><span class="line">ball_type = np.dtype([</span><br><span class="line">(<span class="string">&#x27;position&#x27;</span>, <span class="built_in">float</span>, <span class="number">2</span>),  <span class="comment"># 位置(水平和垂直坐标)</span></span><br><span class="line">    (<span class="string">&#x27;size&#x27;</span>, <span class="built_in">float</span>, <span class="number">1</span>),      <span class="comment"># 大小</span></span><br><span class="line">    (<span class="string">&#x27;growth&#x27;</span>, <span class="built_in">float</span>, <span class="number">1</span>),    <span class="comment"># 生长速度</span></span><br><span class="line">    (<span class="string">&#x27;color&#x27;</span>, <span class="built_in">float</span>, <span class="number">4</span>)])    <span class="comment"># 颜色(红、绿、蓝和透明度)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#随机生成100个点对象</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line">balls = np.zeros(<span class="number">100</span>, dtype=ball_type)</span><br><span class="line">balls[<span class="string">&#x27;position&#x27;</span>]=np.random.uniform(<span class="number">0</span>, <span class="number">1</span>, (n, <span class="number">2</span>))</span><br><span class="line">balls[<span class="string">&#x27;size&#x27;</span>]=np.random.uniform(<span class="number">40</span>, <span class="number">70</span>, n)</span><br><span class="line">balls[<span class="string">&#x27;growth&#x27;</span>]=np.random.uniform(<span class="number">10</span>, <span class="number">20</span>, n)</span><br><span class="line">balls[<span class="string">&#x27;color&#x27;</span>]=np.random.uniform(<span class="number">0</span>, <span class="number">1</span>, (n, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">mp.figure(<span class="string">&quot;Animation&quot;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&quot;Animation&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.xticks </span><br><span class="line">mp.yticks(())</span><br><span class="line"></span><br><span class="line">sc = mp.scatter(</span><br><span class="line">balls[<span class="string">&#x27;position&#x27;</span>][:, <span class="number">0</span>], </span><br><span class="line">balls[<span class="string">&#x27;position&#x27;</span>][:, <span class="number">1</span>], </span><br><span class="line">balls[<span class="string">&#x27;size&#x27;</span>], </span><br><span class="line">color=balls[<span class="string">&#x27;color&#x27;</span>], alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义更新函数行为</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">number</span>):</span><br><span class="line">balls[<span class="string">&#x27;size&#x27;</span>] += balls[<span class="string">&#x27;growth&#x27;</span>]</span><br><span class="line"><span class="comment">#每次让一个气泡破裂，随机生成一个新的</span></span><br><span class="line">boom_ind = number % n</span><br><span class="line">balls[boom_ind][<span class="string">&#x27;size&#x27;</span>]=np.random.uniform(<span class="number">40</span>, <span class="number">70</span>, <span class="number">1</span>)</span><br><span class="line">balls[boom_ind][<span class="string">&#x27;position&#x27;</span>]=np.random.uniform(<span class="number">0</span>, <span class="number">1</span>, (<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 重新设置属性</span></span><br><span class="line">sc.set_sizes(balls[<span class="string">&#x27;size&#x27;</span>])</span><br><span class="line">sc.set_offsets(balls[<span class="string">&#x27;position&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每隔30毫秒执行一次update更新函数，作用于mp.gcf()当前窗口对象</span></span><br><span class="line"><span class="comment"># mp.gcf()：获取当前窗口</span></span><br><span class="line"><span class="comment"># update：更新函数</span></span><br><span class="line"><span class="comment"># interval：间隔时间（单位：毫秒）</span></span><br><span class="line">anim = ma.FuncAnimation(mp.gcf(), update, interval=<span class="number">30</span>)</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><p>使用生成器函数提供数据，实现动画绘制</p><p>在很多情况下，绘制动画的参数是动态获取的，matplotlib支持定义generator生成器函数，用于生成数据，把生成的数据交给update函数更新图像：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.animation <span class="keyword">as</span> ma</span><br><span class="line"><span class="comment">#定义更新函数行为</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">data</span>):</span><br><span class="line">    t, v = data</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator</span>():</span><br><span class="line"><span class="keyword">yield</span> t, v</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 每隔10毫秒将会先调用生成器，获取生成器返回的数据，</span></span><br><span class="line"><span class="comment"># 把生成器返回的数据交给并且调用update函数，执行更新图像函数</span></span><br><span class="line">anim = ma.FuncAnimation(mp.gcf(), update, generator,interval=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>案例：绘制信号曲线：y&#x3D;sin(2 * π * t) * exp(sin(0.2 * π * t))，数据通过生成器函数生成，在update函数中绘制曲线。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mp.figure(<span class="string">&quot;Signal&quot;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&quot;Signal&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.xlim(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">mp.ylim(-<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;--&#x27;</span>, color=<span class="string">&#x27;lightgray&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">pl = mp.plot([], [], color=<span class="string">&#x27;dodgerblue&#x27;</span>, label=<span class="string">&#x27;Signal&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">pl.set_data([],[])</span><br><span class="line"></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">data</span>):</span><br><span class="line">t, v = data</span><br><span class="line">x, y = pl.get_data()</span><br><span class="line">x.append(t)</span><br><span class="line">y.append(v)</span><br><span class="line"><span class="comment">#重新设置数据源</span></span><br><span class="line">pl.set_data(x, y)</span><br><span class="line"><span class="comment">#移动坐标轴</span></span><br><span class="line"><span class="keyword">if</span>(x[-<span class="number">1</span>]&gt;<span class="number">10</span>):</span><br><span class="line">mp.xlim(x[-<span class="number">1</span>]-<span class="number">10</span>, x[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">y_generator</span>():</span><br><span class="line"><span class="keyword">global</span> x</span><br><span class="line">y = np.sin(<span class="number">2</span> * np.pi * x) * np.exp(np.sin(<span class="number">0.2</span> * np.pi * x))</span><br><span class="line"><span class="keyword">yield</span> (x, y)</span><br><span class="line">x += <span class="number">0.05</span></span><br><span class="line"></span><br><span class="line">anim = ma.FuncAnimation(mp.gcf(), update, y_generator, interval=<span class="number">20</span>)</span><br><span class="line">mp.tight_layout()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h2 id="其他Python的绘图库"><a href="#其他Python的绘图库" class="headerlink" title="其他Python的绘图库"></a>其他Python的绘图库</h2><p><a href="http://pyecharts.herokuapp.com/">pyecharts</a></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="linestyle"><a href="#linestyle" class="headerlink" title="linestyle"></a>linestyle</h3><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">‘-‘</td><td align="left">实线样式</td></tr><tr><td align="left">‘–’</td><td align="left">短横线样式</td></tr><tr><td align="left">‘-.’</td><td align="left">点划线样式</td></tr><tr><td align="left">‘:’</td><td align="left">虚线样式</td></tr><tr><td align="left">‘.’</td><td align="left">点标记</td></tr><tr><td align="left">‘,’</td><td align="left">像素标记</td></tr><tr><td align="left">‘o’</td><td align="left">圆标记</td></tr><tr><td align="left">‘v’</td><td align="left">倒三角标记</td></tr><tr><td align="left">‘^’</td><td align="left">正三角标记</td></tr><tr><td align="left">‘&lt;’</td><td align="left">左三角标记</td></tr><tr><td align="left">‘&gt;’</td><td align="left">右三角标记</td></tr><tr><td align="left">‘1’</td><td align="left">下箭头标记</td></tr><tr><td align="left">‘2’</td><td align="left">上箭头标记</td></tr><tr><td align="left">‘3’</td><td align="left">左箭头标记</td></tr><tr><td align="left">‘4’</td><td align="left">右箭头标记</td></tr><tr><td align="left">‘s’</td><td align="left">正方形标记</td></tr><tr><td align="left">‘p’</td><td align="left">五边形标记</td></tr><tr><td align="left">‘*’</td><td align="left">星形标记</td></tr><tr><td align="left">‘h’</td><td align="left">六边形标记 1</td></tr><tr><td align="left">‘H’</td><td align="left">六边形标记 2</td></tr><tr><td align="left">‘+’</td><td align="left">加号标记</td></tr><tr><td align="left">‘x’</td><td align="left">X 标记</td></tr><tr><td align="left">‘D’</td><td align="left">菱形标记</td></tr><tr><td align="left">‘d’</td><td align="left">窄菱形标记</td></tr><tr><td align="left">‘&#124;’</td><td align="left">竖直线标记</td></tr><tr><td align="left">‘_’</td><td align="left">水平线标记</td></tr></tbody></table><blockquote><p>上面是网上找的，但是实际测试中只有’-‘, ‘–’, ‘-.’, ‘:’, ‘None’, ‘ ‘, ‘’, ‘solid’, ‘dashed’, ‘dashdot’, ‘dotted’可以用</p></blockquote><h3 id="linecolor"><a href="#linecolor" class="headerlink" title="linecolor"></a>linecolor</h3><p><img src="https://cdn.rencheng.cc/blog/h0wl9.png"></p><h3 id="laTex排版语法"><a href="#laTex排版语法" class="headerlink" title="laTex排版语法"></a>laTex排版语法</h3><p>laTeX语法表示数学符号示例<br><img src="https://cdn.rencheng.cc/blog/ku31o.png"><br>LaTeX语法集合<br><img src="https://cdn.rencheng.cc/blog/x8an5.gif"></p><h3 id="cmap颜色映射表"><a href="#cmap颜色映射表" class="headerlink" title="cmap颜色映射表"></a>cmap颜色映射表</h3><p><img src="https://cdn.rencheng.cc/blog/whkot.png"></p><h3 id="point样式"><a href="#point样式" class="headerlink" title="point样式"></a>point样式</h3><p><img src="https://cdn.rencheng.cc/blog/omq6w.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> AI进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy</title>
      <link href="/2018/11/30/datascience/Numpy/"/>
      <url>/2018/11/30/datascience/Numpy/</url>
      
        <content type="html"><![CDATA[<p>NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p><span id="more"></span><h2 id="numpy概述"><a href="#numpy概述" class="headerlink" title="numpy概述"></a>numpy概述</h2><ol><li>Numerical Python，数值的Python，补充了Python语言所欠缺的数值计算能力。</li><li>Numpy是其它数据分析及机器学习库的底层库。</li><li>Numpy完全标准C语言实现，运行效率充分优化。</li><li>Numpy开源免费。</li></ol><h3 id="numpy历史"><a href="#numpy历史" class="headerlink" title="numpy历史"></a>numpy历史</h3><ol><li>1995年，Numeric，Python语言数值计算扩充。</li><li>2001年，Scipy-&gt;Numarray，多维数组运算。</li><li>2005年，Numeric+Numarray-&gt;Numpy。</li><li>2006年，Numpy脱离Scipy成为独立的项目。</li></ol><h3 id="numpy的核心：多维数组"><a href="#numpy的核心：多维数组" class="headerlink" title="numpy的核心：多维数组"></a>numpy的核心：多维数组</h3><ol><li>代码简洁：减少Python代码中的循环。</li><li>底层实现：厚内核(C)+薄接口(Python)，保证性能。</li></ol><h2 id="numpy基础"><a href="#numpy基础" class="headerlink" title="numpy基础"></a>numpy基础</h2><h3 id="ndarray数组"><a href="#ndarray数组" class="headerlink" title="ndarray数组"></a>ndarray数组</h3><p>用np.ndarray类的对象表示n维数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">ary = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(ary))</span><br></pre></td></tr></table></figure><h4 id="内存中的ndarray对象"><a href="#内存中的ndarray对象" class="headerlink" title="内存中的ndarray对象"></a>内存中的ndarray对象</h4><p><strong>元数据（metadata）</strong></p><p>存储对目标数组的描述信息，</p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>dim</td><td>轴</td></tr><tr><td>count</td><td>长度</td></tr><tr><td>dimensions</td><td></td></tr><tr><td>dtype</td><td>类型</td></tr><tr><td>data</td><td>数据</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p><strong>实际数据</strong></p><p>完整的数组数据</p><blockquote><p>将实际数据与元数据分开存放，一方面提高了内存空间的使用效率，另一方面减少对实际数据的访问频率，提高性能。</p></blockquote><h4 id="ndarray数组对象的特点"><a href="#ndarray数组对象的特点" class="headerlink" title="ndarray数组对象的特点"></a>ndarray数组对象的特点</h4><ol><li>Numpy数组是<strong>同质数组</strong>，即所有元素的<strong>数据类型必须相同</strong></li><li>Numpy数组的下标从0开始，最后一个元素的下标为数组长度减1</li></ol><h4 id="ndarray数组对象的创建"><a href="#ndarray数组对象的创建" class="headerlink" title="ndarray数组对象的创建"></a>ndarray数组对象的创建</h4><p>np.array(任何可被解释为Numpy数组的逻辑结构)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>np.arange(起始值(0),终止值,步长(1))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># arange 生成一个等差数列</span></span><br><span class="line">a = np.arange(<span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>np.zeros(数组元素个数, dtype&#x3D;’类型’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.zeros(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>np.ones(数组元素个数, dtype&#x3D;’类型’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.ones(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h4 id="ndarray对象属性的基本操作"><a href="#ndarray对象属性的基本操作" class="headerlink" title="ndarray对象属性的基本操作"></a>ndarray对象属性的基本操作</h4><p><strong>数组的维度：</strong>np.ndarray.shape</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">ary = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(ary), ary, ary.shape)</span><br><span class="line"><span class="comment">#二维数组</span></span><br><span class="line">ary = np.array([</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(ary), ary, ary.shape)</span><br></pre></td></tr></table></figure><p><strong>元素的类型：</strong>np.ndarray.dtype</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test ndarray.dtype</span></span><br><span class="line">ary = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(ary, ary.dtype)</span><br><span class="line"><span class="comment"># ary.dtype = &#x27;int64&#x27;    error</span></span><br><span class="line"><span class="comment"># print(ary, ary.dtype)</span></span><br><span class="line"><span class="comment"># 源数组类型不变</span></span><br><span class="line">ary = ary.astype(<span class="string">&#x27;float64&#x27;</span>) <span class="comment"># 返回新的对象</span></span><br><span class="line"><span class="built_in">print</span>(ary, ary.dtype)</span><br><span class="line">ary = ary.astype(<span class="string">&#x27;str&#x27;</span>) <span class="comment"># 返回新的对象</span></span><br><span class="line"><span class="built_in">print</span>(ary, ary.dtype)</span><br></pre></td></tr></table></figure><p><strong>数组元素的个数：</strong>np.ndarray.size </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">ary = np.array([</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">#观察维度，size，len的区别</span></span><br><span class="line"><span class="built_in">print</span>(ary.shape, ary.size, <span class="built_in">len</span>(ary))</span><br></pre></td></tr></table></figure><p><strong>数组元素索引(下标)</strong></p><p>数组对象[…, 页号, 行号, 列号]</p><p>下标从0开始，到数组len-1结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">               [<span class="number">3</span>, <span class="number">4</span>]],</span><br><span class="line">              [[<span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">               [<span class="number">7</span>, <span class="number">8</span>]]])</span><br><span class="line"><span class="built_in">print</span>(a, a.shape)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a.shape[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(a.shape[<span class="number">1</span>]):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(a.shape[<span class="number">2</span>]):</span><br><span class="line">            <span class="built_in">print</span>(a[i, j, k])</span><br></pre></td></tr></table></figure><h4 id="ndarray对象属性操作详解"><a href="#ndarray对象属性操作详解" class="headerlink" title="ndarray对象属性操作详解"></a>ndarray对象属性操作详解</h4><p><strong>Numpy的内部基本数据类型</strong></p><table><thead><tr><th>类型名</th><th>类型表示符</th></tr></thead><tbody><tr><td>布尔型</td><td>bool_</td></tr><tr><td>有符号整数型</td><td>int8(-128~127)&#x2F;int16&#x2F;int32&#x2F;int64</td></tr><tr><td>无符号整数型</td><td>uint8(0~255)&#x2F;uint16&#x2F;uint32&#x2F;uint64</td></tr><tr><td>浮点型</td><td>float16&#x2F;float32&#x2F;float64</td></tr><tr><td>复数型</td><td>complex64&#x2F;complex128        3</td></tr><tr><td>字串型</td><td>str_，每个字符用32位Unicode编码表示</td></tr></tbody></table><p><strong>自定义复合类型</strong><br>同时演示设置dtype的几种方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = [(<span class="string">&#x27;zs&#x27;</span>, [<span class="number">50</span>,<span class="number">51</span>,<span class="number">52</span>], <span class="number">15</span>),</span><br><span class="line">(<span class="string">&#x27;ls&#x27;</span>, [<span class="number">83</span>,<span class="number">71</span>,<span class="number">62</span>], <span class="number">16</span>),</span><br><span class="line">(<span class="string">&#x27;ww&#x27;</span>, [<span class="number">90</span>,<span class="number">91</span>,<span class="number">92</span>], <span class="number">17</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#第一种dtype的设置方式</span></span><br><span class="line">ary = np.array(data,dtype=<span class="string">&#x27;U2, 3int32, int32&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ary, ary[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(ary[<span class="number">0</span>][<span class="string">&#x27;f0&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种dtype的设置方式</span></span><br><span class="line">ary = np.array(data, </span><br><span class="line">dtype=[ (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;str&#x27;</span>, <span class="number">2</span>), </span><br><span class="line">(<span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;int32&#x27;</span>, <span class="number">3</span>), </span><br><span class="line">(<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;int32&#x27;</span>, <span class="number">1</span>)])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">45</span>)</span><br><span class="line"><span class="built_in">print</span>(ary, ary.dtype)</span><br><span class="line"><span class="built_in">print</span>(ary[<span class="number">0</span>][<span class="string">&#x27;age&#x27;</span>]) <span class="comment"># 返回zs的年龄</span></span><br><span class="line"><span class="built_in">print</span>(ary[<span class="number">2</span>][<span class="string">&#x27;scores&#x27;</span>]) <span class="comment"># 返回ww的成绩</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三种dtype的设置方式</span></span><br><span class="line">ary = np.array(data, dtype=&#123;</span><br><span class="line"><span class="string">&#x27;names&#x27;</span>:[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;age&#x27;</span>],</span><br><span class="line"><span class="string">&#x27;formats&#x27;</span>:[<span class="string">&#x27;U2&#x27;</span>, <span class="string">&#x27;3int32&#x27;</span>, <span class="string">&#x27;int32&#x27;</span>]&#125;)</span><br><span class="line"><span class="built_in">print</span>(ary)</span><br><span class="line"><span class="built_in">print</span>(ary[<span class="number">0</span>][<span class="string">&#x27;age&#x27;</span>]) <span class="comment"># 返回zs的年龄</span></span><br><span class="line"><span class="built_in">print</span>(ary[<span class="number">2</span>][<span class="string">&#x27;scores&#x27;</span>]) <span class="comment"># 返回ww的成绩</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四种dtype的设置方式</span></span><br><span class="line">d = np.array(data, dtype=&#123;<span class="string">&#x27;name&#x27;</span>: (<span class="string">&#x27;U3&#x27;</span>, <span class="number">0</span>),</span><br><span class="line">                    <span class="string">&#x27;scores&#x27;</span>: (<span class="string">&#x27;3int32&#x27;</span>, <span class="number">16</span>),</span><br><span class="line">                    <span class="string">&#x27;age&#x27;</span>: (<span class="string">&#x27;int32&#x27;</span>, <span class="number">28</span>)&#125;)</span><br><span class="line"><span class="built_in">print</span>(d[<span class="number">0</span>][<span class="string">&#x27;name&#x27;</span>], d[<span class="number">0</span>][<span class="string">&#x27;scores&#x27;</span>], d.itemsize)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ndarray数组存放日期数据</span></span><br><span class="line">dates = [<span class="string">&#x27;2011-01-01&#x27;</span>, <span class="string">&#x27;2012-01-01&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;2011-02-01&#x27;</span>, <span class="string">&#x27;2012&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;2011-01-01 10:10:10&#x27;</span>]</span><br><span class="line">ary = np.array(dates)</span><br><span class="line"><span class="built_in">print</span>(ary, ary.dtype)</span><br><span class="line">ary = ary.astype(<span class="string">&#x27;M8[D]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ary, ary.dtype, ary[<span class="number">1</span>]-ary[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 输出31 days</span></span><br></pre></td></tr></table></figure><p><strong>类型字符码</strong></p><table><thead><tr><th>类型</th><th>字符码</th></tr></thead><tbody><tr><td>np.bool_</td><td>?</td></tr><tr><td>np.int8&#x2F;16&#x2F;32&#x2F;64</td><td>i1&#x2F;i2&#x2F;i4&#x2F;i8</td></tr><tr><td>np.uint8&#x2F;16&#x2F;32&#x2F;64</td><td>u1&#x2F;u2&#x2F;u4&#x2F;u8</td></tr><tr><td>np.float&#x2F;16&#x2F;32&#x2F;64</td><td>f2&#x2F;f4&#x2F;f8</td></tr><tr><td>np.complex64&#x2F;128</td><td>c8&#x2F;c16</td></tr><tr><td>np.str_</td><td>U&lt;字符数&gt;</td></tr><tr><td>np.datetime64</td><td>M8[Y] M8[M] M8[D] M8[h] M8[m] M8[s]</td></tr></tbody></table><p><strong>字节序前缀，用于多字节整数和字符串：</strong><br><code>&lt;/&gt;/[=]分别表示小端/大端/硬件字节序。</code></p><p><strong>类型字符码格式</strong></p><p>&lt;字节序前缀&gt;&lt;维度&gt;&lt;类型&gt;&lt;字节数或字符数&gt;</p><table><thead><tr><th>3i4</th><th>释义</th></tr></thead><tbody><tr><td>3i4</td><td>3个元素的一维数组，每个元素都是整型，每个整型元素占4个字节。</td></tr><tr><td>&lt;(2,3)u8</td><td>小端字节序，6个元素2行3列的二维数组，每个元素都是无符号整型，每个无符号整型元素占8个字节。</td></tr><tr><td>U7</td><td>包含7个字符的Unicode字符串，每个字符占4个字节，采用默认字节序。</td></tr></tbody></table><h5 id="ndarray数组对象的维度操作"><a href="#ndarray数组对象的维度操作" class="headerlink" title="ndarray数组对象的维度操作"></a>ndarray数组对象的维度操作</h5><p><strong>视图变维（数据共享）：</strong> reshape() 与 ravel() </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment"># [1 2 3 4 5 6 7 8]</span></span><br><span class="line">b = a.reshape(<span class="number">2</span>, <span class="number">4</span>)<span class="comment">#视图变维  : 变为2行4列的二维数组</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">c = b.reshape(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>) <span class="comment">#视图变维    变为2页2行2列的三维数组</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">d = c.ravel()<span class="comment">#视图变维变为1维数组</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p><strong>复制变维（数据独立）：</strong>flatten()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e = c.flatten()</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line">a += <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a, e, sep=<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>就地变维：直接改变原数组对象的维度，不返回新数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.shape = (<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a.resize(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h5 id="ndarray数组切片操作"><a href="#ndarray数组切片操作" class="headerlink" title="ndarray数组切片操作"></a>ndarray数组切片操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数组对象切片的参数设置与列表切面参数类似</span></span><br><span class="line"><span class="comment">#  步长+：默认切从首到尾</span></span><br><span class="line"><span class="comment">#  步长-：默认切从尾到首</span></span><br><span class="line">数组对象[起始位置:终止位置:步长]</span><br><span class="line"><span class="comment">#默认位置步长：1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="built_in">print</span>(a[:<span class="number">3</span>])  <span class="comment"># 1 2 3</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">3</span>:<span class="number">6</span>])   <span class="comment"># 4 5 6</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">6</span>:])  <span class="comment"># 7 8 9</span></span><br><span class="line"><span class="built_in">print</span>(a[::-<span class="number">1</span>])  <span class="comment"># 9 8 7 6 5 4 3 2 1</span></span><br><span class="line"><span class="built_in">print</span>(a[:-<span class="number">4</span>:-<span class="number">1</span>])  <span class="comment"># 9 8 7</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">4</span>:-<span class="number">7</span>:-<span class="number">1</span>])  <span class="comment"># 6 5 4</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">7</span>::-<span class="number">1</span>])  <span class="comment"># 3 2 1</span></span><br><span class="line"><span class="built_in">print</span>(a[::])  <span class="comment"># 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="built_in">print</span>(a[:])  <span class="comment"># 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="built_in">print</span>(a[::<span class="number">3</span>])  <span class="comment"># 1 4 7</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>::<span class="number">3</span>])  <span class="comment"># 2 5 8</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>::<span class="number">3</span>])  <span class="comment"># 3 6 9</span></span><br></pre></td></tr></table></figure><p><strong>多维数组的切片操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多维数组切片</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">45</span>)</span><br><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">a = a.reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a[:<span class="number">2</span>, :])  <span class="comment"># 切出前两行数据</span></span><br><span class="line"><span class="built_in">print</span>(a[:<span class="number">2</span>, :<span class="number">2</span>])  <span class="comment"># 切出前两行两列数据</span></span><br><span class="line"><span class="built_in">print</span>(a[::<span class="number">2</span>, :])  <span class="comment"># </span></span><br></pre></td></tr></table></figure><h5 id="ndarray数组的掩码操作"><a href="#ndarray数组的掩码操作" class="headerlink" title="ndarray数组的掩码操作"></a><strong>ndarray数组的掩码操作</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(a + <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a * <span class="number">2.5</span>)</span><br><span class="line"><span class="built_in">print</span>(a + a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出100以内3的倍数</span></span><br><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">mask = a % <span class="number">3</span> == <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(mask)</span><br><span class="line"><span class="built_in">print</span>(a[mask])</span><br><span class="line"></span><br><span class="line">mask = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a[mask])</span><br></pre></td></tr></table></figure><blockquote><p>常用语从大数组中获取子集的操作</p></blockquote><h5 id="多维数组的组合与拆分"><a href="#多维数组的组合与拆分" class="headerlink" title="多维数组的组合与拆分"></a>多维数组的组合与拆分</h5><p>垂直方向操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">7</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = np.arange(<span class="number">7</span>, <span class="number">13</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 垂直方向完成组合操作，生成新数组</span></span><br><span class="line">c = np.vstack((a, b))</span><br><span class="line"><span class="comment"># 垂直方向完成拆分操作，生成两个数组</span></span><br><span class="line">d, e = np.vsplit(c, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>水平方向操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">7</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = np.arange(<span class="number">7</span>, <span class="number">13</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 水平方向完成组合操作，生成新数组 </span></span><br><span class="line">c = np.hstack((a, b))</span><br><span class="line"><span class="comment"># 水平方向完成拆分操作，生成两个数组</span></span><br><span class="line">d, e = np.hsplit(c, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>深度方向操作：（3维）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">7</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = np.arange(<span class="number">7</span>, <span class="number">13</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 深度方向（3维）完成组合操作，生成新数组</span></span><br><span class="line">i = np.dstack((a, b))</span><br><span class="line"><span class="comment"># 深度方向（3维）完成拆分操作，生成两个数组</span></span><br><span class="line">k, l = np.dsplit(i, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>多维数组组合与拆分的相关函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过axis作为关键字参数指定组合的方向，取值如下：</span></span><br><span class="line"><span class="comment"># 若待组合的数组都是二维数组：</span></span><br><span class="line"><span class="comment">#0: 垂直方向组合</span></span><br><span class="line"><span class="comment">#1: 水平方向组合</span></span><br><span class="line"><span class="comment"># 若待组合的数组都是三维数组：</span></span><br><span class="line"><span class="comment">#0: 垂直方向组合</span></span><br><span class="line"><span class="comment">#1: 水平方向组合</span></span><br><span class="line"><span class="comment">#2: 深度方向组合</span></span><br><span class="line">np.concatenate((a, b), axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 通过给出的数组与要拆分的份数，按照某个方向进行拆分，axis的取值同上</span></span><br><span class="line">np.split(c, <span class="number">2</span>, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>长度不等的数组组合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">b = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="comment"># 填充b数组使其长度与a相同</span></span><br><span class="line"><span class="comment"># pad_width=(a, b)：在数组首部补a个元素，尾部补b个元素</span></span><br><span class="line">b = np.pad(b, pad_width=(<span class="number">0</span>, <span class="number">1</span>), mode=<span class="string">&#x27;constant&#x27;</span>, constant_values=-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># 垂直方向完成组合操作，生成新数组</span></span><br><span class="line">c = np.vstack((a, b))</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>简单的一维数组组合方案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">1</span>,<span class="number">9</span>)<span class="comment">#[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br><span class="line">b = np.arange(<span class="number">9</span>,<span class="number">17</span>)<span class="comment">#[9,10,11,12,13,14,15,16]</span></span><br><span class="line"><span class="comment">#把两个数组摞在一起成两行</span></span><br><span class="line">c = np.row_stack((a, b))</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment">#把两个数组组合在一起成两列</span></span><br><span class="line">d = np.column_stack((a, b))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><h4 id="ndarray类的其他属性"><a href="#ndarray类的其他属性" class="headerlink" title="ndarray类的其他属性"></a>ndarray类的其他属性</h4><ul><li>shape - 维度</li><li>dtype - 元素类型</li><li>size - 元素数量</li><li>ndim - 维数，len(shape)</li><li>itemsize - 元素字节数</li><li>nbytes - 总字节数 &#x3D; size x itemsize</li><li>real - 复数数组的实部数组</li><li>imag - 复数数组的虚部数组</li><li>T - 数组对象的转置视图</li><li>flat - 扁平迭代器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span> + <span class="number">1j</span>, <span class="number">2</span> + <span class="number">4j</span>, <span class="number">3</span> + <span class="number">7j</span>],</span><br><span class="line">              [<span class="number">4</span> + <span class="number">2j</span>, <span class="number">5</span> + <span class="number">5j</span>, <span class="number">6</span> + <span class="number">8j</span>],</span><br><span class="line">              [<span class="number">7</span> + <span class="number">3j</span>, <span class="number">8</span> + <span class="number">6j</span>, <span class="number">9</span> + <span class="number">9j</span>]])</span><br><span class="line"><span class="built_in">print</span>(a.shape)</span><br><span class="line"><span class="built_in">print</span>(a.dtype)</span><br><span class="line"><span class="built_in">print</span>(a.ndim)</span><br><span class="line"><span class="built_in">print</span>(a.size)</span><br><span class="line"><span class="built_in">print</span>(a.itemsize)</span><br><span class="line"><span class="built_in">print</span>(a.nbytes)</span><br><span class="line"><span class="built_in">print</span>(a.real, a.imag, sep=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a.T)</span><br><span class="line"><span class="built_in">print</span>([elem <span class="keyword">for</span> elem <span class="keyword">in</span> a.flat])</span><br><span class="line">b = a.tolist()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><h4 id="算数平均值"><a href="#算数平均值" class="headerlink" title="算数平均值"></a>算数平均值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S = [s1, s2, ..., sn]</span><br></pre></td></tr></table></figure><p>样本中的每个值都是真值与误差的和。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">算数平均值：</span><br><span class="line">m = (s1 + s2 + ... + sn) / n</span><br></pre></td></tr></table></figure><p>算数平均值表示对真值的无偏估计。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mean(array)</span><br></pre></td></tr></table></figure><p>案例：计算收盘价的算术平均值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">closing_prices = np.loadtxt(</span><br><span class="line">    <span class="string">&#x27;../../data/aapl.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">    usecols=(<span class="number">6</span>), unpack=<span class="literal">True</span>)</span><br><span class="line">mean = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> closing_price <span class="keyword">in</span> closing_prices:</span><br><span class="line">    mean += closing_price</span><br><span class="line">mean /= closing_prices.size</span><br><span class="line"><span class="built_in">print</span>(mean)</span><br><span class="line">mean = np.mean(closing_prices)</span><br><span class="line"><span class="built_in">print</span>(mean)</span><br></pre></td></tr></table></figure><h4 id="加权平均值"><a href="#加权平均值" class="headerlink" title="加权平均值"></a>加权平均值</h4><p>样本：S &#x3D; [s<sub>1</sub>, s<sub>2</sub>, …, s<sub>n</sub>]</p><p>权重：W &#x3D; [w<sub>1</sub>, w<sub>2</sub>, …, w<sub>n</sub>]</p><p>加权平均值：a &#x3D; (s<sub>1</sub>w<sub>1</sub>+s<sub>2</sub>w<sub>2</sub>+…+s<sub>n</sub>w<sub>n</sub>)&#x2F;(w<sub>1</sub>+w<sub>2</sub>+…+w<sub>n</sub>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.average(closing_prices, weights=volumes)</span><br></pre></td></tr></table></figure><p>VWAP - 成交量加权平均价格（成交量体现了市场对当前交易价格的认可度，成交量加权平均价格将会更接近这支股票的真实价值）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">closing_prices, volumes = np.loadtxt(</span><br><span class="line">    <span class="string">&#x27;../../data/aapl.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">    usecols=(<span class="number">6</span>, <span class="number">7</span>), unpack=<span class="literal">True</span>)</span><br><span class="line">vwap, wsum = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> closing_price, volume <span class="keyword">in</span> <span class="built_in">zip</span>(</span><br><span class="line">        closing_prices, volumes):</span><br><span class="line">    vwap += closing_price * volume</span><br><span class="line">    wsum += volume</span><br><span class="line">vwap /= wsum</span><br><span class="line"><span class="built_in">print</span>(vwap)</span><br><span class="line">vwap = np.average(closing_prices, weights=volumes)</span><br><span class="line"><span class="built_in">print</span>(vwap)</span><br></pre></td></tr></table></figure><p>TWAP - 时间加权平均价格（时间越晚权重越高，参考意义越大）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dmy2days</span>(<span class="params">dmy</span>):</span><br><span class="line">    dmy = <span class="built_in">str</span>(dmy, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    date = dt.datetime.strptime(dmy, <span class="string">&#x27;%d-%m-%Y&#x27;</span>).date()</span><br><span class="line">    days = (date - dt.date.<span class="built_in">min</span>).days</span><br><span class="line">    <span class="keyword">return</span> days</span><br><span class="line"></span><br><span class="line">days, closing_prices = np.loadtxt(</span><br><span class="line">    <span class="string">&#x27;../../data/aapl.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">    usecols=(<span class="number">1</span>, <span class="number">6</span>), unpack=<span class="literal">True</span>,</span><br><span class="line">    converters=&#123;<span class="number">1</span>: dmy2days&#125;)</span><br><span class="line">twap = np.average(closing_prices, weights=days)</span><br><span class="line"><span class="built_in">print</span>(twap)</span><br></pre></td></tr></table></figure><h4 id="最值"><a href="#最值" class="headerlink" title="最值"></a>最值</h4><p><strong>np.max()  np.min() np.ptp()：</strong> 返回一个数组中最大值&#x2F;最小值&#x2F;极差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 产生9个介于[10, 100)区间的随机数</span></span><br><span class="line">a = np.random.randint(<span class="number">10</span>, <span class="number">100</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">max</span>(a), np.<span class="built_in">min</span>(a), np.ptp(a))</span><br></pre></td></tr></table></figure><p><strong>np.argmax() mp.argmin()：</strong> 返回一个数组中最大&#x2F;最小元素的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.argmax(a), np.argmin(a))</span><br></pre></td></tr></table></figure><p><strong>np.maximum() np.minimum()：</strong> 将两个同维数组中对应元素中最大&#x2F;最小元素构成一个新的数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.maximum(a, b), np.minimum(a, b), sep=<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>案例：评估AAPL股票的波动性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">highest_prices, lowest_prices = np.loadtxt(</span><br><span class="line">    <span class="string">&#x27;../../data/aapl.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">    usecols=(<span class="number">4</span>, <span class="number">5</span>), dtype=<span class="string">&#x27;f8, f8&#x27;</span>, unpack=<span class="literal">True</span>)</span><br><span class="line">max_price = np.<span class="built_in">max</span>(highest_prices)</span><br><span class="line">min_price = np.<span class="built_in">min</span>(lowest_prices)</span><br><span class="line"><span class="built_in">print</span>(min_price, <span class="string">&#x27;~&#x27;</span>, max_price)</span><br></pre></td></tr></table></figure><p>查看AAPL股票最大最小值的日期，分析为什么这一天出现最大最小值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">dates, highest_prices, lowest_prices = np.loadtxt(</span><br><span class="line">    <span class="string">&#x27;../../data/aapl.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">    usecols=(<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>), dtype=<span class="string">&#x27;U10, f8, f8&#x27;</span>,</span><br><span class="line">    unpack=<span class="literal">True</span>)</span><br><span class="line">max_index = np.argmax(highest_prices)</span><br><span class="line">min_index = np.argmin(lowest_prices)</span><br><span class="line"><span class="built_in">print</span>(dates[min_index], dates[max_index])</span><br></pre></td></tr></table></figure><p>观察最高价与最低价的<strong>波动范围</strong>，分析这支股票底部是否坚挺。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">dates, highest_prices, lowest_prices = np.loadtxt(</span><br><span class="line">    <span class="string">&#x27;../../data/aapl.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">    usecols=(<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>), dtype=<span class="string">&#x27;U10, f8, f8&#x27;</span>,</span><br><span class="line">    unpack=<span class="literal">True</span>)</span><br><span class="line">highest_ptp = np.ptp(highest_prices)</span><br><span class="line">lowest_ptp = np.ptp(lowest_prices)</span><br><span class="line"><span class="built_in">print</span>(lowest_ptp, highest_ptp)</span><br></pre></td></tr></table></figure><h4 id="中位数"><a href="#中位数" class="headerlink" title="中位数"></a>中位数</h4><p>将多个样本按照大小排序，取中间位置的元素。</p><p><strong>若样本数量为奇数，中位数为最中间的元素</strong></p><p>1 2000 3000 4000 10000000</p><p><strong>若样本数量为偶数，中位数为最中间的两个元素的平均值</strong></p><p>1 2000 3000 4000 5000 10000000</p><p>案例：分析中位数的算法，测试numpy提供的中位数API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">closing_prices = np.loadtxt( <span class="string">&#x27;../../data/aapl.csv&#x27;</span>, </span><br><span class="line">delimiter=<span class="string">&#x27;,&#x27;</span>, usecols=(<span class="number">6</span>), unpack=<span class="literal">True</span>)</span><br><span class="line">size = closing_prices.size</span><br><span class="line">sorted_prices = np.msort(closing_prices)</span><br><span class="line">median = (sorted_prices[<span class="built_in">int</span>((size - <span class="number">1</span>) / <span class="number">2</span>)] + sorted_prices[<span class="built_in">int</span>(size / <span class="number">2</span>)]) / <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(median)</span><br><span class="line">median = np.median(closing_prices)</span><br><span class="line"><span class="built_in">print</span>(median)</span><br></pre></td></tr></table></figure><h4 id="标准差"><a href="#标准差" class="headerlink" title="标准差"></a>标准差</h4><p>样本：S &#x3D; [s1, s2, …, sn]<br>平均值：m &#x3D; (s1+s2+…+sn)&#x2F;n<br>离差：D &#x3D; [d1, d2, …, dn], di &#x3D; si-m<br>离差方：Q &#x3D; [q1, q2, …, qn], qi &#x3D; di<sup>2</sup><br>总体方差：v &#x3D; (q1+q2+…+qn)&#x2F;n<br>总体标准差：s &#x3D; sqrt(v)，方均根<br>样本方差：v’ &#x3D; (q1+q2+…+qn)&#x2F;(n-1)<br>样本标准差：s’ &#x3D; sqrt(v’)，方均根</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">closing_prices = np.loadtxt(</span><br><span class="line">    <span class="string">&#x27;../../data/aapl.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>, usecols=(<span class="number">6</span>), unpack=<span class="literal">True</span>)</span><br><span class="line">mean = np.mean(closing_prices)         <span class="comment"># 算数平均值</span></span><br><span class="line">devs = closing_prices - mean           <span class="comment"># 离差</span></span><br><span class="line">dsqs = devs ** <span class="number">2</span>                       <span class="comment"># 离差方</span></span><br><span class="line">pvar = np.<span class="built_in">sum</span>(dsqs) / dsqs.size        <span class="comment"># 总体方差</span></span><br><span class="line">pstd = np.sqrt(pvar)                   <span class="comment"># 总体标准差</span></span><br><span class="line">svar = np.<span class="built_in">sum</span>(dsqs) / (dsqs.size - <span class="number">1</span>)  <span class="comment"># 样本方差</span></span><br><span class="line">sstd = np.sqrt(svar)                   <span class="comment"># 样本标准差</span></span><br><span class="line"><span class="built_in">print</span>(pstd, sstd)</span><br><span class="line">pstd = np.std(closing_prices)          <span class="comment"># 总体标准差</span></span><br><span class="line">sstd = np.std(closing_prices, ddof=<span class="number">1</span>)  <span class="comment"># 样本标准差</span></span><br><span class="line"><span class="built_in">print</span>(pstd, sstd)</span><br></pre></td></tr></table></figure><h4 id="时间数据处理"><a href="#时间数据处理" class="headerlink" title="时间数据处理"></a>时间数据处理</h4><p>案例：统计每个周一、周二、…、周五的收盘价的平均值，并放入一个数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换器函数：将日-月-年格式的日期字符串转换为星期</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dmy2wday</span>(<span class="params">dmy</span>):</span><br><span class="line">    dmy = <span class="built_in">str</span>(dmy, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    date = dt.datetime.strptime(dmy, <span class="string">&#x27;%d-%m-%Y&#x27;</span>).date()</span><br><span class="line">    wday = date.weekday()  <span class="comment"># 用 周日</span></span><br><span class="line">    <span class="keyword">return</span> wday</span><br><span class="line"></span><br><span class="line">wdays, closing_prices = np.loadtxt(<span class="string">&#x27;../data/aapl.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">    usecols=(<span class="number">1</span>, <span class="number">6</span>), unpack=<span class="literal">True</span>, converters=&#123;<span class="number">1</span>: dmy2wday&#125;)</span><br><span class="line"></span><br><span class="line">ave_closing_prices = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> wday <span class="keyword">in</span> <span class="built_in">range</span>(ave_closing_prices.size):</span><br><span class="line">    ave_closing_prices[wday] = closing_prices[wdays == wday].mean()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> wday, ave_closing_price <span class="keyword">in</span> <span class="built_in">zip</span>(</span><br><span class="line">    [<span class="string">&#x27;MON&#x27;</span>, <span class="string">&#x27;TUE&#x27;</span>, <span class="string">&#x27;WED&#x27;</span>, <span class="string">&#x27;THU&#x27;</span>, <span class="string">&#x27;FRI&#x27;</span>],</span><br><span class="line">        ave_closing_prices):</span><br><span class="line">    <span class="built_in">print</span>(wday, np.<span class="built_in">round</span>(ave_closing_price, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="数组的轴向汇总"><a href="#数组的轴向汇总" class="headerlink" title="数组的轴向汇总"></a>数组的轴向汇总</h4><p>案例：汇总每周的最高价，最低价，开盘价，收盘价。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#func 处理函数</span></span><br><span class="line"><span class="comment">#axis 轴向 [0,1]</span></span><br><span class="line"><span class="comment">#array 数组</span></span><br><span class="line">np.apply_along_axis(func, axis, array)</span><br></pre></td></tr></table></figure><p>沿着数组中所指定的轴向，调用处理函数，并将每次调用的返回值重新组织成数组返回。</p><h4 id="移动均线"><a href="#移动均线" class="headerlink" title="移动均线"></a>移动均线</h4><p>收盘价5日均线：从第五天开始，每天计算最近五天的收盘价的平均值所构成的一条线。</p><p>移动均线算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(a+b+c+d+e)/<span class="number">5</span></span><br><span class="line">(b+c+d+e+f)/<span class="number">5</span></span><br><span class="line">(c+d+e+f+g)/<span class="number">5</span></span><br><span class="line">...</span><br><span class="line">(f+g+h+i+j)/<span class="number">5</span></span><br></pre></td></tr></table></figure><p>在K线图中绘制5日均线图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> matplotlib.dates <span class="keyword">as</span> md</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dmy2ymd</span>(<span class="params">dmy</span>):</span><br><span class="line">    dmy = <span class="built_in">str</span>(dmy, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    date = dt.datetime.strptime(dmy, <span class="string">&#x27;%d-%m-%Y&#x27;</span>).date()</span><br><span class="line">    ymd = date.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> ymd</span><br><span class="line"></span><br><span class="line">dates, closing_prices = np.loadtxt(<span class="string">&#x27;../data/aapl.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">    usecols=(<span class="number">1</span>, <span class="number">6</span>), unpack=<span class="literal">True</span>, dtype=<span class="string">&#x27;M8[D], f8&#x27;</span>, converters=&#123;<span class="number">1</span>: dmy2ymd&#125;)</span><br><span class="line">sma51 = np.zeros(closing_prices.size - <span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(sma51.size):</span><br><span class="line">    sma51[i] = closing_prices[i:i + <span class="number">5</span>].mean()</span><br><span class="line"><span class="comment"># 开始绘制5日均线</span></span><br><span class="line">mp.figure(<span class="string">&#x27;Simple Moving Average&#x27;</span>, facecolor=<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">mp.title(<span class="string">&#x27;Simple Moving Average&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">mp.xlabel(<span class="string">&#x27;Date&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">mp.ylabel(<span class="string">&#x27;Price&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">ax = mp.gca()</span><br><span class="line"><span class="comment"># 设置水平坐标每个星期一为主刻度</span></span><br><span class="line">ax.xaxis.set_major_locator(md.WeekdayLocator( byweekday=md.MO))</span><br><span class="line"><span class="comment"># 设置水平坐标每一天为次刻度</span></span><br><span class="line">ax.xaxis.set_minor_locator(md.DayLocator())</span><br><span class="line"><span class="comment"># 设置水平坐标主刻度标签格式</span></span><br><span class="line">ax.xaxis.set_major_formatter(md.DateFormatter(<span class="string">&#x27;%d %b %Y&#x27;</span>))</span><br><span class="line">mp.tick_params(labelsize=<span class="number">10</span>)</span><br><span class="line">mp.grid(linestyle=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">dates = dates.astype(md.datetime.datetime)</span><br><span class="line">mp.plot(dates, closing_prices, c=<span class="string">&#x27;lightgray&#x27;</span>, label=<span class="string">&#x27;Closing Price&#x27;</span>)</span><br><span class="line">mp.plot(dates[<span class="number">4</span>:], sma51, c=<span class="string">&#x27;orangered&#x27;</span>, label=<span class="string">&#x27;SMA-5(1)&#x27;</span>)</span><br><span class="line">mp.legend()</span><br><span class="line">mp.gcf().autofmt_xdate()</span><br><span class="line">mp.show()</span><br></pre></td></tr></table></figure><h4 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h4><p>激励函数：g(t)</p><p>单位激励下的响应函数：f(t)</p><p>绘制时间（t）与痛感（h）的函数关系图。</p><p>a &#x3D; [1 2 3 4 5]（理解为某单位时间的击打力度序列）</p><p>b &#x3D; [6 7 8]（理解为痛感系数序列）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">c = numpy.convolve(a, b, 卷积类型)</span><br><span class="line"></span><br><span class="line">                <span class="number">40</span>  <span class="number">61</span>  <span class="number">82</span>         - 有效卷积(valid)</span><br><span class="line">            <span class="number">19</span>  <span class="number">40</span>  <span class="number">61</span>  <span class="number">82</span>  <span class="number">67</span>     - 同维卷积(same)</span><br><span class="line">        <span class="number">6</span>   <span class="number">19</span>  <span class="number">40</span>  <span class="number">61</span>  <span class="number">82</span>  <span class="number">67</span>  <span class="number">40</span> - 完全卷积(full)</span><br><span class="line"><span class="number">0</span>   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">0</span>   <span class="number">0</span></span><br><span class="line"><span class="number">8</span>   <span class="number">7</span>   <span class="number">6</span></span><br><span class="line">    <span class="number">8</span>   <span class="number">7</span>   <span class="number">6</span></span><br><span class="line">        <span class="number">8</span>   <span class="number">7</span>   <span class="number">6</span></span><br><span class="line">            <span class="number">8</span>   <span class="number">7</span>   <span class="number">6</span></span><br><span class="line">                <span class="number">8</span>   <span class="number">7</span>   <span class="number">6</span></span><br><span class="line">                    <span class="number">8</span>   <span class="number">7</span>   <span class="number">6</span></span><br><span class="line">                        <span class="number">8</span>    <span class="number">7</span>   <span class="number">6</span></span><br></pre></td></tr></table></figure><p><strong>5日移动均线序列可以直接使用卷积实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [a, b, c, d, e, f, g, h, i, j] </span><br><span class="line">b = [<span class="number">1</span>/<span class="number">5</span>, <span class="number">1</span>/<span class="number">5</span>, <span class="number">1</span>/<span class="number">5</span>, <span class="number">1</span>/<span class="number">5</span>, <span class="number">1</span>/<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p><strong>使用卷积函数numpy.convolve(a, b, 卷积类型)实现5日均线</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sma52 = np.convolve( closing_prices, np.ones(<span class="number">5</span>) / <span class="number">5</span>, <span class="string">&#x27;valid&#x27;</span>)</span><br><span class="line">mp.plot(dates[<span class="number">4</span>:], sma52, c=<span class="string">&#x27;limegreen&#x27;</span>, alpha=<span class="number">0.5</span>,</span><br><span class="line">        linewidth=<span class="number">6</span>, label=<span class="string">&#x27;SMA-5(2)&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>使用卷积函数numpy.convolve(a, b, 卷积类型)实现10日均线</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sma10 = np.convolve(closing_prices, np.ones(<span class="number">10</span>) / <span class="number">10</span>, <span class="string">&#x27;valid&#x27;</span>)</span><br><span class="line">mp.plot(dates[<span class="number">9</span>:], sma10, c=<span class="string">&#x27;dodgerblue&#x27;</span>, label=<span class="string">&#x27;SMA-10&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>使用卷积函数numpy.convolve(a, b, 卷积类型)实现加权5日均线</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">weights = np.exp(np.linspace(-<span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line">weights /= weights.<span class="built_in">sum</span>()</span><br><span class="line">ema5 = np.convolve(closing_prices, weights[::-<span class="number">1</span>], <span class="string">&#x27;valid&#x27;</span>)</span><br><span class="line">mp.plot(dates[<span class="number">4</span>:], sma52, c=<span class="string">&#x27;limegreen&#x27;</span>, alpha=<span class="number">0.5</span>,</span><br><span class="line">        linewidth=<span class="number">6</span>, label=<span class="string">&#x27;SMA-5&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="布林带"><a href="#布林带" class="headerlink" title="布林带"></a>布林带</h4><p>布林带由三条线组成：</p><p>中轨：移动平均线</p><p>上轨：中轨+2x5日收盘价标准差（顶部的压力）</p><p>下轨：中轨-2x5日收盘价标准差 （底部的支撑力）</p><p>布林带收窄代表稳定的趋势，布林带张开代表有较大的波动空间的趋势。</p><p><strong>绘制5日均线的布林带</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">weights = np.exp(np.linspace(-<span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line">weights /= weights.<span class="built_in">sum</span>()</span><br><span class="line">em5 = np.convolve(closing_prices, weights[::-<span class="number">1</span>], <span class="string">&#x27;valid&#x27;</span>)</span><br><span class="line">stds = np.zeros(em5.size)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(stds.size):</span><br><span class="line">    stds[i] = closing_prices[i:i + <span class="number">5</span>].std()</span><br><span class="line">stds *= <span class="number">2</span></span><br><span class="line">lowers = medios - stds</span><br><span class="line">uppers = medios + stds</span><br><span class="line"></span><br><span class="line">mp.plot(dates, closing_prices, c=<span class="string">&#x27;lightgray&#x27;</span>, label=<span class="string">&#x27;Closing Price&#x27;</span>)</span><br><span class="line">mp.plot(dates[<span class="number">4</span>:], medios, c=<span class="string">&#x27;dodgerblue&#x27;</span>, label=<span class="string">&#x27;Medio&#x27;</span>)</span><br><span class="line">mp.plot(dates[<span class="number">4</span>:], lowers, c=<span class="string">&#x27;limegreen&#x27;</span>, label=<span class="string">&#x27;Lower&#x27;</span>)</span><br><span class="line">mp.plot(dates[<span class="number">4</span>:], uppers, c=<span class="string">&#x27;orangered&#x27;</span>, label=<span class="string">&#x27;Upper&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> AI进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析-概述</title>
      <link href="/2018/11/29/datascience/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E6%A6%82%E8%BF%B0/"/>
      <url>/2018/11/29/datascience/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>数据分析是指用适当的统计分析方法对收集来的大量数据进行分析，提取有用信息和形成结论而对数据加以详细研究和概括总结的过程。</p><span id="more"></span><p><strong>使用python做数据分析的常用库</strong></p><ol><li>numpy基础数值算法</li><li>scipy               科学计算</li><li>matplotlib      数据可视化</li><li>pandas           序列高级函数</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> AI进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>App分析</title>
      <link href="/2018/11/18/ios/general/App%E5%88%86%E6%9E%90/"/>
      <url>/2018/11/18/ios/general/App%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>在我们调研其他App的时候，或者想获取其他App内部资源的时候，我们需要做些什么才能拿到我们想要的东西呢？<br>本教程以获取西瓜视频为例</p><span id="more"></span><h2 id="依赖工具"><a href="#依赖工具" class="headerlink" title="依赖工具"></a>依赖工具</h2><ul><li><a href="https://apps.apple.com/cn/app/apple-configurator-2/id1037126344?mt=12">Apple Configurator 2</a></li><li><a href="https://object.rencheng.cc/software/mac/Assets%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7.zip">Assets提取工具</a></li></ul><h2 id="获取App安装包"><a href="#获取App安装包" class="headerlink" title="获取App安装包"></a>获取App安装包</h2><ol><li><p>在手机上下载<code>西瓜视频</code></p></li><li><p>将手机连入Mac</p></li><li><p>下载ipa获取工具<a href="https://apps.apple.com/cn/app/apple-configurator-2/id1037126344?mt=12">Apple Configurator 2</a></p></li><li><p>登录跟手机一样的AppleId</p></li><li><p>点击添加<br> <img src="https://cdn.rencheng.cc/blog/mh0e3.png"></p></li><li><p>搜索<code>西瓜视频</code>并添加<br> <img src="https://cdn.rencheng.cc/blog/7y43i.png"></p></li><li><p>等待下载结束。下载结束千万别乱点，往下看教程<br> <img src="https://cdn.rencheng.cc/blog/vlh0v.png"></p></li><li><p>打开Finder，前往文件夹[Command+Shift+G]，输入</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Library/Group Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/</span><br></pre></td></tr></table></figure></li><li><p>然后一直往下级文件夹进入，最后就提取到了<code>西瓜视频 3.5.1.ipa</code></p></li><li><p>把<code>西瓜视频 3.5.1.ipa</code>复制到桌面新建的<code>西瓜视频调研</code>文件夹中</p></li><li><p>关掉<code>Apple Configuration2</code></p></li></ol><h2 id="提取图片资源"><a href="#提取图片资源" class="headerlink" title="提取图片资源"></a>提取图片资源</h2><ol><li>将<code>西瓜视频 3.5.1.ipa</code>复制一个副本，将其改名为<code>西瓜视频 3.5.1.zip</code></li><li>解压<code>西瓜视频 3.5.1.zip</code><br> <img src="https://cdn.rencheng.cc/blog/9gdfs.png"></li><li>找到<code>~/Desktop/西瓜视频调研/西瓜视频\ 3.5.1/Payload/Video.app</code></li><li>右键<code>Video.app</code>显示包内容</li><li>找到<code>Assets.car</code></li><li>下载<a href="https://object.rencheng.cc/software/mac/Assets%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7.zip">Assets提取工具</a></li><li>打开<code>Assets提取工具</code><br> <img src="https://cdn.rencheng.cc/blog/vbdsk.png"></li><li>此刻所有资源提取完成</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态库制作及注意点</title>
      <link href="/2018/10/21/ios/general/%E9%9D%99%E6%80%81%E5%BA%93%E5%88%B6%E4%BD%9C%E5%8F%8A%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
      <url>/2018/10/21/ios/general/%E9%9D%99%E6%80%81%E5%BA%93%E5%88%B6%E4%BD%9C%E5%8F%8A%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>使用库无外乎就是两种情况：一种是将源码的实现细节隐藏，只给外部调用的接口集成特定的服务，如常见的百度&#x2F;谷歌地图等等第三方库；另一种就是防止公司的核心代码泄露，将核心功能的源码打成库文件集成。</p><span id="more"></span><h2 id="关于库"><a href="#关于库" class="headerlink" title="关于库"></a>关于库</h2><p>库一般分为静态库和动态库两种，其本质上来说是可以被载入内存中执行的可执行代码的二进制格式。<br>iOS中的静态库有<code>.a</code>和<code>.framework</code>两种形式；动态库有<code>.dylib</code>和<code>.framework</code>形式，<code>.dylib</code>动态库从Xcode 8开始以<code>.tbd</code>的形式出现。</p><h3 id="动态库和静态库的区别："><a href="#动态库和静态库的区别：" class="headerlink" title="动态库和静态库的区别："></a>动态库和静态库的区别：</h3><ul><li>静态库在链接时会被完整的复制到可执行文件中，被多次使用就有多份冗余拷贝。</li><li>动态库链接时不复制，程序运行时由系统动态的加载到内存供程序调用，系统只加载一次，多个程序共用，节省内存。</li></ul><h3 id="a静态库和-framework静态库区别"><a href="#a静态库和-framework静态库区别" class="headerlink" title=".a静态库和.framework静态库区别"></a><code>.a静态库</code>和<code>.framework</code>静态库区别</h3><ul><li><code>.a</code>静态库是纯二进制文件，不能单独使用，一般需要配合头文件使用。</li><li><code>.framework</code>静态库可以单独使用，并且可以集成资源文件，类似于<code>.a + .h + sourceFile = .framework</code>。</li></ul><h2 id="a静态库"><a href="#a静态库" class="headerlink" title=".a静态库"></a>.a静态库</h2><h3 id="库文件生成"><a href="#库文件生成" class="headerlink" title="库文件生成"></a>库文件生成</h3><ol><li>新建项目，如图选择新建静态库：<br>静态库命名一般以lib开头，后面加上静态库的功能，如我这个静态库用于蓝牙加解密，所以命名为<code>libBLECrypto</code>。<br><img src="https://cdn.rencheng.cc/blog/644dr.png"></li><li>完成之后会自动生成项目名称同名的<code>.h</code>和<code>.m</code>文件。</li><li>我们根据需求实现功能及导入相关的文件，此时如果我们不编译，默认<code>Products目录</code>下会有一个红色的<code>lib+ 项目名称 + .a</code>的文件。<br><img src="https://cdn.rencheng.cc/blog/ncooc.png"></li><li><code>Command + B</code>编译一下项目，此时该文件变为黑色。我们在该<code>.a</code>文件上右键<code>Show in Finder</code>，进入其所在位置，实质上项目中的<code>.m</code>文件已经生成<code>.a</code>文件了。但是此时别人是无法使用的，因为缺少对应的头文件，我们需要再如下位置配置需要暴露给外界的头文件信息：<br><img src="https://cdn.rencheng.cc/blog/q5ppk.png-thumb100"></li><li>配置完成后重新<code>Command + B</code>编译后会发现在原来生成的.a文件的同级目录会生成一个<code>include目录</code>，里面就是需要一起提供给调用者的头文件信息。</li><li>进行到这里是不是感觉.a静态库的制作很简单？不要闹，我们还有更重要的事情没有解决呢。</li></ol><h3 id="环境及平台处理"><a href="#环境及平台处理" class="headerlink" title="环境及平台处理"></a>环境及平台处理</h3><ol><li><p>我们知道生成的静态库可能用于Debug模式，也可能用于Release模式；可能是在模拟器上面运行，也可能是在真机上运行，既然有这么多可变因素，那么我们就需要一一解决。</p></li><li><p>我们首先将不同的开发模式和不同的运行环境下生成对应的库文件（共4种）：</p><ul><li>模拟器 + Debug</li><li>模拟器 + release：</li><li>真机 + Debug</li><li>真机 + release</li></ul><p> <img src="https://cdn.rencheng.cc/blog/tjs9o.png"></p></li><li><p>这里有一个注意点，需要将构建建构设置为<code>NO</code>，否则只支持选中的设备架构：<br> <img src="https://cdn.rencheng.cc/blog/14di5.png"></p></li><li><p>使用<code>lipo -info</code>命令查看静态库支持的CPU架构，如<br> <img src="https://cdn.rencheng.cc/blog/z83r5.png"></p></li><li><p>可以看出使用真机编译生成的静态库是支持armv7 arm64架构的，使用模拟器编译生成的静态库是支持i386 x86_64架构的（armv7是兼容armv7s的）。</p></li><li><p>关于设备的CPU架构(指令集)</p><ul><li>模拟器:<ul><li>i386 : 32位架构 4S ~ 5</li><li>x86_64 : 64位架构 5S ~ 现在的机型</li></ul></li><li>真机(iOS设备):<ul><li>armv7 : 32位架构 3GS ~ 4S</li><li>armv7s: 特殊的架构 5 ~ 5C      </li><li>amr64 : 64位架构 5S ~ now</li></ul></li></ul></li><li><p>根据使用者的需求，将对应的库文件及头文件提供给调用者即可，但是如果在模拟器和真机之间切换使用这样比较麻烦，所以需要将两个静态库合并为一个静态库供别人使用。</p></li></ol><h3 id="静态库合并"><a href="#静态库合并" class="headerlink" title="静态库合并"></a>静态库合并</h3><ol><li><p>将静态库合并也比较简单，只需要需要支持的架构的静态库合并即可，一般我们主要合并模拟器Release下的静态库和真机Release下的静态库，保证在模拟器和真机下都可以调试并且可以发布应用。合成指令如下：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -create 静态库1.a 静态库2.a -output 新静态库.a</span><br></pre></td></tr></table></figure></li><li><p>合成完成会生成一个新的<code>.a</code>静态库，将该<code>.a</code>静态库和头文件一起提供给调用者即可。</p></li></ol><h3 id="静态库上架"><a href="#静态库上架" class="headerlink" title="静态库上架"></a>静态库上架</h3><ol><li><p>如果项目中导入了.a静态库且上架需要开启Bitcode选项，那么静态库就需要支持Bitcode才可以，否则打包上架会遇到如下问题：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ld: bitcode bundle could not be generated because <span class="string">&#x27;xxx.a(xxx.o)&#x27;</span> was built without full bitcode.</span><br></pre></td></tr></table></figure></li><li><p>让静态库支持，需要在编译生成静态库文件前进行下面两步配置</p><ul><li><p>需要在<code>Build Settings</code>中设置<code>Enable Bitcode</code>选项为<code>Yes</code>（默认是开启状态）。</p></li><li><p>在<code>Build Settings</code>的<code>Other C Flags</code>添加<code>-fembed-bitcode</code>参数。<br> <img src="https://cdn.rencheng.cc/blog/dh0ey.png"></p></li><li><p>检查生成的静态库文件是否支持<code>Bitcode</code>，请使用如下指令：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">otool -<span class="built_in">arch</span> armv7 -l libBLECrypto.a </span><br><span class="line">或者</span><br><span class="line">otool -<span class="built_in">arch</span> arm64 -l libBLECrypto.a</span><br></pre></td></tr></table></figure></li><li><p><code>Command + F</code>搜索bitcode字段，如果存在<code>sectname</code>为bitcode的字段且对应的<code>size不是0x0000000000000001</code>，说明静态库支持<code>Bitcode</code>。<br> <img src="https://cdn.rencheng.cc/blog/fliy0.png"></p></li></ul></li></ol><h2 id="framework静态库"><a href="#framework静态库" class="headerlink" title=".framework静态库"></a>.framework静态库</h2><p>可以采用cocoaPods的方式构建</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>如果静态库中使用到分类，那么直接使用静态库会有找不到该方法的运行时错误（selector not recognized），解决办法是：在使用静态库的工程中配置<code>other linker flags</code>的添加<code>-ObjC</code>。<br>如果一个静态库很复杂，需要暴露的.h比较多的话，就可以在静态库的内部创建一个.h文件（一般这个.h文件的名字和静态库的名字相同），然后把所有需要暴露出来的.h文件都集中放在这个.h文件中，而那些原本需要暴露的.h都不需要再暴露了，只需要把.h暴露出来就可以了。<br>如果我们在同一电脑行生成静态库并配置到其他项目中，此时在项目中打断点是可以进入静态库的实现文件中的，不过不用担心，在其他电脑是以汇编形式显示的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苹果开发者续费指南</title>
      <link href="/2018/10/21/ios/general/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E7%BB%AD%E8%B4%B9%E6%8C%87%E5%8D%97/"/>
      <url>/2018/10/21/ios/general/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E7%BB%AD%E8%B4%B9%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>信用卡缴费环节注意事项</p><ol><li>需要同时具有银联和VISA或银联和Master（双币种卡）</li><li>需要开通境外刷卡支付功能</li><li>账单地址必须与银行预留信息完全一致，一字不差</li><li>手机号码需要与银行预留一致</li><li>姓名使用拼音大写</li><li>在账户内绑定此支付方式及账单地址（非必须）</li><li>在订单生成环节将寄送邮箱改为公司邮箱，不可使用QQ、163邮箱</li><li>使用苹果电脑safari浏览器</li><li>可以使用他人信用卡</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Xcode和LLDB进行高级调试</title>
      <link href="/2018/09/24/ios/general/%E9%80%9A%E8%BF%87Xcode%E5%92%8CLLDB%E8%BF%9B%E8%A1%8C%E9%AB%98%E7%BA%A7%E8%B0%83%E8%AF%95/"/>
      <url>/2018/09/24/ios/general/%E9%80%9A%E8%BF%87Xcode%E5%92%8CLLDB%E8%BF%9B%E8%A1%8C%E9%AB%98%E7%BA%A7%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>开发过程中，经常遇见调试。这篇文章主要介绍在Xcode控制台使用LLDB的一些命令</p><span id="more"></span><h2 id="清理控制台"><a href="#清理控制台" class="headerlink" title="清理控制台"></a>清理控制台</h2><p>快捷键 Command + K</p><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><ul><li><code>p</code> 是打印对象。可以看到对象的地址、Class、以及成员变量值。</li><li><code>po</code> 是打印对象的描述信息。可以通过description函数重写。</li></ul><h2 id="执行表达式"><a href="#执行表达式" class="headerlink" title="执行表达式"></a>执行表达式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a = 10;</span><br></pre></td></tr></table></figure><p>将在控制台中，将a改成20</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression a = 20</span><br></pre></td></tr></table></figure><blockquote><p>此方法特别适用于断点调试中</p></blockquote><h2 id="设置一个临时断点"><a href="#设置一个临时断点" class="headerlink" title="设置一个临时断点"></a>设置一个临时断点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">breakpoint set --one-shot true</span><br></pre></td></tr></table></figure><blockquote><p>–one-shot 代表临时断点</p></blockquote><h2 id="将断点偏移"><a href="#将断点偏移" class="headerlink" title="将断点偏移"></a>将断点偏移</h2><p>offset 代表行数。如果偏移一行，则offset&#x3D;1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread jump --by offset</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-持续集成</title>
      <link href="/2018/09/08/ios/general/iOS%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
      <url>/2018/09/08/ios/general/iOS%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>持续集成，就是一个自动化的操作，把一系列的操作通过脚本和工具串起来</p><span id="more"></span><h2 id="梳理流程"><a href="#梳理流程" class="headerlink" title="梳理流程"></a>梳理流程</h2><p>这一步很重要，也是脚本开发的第一步。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[源码管理] --&gt; B[依赖引入]</span><br><span class="line">B --&gt; C[环境配置]</span><br><span class="line">C --&gt; D[渠道选择]</span><br><span class="line">D --&gt; E[蒲公英/Fir.im]</span><br><span class="line">D --&gt; F[TestFlight]</span><br><span class="line">E --&gt; G[打包]</span><br><span class="line">F --&gt; L[打包]</span><br><span class="line">G --&gt; H[检测包]</span><br><span class="line">H --&gt; I[提取App信息]</span><br><span class="line">I --&gt; K[钉钉通知]</span><br></pre></td></tr></table></figure><h2 id="工具选择"><a href="#工具选择" class="headerlink" title="工具选择"></a>工具选择</h2><table><thead><tr><th align="left">功能</th><th align="left">工具</th></tr></thead><tbody><tr><td align="left">整合功能</td><td align="left">Jenkins</td></tr><tr><td align="left">源码管理</td><td align="left">Git</td></tr><tr><td align="left">依赖引入</td><td align="left">Cocoapods</td></tr><tr><td align="left">环境配置</td><td align="left">File</td></tr><tr><td align="left">打包</td><td align="left">fastlane</td></tr><tr><td align="left">包检测</td><td align="left">脚本</td></tr><tr><td align="left">提取App信息</td><td align="left">脚本</td></tr><tr><td align="left">钉钉通知</td><td align="left">脚本</td></tr></tbody></table><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><p>工程根路径<br>Jenkins是开源CI&#x2F;CD相对比较好的软件，提供超过1000个插件来支持构建、部署、自动化，满足任何项目的需要。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>一般运维会装，自己装的话自行百度，很简单。我先去装一个<br>咱不是专业的运维，只能按照教程装，配置好了，后期想卸载都不知道安装到哪了，所以我用的宝塔面板做控制。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>由于iOS打包只能在Mac上面运行，所以Jenkins要配置一个Mac的节点来处理</p><h4 id="增加Mac机器节点"><a href="#增加Mac机器节点" class="headerlink" title="增加Mac机器节点"></a>增加Mac机器节点</h4><p><img src="https://cdn.rencheng.cc/blog/a1idc.jpg"><br><img src="https://cdn.rencheng.cc/blog/crbdu.jpg"><br><img src="https://cdn.rencheng.cc/blog/crbdu.jpg"></p><h4 id="指定节点运行"><a href="#指定节点运行" class="headerlink" title="指定节点运行"></a>指定节点运行</h4><p><img src="https://cdn.rencheng.cc/blog/xwfw4.jpg-thumb100"></p><h2 id="脚本开发"><a href="#脚本开发" class="headerlink" title="脚本开发"></a>脚本开发</h2><h3 id="依赖处理"><a href="#依赖处理" class="headerlink" title="依赖处理"></a>依赖处理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line"><span class="built_in">cd</span> 工程根路径</span><br><span class="line"></span><br><span class="line">pod repo update</span><br><span class="line"><span class="built_in">cp</span> ~/Desktop/libwebp.podspec.json ~/.cocoapods/repos/master/Specs/1/9/2/libwebp/1.1.0/libwebp.podspec.json</span><br><span class="line"></span><br><span class="line">pod install</span><br></pre></td></tr></table></figure><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;授权钥匙串访问权限&quot;</span></span><br><span class="line">security unlock-keychain -p 电脑密码 <span class="variable">$HOME</span>/Library/Keychains/login.keychain</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">firPublish</span></span>() &#123;</span><br><span class="line">    fir publish ipa包路径 --token=<span class="variable">$1</span> --specify-icon-file=fastlane/logo.jpg --changelog=<span class="variable">$ReleaseNotes</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ShowPlatform</span>&quot;</span> == <span class="string">&quot;<span class="variable">$offical</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$offical</span>;</span><br><span class="line">fastlane archive;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;打包结束&quot;</span></span><br><span class="line">    checkIpa;</span><br><span class="line">firPublish 8a073c443b2310a335a06223b2244a07;</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$ShowPlatform</span>&quot;</span> == <span class="string">&quot;<span class="variable">$standby</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$standby</span>;</span><br><span class="line">fastlane archive;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;打包结束&quot;</span></span><br><span class="line">    checkIpa;</span><br><span class="line">    firPublish 909f3f4743198a622a0540c0685beab7;</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$ShowPlatform</span>&quot;</span> == <span class="string">&quot;<span class="variable">$testflight</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$testflight</span>;</span><br><span class="line">fastlane beta;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;打包结束&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="包检测"><a href="#包检测" class="headerlink" title="包检测"></a>包检测</h3><p>思想：检查ipa包创建时间是否离谱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fileName=<span class="string">&quot;xxx.ipa&quot;</span></span><br><span class="line">filePath=<span class="string">&quot;app/<span class="variable">$fileName</span>&quot;</span></span><br><span class="line">fileCreateTimeInterval=`<span class="built_in">date</span> -r <span class="string">&quot;<span class="variable">$filePath</span>&quot;</span> +%s`</span><br><span class="line">nowTimeInterval=`<span class="built_in">date</span> +%s`</span><br><span class="line">diff=$((<span class="variable">$fileCreateTimeInterval</span>-<span class="variable">$nowTimeInterval</span>))</span><br><span class="line"><span class="keyword">if</span> [ 0 -gt <span class="variable">$diff</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">let</span> diff=0-<span class="variable">$diff</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">limitTimeInterval=1800</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$diff</span> -gt <span class="variable">$limitTimeInterval</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;安装包检测有问题&quot;</span>;</span><br><span class="line">    <span class="built_in">exit</span> 2005</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="提取App信息"><a href="#提取App信息" class="headerlink" title="提取App信息"></a>提取App信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line"><span class="built_in">cd</span> 工程根路径</span><br><span class="line"></span><br><span class="line">appName=<span class="string">&quot;&quot;</span></span><br><span class="line">appVersion=<span class="string">&quot;&quot;</span></span><br><span class="line">appBuild=<span class="string">&quot;&quot;</span></span><br><span class="line">appBundleId=<span class="string">&quot;&quot;</span></span><br><span class="line">platform=<span class="string">&quot;iOS&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">getAppInfo</span></span>()&#123;</span><br><span class="line">basePath=`<span class="built_in">pwd</span>`</span><br><span class="line">ipaFilePath=<span class="string">&quot;<span class="variable">$basePath</span>/ipa包路径&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$ipaFilePath</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;未找到ipa包 <span class="variable">$ipaFilePath</span>&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 2002</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">temIpaDirName=<span class="string">&quot;TempPayload&quot;</span></span><br><span class="line">temIpaDirPath=<span class="string">&quot;<span class="variable">$&#123;basePath&#125;</span>/<span class="variable">$&#123;temIpaDirName&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$temIpaDirPath</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$&#123;temIpaDirPath&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -f <span class="string">&quot;<span class="variable">$ipaFilePath</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    unzip <span class="string">&quot;<span class="variable">$ipaFilePath</span>&quot;</span> -d <span class="string">&quot;<span class="variable">$temIpaDirPath</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"></span><br><span class="line">appDir=<span class="string">&quot;<span class="variable">$temIpaDirPath</span>/Payload/`ls &quot;</span><span class="variable">$temIpaDirPath</span>/<span class="string">&quot;Payload`&quot;</span></span><br><span class="line">lcmInfoPlist=<span class="string">&quot;<span class="variable">$&#123;appDir&#125;</span>/Info.plist&quot;</span></span><br><span class="line"></span><br><span class="line">appName=`/usr/libexec/PlistBuddy -c <span class="string">&quot;Print :CFBundleName&quot;</span> <span class="variable">$lcmInfoPlist</span>`</span><br><span class="line">appVersion=`/usr/libexec/PlistBuddy -c <span class="string">&quot;Print :CFBundleShortVersionString&quot;</span> <span class="variable">$lcmInfoPlist</span>`</span><br><span class="line">appBuild=`/usr/libexec/PlistBuddy -c <span class="string">&quot;Print :CFBundleVersion&quot;</span> <span class="variable">$lcmInfoPlist</span>`</span><br><span class="line">appBundleId=`/usr/libexec/PlistBuddy -c <span class="string">&quot;Print :CFBundleIdentifier&quot;</span> <span class="variable">$lcmInfoPlist</span>`</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$temIpaDirPath</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$&#123;temIpaDirPath&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getAppInfo</span><br></pre></td></tr></table></figure><h3 id="钉钉通知"><a href="#钉钉通知" class="headerlink" title="钉钉通知"></a>钉钉通知</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">offical=<span class="string">&quot;Fir.im-Official&quot;</span></span><br><span class="line">standby=<span class="string">&quot;Fir.im-Standby&quot;</span></span><br><span class="line">testflight=<span class="string">&quot;TestFlight&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ShowPlatform</span>&quot;</span> == <span class="string">&quot;<span class="variable">$testflight</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span> 2001</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#钉钉通知</span></span><br><span class="line">accessToken=<span class="string">&quot;55d47b6501debe7f10afe03805aa4453cc0299a70216124e615c8efecfae776a&quot;</span></span><br><span class="line">iconUrl=<span class="string">&quot;https://cdn.rencheng.cc/blog/zer9s.jpg-thumb100&quot;</span></span><br><span class="line">downloadUrl=<span class="string">&quot;http://fir.renchengqi.com/moegoios&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ShowPlatform</span>&quot;</span> == <span class="string">&quot;<span class="variable">$offical</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">downloadUrl=<span class="string">&quot;http://fir.mocaapp.cn/moego&quot;</span></span><br><span class="line">    accessToken=<span class="string">&quot;0857ef061944b6796861a2a34e75bcfc27db2245037cf5e72b597c59e50d6e2b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;https://oapi.dingtalk.com/robot/send?access_token=<span class="variable">$accessToken</span>&quot;</span></span><br><span class="line">header=<span class="string">&quot;Content-Type: application/json&quot;</span></span><br><span class="line"></span><br><span class="line">title=<span class="string">&quot;<span class="variable">$appName</span>(<span class="variable">$platform</span>)更新&quot;</span></span><br><span class="line">text=<span class="string">&quot;[<span class="variable">$appName</span>(<span class="variable">$platform</span>)更新](<span class="variable">$downloadUrl</span>)\n\n \</span></span><br><span class="line"><span class="string">![<span class="variable">$appName</span>](<span class="variable">$iconUrl</span>)\n\n \</span></span><br><span class="line"><span class="string">链接:[<span class="variable">$downloadUrl</span>](<span class="variable">$downloadUrl</span>)\n\n \</span></span><br><span class="line"><span class="string">版本: <span class="variable">$appVersion</span> (Build: <span class="variable">$appBuild</span>)\n\n \</span></span><br><span class="line"><span class="string">更新内容: <span class="variable">$ReleaseNotes</span>\n&quot;</span></span><br><span class="line"></span><br><span class="line">rawData=<span class="string">&quot;&#123;  \&quot;msgtype\&quot;:\&quot;actionCard\&quot;,  \</span></span><br><span class="line"><span class="string">            \&quot;actionCard\&quot;: &#123; \</span></span><br><span class="line"><span class="string">                \&quot;title\&quot;: \&quot;<span class="variable">$title</span>\&quot;, \</span></span><br><span class="line"><span class="string">                \&quot;text\&quot;: \&quot;<span class="variable">$text</span>\&quot;,  \</span></span><br><span class="line"><span class="string">                \&quot;hideAvatar\&quot;: \&quot;0\&quot;,  \</span></span><br><span class="line"><span class="string">                \&quot;btnOrientation\&quot;: \&quot;0\&quot;,  \</span></span><br><span class="line"><span class="string">                \&quot;singleTitle\&quot;: \&quot;\&quot; \</span></span><br><span class="line"><span class="string">            &#125; \</span></span><br><span class="line"><span class="string">        &#125;&quot;</span></span><br><span class="line"></span><br><span class="line">curl --request POST <span class="string">&quot;<span class="variable">$url</span>&quot;</span> -H <span class="string">&quot;<span class="variable">$header</span>&quot;</span> --data-raw <span class="string">&quot;<span class="variable">$rawData</span>&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis For Python</title>
      <link href="/2018/09/02/redis/inPython/"/>
      <url>/2018/09/02/redis/inPython/</url>
      
        <content type="html"><![CDATA[<p>Redis 在Python中的使用介绍</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install redis-server</span><br><span class="line"><span class="comment"># 确认是否启动</span></span><br><span class="line">ps -aux | grep redis</span><br><span class="line"><span class="comment"># 服务端启动</span></span><br><span class="line"><span class="built_in">sudo</span> /etc/init.d/redis-server status</span><br><span class="line"><span class="built_in">sudo</span> /etc/init.d/redis-server start</span><br><span class="line"><span class="built_in">sudo</span> /etc/init.d/redis-server stop</span><br><span class="line"><span class="built_in">sudo</span> /etc/init.d/redis-server restart</span><br><span class="line"><span class="comment"># 客户端连接</span></span><br><span class="line">redis-cli -h IP地址 -p 端口</span><br><span class="line">redis-cli <span class="comment"># 默认连接本机的6379端口</span></span><br><span class="line">127.0.0.1:6379&gt;ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、下载安装包</span><br><span class="line">   https://github.com/ServiceStack/redis-windows/blob/master/downloads/redis-<span class="number">64.3</span><span class="number">.0</span><span class="number">.503</span>.<span class="built_in">zip</span></span><br><span class="line"><span class="number">2</span>、解压</span><br><span class="line"><span class="number">3</span>、启动服务端</span><br><span class="line">   双击解压后的 redis-server.exe </span><br><span class="line"><span class="number">4</span>、客户端连接</span><br><span class="line">   双击解压后的 redis-cli.exe</span><br></pre></td></tr></table></figure><p><strong>问题：关闭终端后服务终止</strong><br><strong>解决：将Redis服务安装到本地服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、重命名 redis.windows.conf 为 redis.conf,作为redis服务的配置文件</span><br><span class="line">2、cmd命令行，进入到redis-server.exe所在目录</span><br><span class="line">3、执行：redis-server --service-install redis.conf --loglevel verbose</span><br><span class="line">4、计算机-管理-服务-Redis-启动</span><br></pre></td></tr></table></figure><p><strong>卸载</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">到 redis-server.exe 所在路径执行：</span><br><span class="line">1、redis-server --service-uninstall</span><br><span class="line">2、sc delete Redis</span><br></pre></td></tr></table></figure><h1 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h1><h2 id="配置文件所在路径"><a href="#配置文件所在路径" class="headerlink" title="配置文件所在路径"></a>配置文件所在路径</h2><h3 id="Ubuntu-1"><a href="#Ubuntu-1" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/redis/redis.conf</span><br></pre></td></tr></table></figure><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>下载解压后的redis文件夹中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis.windows.conf </span><br><span class="line">redis.conf</span><br></pre></td></tr></table></figure><h2 id="设置连接密码"><a href="#设置连接密码" class="headerlink" title="设置连接密码"></a>设置连接密码</h2><ol><li><p>requirepass 密码</p></li><li><p>重启服务</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/redis-server restart</span><br></pre></td></tr></table></figure></li><li><p>客户端连接</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379 -a 123456</span><br><span class="line">127.0.0.1:6379&gt;ping</span><br></pre></td></tr></table></figure></li></ol><h2 id="允许远程连接"><a href="#允许远程连接" class="headerlink" title="允许远程连接"></a>允许远程连接</h2><ol><li><p>注释掉IP地址绑定</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p>关闭保护模式（默认开始，不允许外部网络访问）</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected-mode no</span><br></pre></td></tr></table></figure></li><li><p>重启redis服务</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/redis-server restart</span><br></pre></td></tr></table></figure></li></ol><h2 id="远程连接测试"><a href="#远程连接测试" class="headerlink" title="远程连接测试"></a>远程连接测试</h2><h3 id="Windows连接Ubuntu的Redis服务"><a href="#Windows连接Ubuntu的Redis服务" class="headerlink" title="Windows连接Ubuntu的Redis服务**"></a>Windows连接Ubuntu的Redis服务**</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmd命令行</span></span><br><span class="line"><span class="number">1</span>、d:</span><br><span class="line"><span class="number">2</span>、cd Redis3<span class="number">.0</span></span><br><span class="line"><span class="number">3</span>、redis-cli -h x.x.x.x -a <span class="number">123456</span></span><br><span class="line"><span class="number">4</span>、x.x.x.x:<span class="number">6379</span>&gt;ping</span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型(string)"></a>字符串类型(string)</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串、数字，都会转为字符串来存储</span><br><span class="line">以二进制的方式存储在内存中</span><br></pre></td></tr></table></figure><h3 id="必须掌握命令"><a href="#必须掌握命令" class="headerlink" title="必须掌握命令"></a>必须掌握命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key value</span><br><span class="line">setnx key value</span><br><span class="line"><span class="built_in">set</span> key value ex seconds</span><br><span class="line">get key</span><br><span class="line">mset key1 value1 key2 value2 </span><br><span class="line">mget key1 key2 key3 </span><br><span class="line">stren key </span><br><span class="line"><span class="comment"># 数字操作</span></span><br><span class="line">incr key</span><br><span class="line">decr key</span><br></pre></td></tr></table></figure><h3 id="扩展命令"><a href="#扩展命令" class="headerlink" title="扩展命令"></a>扩展命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">append key value</span><br><span class="line">setrange key index value</span><br><span class="line">getrange key start stop</span><br><span class="line">incrby key step</span><br><span class="line">decrby key step</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="set-get命令"><a href="#set-get命令" class="headerlink" title="set | get命令"></a>set | get命令</h4><p><strong>作用</strong>:<br>设置键值，获取键对应的值</p><p><strong>命令格式</strong>:<br>set key value<br>get key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tarena@tedu:~$ redis-cli -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">6379</span> -a <span class="number">123456</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name <span class="string">&#x27;Lucy&#x27;</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line"><span class="string">&quot;Lucy&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> number <span class="number">10</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get number</span><br><span class="line"><span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> number <span class="number">6.66</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get number</span><br><span class="line"><span class="string">&quot;6.66&quot;</span></span><br></pre></td></tr></table></figure><h4 id="set命令之-setnx"><a href="#set命令之-setnx" class="headerlink" title="set命令之 - setnx"></a>set命令之 - setnx</h4><p>setnx key value : 键不存在时才能进行设置<strong>（必须掌握）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 键不存在，进行设置（此处name键已经存在）</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; setnx name <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">(nil)</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="set命令之-ex"><a href="#set命令之-ex" class="headerlink" title="set命令之 - ex"></a>set命令之 - ex</h4><p><strong>作用:</strong><br>设置过期时间</p><p><strong>命令格式:</strong><br>set key value ex seconds</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name <span class="string">&#x27;Tiechui&#x27;</span> ex <span class="number">3</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line"><span class="string">&quot;Tiechui&quot;</span></span><br><span class="line"><span class="comment"># 3秒后再次获取，得到 nil</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line">(nil)</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure><h4 id="mset-mget"><a href="#mset-mget" class="headerlink" title="mset | mget"></a>mset | mget</h4><p><strong>作用:</strong><br>同时设置多个值，获取多个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mset name1 <span class="string">&#x27;lucy&#x27;</span> name2 <span class="string">&#x27;tom&#x27;</span> name3 <span class="string">&#x27;jim&#x27;</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mget name1 name2 name3</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;lucy&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;tom&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;jim&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure><p><strong>键的命名规范</strong></p><p>​mset  wang::email  ***@qq.com</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mset wang::email wangweichao@tedu.cn guo::email guods@tedu.cn</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; mget wang::email guo::email</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;wangweichao@tedu.cn&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;guods@tedu.cn&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure><h4 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h4><p><strong>作用:</strong><br>获取值的长度</p><p><strong>命令格式:</strong><br>strlen key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; strlen name</span><br><span class="line">(integer) <span class="number">11</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure><h4 id="字符串索引操作"><a href="#字符串索引操作" class="headerlink" title="字符串索引操作"></a>字符串索引操作</h4><p><strong>setrange</strong><br>key 索引值 value</p><p><strong>作用:</strong><br>从索引值开始，value替换原内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get message</span><br><span class="line"><span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; setrange message <span class="number">6</span> <span class="string">&#x27;tarena&#x27;</span></span><br><span class="line">(integer) <span class="number">12</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get message</span><br><span class="line"><span class="string">&quot;hello tarena&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure><h4 id="getrange-key-起始值-终止值"><a href="#getrange-key-起始值-终止值" class="headerlink" title="getrange key 起始值 终止值"></a>getrange key 起始值 终止值</h4><p><strong>作用:</strong><br>获取指定范围切片内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get message</span><br><span class="line"><span class="string">&quot;hello tarena&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; getrange message <span class="number">0</span> <span class="number">4</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; getrange message <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="string">&quot;hello tarena&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure><h4 id="append-key-value"><a href="#append-key-value" class="headerlink" title="append key value"></a>append key value</h4><p><strong>作用:</strong><br>追加拼接value的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> message <span class="string">&#x27;hello &#x27;</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; append message <span class="string">&#x27;world&#x27;</span></span><br><span class="line">(integer) <span class="number">11</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get message</span><br><span class="line"><span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure><h2 id="整数操作"><a href="#整数操作" class="headerlink" title="整数操作"></a>整数操作</h2><p>INCRBY key 步长</p><p>DECRBY key 步长</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> number <span class="number">10</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get number</span><br><span class="line"><span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; INCRBY number <span class="number">5</span></span><br><span class="line">(integer) <span class="number">15</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get number</span><br><span class="line"><span class="string">&quot;15&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DECRBY number <span class="number">5</span></span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get number</span><br><span class="line"><span class="string">&quot;5&quot;</span></span><br></pre></td></tr></table></figure><p><strong>INCR key : +1操作</strong></p><p><strong>DECR key : -1操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incr number</span><br><span class="line">(integer) <span class="number">7</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; decr number</span><br><span class="line">(integer) <span class="number">6</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get number</span><br><span class="line"><span class="string">&quot;6&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>抖音上有人关注你了，是不是可以用INCR呢，如果取消关注了是不是可以用DECR</p><h2 id="浮点数操作"><a href="#浮点数操作" class="headerlink" title="浮点数操作"></a>浮点数操作</h2><p>incrbyfloat key step</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get number</span><br><span class="line"><span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; INCRBYFLOAT number <span class="number">6.66</span></span><br><span class="line"><span class="string">&quot;12.66&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; INCRBYFLOAT number -<span class="number">6.66</span></span><br><span class="line"><span class="string">&quot;6&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; </span><br><span class="line"><span class="comment"># 先转为数字类型，然后再进行相加减，不能使用append</span></span><br></pre></td></tr></table></figure><h2 id="命令汇总"><a href="#命令汇总" class="headerlink" title="命令汇总"></a>命令汇总</h2><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="built_in">set</span> key value</span><br><span class="line"><span class="number">2</span>、setnx key value</span><br><span class="line"><span class="number">3</span>、get key</span><br><span class="line"><span class="number">3</span>、mset</span><br><span class="line"><span class="number">4</span>、mget</span><br><span class="line"><span class="number">5</span>、<span class="built_in">set</span> key value ex seconds</span><br><span class="line"><span class="number">6</span>、strlen key </span><br></pre></td></tr></table></figure><h3 id="数字操作"><a href="#数字操作" class="headerlink" title="数字操作"></a>数字操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>、incrby key 步长</span><br><span class="line"><span class="number">8</span>、decrby key 步长</span><br><span class="line"><span class="number">9</span>、incr key</span><br><span class="line"><span class="number">10</span>、decr key</span><br><span class="line"><span class="number">11</span>、incrbyfloat key number</span><br></pre></td></tr></table></figure><h3 id="设置过期时间的两种方式"><a href="#设置过期时间的两种方式" class="headerlink" title="设置过期时间的两种方式"></a>设置过期时间的两种方式</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="built_in">set</span> key value ex <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="built_in">set</span> key value</span><br><span class="line"><span class="number">2</span>、expire key <span class="number">5</span> <span class="comment"># 秒</span></span><br><span class="line"><span class="number">3</span>、pexpire key <span class="number">5</span> <span class="comment"># 毫秒</span></span><br></pre></td></tr></table></figure><h3 id="查看存活时间"><a href="#查看存活时间" class="headerlink" title="查看存活时间"></a>查看存活时间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ttl key</span><br></pre></td></tr></table></figure><h3 id="删除过期"><a href="#删除过期" class="headerlink" title="删除过期"></a>删除过期</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">persist key</span><br></pre></td></tr></table></figure><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><ol><li><p>切换库</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select number</span><br></pre></td></tr></table></figure></li><li><p>查看键</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys * </span><br></pre></td></tr></table></figure></li><li><p>键类型</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TYPE key</span><br></pre></td></tr></table></figure></li><li><p>键是否存在</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exists key</span><br></pre></td></tr></table></figure></li><li><p>删除键</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> key</span><br></pre></td></tr></table></figure></li><li><p>键重命名</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename key newkey</span><br></pre></td></tr></table></figure></li><li><p>返回旧值并设置新值（如果键不存在，就创建并赋值）</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getset key value</span><br></pre></td></tr></table></figure></li><li><p>清除当前库中所有数据（慎用）</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flushdb</span><br></pre></td></tr></table></figure></li><li><p>清除所有库中所有数据（慎用）</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flushall</span><br></pre></td></tr></table></figure></li></ol><p><strong>string数据类型注意</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># key值取值原则</span></span><br><span class="line"><span class="number">1</span>、key值不宜过长，消耗内存，且在数据中查找这类键值的计算成本高</span><br><span class="line"><span class="number">2</span>、不宜过短，可读性较差</span><br><span class="line"><span class="comment"># 值</span></span><br><span class="line"><span class="number">1</span>、一个字符串类型的值最多能存储512M内容</span><br></pre></td></tr></table></figure><h3 id="列表数据类型（List）"><a href="#列表数据类型（List）" class="headerlink" title="列表数据类型（List）"></a>列表数据类型（List）</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>元素是字符串类型<br>列表头尾增删快，中间增删慢，增删元素是常态<br>元素可重复<br>最多可包$2^{32} -1$个元素<br>索引同python列表</p><h4 id="头尾压入元素（LPUSH-RPUSH）"><a href="#头尾压入元素（LPUSH-RPUSH）" class="headerlink" title="头尾压入元素（LPUSH | RPUSH）"></a>头尾压入元素（LPUSH | RPUSH）</h4><p>​1、LPUSH key value</p><p>​2、RPUSH key value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPUSH mylist1 <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist1 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; RPUSH mylist2 <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist2 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure><h4 id="查看-设置-列表元素"><a href="#查看-设置-列表元素" class="headerlink" title="查看|设置 列表元素"></a>查看|设置 列表元素</h4><p>  查看（LRANGE)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LRANGE key start stop</span><br><span class="line"><span class="comment"># 查看列表中所有元素</span></span><br><span class="line">LRANGE key <span class="number">0</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><p>  获取指定位置元素（LINDEX）</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LINDEX key index</span><br></pre></td></tr></table></figure><p>  设置指定位置元素的值（LSET）</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LSET key index value</span><br></pre></td></tr></table></figure><p>  获取列表长度（LLEN)</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LLEN key</span><br></pre></td></tr></table></figure><ul><li><p><strong>头尾弹出元素（LPOP |  RPOP）</strong></p><p>LPOP key : 从列表头部弹出一个元素</p><p>RPOP key : 从列表尾部弹出一个元素</p><p>RPOPLPUSH source destination : 从一个列表尾部弹出元素压入到另一个列表头部</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist1 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;8&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPOP mylist1</span><br><span class="line"><span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; RPOP mylist1</span><br><span class="line"><span class="string">&quot;8&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist1 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; RPOPLPUSH mylist1 mylist2</span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist1 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist2 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;2&quot;</span></span><br></pre></td></tr></table></figure><h4 id="移除指定元素（LREM）"><a href="#移除指定元素（LREM）" class="headerlink" title="移除指定元素（LREM）"></a>移除指定元素（LREM）</h4><p>  LREM key count value</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">count&gt;<span class="number">0</span>：表示从头部开始向表尾搜索，移除与value相等的元素，数量为count</span><br><span class="line">count&lt;<span class="number">0</span>：表示从尾部开始向表头搜索，移除与value相等的元素，数量为count</span><br><span class="line">count=<span class="number">0</span>：移除表中所有与value相等的值</span><br></pre></td></tr></table></figure><p>  示例</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist1 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPUSH mylist1 <span class="number">3</span> <span class="number">2</span></span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist1 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LREM mylist1 <span class="number">1</span> <span class="number">2</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist1 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LREM mylist1 <span class="number">1</span> <span class="number">3</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist1 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure><h4 id="去除指定范围外元素（LTRIM）"><a href="#去除指定范围外元素（LTRIM）" class="headerlink" title="去除指定范围外元素（LTRIM）"></a>去除指定范围外元素（LTRIM）</h4><p>  LTRIM key start stop</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist2 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LTRIM mylist2 <span class="number">0</span> -<span class="number">2</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist2 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure><p>  应用场景: 保存微博评论最后500条</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LTRIM user001::comments <span class="number">0</span> <span class="number">499</span></span><br></pre></td></tr></table></figure><h4 id="列表中插入值（LINSERT）"><a href="#列表中插入值（LINSERT）" class="headerlink" title="列表中插入值（LINSERT）"></a>列表中插入值（LINSERT）</h4><p>  LINSERT key BEFORE|AFTER pivot value</p><p>  key和pivot不存在，不进行任何操作</p><p>  示例代码</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist2 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LINSERT mylist2 after <span class="number">2</span> <span class="number">666</span></span><br><span class="line">(integer) <span class="number">6</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LINSERT mylist2 before <span class="number">4</span> <span class="number">888</span></span><br><span class="line">(integer) <span class="number">7</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE mylist2 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;666&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;888&quot;</span></span><br><span class="line"><span class="number">7</span>) <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure><h4 id="阻塞弹出（BLPOP-BRPOP）"><a href="#阻塞弹出（BLPOP-BRPOP）" class="headerlink" title="阻塞弹出（BLPOP | BRPOP）"></a>阻塞弹出（BLPOP | BRPOP）</h4><p>  BLPOP key timeout</p><p>  BRPOP key timeout</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、如果弹出的列表不存在或者为空，就会阻塞</span><br><span class="line"><span class="number">2</span>、超时时间设置为<span class="number">0</span>，就是永久阻塞，直到有数据可以弹出</span><br><span class="line"><span class="number">3</span>、如果多个客户端阻塞再同一个列表上，使用First In First Service原则，先到先服务</span><br></pre></td></tr></table></figure><p>  示例</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; BLPOP mylist2 <span class="number">0</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;mylist2&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; BLPOP mylist2 <span class="number">0</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;mylist2&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; BLPOP mylist2 <span class="number">0</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;mylist2&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; BLPOP mylist2 <span class="number">0</span></span><br><span class="line"><span class="comment"># 阻塞了</span></span><br></pre></td></tr></table></figure><p><strong>列表常用命令总结</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增</span></span><br><span class="line">LPUSH key value1 value2 </span><br><span class="line">RPUSH key value1 value2</span><br><span class="line">RPOPLPUSH source destination</span><br><span class="line">LINSERT key after|before value newvalue</span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">LRANGE key start stop</span><br><span class="line">LLEN key</span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">LPOP key</span><br><span class="line">RPOP key</span><br><span class="line">BLPOP key timeout</span><br><span class="line">BRPOP key timeout</span><br><span class="line">LREM key count value</span><br><span class="line">LTRIM key start stop</span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">LSET key index newvalue</span><br></pre></td></tr></table></figure><h1 id="与python交互"><a href="#与python交互" class="headerlink" title="与python交互"></a>与python交互</h1><ul><li>模块</li></ul><p>Ubuntu</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install redis</span><br></pre></td></tr></table></figure><p>Windows</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install redis</span><br></pre></td></tr></table></figure><ul><li>使用流程</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="comment"># 创建数据库连接对象</span></span><br><span class="line">r = redis.Redis(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">6379</span>,db=<span class="number">0</span>,password=<span class="string">&#x27;123456&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>通用命令代码示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接对象</span></span><br><span class="line">r = redis.Redis(host=<span class="string">&#x27;192.168.43.49&#x27;</span>,port=<span class="number">6379</span>,db=<span class="number">0</span>,password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="comment"># [b&#x27;key1&#x27;,b&#x27;key2&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(r.keys(<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"><span class="comment"># 键类型：string</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&#x27;spider::urls&#x27;</span>))</span><br><span class="line"><span class="comment"># 是否存在：1 或者 0</span></span><br><span class="line"><span class="built_in">print</span>(r.exists(<span class="string">&#x27;spider::urls&#x27;</span>))</span><br><span class="line"><span class="comment"># 删除key：spider::urls</span></span><br><span class="line">r.delete(<span class="string">&#x27;spider::urls&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>字符串命令代码示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">r = redis.Redis(host=<span class="string">&#x27;192.168.43.49&#x27;</span>,port=<span class="number">6379</span>,db=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">r.<span class="built_in">set</span>(<span class="string">&#x27;mystring&#x27;</span>,<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="comment"># b&#x27;python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(r.get(<span class="string">&#x27;mystring&#x27;</span>))</span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(r.setnx(<span class="string">&#x27;mystring&#x27;</span>,<span class="string">&#x27;socket&#x27;</span>))</span><br><span class="line"><span class="comment"># mset：参数为字典</span></span><br><span class="line">r.mset(&#123;<span class="string">&#x27;mystring2&#x27;</span>:<span class="string">&#x27;mysql&#x27;</span>,<span class="string">&#x27;mystring3&#x27;</span>:<span class="string">&#x27;mongodb&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># mget：结果为一个列表</span></span><br><span class="line"><span class="built_in">print</span>(r.mget(<span class="string">&#x27;mystring&#x27;</span>,<span class="string">&#x27;mystring2&#x27;</span>,<span class="string">&#x27;mystring3&#x27;</span>))</span><br><span class="line"><span class="comment"># mystring长度：6</span></span><br><span class="line"><span class="built_in">print</span>(r.strlen(<span class="string">&#x27;mystring&#x27;</span>))</span><br><span class="line"><span class="comment"># 数字类型操作</span></span><br><span class="line">r.<span class="built_in">set</span>(<span class="string">&#x27;number&#x27;</span>,<span class="number">10</span>)</span><br><span class="line">r.incrby(<span class="string">&#x27;number&#x27;</span>,<span class="number">5</span>)</span><br><span class="line">r.decrby(<span class="string">&#x27;number&#x27;</span>,<span class="number">5</span>)</span><br><span class="line">r.incr(<span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">r.decr(<span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">r.incrbyfloat(<span class="string">&#x27;number&#x27;</span>,<span class="number">6.66</span>)</span><br><span class="line">r.incrbyfloat(<span class="string">&#x27;number&#x27;</span>,-<span class="number">6.66</span>)</span><br><span class="line"><span class="comment"># b&#x27;10&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(r.get(<span class="string">&#x27;number&#x27;</span>))</span><br></pre></td></tr></table></figure><p><strong>python操作list</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">r = redis.Redis(host=<span class="string">&#x27;192.168.43.49&#x27;</span>,port=<span class="number">6379</span>,db=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># [&#x27;mysql&#x27;,&#x27;redis&#x27;]</span></span><br><span class="line">r.lpush(<span class="string">&#x27;pylist&#x27;</span>,<span class="string">&#x27;redis&#x27;</span>,<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="comment"># [&#x27;mysql&#x27;,&#x27;redis&#x27;,&#x27;django&#x27;,&#x27;spider&#x27;]</span></span><br><span class="line">r.rpush(<span class="string">&#x27;pylist&#x27;</span>,<span class="string">&#x27;django&#x27;</span>,<span class="string">&#x27;spider&#x27;</span>)</span><br><span class="line"><span class="comment"># [&#x27;mysql&#x27;,&#x27;redis&#x27;,&#x27;django&#x27;,&#x27;spider&#x27;,&#x27;AI&#x27;]</span></span><br><span class="line">r.linsert(<span class="string">&#x27;pylist&#x27;</span>,<span class="string">&#x27;after&#x27;</span>,<span class="string">&#x27;spider&#x27;</span>,<span class="string">&#x27;AI&#x27;</span>)</span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(r.llen(<span class="string">&#x27;pylist&#x27;</span>))</span><br><span class="line"><span class="comment"># [&#x27;redis&#x27;,&#x27;django&#x27;,&#x27;spider&#x27;]</span></span><br><span class="line">r.lpop(<span class="string">&#x27;pylist&#x27;</span>)</span><br><span class="line">r.rpop(<span class="string">&#x27;pylist&#x27;</span>)</span><br><span class="line"><span class="comment"># [&#x27;redis&#x27;,&#x27;django&#x27;,&#x27;spider&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(r.lrange(<span class="string">&#x27;pylist&#x27;</span>,<span class="number">0</span>,-<span class="number">1</span>))</span><br><span class="line"><span class="comment"># [&#x27;redis&#x27;,&#x27;spider&#x27;]</span></span><br><span class="line">r.lrem(<span class="string">&#x27;pylist&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;django&#x27;</span>)</span><br><span class="line"><span class="comment"># 返回True，[&#x27;redis&#x27;]</span></span><br><span class="line">r.ltrim(<span class="string">&#x27;pylist&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 返回True，[&#x27;spiderman&#x27;]</span></span><br><span class="line">r.lset(<span class="string">&#x27;pylist&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;spiderman&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.delete(<span class="string">&#x27;pylist&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>位图操作bitmap（重要）</strong></p><p>位图不是真正的数据类型，它是定义在字符串类型中<br>一个字符串类型的值最多能存储512M字节的内容，位上限：2^32</p><p><strong>强势点</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以实时的进行统计，极其节省空间。官方在模拟<span class="number">1</span>亿<span class="number">2</span>千<span class="number">8</span>百万用户的模拟环境下，在一台MacBookPro上，典型的统计如“日用户数”的时间消耗小于50ms, 占用16MB内存</span><br></pre></td></tr></table></figure><p><strong>设置某一位上的值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setbit key offset value</span><br><span class="line"><span class="comment"># offset是偏移量，从0开始</span></span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认扩展位以0填充</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> mykey ab</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get mykey</span><br><span class="line"><span class="string">&quot;ab&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SETBIT mykey <span class="number">0</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get mykey</span><br><span class="line"><span class="string">&quot;\xe1b&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure><p><strong>获取某一位上的值</strong></p><p>GETBIT key offset</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; GETBIT mykey <span class="number">3</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; GETBIT mykey <span class="number">0</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure><p><strong>bitcount</strong></p><p>统计键所对应的值中有多少个 1 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SETBIT user001 <span class="number">1</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SETBIT user001 <span class="number">30</span> <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; bitcount user001</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure><p><strong>应用场景案例</strong></p><p>网站用户的上线次数统计（寻找活跃用户）</p><p>用户名为key，上线的天作为offset，上线设置为1</p><p>示例: 用户名为 user001 的用户，今年第1天上线，第30天上线</p><p>SETBIT user001 1 1 </p><p>SETBIT user001 30 1</p><p>BITCOUNT user001</p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">r = redis.Redis(host=<span class="string">&#x27;192.168.43.49&#x27;</span>,port=<span class="number">6379</span>,db=<span class="number">2</span>,password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># user1，一年之中第1天和第5天登录</span></span><br><span class="line">r.setbit(<span class="string">&#x27;user001&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">r.setbit(<span class="string">&#x27;user001&#x27;</span>,<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># user2，一年之中第100天和第200天登录</span></span><br><span class="line">r.setbit(<span class="string">&#x27;user002&#x27;</span>,<span class="number">100</span>,<span class="number">1</span>)</span><br><span class="line">r.setbit(<span class="string">&#x27;user002&#x27;</span>,<span class="number">200</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># user3，一年之中好多天登录</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">365</span>,<span class="number">2</span>):</span><br><span class="line">    r.setbit(<span class="string">&#x27;user003&#x27;</span>,i,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># user4，一年之中好多天登录</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">365</span>,<span class="number">3</span>):</span><br><span class="line">    r.setbit(<span class="string">&#x27;user004&#x27;</span>,i,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">user_list = r.keys(<span class="string">&#x27;user*&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(user_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 活跃用户</span></span><br><span class="line">active_users = []</span><br><span class="line"><span class="comment"># 不活跃用户</span></span><br><span class="line">noactive_user = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> user_list:</span><br><span class="line">    <span class="comment"># 统计位图中有多少个 1</span></span><br><span class="line">    login_count = r.bitcount(user)</span><br><span class="line">    <span class="keyword">if</span> login_count &gt;= <span class="number">100</span>:</span><br><span class="line">       active_users.append((user,login_count))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      noactive_user.append((user,login_count))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印活跃用户</span></span><br><span class="line"><span class="keyword">for</span> active <span class="keyword">in</span> active_users:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;活跃用户:&#x27;</span>,active)</span><br></pre></td></tr></table></figure><p><strong>list案例: 一个进程负责生产url，一个进程负责消费url</strong></p><p>进程1: 生产者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">urls_list = [</span><br><span class="line">    <span class="string">&#x27;01_baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;02_sina.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;03_taobao.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;04_tmall.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;05_jd.com&#x27;</span></span><br><span class="line">]</span><br><span class="line">r = redis.Redis(host=<span class="string">&#x27;192.168.43.49&#x27;</span>,db=<span class="number">0</span>,password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    url = random.choice(urls_list)</span><br><span class="line">    r.lpush(<span class="string">&#x27;spider::urls&#x27;</span>,url)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>进程2: 消费者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">r = redis.Redis(host=<span class="string">&#x27;192.168.43.49&#x27;</span>,db=<span class="number">0</span>,password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 结果为元组</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = r.blpop(<span class="string">&#x27;spider::urls&#x27;</span>,<span class="number">3</span>)</span><br><span class="line">        <span class="built_in">print</span>(url[<span class="number">1</span>])</span><br><span class="line">        r.lrem(<span class="string">&#x27;spider::urls&#x27;</span>,count=<span class="number">0</span>,value=url[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;爬取结束&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.rencheng.cc/blog/o2xzb.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis简述</title>
      <link href="/2018/09/02/redis/%E7%AE%80%E8%BF%B0/"/>
      <url>/2018/09/02/redis/%E7%AE%80%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库,非关系型数据库。</p><span id="more"></span><h1 id="Redis介绍"><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h1><h2 id="特点及优点"><a href="#特点及优点" class="headerlink" title="特点及优点"></a>特点及优点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开源的，使用C编写，基于内存且支持持久化</span><br><span class="line">高性能的Key-Value的NoSQL数据库</span><br><span class="line">支持数据类型丰富，字符串strings，散列hashes，列表lists，集合sets，有序集合sorted sets 等</span><br><span class="line">支持多种编程语言（C C++ Python Java PHP ... ）</span><br></pre></td></tr></table></figure><h2 id="与其他数据库对比"><a href="#与其他数据库对比" class="headerlink" title="与其他数据库对比"></a>与其他数据库对比</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MySQL : 关系型数据库，表格，基于磁盘，慢</span><br><span class="line">MongoDB：键值对文档型数据库，值为JSON文档，基于磁盘，慢，存储数据类型单一</span><br><span class="line">Redis的诞生是为了解决什么问题？？</span><br><span class="line"># 解决硬盘IO带来的性能瓶颈</span><br></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用Redis来缓存一些经常被用到、或者需要耗费大量资源的内容，通过这些内容放到redis里面，程序可以快速读取这些内容</span><br><span class="line">一个网站，如果某个页面经常会被访问到，或者创建页面时消耗的资源比较多，比如需要多次访问数据库、生成时间比较长等，我们可以使用redis将这个页面缓存起来，减轻网站负担，降低网站的延迟，比如说网站首页等</span><br><span class="line">比如新浪微博</span><br><span class="line"># 新浪微博，基于TB级的内存数据库</span><br><span class="line"># 内容 ：存储在MySQL数据库</span><br><span class="line"># 关系 ：存储在redis数据库</span><br><span class="line"># 数字 ：粉丝数量，关注数量，存储在redis数据库</span><br><span class="line"># 消息队列</span><br></pre></td></tr></table></figure><h2 id="数据库排名"><a href="#数据库排名" class="headerlink" title="数据库排名"></a>数据库排名</h2><p><img src="https://cdn.rencheng.cc/blog/m31ql.png"></p><h2 id="redis版本"><a href="#redis版本" class="headerlink" title="redis版本"></a>redis版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">最新版本：5.0</span><br><span class="line">常用版本：2.4、2.6、2.8</span><br><span class="line">3.0（里程碑）、3.2、3.4、4.0、5.0</span><br><span class="line">图形界面管理工具(写的一般)</span><br><span class="line">RedisDesktopManager</span><br><span class="line">为了解决负载问题，所以发明了redis</span><br></pre></td></tr></table></figure><h2 id="诞生历程"><a href="#诞生历程" class="headerlink" title="诞生历程"></a>诞生历程</h2><ol><li><p>历史<br> LLOOGG.com 帮助别的网站统计用户信息，各个网站发送的浏览记录都会存储到存储队列，5-10000条记录，多余5条需要收费</p></li><li><p>原理<br> FIFO机制，先进先出，满了进一条就出一条，网站越多，队列越多，推入和弹出操作越多</p></li><li><p>技术及问题<br> 开始使用MySQL进行硬盘读写，速度很慢，导致无法实时显示，所以自己写了一个列表结构的内存数据库，程序性能不会受到硬盘IO的限制，加了持久化的功能</p></li><li><p>redis数据库戛然而生</p></li></ol><h2 id="Redis附加功能"><a href="#Redis附加功能" class="headerlink" title="Redis附加功能"></a>Redis附加功能</h2><ol><li>持久化<br> 将内存中数据保存到磁盘中，保证数据安全，方便进行数据备份和恢复</li><li>发布与订阅功能<br> 将消息同时分发给多个客户端，用于构建广播系统</li><li>过期键功能<br> 为键设置一个过期时间，让它在指定时间内自动删除<br> &lt;节省内存空间&gt;<br> <code>音乐播放器，日播放排名，过期自动删除</code></li><li>事务功能<br> 原子的执行多个操作</li><li>主从复制</li><li>Sentinel哨兵</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫-Scrapy框架</title>
      <link href="/2018/08/30/crawler/Scrapy%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/08/30/crawler/Scrapy%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>Scrapy 是 Python 领域专业的爬虫开发框架，已经完成爬虫程序的大部分通用工具，因此 Scrapy 开发爬虫项目既简单又方便。</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>异步处理框架，可配置和可扩展程度非常高，Python中使用最广泛的爬虫框架</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><h4 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h4><ol><li><p>安装依赖库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install python-dev build-essential libssl-dev libffi-dev liblxml2 libxml2-dev libxslt1-dev zlib1g-dev</span><br></pre></td></tr></table></figure></li><li><p>升级pyasn1模块（可选）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pip3 install pyasn1==0.4.4</span><br></pre></td></tr></table></figure></li><li><p>安装Scrapy</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install Scrapy</span><br></pre></td></tr></table></figure></li><li><p>验证安装完成</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy version</span><br></pre></td></tr></table></figure></li></ol><h4 id="conda方式"><a href="#conda方式" class="headerlink" title="conda方式"></a>conda方式</h4><p>见下面的Windows安装方式</p><h3 id="Windows-Or-Mac"><a href="#Windows-Or-Mac" class="headerlink" title="Windows Or Mac"></a>Windows Or Mac</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install Scrapy</span><br></pre></td></tr></table></figure><h2 id="框架的组成"><a href="#框架的组成" class="headerlink" title="框架的组成"></a>框架的组成</h2><table><thead><tr><th align="center">组件</th><th align="center">英文名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">引擎</td><td align="center">Engine</td><td align="center">整个框架的核心</td></tr><tr><td align="center">调度器</td><td align="center">Scheduler</td><td align="center">接收从引擎发过来的URL，入队列</td></tr><tr><td align="center">下载器</td><td align="center">Downloader</td><td align="center">下载网页源码，返回爬虫程序</td></tr><tr><td align="center">项目管道</td><td align="center">Item Pipeline</td><td align="center">数据处理</td></tr><tr><td align="center">下载器中间件</td><td align="center">Downloader Middlewares</td><td align="center">处理引擎与下载器直接按的请求和响应</td></tr><tr><td align="center">蜘蛛中间件</td><td align="center">Spider Middlewares</td><td align="center">处理爬虫程序和输入的响应和输出结果以及新的请求</td></tr><tr><td align="center">Item</td><td align="center"></td><td align="center">定义爬取结果的数据结构，爬取的数据会被数值为Item对象</td></tr></tbody></table><h2 id="爬取流程"><a href="#爬取流程" class="headerlink" title="爬取流程"></a>爬取流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant 爬虫程序</span><br><span class="line">    participant 引擎</span><br><span class="line">    participant 调度器</span><br><span class="line">    participant 下载器</span><br><span class="line">    participant 管道文件</span><br><span class="line">    爬虫程序-&gt;&gt;引擎: 发送Urls</span><br><span class="line">    引擎-&gt;&gt;调度器: Urls入队列</span><br><span class="line">    loop 多线程任务</span><br><span class="line">        调度器--&gt;&gt;引擎: Url</span><br><span class="line">        引擎-&gt;&gt;下载器: Url（经过下载器中间件）</span><br><span class="line">        下载器-&gt;&gt;下载器: 网络请求</span><br><span class="line">        下载器--&gt;&gt;引擎: reponse</span><br><span class="line">        引擎--&gt;&gt;爬虫程序: response（经过蜘蛛中间件）</span><br><span class="line">        爬虫程序-&gt;&gt;爬虫程序: xpath解析</span><br><span class="line">        爬虫程序-&gt;&gt;引擎: 解析后的数据+(新的Url)</span><br><span class="line">        引擎-&gt;&gt;管道文件: 解析后的数据</span><br><span class="line">        管道文件-&gt;&gt;管道文件: 持久化</span><br><span class="line">        引擎-&gt;&gt;调度器: 新的Urls进队列</span><br><span class="line">         end</span><br></pre></td></tr></table></figure><h2 id="制作Scrapy爬虫项目的步骤"><a href="#制作Scrapy爬虫项目的步骤" class="headerlink" title="制作Scrapy爬虫项目的步骤"></a>制作Scrapy爬虫项目的步骤</h2><ol><li><p>新建项目</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject Lianjia</span><br></pre></td></tr></table></figure></li><li><p>明确目标（item.py）</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class LianjiaItem(scrapy.Item):</span><br><span class="line">    houseName = scrapy.Field()</span><br><span class="line">    housePrice = scrapy.Field()</span><br></pre></td></tr></table></figure></li><li><p>制作爬虫程序</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd Lianjia</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject LianjiaSpider lianjia.com</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class LianjiaSpider(scrapy.Spider):</span><br><span class="line">    # 爬虫名</span><br><span class="line">    name = &#x27;lianjia&#x27;</span><br><span class="line">    # 允许域</span><br><span class="line">    allowed_domains = [&#x27;lianjia.com&#x27;]</span><br><span class="line">    # 起始URL</span><br><span class="line">    start_urls = [&#x27;&#x27;]</span><br><span class="line"></span><br><span class="line">def parse(self,response):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></li><li><p>处理数据pipeline</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LianjiaPipeline</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self,item,spider</span>):</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></li><li><p>配置setting.py<br> 下面专门提到</p></li><li><p>运行爬虫项目</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl 蜘蛛名</span><br></pre></td></tr></table></figure></li></ol><h2 id="项目目录文件详解"><a href="#项目目录文件详解" class="headerlink" title="项目目录文件详解"></a>项目目录文件详解</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── <span class="built_in">test</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── items.py        <span class="comment"># 定义爬取数据的结构</span></span><br><span class="line">│   ├── middlewares.py  <span class="comment"># 下载器中间件和蜘蛛中间件的实现</span></span><br><span class="line">│   ├── pipelines.py    <span class="comment"># 管道文件，处理数据</span></span><br><span class="line">│   ├── settings.py     <span class="comment"># 项目全局配置</span></span><br><span class="line">│   └── spiders     <span class="comment"># 存放爬虫程序的目录</span></span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── test_spider.py  <span class="comment"># 爬虫</span></span><br><span class="line">└── scrapy.cfg      <span class="comment"># 项目基本配置文件，不用改</span></span><br></pre></td></tr></table></figure><h2 id="settings-py-详解"><a href="#settings-py-详解" class="headerlink" title="settings.py 详解"></a>settings.py 详解</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目名称</span></span><br><span class="line"><span class="string">BOT_NAME</span> <span class="string">=</span> <span class="string">&#x27;moca&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬虫程序（蜘蛛）的位置</span></span><br><span class="line"><span class="string">SPIDER_MODULES</span> <span class="string">=</span> [<span class="string">&#x27;moca.spiders&#x27;</span>]</span><br><span class="line"><span class="string">NEWSPIDER_MODULE</span> <span class="string">=</span> <span class="string">&#x27;moca.spiders&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># robots协议开关；一般都写False</span></span><br><span class="line"><span class="string">ROBOTSTXT_OBEY</span> <span class="string">=</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置最大并发量；默认16个</span></span><br><span class="line"><span class="string">CONCURRENT_REQUESTS</span> <span class="string">=</span> <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载延迟时间，控制速度；默认3s</span></span><br><span class="line"><span class="string">DOWNLOAD_DELAY</span> <span class="string">=</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cookie；默认开启 &gt; 如果写成False，就不会验证FormRequest里面的cookie，会走下面DEFAULT_REQUEST_HEADERS里面的cookie</span></span><br><span class="line"><span class="string">COOKIES_ENABLED</span> <span class="string">=</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志等级 默认DEBUG</span></span><br><span class="line"><span class="comment"># CRITICAL - 严重错误(critical)</span></span><br><span class="line"><span class="comment"># ERROR - 一般错误(regular errors)</span></span><br><span class="line"><span class="comment"># WARNING - 警告信息(warning messages)</span></span><br><span class="line"><span class="comment"># INFO - 一般信息(informational messages)</span></span><br><span class="line"><span class="comment"># DEBUG - 调试信息(debugging messages)</span></span><br><span class="line"><span class="string">LOG_LEVEL</span> <span class="string">=</span> <span class="string">&#x27;WARNING&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认网络请求的请求头</span></span><br><span class="line"><span class="string">DEFAULT_REQUEST_HEADERS</span> <span class="string">=</span> &#123;</span><br><span class="line">   <span class="attr">&#x27;Accept&#x27;:</span> <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,</span><br><span class="line">   <span class="attr">&#x27;Accept-Language&#x27;:</span> <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">   <span class="attr">&#x27;User-Agent&#x27;:</span> <span class="string">&#x27;Mozilia/5.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 蜘蛛中间件</span></span><br><span class="line"><span class="string">SPIDER_MIDDLEWARES</span> <span class="string">=</span> &#123;</span><br><span class="line">    <span class="attr">&#x27;moca.middlewares.MocaSpiderMiddleware&#x27;:</span> <span class="number">543</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载器中间件</span></span><br><span class="line"><span class="string">DOWNLOADER_MIDDLEWARES</span> <span class="string">=</span> &#123;</span><br><span class="line">    <span class="attr">&#x27;moca.middlewares.MocaDownloaderMiddleware&#x27;:</span> <span class="number">543</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 管道文件；处理数据；后面数字是优先级，数字越小，优先级越高</span></span><br><span class="line"><span class="string">ITEM_PIPELINES</span> <span class="string">=</span> &#123;</span><br><span class="line">    <span class="attr">&#x27;moca.pipelines.MocaPipeline&#x27;:</span> <span class="number">300</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="PyCharm运行Scrapy"><a href="#PyCharm运行Scrapy" class="headerlink" title="PyCharm运行Scrapy"></a>PyCharm运行Scrapy</h2><ol><li><p>创建启动脚本<br> 创建一个名字为<code>run</code>的py文件 和 <code>scrapy.cfg</code>同目录</p></li><li><p>编辑脚本</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line">cmdline.execute(<span class="string">&quot;scrapy crawl LianjiSpider&quot;</span>.split())</span><br></pre></td></tr></table></figure></li><li><p>PyCharm配置<br> Run -&gt; Editconfigurations -&gt; + -&gt; python<br> name:spider<br> Script:选择刚才的Run脚本<br> working directory: 改为项目路径</p></li><li><p>打开<code>Run.py</code>, 右键运行</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫-Selenium</title>
      <link href="/2018/08/27/crawler/Selenium/"/>
      <url>/2018/08/27/crawler/Selenium/</url>
      
        <content type="html"><![CDATA[<p>Selenium+Browser强大的组合拳去攻破反爬机制;<br>Selenium是自动化测试的主流框架<br>Selenium-IDE可以实现QTP的操作</p><span id="more"></span><h2 id="Browser-Driver"><a href="#Browser-Driver" class="headerlink" title="Browser Driver"></a>Browser Driver</h2><p>浏览器的驱动程序，用于驱动浏览器响应程序代码<br>驱动下载</p><ul><li><a href="http://chromedriver.chromium.org/downloads">谷歌 - googledriver</a></li><li><a href="https://github.com/mozilla/geckodriver/releases">火狐 - geckodriver</a></li></ul><blockquote><p>Safari - 不需要装驱动，只需要在菜单栏中<code>开发</code>选项中打开<code>允许远程自动化</code>即可。</p></blockquote><h3 id="phantomjs"><a href="#phantomjs" class="headerlink" title="phantomjs"></a><del><a href="http://phantomjs.org/">phantomjs</a></del></h3><ol><li><del>定义 ：无界面浏览器(无头浏览器)</del></li><li><del>特点</del></li></ol><ul><li><del>把网站加载到内存执行，运行高效</del>0</li></ul><blockquote><p>Phantomjs 已经被<code>Selenium</code>废弃。请使用无头浏览器替代，详见下面的<a href="###chromedriver%E8%AE%BE%E7%BD%AE%E6%97%A0%E7%95%8C%E9%9D%A2%E6%A8%A1%E5%BC%8F">chromedriver 设置无界面模式</a><br>Selenium support for PhantomJS has been deprecated, please use headless </p></blockquote><h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a><a href="http://www.seleniumhq.org/">Selenium</a></h2><ol><li>定义 ：Web自动化测试工具,应用于Web自动化测试</li><li>特点<ol><li>根据指定命令操作浏览器,让浏览器自动加载页面</li><li>只是工具,不支持浏览器功能,只能与第三方浏览器结合使用</li></ol></li><li>安装 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Windows cmd ：python -m pip install selenium</span><br><span class="line">Anconda prompt : conda install selenium</span><br><span class="line">Ubuntu : sudo pip3 install selenium</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="浏览器对象-browser-方法"><a href="#浏览器对象-browser-方法" class="headerlink" title="浏览器对象(browser)方法"></a>浏览器对象(browser)方法</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment"># 访问网站</span></span><br><span class="line">browser.get(url)</span><br><span class="line"><span class="comment"># 查看响应内容</span></span><br><span class="line">browser.page_source </span><br><span class="line"><span class="comment"># 从html源码中搜索指定字符串,没有找到返回：-1</span></span><br><span class="line">browser.page_source.find(<span class="string">&#x27;字符串&#x27;</span>)</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><h3 id="定位节点"><a href="#定位节点" class="headerlink" title="定位节点"></a>定位节点</h3><h4 id="单元素查找-1个节点对象"><a href="#单元素查找-1个节点对象" class="headerlink" title="单元素查找(1个节点对象)"></a>单元素查找(1个节点对象)</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">browser.find_element_by_id(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">browser.find_element_by_name(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">browser.find_element_by_class_name(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">browser.find_element_by_xpath(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="多元素查找-节点对象列表"><a href="#多元素查找-节点对象列表" class="headerlink" title="多元素查找([节点对象列表])"></a>多元素查找([节点对象列表])</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">browser.find_elements_by_id(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">browser.find_elements_by_name(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">browser.find_elements_by_class_name(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">browser.find_elements_by_xpath(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="节点对象操作"><a href="#节点对象操作" class="headerlink" title="节点对象操作"></a>节点对象操作</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索框发送内容</span></span><br><span class="line">ele.send_keys(<span class="string">&#x27;&#x27;</span>) </span><br><span class="line"><span class="comment"># 模拟点击</span></span><br><span class="line">ele.click()</span><br><span class="line"><span class="comment"># 获取文本内容</span></span><br><span class="line">ele.text          </span><br><span class="line"><span class="comment"># 获取属性值</span></span><br><span class="line">ele.get_attribute(<span class="string">&#x27;src&#x27;</span>) </span><br></pre></td></tr></table></figure><h3 id="输入设备操作"><a href="#输入设备操作" class="headerlink" title="输入设备操作"></a>输入设备操作</h3><h4 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;http://www.baidu.com/&#x27;</span>)</span><br><span class="line"><span class="comment"># 1、在搜索框中输入&quot;selenium&quot;</span></span><br><span class="line">browser.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;selenium&#x27;</span>)</span><br><span class="line"><span class="comment"># 2、输入空格</span></span><br><span class="line">browser.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(Keys.SPACE)</span><br><span class="line"><span class="comment"># 3、Ctrl+a 模拟全选</span></span><br><span class="line">browser.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(Keys.CONTROL, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># 4、Ctrl+c 模拟复制</span></span><br><span class="line">browser.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(Keys.CONTROL, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment"># 5、Ctrl+v 模拟粘贴</span></span><br><span class="line">browser.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(Keys.CONTROL, <span class="string">&#x27;v&#x27;</span>)</span><br><span class="line"><span class="comment"># 6、输入回车,代替 搜索 按钮</span></span><br><span class="line">browser.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(Keys.ENTER)</span><br></pre></td></tr></table></figure><h4 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入鼠标事件类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;http://www.baidu.com/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到设置节点</span></span><br><span class="line">element = browser.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;u1&quot;]/a[8]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把鼠标移动到 设置 节点,move_to_element()</span></span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.move_to_element(element)</span><br><span class="line">actions.perform()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到高级设置节点,并点击</span></span><br><span class="line">browser.find_element_by_link_text(<span class="string">&#x27;高级搜索&#x27;</span>).click()</span><br></pre></td></tr></table></figure><h3 id="chromedriver设置无界面模式"><a href="#chromedriver设置无界面模式" class="headerlink" title="chromedriver设置无界面模式"></a>chromedriver设置无界面模式</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment"># 添加无界面参数</span></span><br><span class="line">options.headless = <span class="literal">True</span></span><br><span class="line">browser = webdriver.Chrome(options=options)</span><br><span class="line">browser.get(<span class="string">&#x27;http://www.baidu.com/&#x27;</span>)</span><br><span class="line">browser.save_screenshot(<span class="string">&#x27;baidu.png&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="简易效果展示"><a href="#简易效果展示" class="headerlink" title="简易效果展示"></a>简易效果展示</h3><p><strong>使用 <code>Selenium</code> + <code>浏览器</code> ; 打开百度搜索<code>Python</code></strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;http://www.baidu.com/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向搜索框(id kw)输入 Python</span></span><br><span class="line">ele = browser.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>)</span><br><span class="line">ele.send_keys(<span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 点击 百度一下 按钮(id su)</span></span><br><span class="line">su = browser.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;su&quot;]&#x27;</span>)</span><br><span class="line">su.click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 截图</span></span><br><span class="line">browser.save_screenshot(<span class="string">&#x27;Python.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫-工具集</title>
      <link href="/2018/08/26/crawler/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
      <url>/2018/08/26/crawler/%E5%B7%A5%E5%85%B7%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>实现爬虫的敏捷开发</p><span id="more"></span><h2 id="Chrome插件"><a href="#Chrome插件" class="headerlink" title="Chrome插件"></a>Chrome插件</h2><table><thead><tr><th>名称</th><th>描述</th><th>下载地址</th></tr></thead><tbody><tr><td>xpath Helper</td><td>网页解析的快捷工具</td><td><a href="https://object.rencheng.cc/software/chrome/XPath%20Helper%EF%BC%9Achrome%E7%88%AC%E8%99%AB%E7%BD%91%E9%A1%B5%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7.crx">博主</a></td></tr><tr><td>JSONView</td><td>网页获取json的格式化工具</td><td><a href="https://object.rencheng.cc/software/chrome/JSONView%EF%BC%9Aweb%E5%BC%80%E5%8F%91%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%92%8C%E9%AB%98%E4%BA%AE%E6%8F%92%E4%BB%B6.crx">博主</a></td></tr><tr><td>Proxy-SwitchyOmega</td><td>浏览器加代理</td><td><a href="https://object.rencheng.cc/software/chrome/Proxy-SwitchyOmega-Chromium-2.5.15.crx">博主</a></td></tr></tbody></table><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><table><thead><tr><th>名称</th><th>描述</th><th>下载地址</th></tr></thead><tbody><tr><td>XMLQuire</td><td>XPath表达式工具</td><td><a href="https://object.rencheng.cc/software/windows/XMLQuire.zip">博主</a></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫常见问题汇总</title>
      <link href="/2018/08/18/crawler/%E7%88%AC%E8%99%AB%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2018/08/18/crawler/%E7%88%AC%E8%99%AB%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>汇总一下，爬虫常见的问题（坑）；</p><span id="more"></span><h2 id="requests请求中文乱码"><a href="#requests请求中文乱码" class="headerlink" title="requests请求中文乱码"></a>requests请求中文乱码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">req = requests.get(<span class="string">&quot;http://news.sina.com.cn/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> req.encoding == <span class="string">&#x27;ISO-8859-1&#x27;</span>:</span><br><span class="line">    encodings = requests.utils.get_encodings_from_content(req.text)</span><br><span class="line">    <span class="keyword">if</span> encodings:</span><br><span class="line">        encoding = encodings[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        encoding = req.apparent_encoding</span><br><span class="line">    encode_content = req.content.decode(encoding, <span class="string">&#x27;replace&#x27;</span>) <span class="comment">#如果设置为replace，则会用?取代非法字符；</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫-BeautifulSoup</title>
      <link href="/2018/08/08/crawler/BeautifulSoup/"/>
      <url>/2018/08/08/crawler/BeautifulSoup/</url>
      
        <content type="html"><![CDATA[<p>一个灵活又方便的网页解析库，处理高效，支持多种解析器。<br>利用它就不用编写正则表达式也能方便的实现网页信息的抓取</p><span id="more"></span><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>HTML或XML的解析器，依赖于lxml</p><h2 id="支持解析库"><a href="#支持解析库" class="headerlink" title="支持解析库"></a>支持解析库</h2><ol><li>lxml<br> 速度快，文档容错能力强（不规范会自动补全）；用的比较多</li><li>html.parser<br> python自带的解析库；速度一般，文档容错能力一般</li><li>xml<br> 速度快，文档容错能力强</li></ol><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ol><li>优点：简单</li><li>缺点：性能差</li></ol><blockquote><p>解析速度对比<br>正则 &gt; xpath &gt; beautifulsoup4</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install beautifulsoup4</span><br></pre></td></tr></table></figure><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># html是需要解析的文档</span></span><br><span class="line"><span class="comment"># lxml是指定的解析库</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rObj = soup.find(<span class="string">&#x27;div&#x27;</span>,attrs=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;aaa&quot;</span>&#125;)</span><br><span class="line">rList = soup.find_all(<span class="string">&#x27;div&#x27;</span>,attrs=&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol><li><p>soup.find()</p></li><li><p>soup.find_all()</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    r_list=soup.find_all(属性名=<span class="string">&quot;属性值&quot;</span>)</span><br><span class="line">r_list=soup.find_all(class_=<span class="string">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>如果属性名是class；由于class是Python的关键字，所以我们要写class_ </p></blockquote> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r_list=soup.find_all(<span class="string">&quot;节点名&quot;</span>, attrs=&#123;<span class="string">&quot;名&quot;</span>:<span class="string">&quot;值&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">r_list=soup.find_all(<span class="string">&quot;div&quot;</span>, attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;test&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>节点对象.string、<br> 只能获取当前节点的文本内容(不包括子节点)</p></li><li><p>节点对象.get_text()<br> 获取所有节点文本内容(包括子节点)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫-xpath解析工具</title>
      <link href="/2018/08/08/crawler/xpath%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/08/08/crawler/xpath%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>XPath即为XML路径语言（XML Path Language）;<br>在XML文档中查找信息的语言,同样适用于HTML文档的检索;<br>lxml库的使用</p><span id="more"></span><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在XML文档中查找信息的语言,同样适用于HTML文档的检索</p><h2 id="xpath辅助工具"><a href="#xpath辅助工具" class="headerlink" title="xpath辅助工具"></a>xpath辅助工具</h2><ol><li><p>Chrome安装插件方式</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、打开浏览器 - 设置 - 更多工具 - 扩展程序 </span><br><span class="line">2、右上角 ：开发者模式</span><br><span class="line">3、从网上下载的插件 拖拽到 浏览器页面</span><br></pre></td></tr></table></figure></li><li><p>网页解析相关插件</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、Chrome浏览器 ：XPath Helper</span><br><span class="line">2、Firefox浏览器：XPath Checker</span><br><span class="line">3、XPath表达式编辑工具 ：XML Quire</span><br></pre></td></tr></table></figure></li><li><p>打开和关闭xpath辅助工具<br> 打开&#x2F;关闭 ：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl + shift + x</span><br></pre></td></tr></table></figure></li></ol><h2 id="xpath匹配规则"><a href="#xpath匹配规则" class="headerlink" title="xpath匹配规则"></a>xpath匹配规则</h2><p><a href="https://object.rencheng.cc/blog/bookStore.xml">演示文档</a></p><h3 id="匹配演示"><a href="#匹配演示" class="headerlink" title="匹配演示"></a>匹配演示</h3><ol><li><p>查找bookstore下所有节点</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bookstore</span><br></pre></td></tr></table></figure></li><li><p>查找所有的book节点</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//book</span><br></pre></td></tr></table></figure></li><li><p>查找所有book节点下的title节点</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//book/title</span><br></pre></td></tr></table></figure></li><li><p>查找&#x2F;&#x2F;book&#x2F;title节点中lang属性为 “en” 的节点</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//book/title[@lang=&quot;en&quot;]</span><br></pre></td></tr></table></figure></li><li><p>获取bookstore节点下的第2个book节点下的title节点的文本内容</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bookstore/book[2]/title/text()</span><br></pre></td></tr></table></figure></li></ol><h3 id="选取节点"><a href="#选取节点" class="headerlink" title="选取节点"></a>选取节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  ：从整个HTML文档中查找节点</span><br><span class="line">//price   //book//price</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@   ：选取某个节点的属性</span><br><span class="line">    1、 //title[@lang=&quot;en&quot;]</span><br><span class="line">    2、 //title/@lang</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">./  ：选取已经存在的条件之上追加条件</span><br><span class="line">     aList = parseHtml.xpath(&#x27;//div[@class=&quot;pl2&quot;]&#x27;)</span><br><span class="line">        for element in aList:</span><br><span class="line">            nameList = element.xpath(&#x27;./a/text()&#x27;)</span><br><span class="line">            if len(nameList) &gt; 0:</span><br><span class="line">                name = nameList[0]</span><br><span class="line">                name = name.replace(&quot; &quot;, &quot;&quot;)</span><br><span class="line">                name = name.replace(&quot;\n&quot;, &quot;&quot;)</span><br><span class="line">                name = name.replace(&quot;\r&quot;, &quot;&quot;)</span><br><span class="line">                name = name.replace(&quot;/&quot;, &quot; / &quot;)</span><br><span class="line">            else:</span><br><span class="line">                name = &quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="匹配多路径"><a href="#匹配多路径" class="headerlink" title="匹配多路径"></a>匹配多路径</h3><ol><li>符号 ：xpath表达式 | xpath表达式</li><li>获取所有book节点下的 title节点 和 price节点<br>  &#x2F;&#x2F;book&#x2F;title  |  &#x2F;&#x2F;book&#x2F;price</li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol><li>contains() ：匹配一个属性值中包含某些字符串的节点</li><li>text()：将节点提取出字符串</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//title[contains(@lang,&quot;ch&quot;)]/text()</span><br></pre></td></tr></table></figure><h2 id="lxml库及xpath使用"><a href="#lxml库及xpath使用" class="headerlink" title="lxml库及xpath使用"></a>lxml库及xpath使用</h2><p>HTML&#x2F;XML解析库</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd -&gt; python -m pip install lxml</span><br><span class="line">Anaconda Prompt -&gt; conda install lxml</span><br></pre></td></tr></table></figure><h3 id="使用流程-xpath返回的一定是1个列表"><a href="#使用流程-xpath返回的一定是1个列表" class="headerlink" title="使用流程(xpath返回的一定是1个列表)"></a>使用流程(xpath返回的一定是1个列表)</h3><ol><li><p>导入模块</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br></pre></td></tr></table></figure></li><li><p>创建解析对象 ：</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parseHtml = etree.HTML(html)</span><br></pre></td></tr></table></figure></li><li><p>调用xpath</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rList = parseHtml.xpath(<span class="string">&#x27;xpath表达式&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;wrapper&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;i class=&quot;iconfont icon-back&quot; id=&quot;back&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;/&quot; id=&quot;channel&quot;&gt;新浪社会&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;ul id=&quot;nav&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;a href=&quot;http://domestic.firefox.sina.com/&quot; title=&quot;国内&quot;&gt;国内&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;a href=&quot;http://world.firefox.sina.com/&quot; title=&quot;国际&quot;&gt;国际&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;a href=&quot;http://mil.firefox.sina.com/&quot; title=&quot;军事&quot;&gt;军事&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;a href=&quot;http://photo.firefox.sina.com/&quot; title=&quot;图片&quot;&gt;图片&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;a href=&quot;http://society.firefox.sina.com/&quot; title=&quot;社会&quot;&gt;社会&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;a href=&quot;http://ent.firefox.sina.com/&quot; title=&quot;娱乐&quot;&gt;娱乐&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;a href=&quot;http://tech.firefox.sina.com/&quot; title=&quot;科技&quot;&gt;科技&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;a href=&quot;http://sports.firefox.sina.com/&quot; title=&quot;体育&quot;&gt;体育&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;a href=&quot;http://finance.firefox.sina.com/&quot; title=&quot;财经&quot;&gt;财经&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;a href=&quot;http://auto.firefox.sina.com/&quot; title=&quot;汽车&quot;&gt;汽车&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;i class=&quot;iconfont icon-liebiao&quot; id=&quot;menu&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 创建解析对象</span></span><br><span class="line">parseHtml = etree.HTML(html)</span><br><span class="line"><span class="comment"># 调xpath工具,得到列表</span></span><br><span class="line">rList = parseHtml.xpath(<span class="string">&#x27;//li/a/@href&#x27;</span>)</span><br><span class="line"><span class="comment">#print(rList)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 /</span></span><br><span class="line"><span class="comment">#r1=parseHtml.xpath(&#x27;//a[@id=&quot;channel&quot;]/@href&#x27;)</span></span><br><span class="line">r1=parseHtml.xpath\</span><br><span class="line">   (<span class="string">&#x27;//div[@class=&quot;wrapper&quot;]/a[@id=&quot;channel&quot;]/@href&#x27;</span>)</span><br><span class="line"><span class="comment">#print(r1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文本 ：新浪社会、国际、国内</span></span><br><span class="line">r2 = parseHtml.xpath(<span class="string">&#x27;//a/text()&#x27;</span>)</span><br><span class="line"><span class="comment">#print(r2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文本 ：国际、国内、军事 ...</span></span><br><span class="line">r3 = parseHtml.xpath(<span class="string">&#x27;//ul[@id=&quot;nav&quot;]//a&#x27;</span>)</span><br><span class="line"><span class="comment"># r3:[&#x27;&lt;element&gt;&#x27;,&#x27;&lt;element&gt;&#x27;]</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> r3:</span><br><span class="line">    <span class="comment"># text属性获取节点对象文本内容</span></span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><h2 id="练习-xpath匹配猫眼电影"><a href="#练习-xpath匹配猫眼电影" class="headerlink" title="练习: xpath匹配猫眼电影"></a>练习: xpath匹配猫眼电影</h2>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MaoyanSpider</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.headers = &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)&quot;</span>&#125;</span><br><span class="line">        <span class="variable language_">self</span>.baseurl = <span class="string">&quot;http://maoyan.com/board/4?offset=&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.offset = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 使用私密代理</span></span><br><span class="line">        <span class="variable language_">self</span>.proxies = &#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;http://309435365:szayclhp@116.255.162.107:16816&quot;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取页面</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPage</span>(<span class="params">self,url</span>):</span><br><span class="line">        res = requests.get(url,</span><br><span class="line">                           headers=<span class="variable language_">self</span>.headers)</span><br><span class="line">        res.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        html = res.text</span><br><span class="line">        <span class="variable language_">self</span>.parsePage(html)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析页面</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parsePage</span>(<span class="params">self,html</span>):</span><br><span class="line">        <span class="comment"># 创建解析对象</span></span><br><span class="line">        parseHtml = etree.HTML(html)</span><br><span class="line">        <span class="comment"># 调用xpath</span></span><br><span class="line">        nameList = parseHtml.xpath(<span class="string">&#x27;//div[@class=&quot;movie-item-info&quot;]/p[1]/a/text()&#x27;</span>)</span><br><span class="line">        starList = parseHtml.xpath(<span class="string">&#x27;//div[@class=&quot;movie-item-info&quot;]/p[2]/text()&#x27;</span>)</span><br><span class="line">        timeList = parseHtml.xpath(<span class="string">&#x27;//div[@class=&quot;movie-item-info&quot;]/p[3]/text()&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> name,star,time <span class="keyword">in</span> <span class="built_in">zip</span>(nameList,starList,timeList):</span><br><span class="line">            <span class="built_in">print</span>(name.strip(),star.strip(),time.strip())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># L1 = [1,2,3]</span></span><br><span class="line">        <span class="comment"># L2 = [&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;]</span></span><br><span class="line">        <span class="comment"># zip后 ： [(1,&#x27;A&#x27;),(2,&#x27;B&#x27;),(3,&#x27;C&#x27;)]</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 保存数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">writePage</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 主函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">workOn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.getPage(<span class="string">&quot;http://maoyan.com/board/4?offset=0&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    spider = MaoyanSpider()</span><br><span class="line">    spider.workOn()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫-urllib</title>
      <link href="/2018/08/08/crawler/urllib/"/>
      <url>/2018/08/08/crawler/urllib/</url>
      
        <content type="html"><![CDATA[<p>urllib在Python2.x中内置的库是urllib和urllib2，在Python3.x中合并为urllib库。<br>urllib是系统内置库，提供了一系列用于操作URL的功能。</p><span id="more"></span><h1 id="爬虫请求模块"><a href="#爬虫请求模块" class="headerlink" title="爬虫请求模块"></a>爬虫请求模块</h1><p>urllib提供的功能就是利用程序去执行各种HTTP请求。如果要模拟浏览器完成特定功能，需要把请求伪装成浏览器。伪装的方法是先监控浏览器发出的请求，再根据浏览器的请求头来伪装，User-Agent头就是用来标识浏览器的。</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ol><li>python2 ：urllib 、urllib2</li><li>python3 ：urllib 、requests(下一篇会介绍)</li></ol><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="urllib-request模块"><a href="#urllib-request模块" class="headerlink" title="urllib.request模块"></a>urllib.request模块</h3><p>可以非常方便地抓取URL内容，也就是发送一个GET请求到指定的页面，然后返回HTTP的响应：</p><ol><li><p>urllib.request.urlopen(“URL”)</p><ol><li><p>作用 ：向网站发起1个请求并获取响应<br> 字节流 &#x3D; res.read()<br> 字符串 &#x3D; res.read().decode(“utf-8”)<br> encode() : 字符串 转为 字节流<br> decode() : 字节流 转为 字符串</p></li><li><p>重构User-Agent</p><ol><li>urlopen()不支持重构User-Agent</li><li>支持重构User-Agent</li></ol> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.request.Request(url,headers=&#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>urllib.request.Request(url,headers&#x3D;字典)</p><blockquote><p>User-Agent是爬虫和反爬虫斗争的第1步,发送请求必须带User-Agent</p></blockquote><p> 使用流程</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">req =  创建请求对象(Request(url,headers=...))</span><br><span class="line">res =  获取响应对象(urlopen(req)</span><br><span class="line">html = 获取响应内容res.read().decode(&quot;utf-8&quot;)</span><br></pre></td></tr></table></figure><p> 响应对象res的方法</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. res.read() ：读取响应内容</span><br><span class="line">2. res.getcode() ：获取HTTP响应码</span><br><span class="line">    200 ：成功</span><br><span class="line">    4XX ：服务器页面出错</span><br><span class="line">    5XX ：服务器出错</span><br><span class="line">3. geturl() ：返回实际数据的URL(防止重定向问题)</span><br></pre></td></tr></table></figure></li><li><p>urllib.request.Request(url,data&#x3D;data,headers&#x3D;字典)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    data : Form表单数据以bytes类型提交,不能是str    1、把Form表单数据定义为字典:data</span><br><span class="line">    2、urlencode(data)</span><br><span class="line">    3、encode(&quot;utf-8&quot;)转为bytes    ```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### urllib.parse模块</span><br><span class="line">#### 1. urllib.parse.urlencode(&#123;字典&#125;)</span><br><span class="line">例如：</span><br><span class="line">``` py</span><br><span class="line">wd = &#123;&quot;wd&quot;:&quot;摩擦科技&quot;&#125;</span><br><span class="line">s = urllib.parse.urlencode(wd)</span><br><span class="line">s的值 ：&quot;wd=%E8%BE%BE%E5%86%85%E.....&quot;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-urllib-parse-quote-“字符串”"><a href="#2-urllib-parse-quote-“字符串”" class="headerlink" title="2. urllib.parse.quote(“字符串”)"></a>2. urllib.parse.quote(“字符串”)</h4><p>例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;摩擦科技&quot;</span></span><br><span class="line">s2 = urllib.parse.quote(s1)</span><br><span class="line">s2的值 ：<span class="string">&quot;%e8%e3%d5....&quot;</span></span><br></pre></td></tr></table></figure><p>写入本地</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;文件名.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;gb18030&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(字符串)</span><br></pre></td></tr></table></figure><h4 id="3-urllib-parse-unquote-“-e8-d3-f8…”"><a href="#3-urllib-parse-unquote-“-e8-d3-f8…”" class="headerlink" title="3. urllib.parse.unquote(“%e8%d3%f8…”)"></a>3. urllib.parse.unquote(“%e8%d3%f8…”)</h4><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="1-百度贴吧数据抓取"><a href="#1-百度贴吧数据抓取" class="headerlink" title="1 : 百度贴吧数据抓取"></a>1 : 百度贴吧数据抓取</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">h_list = [</span><br><span class="line">        &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">baseurl = <span class="string">&quot;http://tieba.baidu.com/f?&quot;</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入贴吧名称:&quot;</span>)</span><br><span class="line">begin = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入起始页:&quot;</span>))</span><br><span class="line">end = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入终止页:&quot;</span>))</span><br><span class="line"><span class="comment"># 进行url编码,用于url拼接</span></span><br><span class="line">kw = &#123;<span class="string">&quot;kw&quot;</span>:name&#125;</span><br><span class="line">kw = urllib.parse.urlencode(kw)</span><br><span class="line"><span class="comment"># kw的值 ： &quot;kw=%a3%b4...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(begin,end+<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># 拼接页面的url</span></span><br><span class="line">    pn = (page-<span class="number">1</span>)*<span class="number">50</span></span><br><span class="line">    url = baseurl + kw + <span class="string">&quot;&amp;pn=&quot;</span> + <span class="built_in">str</span>(pn)</span><br><span class="line">    <span class="comment"># 发请求</span></span><br><span class="line">    headers = random.choice(h_list)</span><br><span class="line">    req = urllib.request.Request(url,headers=headers)</span><br><span class="line">    res = urllib.request.urlopen(req)</span><br><span class="line">    html = res.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="comment"># 保存</span></span><br><span class="line">    filename = <span class="string">&quot;第&quot;</span>+<span class="built_in">str</span>(page)+<span class="string">&quot;页.html&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;gb18030&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(html)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第%d页保存成功&quot;</span> % page)</span><br></pre></td></tr></table></figure><h3 id="2-GET方式爬取百度贴吧"><a href="#2-GET方式爬取百度贴吧" class="headerlink" title="2 : GET方式爬取百度贴吧"></a>2 : GET方式爬取百度贴吧</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaiduSpider</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.headers = &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0&quot;</span>&#125;</span><br><span class="line">        <span class="variable language_">self</span>.baseurl = <span class="string">&quot;http://tieba.baidu.com/f?&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 发请求获取页面</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPage</span>(<span class="params">self,url</span>):</span><br><span class="line">        req = urllib.request.Request(url,headers=<span class="variable language_">self</span>.headers)</span><br><span class="line">        res = urllib.request.urlopen(req)</span><br><span class="line">        html = res.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line">    <span class="comment"># 保存</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">writePage</span>(<span class="params">self,filename,html</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(html)  </span><br><span class="line">    <span class="comment"># 主函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">workOn</span>(<span class="params">self</span>):</span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&quot;请输入贴吧名称:&quot;</span>)</span><br><span class="line">        begin = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入起始页:&quot;</span>))</span><br><span class="line">        end = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入终止页:&quot;</span>))</span><br><span class="line">        <span class="comment"># 进行url编码,用于url拼接</span></span><br><span class="line">        kw = &#123;<span class="string">&quot;kw&quot;</span>:name&#125;</span><br><span class="line">        kw = urllib.parse.urlencode(kw)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(begin,end+<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 拼接页面的url</span></span><br><span class="line">            pn = (page-<span class="number">1</span>)*<span class="number">50</span></span><br><span class="line">            url = <span class="variable language_">self</span>.baseurl + kw + <span class="string">&quot;&amp;pn=&quot;</span> + <span class="built_in">str</span>(pn)</span><br><span class="line">            html = <span class="variable language_">self</span>.getPage(url)</span><br><span class="line">            filename = <span class="string">&quot;第&quot;</span>+<span class="built_in">str</span>(page)+<span class="string">&quot;页.html&quot;</span></span><br><span class="line">            <span class="variable language_">self</span>.writePage(filename,html)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;第%d页爬取成功&quot;</span> % page)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    spider = BaiduSpider()</span><br><span class="line">    spider.workOn()</span><br></pre></td></tr></table></figure><h3 id="3-POST方式有道词典"><a href="#3-POST方式有道词典" class="headerlink" title="3 : POST方式有道词典"></a>3 : POST方式有道词典</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到data并把它转为bytes</span></span><br><span class="line">key = <span class="built_in">input</span>(<span class="string">&quot;请输入要翻译的内容:&quot;</span>)</span><br><span class="line"><span class="comment"># 1. 把Form表单数据定义为字典</span></span><br><span class="line">data = &#123;</span><br><span class="line">        <span class="string">&quot;i&quot;</span>:key,</span><br><span class="line">        <span class="string">&quot;from&quot;</span>:<span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">        <span class="string">&quot;to&quot;</span>:<span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">        <span class="string">&quot;smartresult&quot;</span>:<span class="string">&quot;dict&quot;</span>,</span><br><span class="line">        <span class="string">&quot;client&quot;</span>:<span class="string">&quot;fanyideskweb&quot;</span>,</span><br><span class="line">        <span class="string">&quot;salt&quot;</span>:<span class="string">&quot;1543043553775&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sign&quot;</span>:<span class="string">&quot;802536ba0b13500261edf93830d299a0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;doctype&quot;</span>:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;version&quot;</span>:<span class="string">&quot;2.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;keyfrom&quot;</span>:<span class="string">&quot;fanyi.web&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span>:<span class="string">&quot;FY_BY_REALTIME&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typoResult&quot;</span>:<span class="string">&quot;false&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># 2. urlencode把字典编码成字符串</span></span><br><span class="line">data = urllib.parse.urlencode(data)</span><br><span class="line"><span class="comment"># 3. encode()把字符串转为字节流</span></span><br><span class="line">data = data.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发请求获响应</span></span><br><span class="line"><span class="comment"># url为抓包抓到的POST的地址,去掉translate_o中的 _o</span></span><br><span class="line">url = <span class="string">&quot;http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0&quot;</span>&#125;</span><br><span class="line">req = urllib.request.Request(url,data=data,headers=headers)</span><br><span class="line">res = urllib.request.urlopen(req)</span><br><span class="line">html = res.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment"># 把json格式的字符串转为Python中的字典</span></span><br><span class="line">r_dict = json.loads(html)</span><br><span class="line">r = r_dict[<span class="string">&quot;translateResult&quot;</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">&quot;tgt&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;&#x27;type&#x27;: &#x27;ZH_CN2EN&#x27;, </span></span><br><span class="line"><span class="comment"># &#x27;errorCode&#x27;: 0, </span></span><br><span class="line"><span class="comment"># &#x27;elapsedTime&#x27;: 1, </span></span><br><span class="line"><span class="comment"># &#x27;translateResult&#x27;: </span></span><br><span class="line"><span class="comment">#   [[&#123;&#x27;src&#x27;: &#x27;你好&#x27;, &#x27;tgt&#x27;: &#x27;hello&#x27;&#125;]]</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫-requests模块</title>
      <link href="/2018/08/08/crawler/requests/"/>
      <url>/2018/08/08/crawler/requests/</url>
      
        <content type="html"><![CDATA[<p>Python内置的urllib模块，用于访问网络资源。但是，它用起来比较麻烦，而且，缺少很多实用的高级功能。<br>它是一个Python第三方库，处理URL资源特别方便。</p><span id="more"></span><h1 id="简单实用"><a href="#简单实用" class="headerlink" title="简单实用"></a>简单实用</h1><ol><li><p>res &#x3D; get(url, params&#x3D;params, headers&#x3D;headers)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请求：</span><br><span class="line">会自动对params进行编码,并和前面url进行拼接</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数：</span><br><span class="line">url： 请求地址</span><br><span class="line">params：请求参数</span><br><span class="line">headers：请求头部</span><br><span class="line">timeout: 超时时间</span><br><span class="line">proxies：代理参数【见附录1】</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">响应对象res的属性</span><br><span class="line">1、encoding ：指定响应编码, res.encoding = &quot;utf-8&quot;</span><br><span class="line">2、text     ：字符串</span><br><span class="line">3、content  ：字节流</span><br><span class="line">4、status_code ：HTTP响应码</span><br><span class="line">5、url         ：返回实际数据的URL地址</span><br></pre></td></tr></table></figure></li><li><p>非结构化数据保存</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html = res.content</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(html)</span><br></pre></td></tr></table></figure></li><li><p>post(url, data&#x3D;data, headers&#x3D;headers)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data ：Form表单数据,字典,不用编码,不用转码</span><br></pre></td></tr></table></figure></li></ol><h1 id="进阶指南"><a href="#进阶指南" class="headerlink" title="进阶指南"></a>进阶指南</h1><ol><li><p>requests的方便之处还在于，对于特定类型的响应，例如JSON，可以直接获取：</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(*******)</span><br><span class="line">r.json()</span><br></pre></td></tr></table></figure></li><li><p>requests默认使用<code>application/x-www-form-urlencoded</code>对POST数据编码。如果要传递JSON数据，可以直接传入json参数：</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    params = &#123;<span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;value&#x27;</span>&#125;</span><br><span class="line">r = requests.post(url, json=params) <span class="comment"># 内部自动序列化为JSON</span></span><br></pre></td></tr></table></figure></li><li><p>类似的，上传文件需要更复杂的编码格式，但是requests把它简化成files参数：</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">upload_files = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;report.xls&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">r = requests.post(url, files=upload_files)</span><br></pre></td></tr></table></figure><blockquote><p>在读取文件时，注意务必使用’rb’即二进制模式读取，这样获取的bytes长度才是文件的长度。</p></blockquote></li><li><p>除了能轻松获取响应内容外，requests对获取HTTP响应的其他信息也非常简单。例如，获取响应头：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r.headers</span><br><span class="line">&#123;Content-Type&#x27;: &#x27;text/html; charset=utf-8&#x27;, &#x27;Transfer-Encoding&#x27;: &#x27;chunked&#x27;, &#x27;Content-Encoding&#x27;: &#x27;gzip&#x27;, ...&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="有道翻译案例"><a href="#有道翻译案例" class="headerlink" title="有道翻译案例"></a>有道翻译案例</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到data并把它转为bytes</span></span><br><span class="line">key = <span class="built_in">input</span>(<span class="string">&quot;请输入要翻译的内容:&quot;</span>)</span><br><span class="line"><span class="comment"># 1. 把Form表单数据定义为字典,F12-&gt;Form Data</span></span><br><span class="line">data = &#123;</span><br><span class="line">        <span class="string">&quot;i&quot;</span>:key,</span><br><span class="line">        <span class="string">&quot;from&quot;</span>:<span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">        <span class="string">&quot;to&quot;</span>:<span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">        <span class="string">&quot;smartresult&quot;</span>:<span class="string">&quot;dict&quot;</span>,</span><br><span class="line">        <span class="string">&quot;client&quot;</span>:<span class="string">&quot;fanyideskweb&quot;</span>,</span><br><span class="line">        <span class="string">&quot;salt&quot;</span>:<span class="string">&quot;15437179202229&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sign&quot;</span>:<span class="string">&quot;b5fee8d2268e22191d3e03ea884d5666&quot;</span>,</span><br><span class="line">        <span class="string">&quot;doctype&quot;</span>:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;version&quot;</span>:<span class="string">&quot;2.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;keyfrom&quot;</span>:<span class="string">&quot;fanyi.web&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span>:<span class="string">&quot;FY_BY_REALTIME&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typoResult&quot;</span>:<span class="string">&quot;false&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发请求获响应</span></span><br><span class="line"><span class="comment"># url为抓包抓到的POST的地址,去掉translate_o中的 _o</span></span><br><span class="line">url = <span class="string">&quot;http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0&quot;</span>&#125;</span><br><span class="line"><span class="comment"># 用requests模块的post方法,data参数为Form表单数据,必须为字典</span></span><br><span class="line">res = requests.post(url,data=data,headers=headers)</span><br><span class="line">res.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">html = res.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把json格式的字符串转为Python中的字典</span></span><br><span class="line">r_dict = json.loads(html)</span><br><span class="line">r = r_dict[<span class="string">&quot;translateResult&quot;</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">&quot;tgt&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><h1 id="附录一"><a href="#附录一" class="headerlink" title="附录一"></a>附录一</h1><h2 id="查询本机公网IP"><a href="#查询本机公网IP" class="headerlink" title="查询本机公网IP"></a>查询本机公网IP</h2><ol><li>百度搜索<code>IP</code></li><li>请求地址：<a href="http://httpbin.org/get">http://httpbin.org/get</a></li></ol><h2 id="代理参数-：proxies-–-字典"><a href="#代理参数-：proxies-–-字典" class="headerlink" title="代理参数 ：proxies –&gt; 字典"></a>代理参数 ：proxies –&gt; 字典</h2><ol><li><p>获取代理IP的网站</p><ol><li><a href="https://www.xicidaili.com/nn">西刺代理</a></li><li><a href="https://www.kuaidaili.com/free/inha/">快代理</a></li><li><a href="http://www.goubanjia.com/">全网代理</a></li></ol></li><li><p>普通代理 ：字典<br>proxies &#x3D; {“协议”:”协议:&#x2F;&#x2F;IP地址:端口号”}</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;http://183.129.207.82:11328&quot;</span>&#125;</span><br><span class="line">res = requests.get(url,proxies=proies,headers..)</span><br></pre></td></tr></table></figure></li><li><p>私密代理 ：字典<br>proxies &#x3D; {“协议”:”协议:&#x2F;&#x2F;用户名:密码@IP:端口”}</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;http://309435365:szayclhp@116.255.162.107:16816&quot;</span> &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="普通代理"><a href="#普通代理" class="headerlink" title="普通代理"></a>普通代理</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/get&quot;</span></span><br><span class="line"><span class="comment">#url = &quot;http://www.baidu.com/&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># IP代理池</span></span><br><span class="line">proxyList = [</span><br><span class="line">        &#123;<span class="string">&quot;&quot;</span>:<span class="string">&quot;&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;&quot;</span>:<span class="string">&quot;&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;&quot;</span>:<span class="string">&quot;&quot;</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">proxies = random.choice(proxyList)</span><br><span class="line"></span><br><span class="line">res = requests.get(url,proxies=proxies,</span><br><span class="line">                   headers=headers)</span><br><span class="line">res.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">html = res.text</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><h3 id="私密代理"><a href="#私密代理" class="headerlink" title="私密代理"></a>私密代理</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#url = &quot;http://httpbin.org/get&quot;</span></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com/&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0&quot;</span>&#125;</span><br><span class="line">proxies = &#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;http://309435365:szayclhp@116.255.162.107:16816&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">res = requests.get(url,proxies=proxies,</span><br><span class="line">                   headers=headers)</span><br><span class="line">res.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫-数据持久化</title>
      <link href="/2018/08/08/crawler/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2018/08/08/crawler/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要是将请求下来的数据，进行数据分析，并且进行存储</p><span id="more"></span><h1 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h1><h2 id="数据的分类"><a href="#数据的分类" class="headerlink" title="数据的分类"></a>数据的分类</h2><ol><li>结构化数据<br> 特点 ：有固定的格式,如：HTML、XML、JSON</li><li>非结构化数据<br> 示例 ：图片、音频、视频,这类数据一般存储为二进制</li></ol><h2 id="正则表达式-re"><a href="#正则表达式-re" class="headerlink" title="正则表达式 re"></a>正则表达式 re</h2><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、创建编译对象 ：p = re.compile(&#x27;正则表达式&#x27;)</span><br><span class="line">2、对字符串匹配 ：r = p.match(&quot;字符串&quot;)</span><br><span class="line">3、获取匹配结果 ：print(r.group())</span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol><li><strong>match(s)</strong> : 字符串开头的第1个,返回对象</li><li><strong>search(s)</strong>: 从开始往后找,匹配第1个满足的,返回对象</li><li><strong>findall(s)</strong>:所有全部匹配,返回一个列表</li></ol><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><table><thead><tr><th align="center">字符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">任意字符(不包括\n)</td></tr><tr><td align="center">\d</td><td align="center">数字</td></tr><tr><td align="center">\s</td><td align="center">空白字符</td></tr><tr><td align="center">\S</td><td align="center">非空白字符</td></tr><tr><td align="center">[…]</td><td align="center">包含[]内容 A[BCD]E -&gt; ABE ACE ABCE</td></tr><tr><td align="center">\w</td><td align="center">字母、数字、_</td></tr><tr><td align="center">*</td><td align="center">0次或n次</td></tr><tr><td align="center">？</td><td align="center">0次或1次</td></tr><tr><td align="center">+</td><td align="center">1次或n次</td></tr></tbody></table><h3 id="贪婪匹配和非贪婪匹配"><a href="#贪婪匹配和非贪婪匹配" class="headerlink" title="贪婪匹配和非贪婪匹配"></a>贪婪匹配和非贪婪匹配</h3><p><strong>贪婪匹配(.*)</strong> : 在整个表达式匹配成功的前提下,尽可能多的匹配 *<br><strong>非贪婪匹配(.*?)</strong> : 在整个表达式匹配成功的前提下,尽可能少的匹配 *</p><blockquote><p>re.S 让 . 能够匹配\n在内的所有字符</p></blockquote><h3 id="findall的分组"><a href="#findall的分组" class="headerlink" title="findall的分组"></a>findall的分组</h3><p>1.分组示例<br>先按照正则整体匹配出来,然后再匹配()中的<br>如果正则中有多个(),则以元组形式显示</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;A B C D&quot;</span></span><br><span class="line">p1 = re.<span class="built_in">compile</span>(<span class="string">&#x27;\w+\s+\w+&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p1.findall(s))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 先匹配整体正则 [&#x27;A B&#x27;,&#x27;C D&#x27;]</span></span><br><span class="line"><span class="comment"># 2. 再匹配正则()中的 [&#x27;A&#x27;,&#x27;C&#x27;]</span></span><br><span class="line">p2 = re.<span class="built_in">compile</span>(<span class="string">&#x27;(\w+)\s+\w+&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p2.findall(s))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 先按整体匹配 [&#x27;A B&#x27;,&#x27;C D&#x27;]</span></span><br><span class="line"><span class="comment"># 2. 匹配正则()中的,多个()放到元组中</span></span><br><span class="line">p3 = re.<span class="built_in">compile</span>(<span class="string">&#x27;(\w+)\s+(\w+)&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p3.findall(s))</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>正则分组练习</span><br><span class="line">``` py</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;&lt;div class=&quot;animal&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p class=&quot;name&quot;&gt;</span></span><br><span class="line"><span class="string">       &lt;a title=&quot;Tiger&quot;&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;p class=&quot;content&quot;&gt;</span></span><br><span class="line"><span class="string">       Two tigers two tigers run fast</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;div class=&quot;animal&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p class=&quot;name&quot;&gt;</span></span><br><span class="line"><span class="string">       &lt;a title=&quot;Rabbit&quot;&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;p class=&quot;content&quot;&gt;</span></span><br><span class="line"><span class="string">       Small white rabbit white and white</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;&quot;&quot;&quot;</span></span><br><span class="line">p = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;div class=&quot;animal&quot;&gt;.*?title=&quot;(.*?)&quot;.*?class=&quot;content&quot;&gt;(.*?)&lt;/p&gt;.*?&lt;/div&gt;&#x27;</span>,re.S)</span><br><span class="line">r_list = p.findall(html)</span><br><span class="line"><span class="comment">#print(r_list)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r_tuple <span class="keyword">in</span> r_list:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;动物名称:&quot;</span>,r_tuple[<span class="number">0</span>].strip())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;动物描述:&quot;</span>,r_tuple[<span class="number">1</span>].strip())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">20</span>)</span><br></pre></td></tr></table></figure><h2 id="案例1-：内涵段子脑筋急转弯抓取"><a href="#案例1-：内涵段子脑筋急转弯抓取" class="headerlink" title="案例1 ：内涵段子脑筋急转弯抓取"></a>案例1 ：内涵段子脑筋急转弯抓取</h2><ol><li><p>网址 ：<a href="https://www.neihan8.com/">https://www.neihan8.com/</a></p></li><li><p>目标 ：段子 - 脑筋急转弯 - 题目、答案</p></li><li><p>步骤</p><ol><li>找URL规律</li></ol> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第1页：https://www.neihan8.com/njjzw/</span><br><span class="line">第2页：https://www.neihan8.com/njjzw/index_2.html</span><br><span class="line">第n页：https://www.neihan8.com/njjzw/index_n.html</span><br></pre></td></tr></table></figure><ol start="2"><li>写正则</li></ol> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;text-column.*?title=&quot;</span>(.*?)<span class="string">&quot;.*?&lt;div class=&quot;</span>desc<span class="string">&quot;&gt;(.*?)&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>写代码</li></ol> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、获取页面</span><br><span class="line">2、解析页面</span><br><span class="line">3、保存数据</span><br></pre></td></tr></table></figure></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NeihanSpider</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.headers = &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0&quot;</span>&#125;</span><br><span class="line">        <span class="variable language_">self</span>.baseurl = <span class="string">&quot;https://www.neihan8.com/njjzw/&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.page = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 下载页面</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPage</span>(<span class="params">self,url</span>):</span><br><span class="line">        req = urllib.request.Request(url,headers=<span class="variable language_">self</span>.headers)</span><br><span class="line">        res = urllib.request.urlopen(req)</span><br><span class="line">        html = res.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.parsePage(html)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析页面</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parsePage</span>(<span class="params">self,html</span>):</span><br><span class="line">        p = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;div class=&quot;text-column.*?title=&quot;(.*?)&quot;.*?&lt;div class=&quot;desc&quot;&gt;(.*?)&lt;/div&gt;&#x27;</span>,re.S)</span><br><span class="line">        r_list = p.findall(html)</span><br><span class="line">        <span class="comment"># r_list : [(&quot;什么动物在墙上&quot;,&quot;海豹&quot;),(),(),()]</span></span><br><span class="line">        <span class="variable language_">self</span>.writePage(r_list)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 保存数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">writePage</span>(<span class="params">self,r_list</span>):</span><br><span class="line">        <span class="keyword">for</span> r_tuple <span class="keyword">in</span> r_list:</span><br><span class="line">            <span class="keyword">for</span> r_str <span class="keyword">in</span> r_tuple:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;急转弯.txt&quot;</span>,<span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(r_str.strip()+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;急转弯.txt&quot;</span>,<span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="comment"># 主函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">workOn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.getPage(<span class="variable language_">self</span>.baseurl)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            c = <span class="built_in">input</span>(<span class="string">&quot;是否继续(y/n):&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> c.strip().lower() == <span class="string">&quot;y&quot;</span>:</span><br><span class="line">                <span class="variable language_">self</span>.page += <span class="number">1</span></span><br><span class="line">                url = <span class="variable language_">self</span>.baseurl + <span class="string">&quot;index_&quot;</span> + \</span><br><span class="line">                      <span class="built_in">str</span>(<span class="variable language_">self</span>.page) + <span class="string">&quot;.html&quot;</span></span><br><span class="line">                <span class="variable language_">self</span>.getPage(url)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;第%d页爬取结束&quot;</span> % <span class="variable language_">self</span>.page)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;结束&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    spider = NeihanSpider()</span><br><span class="line">    spider.workOn()</span><br></pre></td></tr></table></figure><h1 id="csv模块的使用"><a href="#csv模块的使用" class="headerlink" title="csv模块的使用"></a>csv模块的使用</h1><h2 id="使用流程-1"><a href="#使用流程-1" class="headerlink" title="使用流程"></a>使用流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、打开csv文件</span><br><span class="line">    with open(&quot;test.csv&quot;,&quot;a&quot;,newline=&quot;&quot;) as f:</span><br><span class="line">2、初始化写入对象</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">3、写入数据</span><br><span class="line">    writer.writerow([&quot;英雄&quot;,&quot;梁朝伟&quot;,&quot;2000&quot;])</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1、newline &#x3D; “”<br>2、writer.writerow的参数一定要为列表</p><h2 id="猫眼电影top100存入csv文件"><a href="#猫眼电影top100存入csv文件" class="headerlink" title="猫眼电影top100存入csv文件"></a>猫眼电影top100存入csv文件</h2><ol><li><p>网址 ：猫眼电影 - 榜单 - TOP100榜</p></li><li><p>目标 ：电影名称 、主演 、上映时间</p></li><li><p>步骤</p><ol><li>规律</li></ol> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第1页：http://maoyan.com/board/4?offset=0</span><br><span class="line">第2页：http://maoyan.com/board/4?offset=10</span><br><span class="line">第n页：offset=(n-1)*10</span><br></pre></td></tr></table></figure><ol start="2"><li>写正则</li></ol> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;movie-item-info&quot;</span>&gt;.*?title=<span class="string">&quot;(.*?)&quot;</span>.*?<span class="keyword">class</span>=<span class="string">&quot;star&quot;</span>&gt;(.*?)&lt;/p&gt;.*?<span class="keyword">class</span>=<span class="string">&quot;releasetime&quot;</span>&gt;(.*?)&lt;/p&gt;.*?&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>写代码</li></ol></li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MaoyanSpider</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.headers = &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36&quot;</span>&#125;</span><br><span class="line">        <span class="variable language_">self</span>.baseurl = <span class="string">&quot;http://maoyan.com/board/4?offset=&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.offset = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 下载页面</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPage</span>(<span class="params">self,url</span>):</span><br><span class="line">        req = urllib.request.Request(url,headers=<span class="variable language_">self</span>.headers)</span><br><span class="line">        res = urllib.request.urlopen(req)</span><br><span class="line">        html = res.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.parsePage(html)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析页面</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parsePage</span>(<span class="params">self,html</span>):</span><br><span class="line">        p = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;div class=&quot;movie-item-info&quot;&gt;.*?title=&quot;(.*?)&quot;.*?class=&quot;star&quot;&gt;(.*?)&lt;/p&gt;.*?class=&quot;releasetime&quot;&gt;(.*?)&lt;/p&gt;.*?&lt;/div&gt;&#x27;</span>,re.S)</span><br><span class="line">        r_list = p.findall(html)</span><br><span class="line">        <span class="comment"># r_list: [(&quot;英雄&quot;,&quot;梁朝伟&quot;,&quot;2000&quot;),()]</span></span><br><span class="line">        <span class="variable language_">self</span>.writeTocsv(r_list)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 保存数据到csv</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">writeTocsv</span>(<span class="params">self,r_list</span>):</span><br><span class="line">        <span class="keyword">for</span> r_tuple <span class="keyword">in</span> r_list:</span><br><span class="line">            L = [r_tuple[<span class="number">0</span>].strip(),r_tuple[<span class="number">1</span>].strip(),r_tuple[<span class="number">2</span>].strip()]            </span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;TOP100.csv&quot;</span>,<span class="string">&quot;a&quot;</span>,newline=<span class="string">&quot;&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="comment"># 初始化写入对象</span></span><br><span class="line">                writer = csv.writer(f)</span><br><span class="line">                writer.writerow(L)</span><br><span class="line">            </span><br><span class="line">    <span class="comment"># 主函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">workOn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            c = <span class="built_in">input</span>(<span class="string">&quot;爬取按y,退出按q:&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> c.strip().lower() == <span class="string">&quot;y&quot;</span>:</span><br><span class="line">                url = <span class="variable language_">self</span>.baseurl + <span class="built_in">str</span>(<span class="variable language_">self</span>.offset)</span><br><span class="line">                <span class="variable language_">self</span>.getPage(url)</span><br><span class="line">                <span class="variable language_">self</span>.offset += <span class="number">10</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;本页爬取成功&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;结束!&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    spider = MaoyanSpider()</span><br><span class="line">    spider.workOn()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫-基础知识</title>
      <link href="/2018/08/08/crawler/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2018/08/08/crawler/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。</p><span id="more"></span><h1 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h1><p><strong>定义</strong>：网络蜘蛛、网络机器人,抓取网络数据的程序<br><strong>总结</strong>：用Python程序去模仿人去访问网站,模仿的越像越好<br><strong>目的</strong>：通过有效的大量数据分析市场走势、决策</p><h1 id="企业获取数据的方式"><a href="#企业获取数据的方式" class="headerlink" title="企业获取数据的方式"></a>企业获取数据的方式</h1><ul><li>公司自有数据</li><li>第三方数据平台购买<ul><li><a href="https://www.datatang.com/index.html">数据堂</a>、<a href="http://www.gbdex.com/website/">贵阳大数据交易所</a></li></ul></li><li>爬虫爬取数据<ul><li>市场上没有或者价格太高,利用爬虫程序爬取</li></ul></li></ul><h1 id="Python做爬虫优势"><a href="#Python做爬虫优势" class="headerlink" title="Python做爬虫优势"></a>Python做爬虫优势</h1><p>请求模块、解析模块丰富成熟;强大的<a href="https://scrapy.org/">Scrapy框架</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PHP ：对多线程、异步支持不好</span><br><span class="line">JAVA：代码笨重, 代码量大</span><br><span class="line">C/C++ ：虽然效率高, 但是代码成型很慢</span><br></pre></td></tr></table></figure><h1 id="爬虫分类"><a href="#爬虫分类" class="headerlink" title="爬虫分类"></a>爬虫分类</h1><ol><li>通用网络爬虫(搜索引擎引用,需要遵守robots协议)<br> <a href="https://www.taobao.com/robots.txt">https://www.taobao.com/robots.txt</a></br><br> <strong>搜索引擎如何获取一个新网站的URL?</strong><ol><li>网站主动向搜索引擎提供(<a href="https://ziyuan.baidu.com/site/index">百度站长平台</a>)</li><li>和DNS服务商(万网)合作,快速收录新网站</li></ol></li><li>聚焦网络爬虫<br> 自己写的爬虫程序, 面向需求的爬虫</li></ol><h1 id="数据爬取步骤"><a href="#数据爬取步骤" class="headerlink" title="数据爬取步骤"></a>数据爬取步骤</h1><ol><li>确定需要爬取的URL</li><li>通过HTTP&#x2F;HTTPS协议发请求获取响应页面</li><li>提取HTML页面有用的数据<br>1. 所需要的数据,保存<br>2. 页面中有新的URL,继续第2步</li></ol><h1 id="Anaconda-和-Spyder"><a href="#Anaconda-和-Spyder" class="headerlink" title="Anaconda 和 Spyder"></a>Anaconda 和 Spyder</h1><p>Anaconda是Python开源的发行版本<br>Spyder是Python的集成开发环境（iPython的一种集成环境）</p><ol><li>Spyder常用快捷键<ol><li>注释&#x2F;取消注释 ：Ctrl + 1</li><li>保存 ：Ctrl + s</li><li>运行程序 ：F5</li><li>自动补全 ：Tab</li></ol></li></ol><blockquote><p>conda 和 pip 区别</p><ul><li>conda可以很好的解决依赖关系</li></ul></blockquote><h1 id="Google插件"><a href="#Google插件" class="headerlink" title="Google插件"></a>Google插件</h1><ol><li>JSONView</li><li>XPath：爬虫</li><li>Proxy-SwitchyOmega：浏览器代理</li></ol><h1 id="WEB知识"><a href="#WEB知识" class="headerlink" title="WEB知识"></a>WEB知识</h1><h2 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h2><pre><code>1. HTTP : 802. HTTPS: 443, HTTP的升级版,加了一个安全套接层</code></pre><h2 id="GET和POST"><a href="#GET和POST" class="headerlink" title="GET和POST"></a>GET和POST</h2><pre><code>1. GET ：查询参数会在URL地址上显示出来2. POST：查询参数和提交的数据是隐藏在Form表单里,不会在URL地址上显示</code></pre><h2 id="URL-统一资源定位符"><a href="#URL-统一资源定位符" class="headerlink" title="URL 统一资源定位符"></a>URL 统一资源定位符</h2><pre><code>[https]:// [item.jd.com] [/14017559909.html][#detail] 协议    域名/IP地址   访问资源的路径   锚点</code></pre><h2 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h2><p>记录用户的浏览器、操作系统等,为了让用户获取更好的HTML页面效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36</span><br></pre></td></tr></table></figure><p>浏览器的标记</p><table><thead><tr><th align="center">浏览器</th><th align="center">标记</th></tr></thead><tbody><tr><td align="center">Mozilla Firefox</td><td align="center">Gecko内核</td></tr><tr><td align="center">IE</td><td align="center">Trident(自己的内核)</td></tr><tr><td align="center">Linux</td><td align="center">KHTML(like Gecko)</td></tr><tr><td align="center">Safari</td><td align="center">Webkit(like KHTML)</td></tr><tr><td align="center">Google</td><td align="center">Chrome(like Webkit)</td></tr><tr><td align="center">其他浏览器</td><td align="center">都是模仿(IE&#x2F;Chrome)</td></tr></tbody></table><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie，有时也用其复数形式 Cookies，指某些网站为了辨别用户身份、进行 session 跟踪而储存在用户本地终端上的数据（通常经过加密）</p><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><p>JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 ECMAScript (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BeJson&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://www.bejson.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="number">88</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isNonProfit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;street&quot;</span><span class="punctuation">:</span> <span class="string">&quot;科技园路.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;江苏苏州&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;country&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中国&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Google&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://www.google.com&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Baidu&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SoSo&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://www.SoSo.com&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精选网站</title>
      <link href="/2018/08/06/recommend/%E7%B2%BE%E9%80%89%E7%BD%91%E7%AB%99/"/>
      <url>/2018/08/06/recommend/%E7%B2%BE%E9%80%89%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>介绍一些好的网址供大家参考</p><span id="more"></span><h2 id="镜像站"><a href="#镜像站" class="headerlink" title="镜像站"></a>镜像站</h2><table><thead><tr><th align="left">站点</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><a href="https://msdn.itellyou.cn/">MSDN我告诉你</a></td><td align="left">Windows镜像站</td></tr><tr><td align="left"><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站</a></td><td align="left">清华大学软件镜像站</td></tr><tr><td align="left"><a href="https://mirrors.ustc.edu.cn/">中科大</a></td><td align="left">中科大软件镜像站</td></tr><tr><td align="left"><a href="http://mirrors.neusoft.edu.cn/">东软镜像站</a></td><td align="left">自己大学的镜像站</td></tr></tbody></table><h2 id="mac破解版软件市场"><a href="#mac破解版软件市场" class="headerlink" title="mac破解版软件市场"></a>mac破解版软件市场</h2><table><thead><tr><th align="left">站点</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><a href="https://www.macwk.com/soft">MacWk</a></td><td align="left">MacWk</td></tr><tr><td align="left"><a href="http://xclient.info/?t=8bbf70cedb6cc547a5d1c8cfa878589cbdd51455">xclient</a></td><td align="left">xclient</td></tr><tr><td align="left"><a href="http://www.52mac.com/">52mac</a></td><td align="left">52mac</td></tr></tbody></table><h2 id="fastMonkey安装配置"><a href="#fastMonkey安装配置" class="headerlink" title="fastMonkey安装配置"></a>fastMonkey安装配置</h2><p><a href="https://testerhome.com/topics/9524">https://testerhome.com/topics/9524</a></p><h2 id="图片压缩网址"><a href="#图片压缩网址" class="headerlink" title="图片压缩网址"></a>图片压缩网址</h2><p><a href="https://tinypng.com/">tinypng</a></p><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p><a href="https://www.desmos.com/calculator">desmos</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS12和Xcode10踩坑</title>
      <link href="/2018/07/05/ios/general/iOS12%E5%92%8CXcode10%E8%B8%A9%E5%9D%91/"/>
      <url>/2018/07/05/ios/general/iOS12%E5%92%8CXcode10%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.rencheng.cc/blog/tgezo.png"></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>昨晚熬夜看完了<code>WWDC 2018</code>，睡前电脑挂着下载<code>xcode10</code>。手机装好了<code>iOS12</code>，体验了一番，感觉比iOS11快多了，看了一眼各家App和我司的App，松了一口气，初步看来今年应该不需要做太多的适配工作，然后就睡了。（然而，果然不能立flag！😂）</p><p>早上晚到了一些，xcode10解压了一下，开始初步评估一下适配。emmmm，工程跑不起来了…好了果然不能低估，开干。</p><h1 id="问题与解决"><a href="#问题与解决" class="headerlink" title="问题与解决"></a>问题与解决</h1><h2 id="重复文件报错"><a href="#重复文件报错" class="headerlink" title="重复文件报错"></a>重复文件报错</h2><p>一上来就是build没2秒就报错了，看报错的说法是有重复的info.plist。<br><img src="https://cdn.rencheng.cc/blog/jde81.png"><br>我们组件化后把一些三方库和封装方法打成了一个私有库。进去看了一下，我们使用了<code>阿里云统计 + 推送 + Alipay</code>，里面确实有好几个<code>info.plist</code>，删除了就好了</p><h2 id="c-6-0-9消失了？"><a href="#c-6-0-9消失了？" class="headerlink" title="c++.6.0.9消失了？"></a>c++.6.0.9消失了？</h2><p>报错：<code>library not found for -lstdc++.6.0.9</code><br><img src="https://cdn.rencheng.cc/blog/u4m2x.png"></p><p>第一反应是去<code>Build Phases</code>里的<code>Link Binary With Libraries</code>进行添加，然后发现选择<code>frameworks and libraries</code>里已经没有了这个库了😂，又回去看了一下Xcode9里是有的。<br><img src="https://cdn.rencheng.cc/blog/jhb6u.png"></p><p>但是因为之前在Xcode9上是正常跑的项目，而且我们组件化后，依赖是在私有库的podspec里定义的，全局搜了下所有的podspec并没有依赖过这个lib。</p><p>想起来<code>pod isntall</code>后会有一个<code>Pods-xxxx.xcconfig</code>文件，果然找到了这个<code>-l stdc++.6.0.9</code>，但是这边是汇总了所有的依赖，无法找到源头。<br><img src="https://cdn.rencheng.cc/blog/9kbxl.png"></p><p>那如果直接在这里删掉这个依赖呢？是不是会爆出更清晰的错？<br>答案是就如下图，因为删掉了这个依赖，那依赖这个lib的源码就出现了一些调用方法的报错，如下图，很明显的发现了这个叫<code>libQYSDK.a</code>的库。恩，就是三方库<code>七鱼客服</code>了😂，赶紧联系了一波工具提供方。<br><img src="https://cdn.rencheng.cc/blog/asl42.png"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>将Xcode9的libstdc++6.0.9.tbd拷贝到28-xcode10中使用。</p><h2 id="Copy-Pods-Resources失效"><a href="#Copy-Pods-Resources失效" class="headerlink" title="Copy Pods Resources失效"></a>Copy Pods Resources失效</h2><p>经过上面一波操作后，终于编译通过了，也跑起来，就在以为一切都正常起来的时候，突然 崩！溃！了！</p><p>一看报错原因，是<code>Profile.StoryBoard</code>没有找到，我们做了组件化后很多资源文件是在各自的pod里的，理论上这个sb应该在执行<code>Copy Pods Resources</code>后被copy到在<code>*.app</code>的包里<br><img src="https://cdn.rencheng.cc/blog/84eww.png"><br>于是去查看了一下编译后生成的Product，所有组件库的资源文件 都！不！在！</p><p>怀疑是这个指令没有执行，然后clear重新编译，盯着编译过程。果然，只执行了<code>Check Pods Manifest.lock</code>和<code>Embed Pods Frameworks</code>。<br><img src="https://cdn.rencheng.cc/blog/kocwh.jpg"></p><p>看了下<code>CocoaPods</code>的issues里没有人提到这些，估计新版是好的，赶紧装了<code>CocoaPods-1.5.3</code>再把Pods文件夹删了重新install一下，就好了。需要升级CocoaPods版本<code>&gt;=1.4.0</code>以上</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OC-内存管理</title>
      <link href="/2018/06/25/ios/objc/OC-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2018/06/25/ios/objc/OC-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="常用概念"><a href="#常用概念" class="headerlink" title="常用概念"></a>常用概念</h2><h3 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h3><p>该释放的对象没有释放</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="iOS程序的内存布局"><a href="#iOS程序的内存布局" class="headerlink" title="iOS程序的内存布局"></a>iOS程序的内存布局</h2><p><img src="https://cdn.rencheng.cc/blog/a75cu.jpg"></p><ul><li>代码段：编译之后的代码</li><li>数据段<ul><li>字符串常量：比如NSString *str &#x3D; @”123”</li><li>已初始化数据：已初始化的全局变量、静态变量等</li><li>未初始化数据：未初始化的全局变量、静态变量等</li></ul></li><li>栈：函数调用开销，比如局部变量。分配的内存空间地址越来越小</li><li>堆：通过alloc、malloc、calloc等动态分配的空间，分配的内存空间地址越来越大</li></ul><h2 id="Tagged-Pointer"><a href="#Tagged-Pointer" class="headerlink" title="Tagged Pointer"></a>Tagged Pointer</h2><p>从64bit开始，iOS引入了<code>Tagged Pointer</code>技术，用于优化<code>NSNumber</code>、<code>NSDate</code>、<code>NSString</code>等小对象的存储</p><p>在没有使用<code>Tagged Pointer</code>之前， <code>NSNumber</code>等对象需要<code>动态分配内存</code>、维护<code>引用计数</code>等，<code>NSNumber指针存储的是堆中</code>NSNumber&#96;对象的地址值</p><p>使用<code>Tagged Pointer</code>之后，NSNumber指针里面存储的数据变成了：<code>Tag + Data</code>，也就是将数据直接存储在了指针中。当指针不够存储数据时，才会使用动态分配内存的方式来存储数据</p><p><code>objc_msgSend</code>能识别<code>Tagged Pointer</code>，比如<code>NSNumber</code>的<code>intValue</code>方法，直接从指针提取数据，节省了以前的调用开销</p><blockquote><p>如何判断一个指针是否为Tagged Pointer？<br>iOS平台，最高有效位是1（第64bit）；WWDC2020：最低有效位是1<br>Mac平台，最低有效位是1</p></blockquote><h2 id="OC对象的内存管理"><a href="#OC对象的内存管理" class="headerlink" title="OC对象的内存管理"></a>OC对象的内存管理</h2><p>在iOS中，使用<code>引用计数</code>来管理OC对象的内存.</p><ul><li><p>一个新创建的OC对象引用计数默认是1，当引用计数减为0，OC对象就会销毁，释放其占用的内存空间</p></li><li><p>调用<code>retain</code>会让OC对象的引用计数<code>+1</code>，调用<code>release</code>会让OC对象的引用计数<code>-1</code></p></li><li><p>想<code>拥有</code>某个对象，就让它的引用计数<code>+1</code>；<code>不</code>想再拥有某个对象，就让它的引用计数<code>-1</code></p></li></ul><p><strong>@property</strong><br>旧：生成一个成员变量，以及setter和getter的<code>声明</code>，搭配<code>@synthesize</code>使用<br>新：生成一个下划线开头成员变量，以及setter和getter的<code>声明</code>及实现<br><strong>@synthesize</strong><br>自动生成成员变量和属性的setter，getter实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@synthesize dog = _dog;</span><br></pre></td></tr></table></figure><p><strong>@autorelease</strong><br>系统会在恰当的时候进行释放</p><blockquote><p>可以通过以下私有函数来查看自动释放池的情况</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">void</span> _objc_autoreleasePoolPrint(<span class="type">void</span>);</span><br></pre></td></tr></table></figure><p><strong>拷贝</strong><br>产生一个副本对象，跟源对象不影响. 修改了源对象，不会影响副本对象；修改了副本对象，不会影响源对象。</p><p><strong>iOS提供两种拷贝</strong></p><ul><li>copy 不可变拷贝，产生不可变副本</li><li>mutableCopy，可变拷贝，产生可变副本</li></ul><p><strong>深拷贝和浅拷贝</strong></p><ul><li>浅拷贝：指针拷贝<ul><li>没有产生新对象</li><li>引用计数+1</li></ul></li><li>深拷贝：内容拷贝<ul><li>产生新的对象。</li><li>新的对象引用计数为1</li></ul></li></ul><table><thead><tr><th align="left"></th><th align="left">copy</th><th align="left">mutableCopy</th></tr></thead><tbody><tr><td align="left">NSString</td><td align="left">NSString</br>浅拷贝</td><td align="left">NSMutableString</br>深拷贝</td></tr><tr><td align="left">NSMutableString</td><td align="left">NSString</br>深拷贝</td><td align="left">NSMutableString</br>深拷贝</td></tr><tr><td align="left">NSArray</td><td align="left">NSArray</br>浅拷贝</td><td align="left">NSMutableArray</br></td></tr><tr><td align="left">NSMutableArray</td><td align="left">NSArray</br>深拷贝</td><td align="left">NSMutableArray</br>深拷贝</td></tr><tr><td align="left">NSDictionary</td><td align="left">NSDictionary</br>浅拷贝</td><td align="left">NSMutableDictionary</br>深拷贝</td></tr><tr><td align="left">NSMutableDictionary</td><td align="left">NSDictionary</br>深拷贝</td><td align="left">NSMutableDictionary</br>深拷贝</td></tr></tbody></table><blockquote><p>copy 并不代表浅拷贝。如果对一个可变对象做copy操作，那么其就是深拷贝。</p></blockquote><h3 id="MRC-手动内存管理"><a href="#MRC-手动内存管理" class="headerlink" title="MRC - 手动内存管理"></a>MRC - 手动内存管理</h3><p>当调用<code>alloc</code>、<code>new</code>、<code>copy</code>、<code>mutableCopy</code>方法返回了一个对象，在不需要这个对象时，要调用<code>release</code>或者<code>autorelease</code>来释放它</p><p><strong>复杂数据类型(retain,strong)的setter和getter</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)seDog:(Dog *)dog &#123;</span><br><span class="line">    <span class="keyword">if</span> (_dog != dog) &#123;    </span><br><span class="line">        [_dog release];</span><br><span class="line">        _dog = [dog <span class="keyword">retain</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">- (Dog *)dog &#123;</span><br><span class="line">    <span class="keyword">return</span> _dog;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)dealloc &#123;</span><br><span class="line">    [_dog release];</span><br><span class="line">    _dog = <span class="literal">nil</span>;</span><br><span class="line">    <span class="comment">// 或者</span></span><br><span class="line">    <span class="comment">// self.dog = nil;</span></span><br><span class="line">    [<span class="variable language_">super</span> dealloc];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基础数据类型(assign)的setter和getter</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)seAge:(<span class="type">int</span>)age &#123;</span><br><span class="line">    _age = age;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">int</span>)age &#123;</span><br><span class="line">    <span class="keyword">return</span> _age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>涉及不到内存管理操作</p></blockquote><p><strong>遵循NSCoping协议类型(copy)的setter和getter</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)seName:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="keyword">if</span> (_name != name) &#123;</span><br><span class="line">        [_name release];</span><br><span class="line">        _name = [name <span class="keyword">copy</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="keyword">return</span> _name;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)dealloc &#123;</span><br><span class="line">    [_name release];</span><br><span class="line">    [<span class="variable language_">super</span> dealloc];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>遍历构造器</strong><br>譬如<code>[NSArray array]</code>这种遍历构造器生成的对象，内部做了<code>autorelease</code>的处理，外部不需要再进行<code>release</code>操作</p><p><strong>集合</strong></p><h2 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h2><p>在OC中，只有<code>NSData</code>，<code>NSString</code>，<code>NSSet</code>，<code>NSArray</code>，<code>NSDictionary</code>这些类支持<code>copy</code>操作。如果想对其他类实现copy操作，如下代码去实现<br><strong>遵循NSCoping协议</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">NSCoping</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>实现协议方法</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">id</span>)copyWithZone:(<span class="built_in">NSZone</span> *)zone &#123;</span><br><span class="line">    Person *person = [[Person alloc] init];</span><br><span class="line">    person.age = <span class="keyword">self</span>.age;</span><br><span class="line">    person.name = <span class="keyword">self</span>.name;</span><br><span class="line">    <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS底层原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-多线程</title>
      <link href="/2018/06/18/ios/objc/OC-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/06/18/ios/objc/OC-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>多线程，充分利用设备多核的技术。应用非常广泛</p><span id="more"></span><h2 id="iOS中的常见多线程方案"><a href="#iOS中的常见多线程方案" class="headerlink" title="iOS中的常见多线程方案"></a>iOS中的常见多线程方案</h2><table><thead><tr><th align="left">技术方案</th><th align="left">简介</th><th align="left">语言</th><th align="left">线程生命周期</th><th align="left">使用频率</th></tr></thead><tbody><tr><td align="left">pthread</td><td align="left">一套通用的多线程API</br>适用于Unix\Linux\Windows</br>跨平台\可移植</br>使用难度大</br>是下面几种方案的底层实现</td><td align="left">C</td><td align="left">程序员管理</td><td align="left">几乎不用</td></tr><tr><td align="left">NSThread</td><td align="left">使用更加面向对象</br>简单易用，可直接操作线程对象</td><td align="left">OC</td><td align="left">程序员管理</td><td align="left">偶尔使用</td></tr><tr><td align="left">GCD</td><td align="left">旨在替代NSThread等线程技术</br>充分利用设备多核</td><td align="left">C</td><td align="left">自动管理</td><td align="left">经常使用</td></tr><tr><td align="left">NSOperation</td><td align="left">基于GCD（底层是GCD）</br>比GCD多一些简单实用的功能</br>使用更加面向对象</td><td align="left">OC</td><td align="left">自动管理</td><td align="left">经常使用</td></tr></tbody></table><h2 id="容易混淆的术语"><a href="#容易混淆的术语" class="headerlink" title="容易混淆的术语"></a>容易混淆的术语</h2><p><strong>同步和异步</strong>：决定能不能开启新的线程</p><ul><li><code>同步</code>：在当前线程中执行任务，不具备开启新线程的能力</li><li><code>异步</code>：在新的线程中执行任务，具备开启新线程的能力</li></ul><p><strong>并发和串行</strong>：决定任务的执行方式</p><ul><li><code>并发</code>：多个任务并发（同时）执行</li><li><code>串行</code>：一个任务执行完毕后，再执行下一个任务</li></ul><h2 id="各种队列的执行效果"><a href="#各种队列的执行效果" class="headerlink" title="各种队列的执行效果"></a>各种队列的执行效果</h2><table><thead><tr><th align="left"></th><th align="left">并发队列</th><th align="left">手动创建的串行队列</th><th align="left">主队列</th></tr></thead><tbody><tr><td align="left">同步(sync)</td><td align="left"><strong>没有</strong>开启新线程</br><strong>串行</strong>执行任务</td><td align="left"><strong>没有</strong>开启新线程</br><strong>串行</strong>执行任务</td><td align="left"><strong>没有</strong>开启新线程</br><strong>串行</strong>执行任务</td></tr><tr><td align="left">异步(async)</td><td align="left"><strong>有</strong>开启新线程</br><strong>并发</strong>执行任务</td><td align="left"><strong>有</strong>开启新线程</br><strong>串行</strong>执行任务</td><td align="left"><strong>没有</strong>开启新线程</br><strong>串行</strong>执行任务</td></tr></tbody></table><blockquote><p>使用sync函数往当前串行队列中添加任务，会卡住当前的串行队列（产生死锁）</p></blockquote><h2 id="队列组的使用"><a href="#队列组的使用" class="headerlink" title="队列组的使用"></a>队列组的使用</h2><p><strong>思考</strong>：如何用GCD实现以下功能</p><ul><li>异步并发执行任务1、任务2</li><li>等任务1、任务2都执行完毕后，再回到主线程执行任务3</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    dispatch_group_t group = dispatch_group_create();</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">&quot;myqueue&quot;</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务1&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;任务2&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_group_notify(group, queue, ^&#123;</span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;任务3&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在任务1或者任务2中，我们还要进行异步操作<br>进入异步操作前</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch_group_enter(group);</span><br></pre></td></tr></table></figure><p>异步操作结束</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch_group_leave(group);</span><br></pre></td></tr></table></figure><h2 id="多线程的安全隐患"><a href="#多线程的安全隐患" class="headerlink" title="多线程的安全隐患"></a>多线程的安全隐患</h2><ul><li><p>资源共享</p><ul><li>1块资源可能会被多个线程共享，也就是多个线程可能会访问同一块资源</li><li>比如多个线程访问同一个对象、同一个变量、同一个文件</li></ul></li><li><p>当多个线程访问同一块资源时，很容易引发数据错乱和数据安全问题</p></li></ul><h3 id="经典示例：存钱取钱"><a href="#经典示例：存钱取钱" class="headerlink" title="经典示例：存钱取钱"></a>经典示例：存钱取钱</h3><p><img src="https://cdn.rencheng.cc/blog/opwkh.jpg"><br>蓝色操作队列代表甲用户拿卡存钱，绿色代表乙用户拿卡取钱。假如他们操作的是同一个账户；黄色代表账户余额。</p><h3 id="经典示例：卖票"><a href="#经典示例：卖票" class="headerlink" title="经典示例：卖票"></a>经典示例：卖票</h3><p><img src="https://cdn.rencheng.cc/blog/npkRzM.jpg" alt="npkRzM"></p><h3 id="分析与解决"><a href="#分析与解决" class="headerlink" title="分析与解决"></a>分析与解决</h3><p><img src="https://cdn.rencheng.cc/blog/8kiyt.jpg"></p><p><strong>解决方案</strong>：使用<code>线程同步</code>技术（同步，就是协同步调，按预定的先后次序进行）<br>常见的线程同步技术是：<code>加锁</code></p><p><img src="https://cdn.rencheng.cc/blog/ctbpw.jpg"></p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p><strong>线程阻塞的方式</strong></p><ul><li>忙等：类似死循环（占用CPU资源）</li><li>休眠：（不占用CPU资源）</li></ul><p><strong>优先级反转</strong><br>在多线程同步环境中，线程1的优先级比较低，线程2的优先级比较高。在执行过程中，线程1先拿到锁，然后加锁执行读写操作。线程1本身就是低优先级的，在加锁执行特别耗时操作，那么本来高优先级线程B一直在等待。这就叫优先级反转。常发生在自旋锁</p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h4 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h4><p>线程阻塞的方式采用忙等</p><h4 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h4><p>线程阻塞的方式采用休眠</p><h4 id="递归锁"><a href="#递归锁" class="headerlink" title="递归锁"></a>递归锁</h4><p>允许同一个线程对一把锁重复加锁</p><h3 id="OSSpinLock"><a href="#OSSpinLock" class="headerlink" title="OSSpinLock"></a><del>OSSpinLock</del></h3><p><code>OSSpinLock</code>叫做”自旋锁”，等待锁的线程会处于<code>忙等（busy-wait）</code>状态，一直占用着CPU资源</p><p><strong>使用</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;libkern/OSAtomic.h&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化锁</span></span><br><span class="line">OSSpinLock lock = OS_SPINLOCK_INIT;</span><br><span class="line"><span class="comment">// 尝试加锁(如果需要等待就不加锁,直接返回false;如果不需要等待就加锁,返回true)</span></span><br><span class="line"><span class="type">BOOL</span> result = OSSpinLockTry(&amp;lock);</span><br><span class="line"><span class="comment">// 主动加锁（与尝试加锁操作互斥）</span></span><br><span class="line">OSSpinLockLock(&amp;lock);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 读写操作</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line">OSSpinLockUnlock(&amp;lock);</span><br></pre></td></tr></table></figure><blockquote><p>在实际开发中，要注意lock是多线程共用的，不要写成局部变量，避免每次都重新创建锁，实现不了需求。</p></blockquote><p><strong>存在的问题</strong></p><ul><li>目前已经不再安全，可能会出现优先级反转问题</li><li>如果等待锁的线程优先级较高，它会一直占用着CPU资源，优先级低的线程就无法释放锁</li></ul><blockquote><p>iOS10之后已经废弃</p></blockquote><h3 id="os-unfair-lock"><a href="#os-unfair-lock" class="headerlink" title="os_unfair_lock"></a>os_unfair_lock</h3><p><code>os_unfair_lock</code>用于取代不安全的OSSpinLock,等待锁的线程会处于休眠状态，并非忙等</p><p><strong>使用</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;os/lock.h&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化锁</span></span><br><span class="line">os_unfair_lock lock = OS_UNFAIR_LOCK_INIT;</span><br><span class="line"><span class="comment">// 尝试加锁(如果需要等待就不加锁,直接返回false;如果不需要等待就加锁,返回true)</span></span><br><span class="line"><span class="type">BOOL</span> result = os_unfair_lock_trylock(&amp;lock);</span><br><span class="line"><span class="comment">// 主动加锁（与尝试加锁操作互斥）</span></span><br><span class="line">os_unfair_lock_lock(&amp;lock);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 读写操作</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line">os_unfair_lock_unlock(&amp;lock);</span><br></pre></td></tr></table></figure><blockquote><p>在实际开发中，要注意lock是多线程共用的，不要写成局部变量，避免每次都重新创建锁，实现不了需求。</p></blockquote><h3 id="pthread-mutex"><a href="#pthread-mutex" class="headerlink" title="pthread_mutex"></a>pthread_mutex</h3><p><code>pthread_mutex</code>叫做”互斥锁”，等待锁的线程会处于休眠状态</p><p><strong>使用</strong></p><p>导入头文件</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;pthread.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>初始化方法1：静态初始化</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;</span><br></pre></td></tr></table></figure><p>初始化方法2：动态初始化(自定义属性)</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化属性</span></span><br><span class="line">pthread_mutexattr_t attr;</span><br><span class="line">pthread_mutexattr_init(&amp;attr);</span><br><span class="line"><span class="comment">// PTHREAD_MUTEX_DEFAULT  - 互斥锁</span></span><br><span class="line"><span class="comment">// PTHREAD_MUTEX_RECURSIVE - 自旋锁</span></span><br><span class="line">pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_DEFAULT);</span><br><span class="line"><span class="comment">// 初始化锁，mutex是指针</span></span><br><span class="line">pthread_mutex_init(mutex, &amp;attr);</span><br></pre></td></tr></table></figure><p>初始化方法2：动态初始化(默认属性)</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_mutex_init(mutex, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>加锁解锁操作</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尝试加锁</span></span><br><span class="line">pthread_mutex_trylock(&amp;mutex);</span><br><span class="line"><span class="comment">// 加锁</span></span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 读写操作</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br></pre></td></tr></table></figure><p>条件处理</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化条件</span></span><br><span class="line">pthread_cond_t cond;</span><br><span class="line">pthread_cond_init(&amp;cond, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 等待条件(进入休眠,放开mutex锁;被唤醒后,会再次对mutex加锁)</span></span><br><span class="line">pthread_cond_wait(&amp;cond, &amp;mutex);</span><br><span class="line"><span class="comment">// 激活一个等待该条件的线程</span></span><br><span class="line">pthread_cond_signal(&amp;cond);</span><br><span class="line"><span class="comment">// 激活所有等待该条件的线程</span></span><br><span class="line">pthread_cond_broadcast(&amp;cond);</span><br></pre></td></tr></table></figure><p>在恰当的时机，销毁锁</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">pthread_mutexattr_destroy(&amp;attr)</span><br><span class="line">pthread_cond_destroy(&amp;cond)</span><br></pre></td></tr></table></figure><blockquote><p>条件处理适用于[生产者-消费者]模式</p></blockquote><h3 id="NSLock"><a href="#NSLock" class="headerlink" title="NSLock"></a>NSLock</h3><p><code>NSLock</code>是对<code>mutex</code>普通锁的封装</p><p><strong>使用</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSLock</span> *lock = [<span class="built_in">NSLock</span> new];</span><br><span class="line">[lock lock];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 读写操作</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">[lock unlock];</span><br></pre></td></tr></table></figure><h3 id="NSRecursiveLock"><a href="#NSRecursiveLock" class="headerlink" title="NSRecursiveLock"></a>NSRecursiveLock</h3><p><code>NSRecursiveLock</code>是对<code>mutex</code>递归锁的封装<br><strong>使用</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSRecursiveLock</span> *lock = [<span class="built_in">NSRecursiveLock</span> new];</span><br><span class="line">[lock lock]</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 读写操作</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">[lock unlock]</span><br></pre></td></tr></table></figure><h3 id="NSCondition"><a href="#NSCondition" class="headerlink" title="NSCondition"></a>NSCondition</h3><p><code>NSCondition</code>是对<code>mutex</code>和<code>cond</code>的封装</p><p><strong>使用</strong><br>语义可参考pthread_mutex</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSCondition</span> *condition = [<span class="built_in">NSCondition</span> new];</span><br><span class="line">[condition lock]</span><br><span class="line">[condition wait];</span><br><span class="line">[condition signal];</span><br><span class="line">[condition broadcast];</span><br><span class="line">[condition unlock]</span><br></pre></td></tr></table></figure><h3 id="NSConditionLock"><a href="#NSConditionLock" class="headerlink" title="NSConditionLock"></a>NSConditionLock</h3><p>条件锁。<code>NSConditionLock</code>是对<code>NSCondition</code>的进一步封装，可以设置具体的条件值</p><p><strong>定义说明</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件值</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSInteger</span> condition;</span><br><span class="line"><span class="comment">// 用于condition等于特定值的时候加锁</span></span><br><span class="line">- (<span class="type">void</span>)lockWhenCondition:(<span class="built_in">NSInteger</span>)condition;</span><br><span class="line"><span class="comment">// 尝试加锁,加锁失败时返回NO</span></span><br><span class="line">- (<span class="type">BOOL</span>)tryLock;</span><br><span class="line">- (<span class="type">BOOL</span>)tryLockWhenCondition:(<span class="built_in">NSInteger</span>)condition</span><br><span class="line"><span class="comment">// 指定条件时解锁，每次解锁会导致内部的condition值改变为指定的值，同时唤醒其它阻塞的线程检测这里的condition是否满足条件</span></span><br><span class="line">- (<span class="type">void</span>)unlockWithCondition:(<span class="built_in">NSInteger</span>)condition;</span><br><span class="line"><span class="comment">// 指定条件加锁</span></span><br><span class="line">- (<span class="type">BOOL</span>)lockBeforeDate:(<span class="built_in">NSDate</span> *)limit;</span><br><span class="line">- (<span class="type">BOOL</span>)lockWhenCondition:(<span class="built_in">NSInteger</span>)condition beforeDate:(<span class="built_in">NSDate</span> *)limit;</span><br></pre></td></tr></table></figure><blockquote><p><code>NSConditionLock</code>相对于<code>NSCondition</code>效率更低。</p></blockquote><h3 id="dispatch-queue-DISPATCH-QUEUE-SERIAL"><a href="#dispatch-queue-DISPATCH-QUEUE-SERIAL" class="headerlink" title="dispatch_queue(DISPATCH_QUEUE_SERIAL)"></a>dispatch_queue(DISPATCH_QUEUE_SERIAL)</h3><p>直接使用GCD的串行队列，也是可以实现线程同步的</p><p><strong>使用</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">&quot;com.myqueue&quot;</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;任务1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;任务2&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="dispatch-semaphore"><a href="#dispatch-semaphore" class="headerlink" title="dispatch_semaphore"></a>dispatch_semaphore</h3><p><code>semaphore</code>叫做”信号量”。信号量的初始值，可以用来控制线程并发访问的最大数量</p><blockquote><p>信号量的初始值为1，代表同时只允许1条线程访问资源，保证线程同步</p></blockquote><p><strong>使用</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化的时候，数值&gt;1可实现-&gt;最大并发数量</span></span><br><span class="line"><span class="comment">// 初始化的时候，数值=1可实现-&gt;线程同步</span></span><br><span class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 当信号量的值&gt;0，就让信号量的值-1；继续执行下面的代码</span></span><br><span class="line"><span class="comment">// 当信号量的值&lt;=0,就会休眠等待，直到信号量的值&gt;0;一旦&gt;0就让信号量的值-1，继续操作</span></span><br><span class="line">dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 让信号量的值+1</span></span><br><span class="line">dispatch_semaphore_signal(semaphore);</span><br></pre></td></tr></table></figure><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="@synchronized"></a>@synchronized</h3><p><code>@synchronized</code>是对<code>mutex</code>递归锁的封装<br><code>@synchronized(obj)</code>内部会生成obj对应的递归锁，然后进行加锁、解锁操作</p><p><strong>使用</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 括号里的对象要唯一，不同对象代表锁是不同的。</span></span><br><span class="line"><span class="keyword">@synchronized</span>(obj) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 操作</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>源码查看：objc4中的objc-sync.mm文件<br>官方不推荐使用，性能差。</p></blockquote><h3 id="以上的方案性能比较"><a href="#以上的方案性能比较" class="headerlink" title="以上的方案性能比较"></a>以上的方案性能比较</h3><p>性能从高到低排序</p><p>os_unfair_lock<br><del>OSSpinLock</del><br>dispatch_semaphore<br>pthread_mutex<br>dispatch_queue(DISPATCH_QUEUE_SERIAL)<br>NSLock<br>NSCondition<br>pthread_mutex(recursive)<br>NSRecursiveLock<br>NSConditionLock<br>@synchronized</p><h3 id="自旋锁、互斥锁比较"><a href="#自旋锁、互斥锁比较" class="headerlink" title="自旋锁、互斥锁比较"></a>自旋锁、互斥锁比较</h3><p><strong>什么情况使用自旋锁比较划算？</strong></p><ul><li>预计线程等待锁的时间很短</li><li>加锁的代码（临界区）经常被调用，但竞争情况很少发生</li><li>CPU资源不紧张</li><li>多核处理器</li></ul><p><strong>什么情况使用互斥锁比较划算？</strong></p><ul><li>预计线程等待锁的时间较长</li><li>单核处理器</li><li>临界区有IO操作</li><li>临界区代码复杂或者循环量大</li><li>临界区竞争非常激烈</li></ul><blockquote><p>临界区：<code>lock</code>和<code>unlock</code>之间的代码</p></blockquote><h2 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h2><p><code>atomic</code>用于保证属性setter、getter的原子性操作，相当于在getter和setter内部加了线程同步的锁。<br>原子性代表线程同步。<br>原子在物理学中定义是最小<strong>不可分割</strong>的单位<br>我们的原子性，就是把几个语句作为一个原子来执行。<br><strong>内部实现</strong><br>伪代码</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)setA:(<span class="type">int</span>)a &#123;</span><br><span class="line">    <span class="keyword">if</span> (!atmic) &#123;</span><br><span class="line">        _a = a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        加自旋锁</span><br><span class="line">        _a = a</span><br><span class="line">        解锁</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)getA &#123;</span><br><span class="line">    <span class="keyword">if</span> (!atmic) &#123; <span class="keyword">return</span> _a &#125;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    加自旋锁</span><br><span class="line">    t = _a;</span><br><span class="line">    解锁</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong><br>从上面伪代码可以看出，属性的setter方法和getter方法是线程安全的；但是不能保证使用属性的过程是线程安全的</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, atomic) <span class="built_in">NSMutableArray</span> *data;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// 这一句是线程安全的, 因为调用了setter方法</span></span><br><span class="line">    <span class="keyword">self</span>.data = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="comment">// 下面的addObject操作是线程不安全的</span></span><br><span class="line">    [<span class="keyword">self</span>.data addObject:<span class="string">@&quot;1111&quot;</span>];</span><br><span class="line">    [<span class="keyword">self</span>.data addObject:<span class="string">@&quot;2222&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>参考源码objc4的objc-accessors.mm<br>特别浪费性能，因为属性调用非常频繁，而且浪费内存。常用MacOS的开发，iOS内存小，不要使用。</p></blockquote><h2 id="读写安全方案"><a href="#读写安全方案" class="headerlink" title="读写安全方案"></a>读写安全方案</h2><p><strong>思考如何实现以下场景</strong></p><ul><li>同一时间，只能有1个线程进行写的操作</li><li>同一时间，允许有多个线程进行读的操作</li><li>同一时间，不允许既有写的操作，又有读的操作</li></ul><p>上面的场景就是典型的“多读单写”，经常用于文件等数据的读写操作，iOS中的实现方案有</p><ul><li><code>pthread_rwlock</code>：读写锁</li><li><code>dispatch_barrier_async</code>：异步栅栏调用</li></ul><h3 id="pthread-rwlock"><a href="#pthread-rwlock" class="headerlink" title="pthread_rwlock"></a>pthread_rwlock</h3><p>等待锁的线程会进入休眠</p><p><strong>使用</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化锁</span></span><br><span class="line">pthread_rwlock_t lock;</span><br><span class="line">pthread_rwlock_init(&amp;lock, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 读-加锁</span></span><br><span class="line">pthread_rwlock_rdlock(&amp;lock);</span><br><span class="line"><span class="comment">// 读-尝试加锁</span></span><br><span class="line">pthread_rwlock_tryrdlock(&amp;lock);</span><br><span class="line"><span class="comment">// 写-加锁</span></span><br><span class="line">pthread_rwlock_wrlock(&amp;lock);</span><br><span class="line"><span class="comment">// 写-尝试加锁</span></span><br><span class="line">pthread_rwlock_trywrlock(&amp;lock);</span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line">pthread_rwlock_unlock(&amp;lock);</span><br><span class="line"><span class="comment">// 销毁</span></span><br><span class="line">pthread_rwlock_destroy(&amp;lock);</span><br></pre></td></tr></table></figure><h3 id="dispatch-barrier-async"><a href="#dispatch-barrier-async" class="headerlink" title="dispatch_barrier_async"></a>dispatch_barrier_async</h3><p>这个函数传入的并发队列必须是自己通过dispatch_queue_cretate创建的<br>如果传入的是一个串行或是一个全局的并发队列，那这个函数便等同于dispatch_async函数的效果</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化队列</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">&quot;com.myqueue&quot;</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 读</span></span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 写</span></span><br><span class="line">dispatch_barrier_async(queue, ^&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/cheng-ren/Multithreading">Github工程代码</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS底层原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runloop</title>
      <link href="/2018/06/03/ios/objc/OC-Runloop/"/>
      <url>/2018/06/03/ios/objc/OC-Runloop/</url>
      
        <content type="html"><![CDATA[<p>Runloop是面试中的重点，也是开发过程中对性能优化的点</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是RunLoop"><a href="#什么是RunLoop" class="headerlink" title="什么是RunLoop"></a>什么是RunLoop</h3><ul><li>运行循环</li><li>在程序运行过程中循环做一些事情</li></ul><h3 id="应用范畴"><a href="#应用范畴" class="headerlink" title="应用范畴"></a>应用范畴</h3><ul><li>定时器（Timer）、PerformSelector</li><li>GCD Async Main Queue</li><li>事件响应、手势识别、界面刷新</li><li>网络请求</li><li>AutoreleasePool</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p><strong>如果没有RunLoop</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> main(<span class="type">int</span> argc, <span class="keyword">const</span> <span class="type">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;Hello World!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完第3行代码后，会即将退出程序</p><p><strong>如果有了RunLoop</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> main(<span class="type">int</span> argc, <span class="type">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate <span class="keyword">class</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序并不会马上退出，而是保持运行状态</p><blockquote><p>RunLoop的基本作用</p><ul><li>保持程序的持续运行</li><li>处理App中的各种事件（比如触摸事件、定时器事件等）</li><li>节省CPU资源，提高程序性能：该做事时做事，该休息时休息</li></ul></blockquote><h2 id="RunLoop对象"><a href="#RunLoop对象" class="headerlink" title="RunLoop对象"></a>RunLoop对象</h2><p>iOS中有2套API来访问和使用RunLoop</p><ul><li>Foundation - NSRunLoop</li><li>Core Foundation - CFRunLoopRef</li></ul><blockquote><p><code>NSRunLoop</code>和<code>CFRunLoopRef</code>都代表着RunLoop对象<br><code>NSRunLoop</code>是基于<code>CFRunLoopRef</code>的一层OC包装<br><code>CFRunLoopRef</code>是开源的</p></blockquote><h3 id="如何获取Runloop对象"><a href="#如何获取Runloop对象" class="headerlink" title="如何获取Runloop对象"></a>如何获取Runloop对象</h3><ul><li><p>Foundation</p><ul><li>[NSRunLoop currentRunLoop]; &#x2F;&#x2F; 获得当前线程的RunLoop对象</li><li>[NSRunLoop mainRunLoop]; &#x2F;&#x2F; 获得主线程的RunLoop对象</li></ul></li><li><p>Core Foundation</p><ul><li>CFRunLoopGetCurrent(); &#x2F;&#x2F; 获得当前线程的RunLoop对象</li><li>CFRunLoopGetMain(); &#x2F;&#x2F; 获得主线程的RunLoop对象</li></ul></li></ul><h3 id="RunLoop的5个关键类"><a href="#RunLoop的5个关键类" class="headerlink" title="RunLoop的5个关键类"></a>RunLoop的5个关键类</h3><table><thead><tr><th align="left">类名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">CFRunLoopRef</td><td align="left">Runloop对象</td></tr><tr><td align="left">CFRunLoopModeRef</td><td align="left">RunLoop的运行模式</td></tr><tr><td align="left">CFRunLoopSourceRef</td><td align="left">系统事件，触摸事件，基于Port的线程间通信等</td></tr><tr><td align="left">CFRunLoopTimerRef</td><td align="left">定时器</td></tr><tr><td align="left">CFRunLoopObserverRef</td><td align="left">监听器状态</td></tr></tbody></table><p><strong>类关系</strong><br><img src="https://cdn.rencheng.cc/blog/hjt19.jpg"></p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Source0</td><td align="left">触摸事件处理</br>performSelector:onThread:</td></tr><tr><td align="left">Source1</td><td align="left">基于Port的线程间通信</br>系统事件捕捉</td></tr><tr><td align="left">Timers</td><td align="left">NSTimer</br>performSelector:withObject:afterDelay:</td></tr><tr><td align="left">Observers</td><td align="left">用于监听RunLoop的状态</br>UI刷新（BeforeWaiting）</br>Autorelease pool（BeforeWaiting）</td></tr></tbody></table><h4 id="CFRunLoopRef"><a href="#CFRunLoopRef" class="headerlink" title="CFRunLoopRef"></a>CFRunLoopRef</h4><p>列举CFRunloop对象的关键属性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoop</span> *<span class="title">CFRunLoopRef</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoop</span> &#123;</span></span><br><span class="line">    <span class="type">pthread_t</span> _pthread;</span><br><span class="line">    CFMutableSetRef _commonModes;</span><br><span class="line">    CFMutableSetRef _commonModeItems;</span><br><span class="line">    CFRunLoopModeRef _currentMode;</span><br><span class="line">    CFMutableSetRef _modes;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">_pthread</td><td align="left">线程对象</td><td align="left">与之对应的线程</td></tr><tr><td align="left">_commonModes</td><td align="left">集合</td><td align="left"></td></tr><tr><td align="left">_commonModeItems</td><td align="left">集合</td><td align="left"></td></tr><tr><td align="left">_currentMode</td><td align="left">CFRunLoopModeRef</td><td align="left">当前运行的模式</td></tr><tr><td align="left">_modes</td><td align="left">集合&lt;CFRunLoopModeRef&gt;</td><td align="left">所有模式</td></tr></tbody></table><blockquote><p>一个RunLoop包含若干个Mode<br>RunLoop启动时只能选择其中一个Mode，作为<code>_currentMode</code></p></blockquote><h4 id="CFRunLoopModeRef"><a href="#CFRunLoopModeRef" class="headerlink" title="CFRunLoopModeRef"></a>CFRunLoopModeRef</h4><p>列举CFRunLoopModeRef对象的关键属性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopMode</span> *<span class="title">CFRunLoopModeRef</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopMode</span> &#123;</span></span><br><span class="line">    CFStringRef _name;</span><br><span class="line">    CFMutableSetRef _sources0;</span><br><span class="line">    CFMutableSetRef _sources1;</span><br><span class="line">    CFMutableArrayRef _observers;</span><br><span class="line">    CFMutableArrayRef _timers;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">_name</td><td align="left">str</td><td align="left">模式名称</td></tr><tr><td align="left">_sources0</td><td align="left">集合&lt;CFRunLoopSourceRef&gt;</td><td align="left"></td></tr><tr><td align="left">_sources1</td><td align="left">集合&lt;CFRunLoopSourceRef&gt;</td><td align="left"></td></tr><tr><td align="left">_observers</td><td align="left">Array&lt;CFRunLoopObserversRef&gt;</td><td align="left"></td></tr><tr><td align="left">_timers</td><td align="left">Array&lt;CFRunLoopTimerRef&gt;</td><td align="left"></td></tr></tbody></table><p><strong>模式种类</strong></p><table><thead><tr><th align="left">CoreFoundation</th><th align="left">Foundation</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">kCFRunLoopDefaultMode</td><td align="left">NSDefaultRunLoopMode</td><td align="left">App的默认Mode，通常主线程是在这个Mode下运行</td></tr><tr><td align="left">UITrackingRunLoopMode</td><td align="left">UITrackingRunLoopMode</td><td align="left">界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响</td></tr><tr><td align="left">UIInitializationRunLoopMode</td><td align="left">-</td><td align="left">在刚启动 App 时进入的第一个 Mode，启动完成后就不再使用</td></tr><tr><td align="left">GSEventReceiveRunLoopMode</td><td align="left">-</td><td align="left">接受系统事件的内部 Mode，通常用不到</td></tr><tr><td align="left">kCFRunLoopCommonModes</td><td align="left">NSRunLoopCommonModes</td><td align="left">这是一个占位用的Mode，不是一种真正的Mode</td></tr></tbody></table><blockquote><p>每个Mode又包含若干个Source0&#x2F;Source1&#x2F;Timer&#x2F;Observer<br>不同组的Source0&#x2F;Source1&#x2F;Timer&#x2F;Observer能分隔开来，互不影响<br>如果Mode里没有任何Source0&#x2F;Source1&#x2F;Timer&#x2F;Observer，RunLoop会立马退出</p></blockquote><h4 id="CFRunLoopObserverRef"><a href="#CFRunLoopObserverRef" class="headerlink" title="CFRunLoopObserverRef"></a>CFRunLoopObserverRef</h4><p>RunLoop的状态</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Run Loop Observer Activities */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">CF_OPTIONS</span><span class="params">(CFOptionFlags, CFRunLoopActivity)</span> &#123;</span><br><span class="line">    kCFRunLoopEntry = (<span class="number">1UL</span> &lt;&lt; <span class="number">0</span>),           <span class="comment">// 即将进入Loop</span></span><br><span class="line">    kCFRunLoopBeforeTimers = (<span class="number">1UL</span> &lt;&lt; <span class="number">1</span>),    <span class="comment">// 即将处理Timer</span></span><br><span class="line">    kCFRunLoopBeforeSources = (<span class="number">1UL</span> &lt;&lt; <span class="number">2</span>),   <span class="comment">// 即将处理Source</span></span><br><span class="line">    kCFRunLoopBeforeWaiting = (<span class="number">1UL</span> &lt;&lt; <span class="number">5</span>),   <span class="comment">// 即将进入休眠</span></span><br><span class="line">    kCFRunLoopAfterWaiting = (<span class="number">1UL</span> &lt;&lt; <span class="number">6</span>),    <span class="comment">// 刚从休眠中唤醒</span></span><br><span class="line">    kCFRunLoopExit = (<span class="number">1UL</span> &lt;&lt; <span class="number">7</span>),            <span class="comment">// 即将推出Loop</span></span><br><span class="line">    kCFRunLoopAllActivities = <span class="number">0x0FFFFFFF</span>U</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="应用一（解决NSTimer在滑动时停止工作的问题）"><a href="#应用一（解决NSTimer在滑动时停止工作的问题）" class="headerlink" title="应用一（解决NSTimer在滑动时停止工作的问题）"></a>应用一（解决NSTimer在滑动时停止工作的问题）</h3><p>Q:为什么Timer在页面滚动之后会失效？如何解决<br>A:默认创建Timer是在<code>kCFRunLoopCommonModes</code>模式下，需要我们把Timer加入到<code>kCFRunLoopCommonModes</code>下就可以了；</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建timer</span></span><br><span class="line"><span class="built_in">NSTimer</span> *timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1.0</span> repeats:<span class="literal">YES</span> block:^(<span class="built_in">NSTimer</span> *timer) &#123;</span><br><span class="line">        <span class="comment">//需要执行的代码</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 把timer手动添加到自己新建的Runloop中,添加模式为通用的占位模式</span></span><br><span class="line">[[<span class="built_in">NSRunLoop</span> mainRunLoop] addTimer:timer forMode:<span class="built_in">NSRunLoopCommonModes</span>];</span><br></pre></td></tr></table></figure><h3 id="应用二（性能优化）"><a href="#应用二（性能优化）" class="headerlink" title="应用二（性能优化）"></a>应用二（性能优化）</h3><p>Q:在主线程中做复杂运算<br>A:监听主线程Runloop的运行状态，在Runloop空闲的时候做操作</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFRunLoopObserverRef</span> observerRef = <span class="built_in">CFRunLoopObserverCreateWithHandler</span>(<span class="built_in">CFAllocatorGetDefault</span>(), kCFRunLoopAllActivities, <span class="literal">YES</span>, <span class="number">0</span>, ^(<span class="built_in">CFRunLoopObserverRef</span> observer, <span class="built_in">CFRunLoopActivity</span> activity) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (activity) &#123;</span><br><span class="line">            <span class="keyword">case</span> kCFRunLoopEntry:</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;即将进入Loop&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> kCFRunLoopBeforeTimers:</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;即将处理timer事件&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> kCFRunLoopBeforeSources:</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;即将处理sources事件&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> kCFRunLoopBeforeWaiting:</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;即将进入休眠&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> kCFRunLoopAfterWaiting:</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;刚从休眠中唤醒&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> kCFRunLoopExit:</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;即将推出Loop&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">CFRunLoopAddObserver</span>(<span class="built_in">CFRunLoopGetCurrent</span>(), observerRef, kCFRunLoopDefaultMode);</span><br><span class="line">    <span class="comment">// 下面代码在适当时刻销毁</span></span><br><span class="line">    <span class="built_in">CFRelease</span>(observerRef)</span><br></pre></td></tr></table></figure><h3 id="应用三（控制线程生命周期-线程保活）"><a href="#应用三（控制线程生命周期-线程保活）" class="headerlink" title="应用三（控制线程生命周期-线程保活）"></a>应用三（控制线程生命周期-线程保活）</h3><p>Q：当子线程中的任务执行完毕之后就被销毁了；那么如果我们需要开启一个子线程，在程序运行过程中永远都存在，那么我们就会面临一个问题，如何让子线程永远活着？<br>A：常驻线程：给子线程开启一个RunLoop<br>A：AFNetworking 线程保活，防止线程频繁创建销毁浪费性能</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RCPermenantThread.h</span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">void</span>(^RCPermenantThreadBlock)(<span class="type">void</span>);</span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RCPermenantThread</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 执行任务</span></span><br><span class="line"><span class="comment">/// @param target 目标对象</span></span><br><span class="line"><span class="comment">/// @param action 方法</span></span><br><span class="line"><span class="comment">/// @param object 附件</span></span><br><span class="line">- (<span class="type">void</span>)executeTaskWithTarget:(<span class="type">id</span>)target</span><br><span class="line">                       action:(SEL)action</span><br><span class="line">                       object:(<span class="type">id</span>)object;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 执行任务</span></span><br><span class="line"><span class="comment">/// @param taskBlock 任务代码块</span></span><br><span class="line">- (<span class="type">void</span>)executeBlock:(RCPermenantThreadBlock)taskBlock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 结束</span></span><br><span class="line">- (<span class="type">void</span>)stop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RCPermenantThread.m</span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;RCPermenantThread.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RCPermenantThread</span> ()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSThread</span> *innerThread;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="type">BOOL</span> stopped;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RCPermenantThread</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)dealloc &#123;</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(__stop) onThread:_innerThread withObject:<span class="literal">nil</span> waitUntilDone:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="variable language_">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        _stopped = <span class="literal">NO</span>;</span><br><span class="line">        __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>)weakSelf = <span class="keyword">self</span>;</span><br><span class="line">        _innerThread = [[<span class="built_in">NSThread</span> alloc] initWithBlock:^&#123;</span><br><span class="line">            <span class="comment">// 线程保活</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">            <span class="comment">// 如果Mode里没有任何Source0/Source1/Timer/Observer，RunLoop会立马退出</span></span><br><span class="line">            <span class="comment">// 为当前默认模型增加Port(Source1)</span></span><br><span class="line">            [[<span class="built_in">NSRunLoop</span> currentRunLoop] addPort:[[<span class="built_in">NSPort</span> alloc] init] forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line">            <span class="comment">// 如果要主动推出Runloop，就不可以直接只用run方法，否则runloop结束不掉</span></span><br><span class="line">            <span class="keyword">while</span> (weakSelf &amp;&amp; !weakSelf.stopped) &#123;</span><br><span class="line">                [[<span class="built_in">NSRunLoop</span> currentRunLoop] runMode:<span class="built_in">NSDefaultRunLoopMode</span> beforeDate:[<span class="built_in">NSDate</span> distantFuture]];</span><br><span class="line">                <span class="comment">//[[NSRunLoop currentRunLoop] run];</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;RCPermenantThread Runloop over&quot;</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">        [_innerThread start];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - Public</span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)stop &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_innerThread || _stopped) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(__stop) onThread:_innerThread withObject:<span class="literal">nil</span> waitUntilDone:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)executeTaskWithTarget:(<span class="type">id</span>)target action:(SEL)action object:(<span class="type">id</span>)object &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_innerThread || !target || !action) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">    [target performSelector:action onThread:_innerThread withObject:object waitUntilDone:<span class="literal">NO</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)executeBlock:(RCPermenantThreadBlock)taskBlock &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_innerThread || !taskBlock) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(__executeTask:) onThread:_innerThread withObject:taskBlock waitUntilDone:<span class="literal">NO</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - Private</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止子线程的Runloop;如果不停止Runloop, 线程会销毁不了.</span></span><br><span class="line">- (<span class="type">void</span>)__stop &#123;</span><br><span class="line">    _stopped = <span class="literal">YES</span>;</span><br><span class="line">    <span class="built_in">CFRunLoopStop</span>(<span class="built_in">CFRunLoopGetCurrent</span>());</span><br><span class="line">    _innerThread = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__executeTask:(RCPermenantThreadBlock)taskBlock &#123;</span><br><span class="line">    <span class="keyword">if</span> (taskBlock) &#123;</span><br><span class="line">        taskBlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ViewController.m</span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;ViewController.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;RCPermenantThread.h&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RCPermenantThread *thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    _thread = [[RCPermenantThread alloc] init];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为子线程增加任务</span></span><br><span class="line">- (<span class="type">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    [<span class="keyword">self</span>.thread executeBlock:^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;执行任务:%s&quot;</span>, __func__);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="应用四（监控应用卡顿）"><a href="#应用四（监控应用卡顿）" class="headerlink" title="应用四（监控应用卡顿）"></a>应用四（监控应用卡顿）</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MCLagMonitor</span>() </span>&#123;</span><br><span class="line">    <span class="type">int</span> timeoutCount;</span><br><span class="line">    <span class="built_in">CFRunLoopObserverRef</span> runLoopObserver;</span><br><span class="line">    <span class="keyword">@public</span></span><br><span class="line">    dispatch_semaphore_t dispatchSemaphore;</span><br><span class="line">    <span class="built_in">CFRunLoopActivity</span> runLoopActivity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSTimer</span> *cpuMonitorTimer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MCLagMonitor</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)shareInstance &#123;</span><br><span class="line">    <span class="keyword">static</span> MCLagMonitor *monitor = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        monitor = [[MCLagMonitor alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> monitor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)startMonitor &#123;</span><br><span class="line">    <span class="keyword">if</span> (runLoopObserver) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dispatchSemaphore = dispatch_semaphore_create(<span class="number">0</span>); <span class="comment">//Dispatch Semaphore保证同步</span></span><br><span class="line">    <span class="comment">//创建一个观察者</span></span><br><span class="line">    <span class="built_in">CFRunLoopObserverContext</span> context = &#123;<span class="number">0</span>,(__bridge <span class="type">void</span>*)<span class="keyword">self</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">    runLoopObserver = <span class="built_in">CFRunLoopObserverCreate</span>(kCFAllocatorDefault, kCFRunLoopAllActivities, <span class="literal">YES</span>, <span class="number">0</span>, &amp;runLoopObserverCallBack, &amp;context);</span><br><span class="line">    <span class="comment">//将观察者添加到主线程runloop的common模式下的观察中</span></span><br><span class="line">    <span class="built_in">CFRunLoopAddObserver</span>(<span class="built_in">CFRunLoopGetMain</span>(), runLoopObserver, kCFRunLoopCommonModes);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建子线程监控</span></span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">        <span class="comment">//子线程开启一个持续的loop用来进行监控</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">YES</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">long</span> semaphoreWait = dispatch_semaphore_wait(<span class="keyword">self</span>-&gt;dispatchSemaphore, dispatch_time(DISPATCH_TIME_NOW, <span class="number">50</span>*<span class="built_in">NSEC_PER_MSEC</span>));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// semaphoreWait 的值不为 0， 说明线程被堵塞</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (semaphoreWait != <span class="number">0</span>) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">self</span>-&gt;runLoopObserver) &#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">self</span>-&gt;timeoutCount = <span class="number">0</span>;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">self</span>-&gt;dispatchSemaphore = <span class="number">0</span>;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">self</span>-&gt;runLoopActivity = <span class="number">0</span>;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// BeforeSources和 AfterWaiting 这两个 runloop 状态的区间时间能够检测到是否卡顿</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">self</span>-&gt;runLoopActivity == kCFRunLoopBeforeSources || <span class="keyword">self</span>-&gt;runLoopActivity == kCFRunLoopAfterWaiting) &#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 将堆栈信息上报服务器的代码放到这里</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (++ <span class="keyword">self</span>-&gt;timeoutCount &lt; <span class="number">5</span>) &#123; <span class="comment">//连续5次就是250毫秒</span></span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                        </span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        </span><br><span class="line">                        <span class="built_in">NSLog</span>(<span class="string">@&quot;卡顿了&quot;</span>);</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125; <span class="comment">//end activity</span></span><br><span class="line">                </span><br><span class="line">            &#125;<span class="comment">// end semaphore wait</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">self</span>-&gt;timeoutCount = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="comment">// end while</span></span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)stopMonitor &#123;</span><br><span class="line">    [<span class="keyword">self</span>.cpuMonitorTimer invalidate];</span><br><span class="line">    <span class="keyword">if</span> (!runLoopObserver) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CFRunLoopRemoveObserver</span>(<span class="built_in">CFRunLoopGetMain</span>(), runLoopObserver, kCFRunLoopCommonModes);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CFRelease</span>(runLoopObserver);</span><br><span class="line">    runLoopObserver = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">void</span> runLoopObserverCallBack(<span class="built_in">CFRunLoopObserverRef</span> observer, <span class="built_in">CFRunLoopActivity</span> activity, <span class="type">void</span> *info) &#123;</span><br><span class="line">    MCLagMonitor *lagMonitor = (__bridge MCLagMonitor*)info;</span><br><span class="line">    lagMonitor-&gt;runLoopActivity = activity;</span><br><span class="line">    dispatch_semaphore_t semaphore = lagMonitor-&gt;dispatchSemaphore;</span><br><span class="line">    dispatch_semaphore_signal(semaphore);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS底层原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OC-Block</title>
      <link href="/2018/06/02/ios/objc/OC-Block/"/>
      <url>/2018/06/02/ios/objc/OC-Block/</url>
      
        <content type="html"><![CDATA[<p>Block在开发过程中是比较常用的技术</p><span id="more"></span><h2 id="Block是什么"><a href="#Block是什么" class="headerlink" title="Block是什么"></a>Block是什么</h2><p>Block本质上也是一个<code>OC对象</code>，它内部也有个<code>isa</code>指针<br>Block是封装了<code>函数调用</code>以及<code>函数调用环境</code>的OC对象</p><blockquote><p>总结：block是封装<code>函数</code>及其<code>上下文</code>的<code>OC对象</code></p></blockquote><h3 id="Block底层结构"><a href="#Block底层结构" class="headerlink" title="Block底层结构"></a>Block底层结构</h3><p><img src="https://cdn.rencheng.cc/blog/ekv3k.jpg"></p><h3 id="Block的变量捕获（capture）"><a href="#Block的变量捕获（capture）" class="headerlink" title="Block的变量捕获（capture）"></a>Block的变量捕获（capture）</h3><p><img src="https://cdn.rencheng.cc/blog/p4oaw.png"></p><h3 id="Block类型"><a href="#Block类型" class="headerlink" title="Block类型"></a>Block类型</h3><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>__NSGlobalBlock__</code></td><td align="left">没有访问auto变量</td></tr><tr><td align="left"><code>__NSStackBlock__</code></td><td align="left">访问了auto变量</td></tr><tr><td align="left"><code>__NSMallocBlock__</code></td><td align="left"><code>__NSStackBlock__</code>调用了copy</td></tr></tbody></table><h3 id="每种类型的Block调用copy后的结果如下所示"><a href="#每种类型的Block调用copy后的结果如下所示" class="headerlink" title="每种类型的Block调用copy后的结果如下所示"></a>每种类型的Block调用<code>copy</code>后的结果如下所示</h3><table><thead><tr><th align="left">Block类型</th><th align="left">副本源的配置存储域</th><th align="left">复制效果</th></tr></thead><tbody><tr><td align="left"><code>_NSConcreteStackBlock</code></td><td align="left">栈</td><td align="left">从栈拷贝到堆</td></tr><tr><td align="left"><code>_NSConcreteGlobalBlock</code></td><td align="left">程序的数据区域</td><td align="left">什么也不做</td></tr><tr><td align="left"><code>_NSConcreteMallocBlock</code></td><td align="left">堆</td><td align="left">引用计数增加</td></tr></tbody></table><blockquote><p>栈上的Block是由系统进行分配和释放的，出了作用域就会被释放，所以需要copy拷贝到堆上。</p></blockquote><h3 id="ARC环境下，编译器哪些情况会从栈区拷贝到堆区"><a href="#ARC环境下，编译器哪些情况会从栈区拷贝到堆区" class="headerlink" title="ARC环境下，编译器哪些情况会从栈区拷贝到堆区"></a>ARC环境下，编译器哪些情况会从栈区拷贝到堆区</h3><ul><li><code>block</code>作为函数返回时</li><li><code>block</code>赋值给<code>__strong</code>指针时</li><li><code>block</code>作为<code>Cocoa API</code>中方法名含有usingBlock的方法参数时</li><li><code>block</code>作为<code>GCD API</code>的方法参数时</li></ul><blockquote><p><a href="https://stackoverflow.com/questions/27152580/cocoa-blocks-as-strong-pointers-vs-copy">block是使用copy还是strong的探索</a></p></blockquote><h3 id="block"><a href="#block" class="headerlink" title="__block"></a>__block</h3><ul><li><code>__block</code>可以用来修改block内部无法修改auto变量的问题</li><li><code>__block</code>不能修饰全局变量、静态变量（static）</li><li>编译器会将<code>__block</code>修饰的变量包装成一个对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS底层原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OC-Runtime</title>
      <link href="/2018/05/31/ios/objc/OC-Runtime/"/>
      <url>/2018/05/31/ios/objc/OC-Runtime/</url>
      
        <content type="html"><![CDATA[<p>Objective-C是一门动态性比较强的编程语言，跟C、C++等语言有着很大的不同<br>Objective-C的动态性是由Runtime API来支撑的<br>Runtime API提供的接口基本都是C语言的，源码由C\C++\汇编语言编写</p><p>libobjc源码<br><a href="https://opensource.apple.com/tarballs/">下载地址</a><br><a href="https://opensource.apple.com/source">代码地址</a></p><p><a href="http://www.gnustep.org/resources/downloads.php">GNUstep</a>是GNU计划的项目之一，它将Cocoa的OC库重新开源实现了一遍。虽然GNUstep不是苹果官方源码，但还是具有一定的参考价值。</p><span id="more"></span><h2 id="关联对象"><a href="#关联对象" class="headerlink" title="关联对象"></a>关联对象</h2><p>默认情况下，因为分类底层结构的限制，不能添加成员变量到分类中。但可以通过关联对象来间接实现。</p><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><p><strong>添加关联对象(Set)</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> objc_setAssociatedObject(<span class="type">id</span> object, <span class="keyword">const</span> <span class="type">void</span> * key, <span class="type">id</span> value, objc_AssociationPolicy policy)</span><br></pre></td></tr></table></figure><p><strong>获得关联对象(Get)</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">id</span> objc_getAssociatedObject(<span class="type">id</span> object, <span class="keyword">const</span> <span class="type">void</span> * key)</span><br></pre></td></tr></table></figure><p><strong>移除所有的关联对象(Remove)</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> objc_removeAssociatedObjects(<span class="type">id</span> object)</span><br></pre></td></tr></table></figure><p><strong>objc_AssociationPolicy</strong></p><table><thead><tr><th align="left">objc_AssociationPolicy</th><th align="left">对应的修饰符</th></tr></thead><tbody><tr><td align="left">OBJC_ASSOCIATION_ASSIGN</td><td align="left">assign</td></tr><tr><td align="left">OBJC_ASSOCIATION_RETAIN_NONATOMIC</td><td align="left">strong, nonatomic</td></tr><tr><td align="left">OBJC_ASSOCIATION_COPY_NONATOMIC</td><td align="left">copy, nonatomic</td></tr><tr><td align="left">OBJC_ASSOCIATION_RETAIN</td><td align="left">strong, atomic</td></tr><tr><td align="left">OBJC_ASSOCIATION_COPY</td><td align="left">copy, atomic</td></tr></tbody></table><p><strong>key的常见用法</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用全局变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="type">char</span> MyKey;</span><br><span class="line">objc_setAssociatedObject(obj, &amp;MyKey, value, OBJC_ASSOCIATION_RETAIN_NONATOMIC)</span><br><span class="line">objc_getAssociatedObject(obj, &amp;MyKey)</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用getter方法的@selecor作为key - 最优</span></span><br><span class="line">objc_setAssociatedObject(obj, <span class="keyword">@selector</span>(<span class="keyword">getter</span>), value, OBJC_ASSOCIATION_RETAIN_NONATOMIC)</span><br><span class="line">objc_getAssociatedObject(obj, <span class="keyword">@selector</span>(<span class="keyword">getter</span>)) <span class="comment">// @selector(getter) == _cmd</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用属性名作为key</span></span><br><span class="line">objc_setAssociatedObject(obj, <span class="string">@&quot;property&quot;</span>, value, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">objc_getAssociatedObject(obj, <span class="string">@&quot;property&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用变量自己的地址作为key</span></span><br><span class="line"><span class="keyword">const</span> <span class="type">void</span> *kkey = &amp;kkey</span><br><span class="line">objc_setAssociatedObject(obj, kkey, value, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">objc_getAssociatedObject(obj, kkey);</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p><strong>为UITextView增加限制的属性</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UITextView+limit.h</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UITextView</span> (<span class="title">limit</span>)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>) <span class="built_in">NSUInteger</span> maxLength;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UITextView+limit.m</span></span><br><span class="line">- (<span class="type">void</span>)setMaxLength:(<span class="built_in">NSUInteger</span>)maxLength &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(maxLength), @(maxLength), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)maxLength &#123;</span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(maxLength)) unsignedIntegerValue];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><p>实现关联对象核心底层类</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AssociationsManager - 全局管理关联对象的单例</span><br><span class="line">AssociationsHashMap - manager单例的字典实例&lt;实例对象地址,ObjectAssociationMap&gt;</span><br><span class="line">ObjectAssociationMap - &lt;key,ObjcAssociation&gt;</span><br><span class="line">ObjcAssociation - <span class="keyword">class</span> &#123;policy,value&#125;</span><br></pre></td></tr></table></figure><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="类相关"><a href="#类相关" class="headerlink" title="类相关"></a>类相关</h3><p><strong>动态创建一个类（参数：父类，类名，额外的内存空间）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class <span class="title function_">objc_allocateClassPair</span><span class="params">(Class superclass, <span class="type">const</span> <span class="type">char</span> *name, <span class="type">size_t</span> extraBytes)</span></span><br></pre></td></tr></table></figure><blockquote><p>类创建后要调用注册</p></blockquote><p><strong>注册一个类（要在类注册之前添加成员变量）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">objc_registerClassPair</span><span class="params">(Class cls)</span> </span><br></pre></td></tr></table></figure><blockquote><p>注册后代表类对象和元类对象结构已经确定</p></blockquote><p><strong>销毁一个类</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">objc_disposeClassPair</span><span class="params">(Class cls)</span></span><br></pre></td></tr></table></figure><p><strong>获取isa指向的Class</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class <span class="title function_">object_getClass</span><span class="params">(id obj)</span></span><br></pre></td></tr></table></figure><p><strong>设置isa指向的Class</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class <span class="title function_">object_setClass</span><span class="params">(id obj, Class cls)</span></span><br></pre></td></tr></table></figure><p><strong>判断一个OC对象是否为Class</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">object_isClass</span><span class="params">(id obj)</span></span><br></pre></td></tr></table></figure><p><strong>判断一个Class是否为元类</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">class_isMetaClass</span><span class="params">(Class cls)</span></span><br></pre></td></tr></table></figure><p><strong>获取父类</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class <span class="title function_">class_getSuperclass</span><span class="params">(Class cls)</span></span><br></pre></td></tr></table></figure><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p><strong>获取一个实例变量信息</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ivar <span class="title function_">class_getInstanceVariable</span><span class="params">(Class cls, <span class="type">const</span> <span class="type">char</span> *name)</span></span><br></pre></td></tr></table></figure><p><strong>拷贝实例变量列表（最后需要调用free释放）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ivar *<span class="title function_">class_copyIvarList</span><span class="params">(Class cls, <span class="type">unsigned</span> <span class="type">int</span> *outCount)</span></span><br></pre></td></tr></table></figure><p><strong>设置和获取成员变量的值</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">object_setIvar</span><span class="params">(id obj, Ivar ivar, id value)</span></span><br><span class="line">id <span class="title function_">object_getIvar</span><span class="params">(id obj, Ivar ivar)</span></span><br></pre></td></tr></table></figure><p><strong>动态添加成员变量（已经注册的类是不能动态添加成员变量的）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">class_addIvar</span><span class="params">(Class cls, <span class="type">const</span> <span class="type">char</span> * name, <span class="type">size_t</span> size, <span class="type">uint8_t</span> alignment, <span class="type">const</span> <span class="type">char</span> * types)</span></span><br></pre></td></tr></table></figure><p><strong>获取成员变量的相关信息</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">ivar_getName</span><span class="params">(Ivar v)</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">ivar_getTypeEncoding</span><span class="params">(Ivar v)</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><strong>获取一个属性</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">objc_property_t</span> <span class="title function_">class_getProperty</span><span class="params">(Class cls, <span class="type">const</span> <span class="type">char</span> *name)</span></span><br></pre></td></tr></table></figure><p><strong>拷贝属性列表（最后需要调用free释放）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">objc_property_t</span> *<span class="title function_">class_copyPropertyList</span><span class="params">(Class cls, <span class="type">unsigned</span> <span class="type">int</span> *outCount)</span></span><br></pre></td></tr></table></figure><p><strong>动态添加属性</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">class_addProperty</span><span class="params">(Class cls, <span class="type">const</span> <span class="type">char</span> *name, <span class="type">const</span> <span class="type">objc_property_attribute_t</span> *attributes,</span></span><br><span class="line"><span class="params">                  <span class="type">unsigned</span> <span class="type">int</span> attributeCount)</span></span><br></pre></td></tr></table></figure><p><strong>动态替换属性</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">class_replaceProperty</span><span class="params">(Class cls, <span class="type">const</span> <span class="type">char</span> *name, <span class="type">const</span> <span class="type">objc_property_attribute_t</span> *attributes,</span></span><br><span class="line"><span class="params">                      <span class="type">unsigned</span> <span class="type">int</span> attributeCount)</span></span><br></pre></td></tr></table></figure><p><strong>获取属性的一些信息</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">property_getName</span><span class="params">(<span class="type">objc_property_t</span> property)</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">property_getAttributes</span><span class="params">(<span class="type">objc_property_t</span> property)</span></span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><strong>获得一个实例方法、类方法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Method <span class="title function_">class_getInstanceMethod</span><span class="params">(Class cls, SEL name)</span></span><br><span class="line">Method <span class="title function_">class_getClassMethod</span><span class="params">(Class cls, SEL name)</span></span><br></pre></td></tr></table></figure><p><strong>方法实现相关操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IMP <span class="title function_">class_getMethodImplementation</span><span class="params">(Class cls, SEL name)</span> </span><br><span class="line">IMP <span class="title function_">method_setImplementation</span><span class="params">(Method m, IMP imp)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">method_exchangeImplementations</span><span class="params">(Method m1, Method m2)</span> </span><br></pre></td></tr></table></figure><p><strong>拷贝方法列表（最后需要调用free释放）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method *<span class="title function_">class_copyMethodList</span><span class="params">(Class cls, <span class="type">unsigned</span> <span class="type">int</span> *outCount)</span></span><br></pre></td></tr></table></figure><p><strong>动态添加方法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">class_addMethod</span><span class="params">(Class cls, SEL name, IMP imp, <span class="type">const</span> <span class="type">char</span> *types)</span></span><br></pre></td></tr></table></figure><p><strong>动态替换方法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IMP <span class="title function_">class_replaceMethod</span><span class="params">(Class cls, SEL name, IMP imp, <span class="type">const</span> <span class="type">char</span> *types)</span></span><br></pre></td></tr></table></figure><p><strong>获取方法的相关信息（带有copy的需要调用free去释放）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SEL <span class="title function_">method_getName</span><span class="params">(Method m)</span></span><br><span class="line">IMP <span class="title function_">method_getImplementation</span><span class="params">(Method m)</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">method_getTypeEncoding</span><span class="params">(Method m)</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">method_getNumberOfArguments</span><span class="params">(Method m)</span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">method_copyReturnType</span><span class="params">(Method m)</span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">method_copyArgumentType</span><span class="params">(Method m, <span class="type">unsigned</span> <span class="type">int</span> index)</span></span><br></pre></td></tr></table></figure><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p><strong>选择器相关</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">sel_getName</span><span class="params">(SEL sel)</span></span><br><span class="line">SEL <span class="title function_">sel_registerName</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span></span><br></pre></td></tr></table></figure><p><strong>用block作为方法实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IMP <span class="title function_">imp_implementationWithBlock</span><span class="params">(id block)</span></span><br><span class="line">id <span class="title function_">imp_getBlock</span><span class="params">(IMP anImp)</span></span><br><span class="line">BOOL <span class="title function_">imp_removeBlock</span><span class="params">(IMP anImp)</span></span><br></pre></td></tr></table></figure><h2 id="场景应用"><a href="#场景应用" class="headerlink" title="场景应用"></a>场景应用</h2><h3 id="方法交换"><a href="#方法交换" class="headerlink" title="方法交换"></a>方法交换</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="type">void</span>)initialize &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> once;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;once, ^&#123;</span><br><span class="line">        Class <span class="keyword">class</span> = <span class="built_in">NSClassFromString</span>(<span class="string">@&quot;__NSArrayI&quot;</span>);</span><br><span class="line">        [<span class="keyword">self</span> swizzleMethods:<span class="keyword">class</span> originalSelector:<span class="keyword">@selector</span>(objectAtIndex:) swizzledSelector:<span class="keyword">@selector</span>(ll_objectAtIndex:)];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 方法交换的具体实现</span></span><br><span class="line">+ (<span class="type">void</span>)swizzleMethods:(Class)<span class="keyword">class</span> originalSelector:(SEL)origSel swizzledSelector:(SEL)swizSel &#123;</span><br><span class="line">    Method origMethod = class_getInstanceMethod(<span class="keyword">class</span>, origSel);</span><br><span class="line">    Method swizMethod = class_getInstanceMethod(<span class="keyword">class</span>, swizSel);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//class_addMethod will fail if original method already exists</span></span><br><span class="line">    <span class="type">BOOL</span> didAddMethod = class_addMethod(<span class="keyword">class</span>, origSel, method_getImplementation(swizMethod), method_getTypeEncoding(swizMethod));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (didAddMethod) &#123;</span><br><span class="line">        class_replaceMethod(<span class="keyword">class</span>, swizSel, method_getImplementation(origMethod), method_getTypeEncoding(origMethod));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//origMethod and swizMethod already exist</span></span><br><span class="line">        method_exchangeImplementations(origMethod, swizMethod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS底层原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OC-KVC</title>
      <link href="/2018/04/22/ios/objc/OC-KVC/"/>
      <url>/2018/04/22/ios/objc/OC-KVC/</url>
      
        <content type="html"><![CDATA[<p><code>KVC</code>的全称是<code>Key-Value Coding</code>，俗称“键值编码”，可以通过一个key来访问某个属性</p><span id="more"></span><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>常用API</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)setValue:(<span class="type">id</span>)value forKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line">- (<span class="type">void</span>)setValue:(<span class="type">id</span>)value forKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="type">id</span>)valueForKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line">- (<span class="type">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key; </span><br></pre></td></tr></table></figure><blockquote><p>keyPath比key增加了路径访问；例：person.age</p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="setValue-forKey-原理"><a href="#setValue-forKey-原理" class="headerlink" title="setValue:forKey:原理"></a><code>setValue:forKey:</code>原理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    id1[setValue:forKey:]</span><br><span class="line">    id2&#123;按照&lt;/br&gt;setKey:&amp;nbsp_setKey:&lt;/br&gt;顺序查找方法&#125;</span><br><span class="line">    id3[传递参数&#x27;调用方法]</span><br><span class="line">    id4&#123;查看&lt;/br&gt;accessInstanceVariablesDirectly&lt;/br&gt;类方法的返回值&#125;</span><br><span class="line">    id5&#123;按照&lt;/br&gt;_key&amp;nbsp_isKey&amp;nbspkey&amp;nbspisKey&lt;/br&gt;查找&#125;</span><br><span class="line">    id6[直接赋值]</span><br><span class="line">    id7[调用:&lt;/br&gt;setValue:forUndefinedKey:&lt;/br&gt;并抛出异常NSUnknownKeyException]</span><br><span class="line"></span><br><span class="line">    id1 --&gt; id2</span><br><span class="line">    id2 --找到了方法--&gt; id3</span><br><span class="line">    id2 --没找到方法--&gt; id4</span><br><span class="line">    id4 --YES--&gt; id5</span><br><span class="line">    id5 --找到了成员变量--&gt; id6</span><br><span class="line">    id5 --没找到成员变量--&gt; id7</span><br><span class="line">    id4 --NO--&gt; id7</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>accessInstanceVariablesDirectly</code>方法的默认返回值是YES</p></blockquote><h3 id="valueForKey-的原理"><a href="#valueForKey-的原理" class="headerlink" title="valueForKey:的原理"></a><code>valueForKey:</code>的原理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    id1[valueForKey:]</span><br><span class="line">    id2&#123;按照&lt;/br&gt;getKey&amp;nbspkey&amp;nbspisKey&amp;nbsp_key&lt;/br&gt;顺序查找方法&#125;</span><br><span class="line">    id3[调用方法]</span><br><span class="line">    id4&#123;查看&lt;/br&gt;accessInstanceVariablesDirectly&lt;/br&gt;类方法的返回值&#125;</span><br><span class="line">    id5&#123;按照&lt;/br&gt;_key&amp;nbsp_isKey&amp;nbspkey&amp;nbspisKey&lt;/br&gt;查找&#125;</span><br><span class="line">    id6[直接取值]</span><br><span class="line">    id7[调用:&lt;/br&gt;valueForUndefinedKey:&lt;/br&gt;并抛出异常NSUnknownKeyException]</span><br><span class="line"></span><br><span class="line">    id1 --&gt; id2</span><br><span class="line">    id2 --找到了方法--&gt; id3</span><br><span class="line">    id2 --没找到方法--&gt; id4</span><br><span class="line">    id4 --YES--&gt; id5</span><br><span class="line">    id5 --找到了成员变量--&gt; id6</span><br><span class="line">    id5 --没找到成员变量--&gt; id7</span><br><span class="line">    id4 --NO--&gt; id7</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS底层原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OC-KVO</title>
      <link href="/2018/04/20/ios/objc/OC-KVO/"/>
      <url>/2018/04/20/ios/objc/OC-KVO/</url>
      
        <content type="html"><![CDATA[<p><code>KVO</code>的全称是<code>Key-Value Observing</code>，俗称“键值监听”，可以用于监听某个对象属性值的改变</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ol><li>定义一个Person类</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><ol start="2"><li>添加监听</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span>.person addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@&quot;age&quot;</span> options:(<span class="built_in">NSKeyValueObservingOptionOld</span> | <span class="built_in">NSKeyValueObservingOptionNew</span>) context:<span class="string">@&quot;123&quot;</span>];</span><br></pre></td></tr></table></figure><img src='https://cdn.rencheng.cc/blog/7pim8j.png' alt='7pim8j'/><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p><strong>内存结构：未使用KVO监听的对象</strong><br><img src='https://cdn.rencheng.cc/blog/iWk7Oe.png' alt='iWk7Oe'/><br><strong>内存结构：使用了KVO监听的对象</strong><br><img src='https://cdn.rencheng.cc/blog/CBn72I.png' alt='CBn72I'/></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li>利用<code>Runtime</code>API动态生成一个子类(NSKVONotifying_*)，并且让<code>instance对象</code>的isa指向这个全新的子类</li><li>当修改<code>instance对象</code>的属性时，<strong>执行setter方法</strong>，会调用Foundation的<code>_NSSetXXXValueAndNotify</code>函数</li></ol><h3 id="NSSetXXXValueAndNotify内部实现-伪代码"><a href="#NSSetXXXValueAndNotify内部实现-伪代码" class="headerlink" title="_NSSetXXXValueAndNotify内部实现(伪代码)"></a>_NSSetXXXValueAndNotify内部实现(伪代码)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> _NSSetXXXValueAndNotify() &#123;</span><br><span class="line">    willChangeValueForKey:</span><br><span class="line">    父类原来的setter</span><br><span class="line">    didChangeValueForKey:</span><br><span class="line">    内部会触发监听器（Oberser）的监听方法( observeValueForKeyPath:ofObject:change:context:）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><img src='https://cdn.rencheng.cc/blog/wTXdNN.png' alt='wTXdNN'/><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>Q：如何手动触发KVO？<br>A：手动调用<code>willChangeValueForKey:</code>和<code>didChangeValueForKey:</code></p><p>Q：直接修改成员变量会触发KVO么？<br>A：不会触发KVO。因为KVO监听，是通过setter方法触发的</p>]]></content>
      
      
      <categories>
          
          <category> iOS底层原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>申请苹果开发者账号</title>
      <link href="/2018/04/07/ios/general/%E7%94%B3%E8%AF%B7%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7/"/>
      <url>/2018/04/07/ios/general/%E7%94%B3%E8%AF%B7%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>列举申请开发者账号需要的资料</p><span id="more"></span><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>从未注册过的AppleId</li><li>AppleId需要开通双重认证</li><li><a href="https://www.jianshu.com/p/31b7aa616f78">申请公司的邓白氏码</a></li><li>申请人信息<ul><li>姓名</li><li>手机号</li><li>身份证</li><li>可能需要授权</li></ul></li><li>公司的相关信息<ul><li>公司的英文名称</li><li>英文地址</li><li>邮编</li><li>公司固定电话</li></ul></li></ul><h2 id="申请流程"><a href="#申请流程" class="headerlink" title="申请流程"></a>申请流程</h2><p>建议使用苹果官方提供的App（Apple Developer）进行注册</p><p><a href="https://www.jianshu.com/p/4e5cdfa16c5e">参考教程</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 开发者计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Type Encodings</title>
      <link href="/2018/04/06/ios/general/TypeEncodings/"/>
      <url>/2018/04/06/ios/general/TypeEncodings/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html">官方文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-探索对象本质</title>
      <link href="/2018/03/16/ios/objc/iOS-%E6%8E%A2%E7%B4%A2%E5%AF%B9%E8%B1%A1%E6%9C%AC%E8%B4%A8/"/>
      <url>/2018/03/16/ios/objc/iOS-%E6%8E%A2%E7%B4%A2%E5%AF%B9%E8%B1%A1%E6%9C%AC%E8%B4%A8/</url>
      
        <content type="html"><![CDATA[<p>如果想探究OC对象的本质，所以我们需要了解OC这门语言；然后我们也要熟悉研究东西怎么切入</p><span id="more"></span><h2 id="OC的本质"><a href="#OC的本质" class="headerlink" title="OC的本质"></a>OC的本质</h2><p><strong>我们平时编写的OC代码，底层实现其实都是C\C++代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OC -&gt; C\C++ -&gt; 汇编语言 -&gt; 机器语言</span><br></pre></td></tr></table></figure><p>OC的面向对象都是基于C\C++的数据结构实现的</p><h3 id="将Objective-C代码转换为C-C-代码"><a href="#将Objective-C代码转换为C-C-代码" class="headerlink" title="将Objective-C代码转换为C\C++代码"></a>将Objective-C代码转换为C\C++代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun -sdk iphoneos clang -<span class="built_in">arch</span> arm64 -rewrite-objc OC源文件 -o 输出的CPP文件</span><br></pre></td></tr></table></figure><p>如果涉及ARC，需要增加参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun -sdk iphoneos clang -<span class="built_in">arch</span> arm64 -rewrite-objc -fobjc-arc -fobjc-runtime=ios-8.0.0 OC源文件 -o 输出的CPP文件</span><br></pre></td></tr></table></figure><h3 id="一个NSObject对象占用对少个字节"><a href="#一个NSObject对象占用对少个字节" class="headerlink" title="一个NSObject对象占用对少个字节"></a>一个NSObject对象占用对少个字节</h3><ul><li>系统分配了16个字节给NSObject对象（通过malloc_size函数获得）</li><li>但NSObject对象内部只使用了8个字节的空间（64bit环境下，可以通过class_getInstanceSize函数获得）</li></ul><blockquote><p>参考 <a href="https://opensource.apple.com/tarballs/objc4/">objc开放源码</a></p></blockquote><h3 id="如何查看对象占用空间"><a href="#如何查看对象占用空间" class="headerlink" title="如何查看对象占用空间"></a>如何查看对象占用空间</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;malloc/malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSObject</span> *object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%ld&quot;</span>, class_getInstanceSize([<span class="built_in">NSObject</span> <span class="keyword">class</span>])); <span class="comment">// 输出8 - 对象真实占用的地址(内存对齐后)</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%ld&quot;</span>, malloc_size((__bridge <span class="keyword">const</span> <span class="type">void</span> *)object));<span class="comment">// 输出16 - 系统真正为该对象分配的空间</span></span><br></pre></td></tr></table></figure><blockquote><p>OC对象最小分配的空间是 16</p></blockquote><h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><p>为了提高内存的访问效率，争取在一个总线周期就把数据读取到。</p><p>在iOS中，<code>CoreFoundation</code>限制了对象最小占用的空间大小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="type">size_t</span> <span class="title function_">instanceSize</span><span class="params">(<span class="type">size_t</span> extraBytes)</span> <span class="type">const</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fastpath(cache.hasFastInstanceSize(extraBytes))) &#123;</span><br><span class="line">        <span class="keyword">return</span> cache.fastInstanceSize(extraBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> size = alignedInstanceSize() + extraBytes;</span><br><span class="line">    <span class="comment">// CF requires all objects be at least 16 bytes.</span></span><br><span class="line">    <span class="keyword">if</span> (size &lt; <span class="number">16</span>) size = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>限制了对齐要求<code>8字节</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WORD_MASK 7UL</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title function_">word_align</span><span class="params">(<span class="type">uint32_t</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (x + WORD_MASK) &amp; ~WORD_MASK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在<code>malloc</code>方法中，又限制了<code>16字节</code>对齐</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MALLOC_ALIGNMENT (2 * SIZE_SZ &lt; __alignof__ (long double) \</span></span><br><span class="line"><span class="meta">  ? __alignof__ (long double) : 2 * SIZE_SZ)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS底层原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown-数学公式</title>
      <link href="/2018/03/02/markdown/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
      <url>/2018/03/02/markdown/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>以后的一个阶段要进行数学方面的学习，所以整理博客的时候难免会用到数学公式，下面列一下</p><span id="more"></span><h2 id="行内与独行"><a href="#行内与独行" class="headerlink" title="行内与独行"></a>行内与独行</h2><p><strong>行内公式</strong>：将公式插入到本行内，符号：<code>$公式内容$</code></p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$xyz$</span><br></pre></td></tr></table></figure><p>效果：$xyz$</p><p><strong>独行公式</strong>：将公式插入到新的一行内，并且居中，符号：<code>$$</code></p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$xyz$$</span><br></pre></td></tr></table></figure><p>效果：$$xyz$$</p><h2 id="上标、下标与组合"><a href="#上标、下标与组合" class="headerlink" title="上标、下标与组合"></a>上标、下标与组合</h2><p><strong>上标符号</strong>，符号：<code>^</code>。<br>例如：<code>$x^4$</code><br>效果：$x^4$</p><p><strong>下标符号</strong>，符号：<code>_</code>。<br>例如：<code>$x_1$</code><br>效果：$x_1$</p><p><strong>组合符号</strong>，符号：<code>&#123;&#125;</code>。<br>例如：<code>$&#123;16&#125;_&#123;8&#125;O&#123;2+&#125;_&#123;2&#125;$</code><br>效果：${16}<em>{8}O{2+}</em>{2}$</p><h2 id="汉字、字体与格式"><a href="#汉字、字体与格式" class="headerlink" title="汉字、字体与格式"></a>汉字、字体与格式</h2><p><strong>汉字形式</strong>，符号：<code>\mbox&#123;&#125;</code><br>例如：<code>$V_&#123;\mbox&#123;初始&#125;&#125;$</code><br>效果：$V_{\mbox{初始}}$</p><p><strong>字体控制</strong>，符号：<code>\displaystyle</code><br>例如：<code>$\displaystyle \frac&#123;x+y&#125;&#123;y+z&#125;$</code><br>效果：$\displaystyle \frac{x+y}{y+z}$</p><p><strong>下划线符号</strong>，符号：<code>\underline</code><br>例如：<code>$\underline&#123;x+y&#125;$</code><br>效果：$\underline{x+y}$</p><p><strong>标签</strong>，符号<code>\tag&#123;数字&#125;</code><br>例如：<code>$\tag&#123;11&#125;$</code><br>效果：$\tag{11}$</p><p><strong>上大括号</strong>，符号：<code>\overbrace&#123;算式&#125;</code><br>例如：<code>$\overbrace&#123;a+b+c+d&#125;^&#123;2.0&#125;$</code><br>效果：$\overbrace{a+b+c+d}^{2.0}$</p><p><strong>下大括号</strong>，符号：<code>\underbrace&#123;算式&#125;</code><br>例如：<code>$a+\underbrace&#123;b+c&#125;_&#123;1.0&#125;+d$</code><br>效果：$a+\underbrace{b+c}_{1.0}+d$</p><p><strong>上位符号</strong>，符号：<code>\stacrel&#123;上位符号&#125;&#123;基位符号&#125;</code><br>例如：<code>$\vec&#123;x&#125;\stackrel&#123;\mathrm&#123;def&#125;&#125;&#123;=&#125;&#123;x_1,\dots,x_n&#125;$</code><br>效果：$\vec{x}\stackrel{\mathrm{def}}{&#x3D;}{x_1,\dots,x_n}$</p><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><p><strong>两个quad空格</strong>，符号：<code>\qquad</code><br>例如：<code>$x \qquad y$</code><br>效果：$x \qquad y$</p><p><strong>quad空格</strong>，符号：<code>\quad</code><br>例如：<code>$x \quad y$</code><br>效果：$x \quad y$</p><p><strong>大空格</strong>，符号<br>例如：<code>$x \  y$</code><br>效果：$x \  y$</p><p><strong>中空格</strong>，符号:<br>例如：<code>$x : y$</code><br>效果：$x : y$</p><p><strong>小空格</strong>，符号,<br>例如：<code>$x , y$</code><br>效果：$x , y$</p><p><strong>没有空格</strong>，<br>例如：<code>$xy$</code><br>效果：$xy$</p><p><strong>紧贴</strong>，符号!<br>例如：<code>$x ! y$</code><br>效果：$x ! y$</p><h2 id="定界符与组合"><a href="#定界符与组合" class="headerlink" title="定界符与组合"></a>定界符与组合</h2><p><strong>括号</strong>，符号：<code>（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</code><br>例如：<code>$（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)$</code><br>效果：$（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)$</p><p><strong>中括号</strong>，符号：<code>[]</code><br>例如：<code>$[x+y]$</code><br>效果：${x+y}$</p><p><strong>大括号</strong>，符号：<code>\&#123; \&#125;</code><br>例如：<code>$&#123;x+y&#125;$</code><br>效果：${x+y}$</p><p><strong>自适应括号</strong>，符号：\left \right<br>例如：<code>$\left(x\right)$，$\left(x&#123;yz&#125;\right)$</code><br>效果：$\left(x\right)$，$\left(x{yz}\right)$</p><p><strong>组合公式</strong>，符号：{上位公式 \choose 下位公式}例例如：<code>$&#123;n+1 \choose k&#125;=&#123;n \choose k&#125;+&#123;n \choose k-1&#125;$</code><br>效果：${n+1 \choose k}&#x3D;{n \choose k}+{n \choose k-1}$</p><p><strong>组合公式</strong>，符号：<code>&#123;上位公式 \atop 下位公式&#125;</code><br>例如：<code>$\sum_&#123;k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n&#125;A_&#123;k_0&#125;A_&#123;k_1&#125;\cdots$</code><br>效果：</p><h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><p><strong>加法运算</strong>，符号：<code>+</code><br>例如：<code>$x+y=z$</code><br>效果：$x+y&#x3D;z$</p><p><strong>减法运算</strong>，符号：<code>-</code><br>例如：<code>$x-y=z$</code><br>效果：$x-y&#x3D;z$</p><p><strong>加减运算</strong>，符号：<code>\pm</code><br>例如：<code>$x \pm y=z$</code><br>效果：$x \pm y&#x3D;z$</p><p><strong>减甲运算</strong>，符号：<code>\mp</code><br>例如：<code>$x \mp y=z$</code><br>效果：$x \mp y&#x3D;z$</p><p><strong>乘法运算</strong>，符号：<code>\times</code><br>例如：<code>$x \times y=z$</code><br>效果：$x \times y&#x3D;z$</p><p><strong>点乘运算</strong>，符号：<code>\cdot</code><br>例如：<code>$x \cdot y=z$</code><br>效果：$x \cdot y&#x3D;z$</p><p><strong>星乘运算</strong>，符号：<code>\ast</code><br>例如：<code>$x \ast y=z$</code><br>效果：$x \ast y&#x3D;z$</p><p><strong>除法运算</strong>，符号：<code>\div</code><br>例如：<code>$x \div y=z$</code><br>效果：$x \div y&#x3D;z$</p><p><strong>斜法运算</strong>，符号：<code>/</code><br>例如：<code>$x/y=z$</code><br>效果：$x&#x2F;y&#x3D;z$</p><p><strong>分式表示</strong>，符号：<code>\frac&#123;分子&#125;&#123;分母&#125;</code><br>例如：<code>$\frac&#123;x+y&#125;&#123;y+z&#125;$</code><br>效果：$\frac{x+y}{y+z}$</p><p><strong>分式表示</strong>，符号：<code>&#123;分子&#125; \voer &#123;分母&#125;</code><br>例如：<code>$&#123;x+y&#125; \over &#123;y+z&#125;$</code><br>效果：${x+y} \over {y+z}$</p><p><strong>绝对值表示</strong>，符号：<code>||</code><br>例如：<code>$|x+y|$</code><br>效果：$|x+y|$</p><h2 id="高级运算"><a href="#高级运算" class="headerlink" title="高级运算"></a>高级运算</h2><p><strong>平均数运算</strong>，符号：<code>\overline&#123;算式&#125;</code><br>例如：<code>$\overline&#123;xyz&#125;$</code><br>效果：$\overline{xyz}$</p><p><strong>开二次方运算</strong>，符号：<code>\sqrt</code><br>例如：<code>$\sqrt x$</code><br>效果：$\sqrt x$</p><p><strong>开方运算</strong>，符号：<code>\sqrt[开方数]&#123;被开方数&#125;</code><br>例如：<code>$\sqrt[3]&#123;x+y&#125;$</code><br>效果：$\sqrt[3]{x+y}$</p><p><strong>对数运算</strong>，符号：<code>\log</code><br>例如：<code>$\log(x)$</code><br>效果：$\log(x)$</p><p><strong>极限运算</strong>，符号：<code>\lim</code><br>例如：<code>$\lim^&#123;x \to \infty&#125;_&#123;y \to 0&#125;&#123;\frac&#123;x&#125;&#123;y&#125;&#125;$</code><br>效果：$\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</p><p><strong>极限运算</strong>，符号：<code>\displaystyle \lim</code><br>例如：<code>$\displaystyle \lim^&#123;x \to \infty&#125;_&#123;y \to 0&#125;&#123;\frac&#123;x&#125;&#123;y&#125;&#125;$</code><br>效果：$\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</p><p><strong>求和运算</strong>，符号：<code>\sum</code><br>例如：<code>$\sum^&#123;x \to \infty&#125;_&#123;y \to 0&#125;&#123;\frac&#123;x&#125;&#123;y&#125;&#125;$</code><br>效果：$\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</p><p><strong>求和运算</strong>，符号：<code>\displaystyle \sum</code><br>例如：<code>$\displaystyle \sum^&#123;x \to \infty&#125;_&#123;y \to 0&#125;&#123;\frac&#123;x&#125;&#123;y&#125;&#125;$</code><br>效果：$\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</p><p><strong>积分运算</strong>，符号：<code>\int</code><br>例如：<code>$\int^&#123;\infty&#125;_&#123;0&#125;&#123;xdx&#125;$</code><br>效果：$\int^{\infty}_{0}{xdx}$</p><p><strong>积分运算</strong>，符号：<code>\displaystyle \int</code><br>例如：<code>$\displaystyle \int^&#123;\infty&#125;_&#123;0&#125;&#123;xdx&#125;$</code><br>效果：$\displaystyle \int^{\infty}_{0}{xdx}$</p><p><strong>微分运算</strong>，符号：<code>\partial</code><br>例如：<code>$\frac&#123;\partial x&#125;&#123;\partial y&#125;$</code><br>效果：$\frac{\partial x}{\partial y}$</p><p><strong>矩阵表示</strong>，符号：<code>\begin&#123;matrix&#125; \end&#123;matrix&#125;</code><br>例如：<code>$\left[ \begin&#123;matrix&#125; 1 &amp;2 &amp;\cdots &amp;4\5 &amp;6 &amp;\cdots &amp;8\\vdots &amp;\vdots &amp;\ddots &amp;\vdots\13 &amp;14 &amp;\cdots &amp;16\end&#123;matrix&#125; \right]$</code><br>效果：$\left[ \begin{matrix} 1 &amp;2 &amp;\cdots &amp;4\5 &amp;6 &amp;\cdots &amp;8\vdots &amp;\vdots &amp;\ddots &amp;\vdots\13 &amp;14 &amp;\cdots &amp;16\end{matrix} \right]$</p><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><p>等于运算，符号：&#x3D;，如：$x+y&#x3D;z$<br>大于运算，符号：&gt;，如：$x+y&gt;z$<br>小于运算，符号：&lt;，如：$x+y&lt;z$<br>大于等于运算，符号：\geq，如：$x+y \geq z$<br>小于等于运算，符号：\leq，如：$x+y \leq z$<br>不等于运算，符号：\neq，如：$x+y \neq z$<br>不大于等于运算，符号：\ngeq，如：$x+y \ngeq z$<br>不大于等于运算，符号：\not\geq，如：$x+y \not\geq z$<br>不小于等于运算，符号：\nleq，如：$x+y \nleq z$<br>不小于等于运算，符号：\not\leq，如：$x+y \not\leq z$<br>约等于运算，符号：\approx，如：$x+y \approx z$<br>恒定等于运算，符号：\equiv，如：$x+y \equiv z$</p><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><p>属于运算，符号：\in，如：$x \in y$<br>不属于运算，符号：\notin，如：$x \notin y$<br>不属于运算，符号：\not\in，如：$x \not\in y$<br>子集运算，符号：\subset，如：$x \subset y$<br>子集运算，符号：\supset，如：$x \supset y$<br>真子集运算，符号：\subseteq，如：$x \subseteq y$<br>非真子集运算，符号：\subsetneq，如：$x \subsetneq y$<br>真子集运算，符号：\supseteq，如：$x \supseteq y$<br>非真子集运算，符号：\supsetneq，如：$x \supsetneq y$<br>非子集运算，符号：\not\subset，如：$x \not\subset y$<br>非子集运算，符号：\not\supset，如：$x \not\supset y$<br>并集运算，符号：\cup，如：$x \cup y$<br>交集运算，符号：\cap，如：$x \cap y$<br>差集运算，符号：\setminus，如：$x \setminus y$<br>同或运算，符号：\bigodot，如：$x \bigodot y$<br>同与运算，符号：\bigotimes，如：$x \bigotimes y$<br>实数集合，符号：\mathbb{R}，如：\mathbb{R}</p><p>自然数集合，符号：\mathbb{Z}，如：\mathbb{Z}</p><p>空集，符号：\emptyset，如：$\emptyset$</p><h2 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h2><p>无穷，符号：\infty，如：$\infty$<br>虚数，符号：\imath，如：$\imath$<br>虚数，符号：\jmath，如：$\jmath$<br>数学符号，符号\hat{a}，如：$\hat{a}$<br>数学符号，符号\check{a}，如：$\check{a}$<br>数学符号，符号\breve{a}，如：$\breve{a}$<br>数学符号，符号\tilde{a}，如：$\tilde{a}$<br>数学符号，符号\bar{a}，如：$\bar{a}$<br>矢量符号，符号\vec{a}，如：$\vec{a}$<br>数学符号，符号\acute{a}，如：$\acute{a}$<br>数学符号，符号\grave{a}，如：$\grave{a}$<br>数学符号，符号\mathring{a}，如：$\mathring{a}$<br>一阶导数符号，符号\dot{a}，如：$\dot{a}$<br>二阶导数符号，符号\ddot{a}，如：$\ddot{a}$<br>上箭头，符号：\uparrow，如：$\uparrow$<br>上箭头，符号：\Uparrow，如：$\Uparrow$<br>下箭头，符号：\downarrow，如：$\downarrow$<br>下箭头，符号：\Downarrow，如：$\Downarrow$<br>左箭头，符号：\leftarrow，如：$\leftarrow$<br>左箭头，符号：\Leftarrow，如：$\Leftarrow$<br>右箭头，符号：\rightarrow，如：$\rightarrow$<br>右箭头，符号：\Rightarrow，如：$\Rightarrow$<br>底端对齐的省略号，符号：\ldots，如：$1,2,\ldots,n$<br>中线对齐的省略号，符号：\cdots，如：$x_1^2 + x_2^2 + \cdots + x_n^2$<br>竖直对齐的省略号，符号：\vdots，如：$\vdots$<br>斜对齐的省略号，符号：\ddots，如：$\ddots$</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown-基础语法</title>
      <link href="/2018/03/01/markdown/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/03/01/markdown/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面，Markdown文件的后缀名便是“.md”</p><span id="more"></span><h1 id="Markdown基础语法"><a href="#Markdown基础语法" class="headerlink" title="Markdown基础语法"></a>Markdown基础语法</h1><p><strong>Markdown是一种轻量级的「标记语言」</strong><br><a href="https://www.zybuluo.com/mdeditor">https://www.zybuluo.com/mdeditor</a></p><h2 id="xx是一个在线编辑Markdown文档的编辑器"><a href="#xx是一个在线编辑Markdown文档的编辑器" class="headerlink" title="xx是一个在线编辑Markdown文档的编辑器"></a>xx是一个在线编辑Markdown文档的编辑器</h2><p><em>XX扩展了Markdown的功能（如表格、脚注、内嵌HTML等等），以使让Markdown转换成更多的格式，和更丰富的展示效果，这些功能原初的Markdown尚不具备。</em></p><blockquote><p>Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如<del>Pandoc</del>，Pandao；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。</p></blockquote><p>XX源于Pandao的JavaScript开源项目，开源地址<a href="https://github.com/pandao/editor.md" title="Editor.md">Editor.md</a>，并在MIT开源协议的许可范围内进行了优化，以适应广大用户群体的需求。向优秀的markdown开源编辑器原作者Pandao致敬。</p><p><img src="https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png" alt="Pandao editor.md" title="Pandao editor.md"></p><h2 id="XX的功能列表演示"><a href="#XX的功能列表演示" class="headerlink" title="XX的功能列表演示"></a>XX的功能列表演示</h2><h1 id="标题H1"><a href="#标题H1" class="headerlink" title="标题H1"></a>标题H1</h1><h2 id="标题H2"><a href="#标题H2" class="headerlink" title="标题H2"></a>标题H2</h2><h3 id="标题H3"><a href="#标题H3" class="headerlink" title="标题H3"></a>标题H3</h3><h4 id="标题H4"><a href="#标题H4" class="headerlink" title="标题H4"></a>标题H4</h4><h5 id="标题H5"><a href="#标题H5" class="headerlink" title="标题H5"></a>标题H5</h5><h6 id="标题H5-1"><a href="#标题H5-1" class="headerlink" title="标题H5"></a>标题H5</h6><h3 id="字符效果和横线等"><a href="#字符效果和横线等" class="headerlink" title="字符效果和横线等"></a>字符效果和横线等</h3><hr><p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s></p><p><em>斜体字</em>      <em>斜体字</em></p><p><strong>粗体</strong>  <strong>粗体</strong></p><p><em><strong>粗斜体</strong></em> <em><strong>粗斜体</strong></em></p><p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p><p><strong>缩写(同HTML的abbr标签)</strong></p><blockquote><p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p></blockquote><p>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p><h3 id="引用-Blockquotes"><a href="#引用-Blockquotes" class="headerlink" title="引用 Blockquotes"></a>引用 Blockquotes</h3><blockquote><p>引用文本 Blockquotes</p></blockquote><p>引用的行内混合 Blockquotes</p><blockquote><p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href="https://www.xx.com/">普通链接</a>。</p></blockquote><h3 id="锚点与链接-Links"><a href="#锚点与链接-Links" class="headerlink" title="锚点与链接 Links"></a>锚点与链接 Links</h3><p><a href="https://www.xx.com/">普通链接</a><br><a href="https://www.xx.com/" title="普通链接带标题">普通链接带标题</a><br>直接链接：<a href="https://www.xx.com/">https://www.XX.com</a><br>[锚点链接][anchor-id]<br>[anchor-id]: <a href="https://www.xx.com/">https://www.XX.com/</a><br><a href="mailto:test.test@gmail.com">mailto:test.test@gmail.com</a><br>GFM a-tail link @pandao<br>邮箱地址自动链接 <a href="mailto:&#116;&#x65;&#115;&#x74;&#46;&#x74;&#101;&#x73;&#x74;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#109;">&#116;&#x65;&#115;&#x74;&#46;&#x74;&#101;&#x73;&#x74;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#109;</a>  <a href="mailto:&#119;&#119;&#x77;&#64;&#x76;&#105;&#112;&#x2e;&#113;&#113;&#x2e;&#x63;&#111;&#109;">&#119;&#119;&#x77;&#64;&#x76;&#105;&#112;&#x2e;&#113;&#113;&#x2e;&#x63;&#111;&#109;</a></p><blockquote><p>@pandao</p></blockquote><h3 id="多语言代码高亮-Codes"><a href="#多语言代码高亮-Codes" class="headerlink" title="多语言代码高亮 Codes"></a>多语言代码高亮 Codes</h3><h4 id="行内代码-Inline-code"><a href="#行内代码-Inline-code" class="headerlink" title="行内代码 Inline code"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p><h4 id="缩进风格"><a href="#缩进风格" class="headerlink" title="缩进风格"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p><pre><code>&lt;?php    echo &quot;Hello world!&quot;;?&gt;</code></pre><p>预格式化文本：</p><pre><code>| First Header  | Second Header || ------------- | ------------- || Content Cell  | Content Cell  || Content Cell  | Content Cell  |</code></pre><h4 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HTML-代码-HTML-codes"><a href="#HTML-代码-HTML-codes" class="headerlink" title="HTML 代码 HTML codes"></a>HTML 代码 HTML codes</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mate</span> <span class="attr">charest</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Editor.md, Markdown, Editor&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">body</span>&#123;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">color</span>:<span class="number">#444</span>;<span class="attribute">font-family</span>: <span class="string">&quot;Microsoft Yahei&quot;</span>, Tahoma, <span class="string">&quot;Hiragino Sans GB&quot;</span>, Arial;<span class="attribute">background</span>:<span class="number">#fff</span>;&#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>: none;&#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">img</span>&#123;<span class="attribute">border</span>:none;<span class="attribute">vertical-align</span>: middle;&#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-xxl&quot;</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-green&quot;</span>&gt;</span>Plain text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图片-Images"><a href="#图片-Images" class="headerlink" title="图片 Images"></a>图片 Images</h3><p>图片加链接 (Image + Link)：</p><p><a href="https://www.xx.com/images/logos/markdown.png" title="markdown"><img src="https://www.xx.com/images/logos/markdown.png"></a></p><blockquote><p>Follow your heart.</p></blockquote><hr><h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><h4 id="无序列表（减号）Unordered-Lists"><a href="#无序列表（减号）Unordered-Lists" class="headerlink" title="无序列表（减号）Unordered Lists (-)"></a>无序列表（减号）Unordered Lists (-)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（星号）Unordered-Lists"><a href="#无序列表（星号）Unordered-Lists" class="headerlink" title="无序列表（星号）Unordered Lists (*)"></a>无序列表（星号）Unordered Lists (*)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（加号和嵌套）Unordered-Lists"><a href="#无序列表（加号和嵌套）Unordered-Lists" class="headerlink" title="无序列表（加号和嵌套）Unordered Lists (+)"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul><li>列表一</li><li>列表二<ul><li>列表二-1</li><li>列表二-2</li><li>列表二-3</li></ul></li><li>列表三<ul><li>列表一</li><li>列表二</li><li>列表三</li></ul></li></ul><h4 id="有序列表-Ordered-Lists"><a href="#有序列表-Ordered-Lists" class="headerlink" title="有序列表 Ordered Lists (-)"></a>有序列表 Ordered Lists (-)</h4><ol><li>第一行</li><li>第二行</li><li>第三行</li></ol><h4 id="GFM-task-list"><a href="#GFM-task-list" class="headerlink" title="GFM task list"></a>GFM task list</h4><ul><li><input checked="" disabled="" type="checkbox"> GFM task list 1</li><li><input checked="" disabled="" type="checkbox"> GFM task list 2</li><li><input disabled="" type="checkbox"> GFM task list 3<ul><li><input disabled="" type="checkbox"> GFM task list 3-1</li><li><input disabled="" type="checkbox"> GFM task list 3-2</li><li><input disabled="" type="checkbox"> GFM task list 3-3</li></ul></li><li><input disabled="" type="checkbox"> GFM task list 4<ul><li><input disabled="" type="checkbox"> GFM task list 4-1</li><li><input disabled="" type="checkbox"> GFM task list 4-2</li></ul></li></ul><hr><h3 id="绘制表格-Tables"><a href="#绘制表格-Tables" class="headerlink" title="绘制表格 Tables"></a>绘制表格 Tables</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>Function name</th><th>Description</th></tr></thead><tbody><tr><td><code>help()</code></td><td>Display the help window.</td></tr><tr><td><code>destroy()</code></td><td><strong>Destroy your computer!</strong></td></tr></tbody></table><table><thead><tr><th align="left">Left-Aligned</th><th align="center">Center Aligned</th><th align="right">Right Aligned</th></tr></thead><tbody><tr><td align="left">col 3 is</td><td align="center">some wordy text</td><td align="right">$1600</td></tr><tr><td align="left">col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td align="left">zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><table><thead><tr><th>Item</th><th align="right">Value</th></tr></thead><tbody><tr><td>Computer</td><td align="right">$1600</td></tr><tr><td>Phone</td><td align="right">$12</td></tr><tr><td>Pipe</td><td align="right">$1</td></tr></tbody></table><hr><h4 id="特殊符号-HTML-Entities-Codes"><a href="#特殊符号-HTML-Entities-Codes" class="headerlink" title="特殊符号 HTML Entities Codes"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;</p><p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p><p>18&ordm;C  &quot;  &apos;</p><p>[&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;]</p><h3 id="Emoji表情-smiley"><a href="#Emoji表情-smiley" class="headerlink" title="Emoji表情 :smiley:"></a>Emoji表情 :smiley:</h3><blockquote><p>Blockquotes :star:</p></blockquote><h4 id="GFM-task-lists-Emoji-fontAwesome-icon-emoji-editormd-logo-emoji-editormd-logo-5x"><a href="#GFM-task-lists-Emoji-fontAwesome-icon-emoji-editormd-logo-emoji-editormd-logo-5x" class="headerlink" title="GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul><li><input checked="" disabled="" type="checkbox"> :smiley: @mentions, :smiley: #refs, <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li><li><input checked="" disabled="" type="checkbox"> list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li><li><input checked="" disabled="" type="checkbox"> [ ] :smiley: this is a complete item :smiley:;</li><li><input disabled="" type="checkbox"> []this is an incomplete item <a href="#">test link</a> :fa-star: @pandao;</li><li><input disabled="" type="checkbox"> [ ]this is an incomplete item :fa-star: :fa-gear:;<ul><li><input disabled="" type="checkbox"> :smiley: this is an incomplete item <a href="#">test link</a> :fa-star: :fa-gear:;</li><li><input disabled="" type="checkbox"> :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href="#">test link</a>;</li></ul></li></ul><h4 id="反斜杠-Escape"><a href="#反斜杠-Escape" class="headerlink" title="反斜杠 Escape"></a>反斜杠 Escape</h4><p>*literal asterisks*</p><p>[&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;]</p><h3 id="科学公式-TeX-KaTeX"><a href="#科学公式-TeX-KaTeX" class="headerlink" title="科学公式 TeX(KaTeX)"></a>科学公式 TeX(KaTeX)</h3><p>$$E&#x3D;mc^2$$</p><p>行内的公式$$E&#x3D;mc^2$$行内的公式，行内的$$E&#x3D;mc^2$$公式。</p><p>$$x &gt; y$$</p><p>$$(\sqrt{3x-1}+(1+x)^2)$$</p><p>$$\sin(\alpha)^{\theta}&#x3D;\sum_{i&#x3D;0}^{n}(x^i + \cos(f))$$</p><p>多行公式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\displaystyle</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n a\_k b\_k \right)^2</span><br><span class="line">\leq</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n a\_k^2 \right)</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n b\_k^2 \right)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\displaystyle</span><br><span class="line">    \frac&#123;1&#125;&#123;</span><br><span class="line">        \Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;</span><br><span class="line">        \frac25 \pi&#125;&#125; = 1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;</span><br><span class="line">        1+\frac&#123;e^&#123;-6\pi&#125;&#125;</span><br><span class="line">        &#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125;</span><br><span class="line">         &#123;1+\cdots&#125; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(x) = <span class="keyword">\int</span><span class="built_in">_</span>&#123;-<span class="keyword">\infty</span>&#125;<span class="built_in">^</span><span class="keyword">\infty</span></span><br><span class="line">    <span class="keyword">\hat</span> f(<span class="keyword">\xi</span>)<span class="keyword">\,</span>e<span class="built_in">^</span>&#123;2 <span class="keyword">\pi</span> i <span class="keyword">\xi</span> x&#125;</span><br><span class="line">    <span class="keyword">\,</span>d<span class="keyword">\xi</span></span><br></pre></td></tr></table></figure><h3 id="分页符-Page-break"><a href="#分页符-Page-break" class="headerlink" title="分页符 Page break"></a>分页符 Page break</h3><blockquote><p>Print Test: Ctrl + P</p></blockquote><hr><h3 id="绘制流程图-Flowchart"><a href="#绘制流程图-Flowchart" class="headerlink" title="绘制流程图 Flowchart"></a>绘制流程图 Flowchart</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 用户登陆</span><br><span class="line">op=&gt;operation: 登陆操作</span><br><span class="line">cond=&gt;condition: 登陆成功 Yes or No?</span><br><span class="line">e=&gt;end: 进入后台</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><hr><h3 id="绘制序列图-Sequence-Diagram"><a href="#绘制序列图-Sequence-Diagram" class="headerlink" title="绘制序列图 Sequence Diagram"></a>绘制序列图 Sequence Diagram</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Andrew-&gt;China: Says Hello</span><br><span class="line">Note right of China: China thinks\nabout it</span><br><span class="line">China--&gt;Andrew: How are you?</span><br><span class="line">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017年终总结</title>
      <link href="/2017/12/31/summary/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2017/12/31/summary/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>今年一整年都是把住方向盘，油门踩到底的状态</p><p>今年总结主要关键词：<strong>成长</strong></p><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google身份验证器</title>
      <link href="/2017/12/02/linux/Google%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E5%99%A8/"/>
      <url>/2017/12/02/linux/Google%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>Linux 系统 SSH 配置 Google 身份验证器实现双重（多因子）认证</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>基于root用户</p></li><li><p>安装环境</p><ul><li><p><code>红帽</code>，<code>CentOS</code> 和 <code>Fedora</code> 等系统上，安装 <code>pam-devel</code>，安装命令类似：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install pam-devel make gcc-c++ wget</span><br><span class="line">$ yum -y install gcc make pam-devel libpng-devel libtool wget git</span><br></pre></td></tr></table></figure></li><li><p><code>Ubuntu</code>、<code>Linux Mint</code> 和 <code>Debian</code> 等系统上，安装‘libpam0g-dev’安装包，安装命令类似：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install libpam0g-dev make gcc-c++ wget</span><br><span class="line">$ apt-get install gcc make pam-devel libpng-devel libtool wget git</span><br></pre></td></tr></table></figure></li></ul></li><li><p>编辑<code>/etc/selinux/config</code>文件，关闭<code>selinux</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure></li><li><p>安装Qrencode</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install mercurial</span><br><span class="line">或者</span><br><span class="line">$ apt-get install mercurial</span><br></pre></td></tr></table></figure></li><li><p>使用git clone下载<code>google-authenticator-libpam</code>, 安装<code>google authenticator PAM</code>插件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/google/google-authenticator-libpam.git</span><br></pre></td></tr></table></figure></li><li><p>复制<code>google 身份验证器</code> <code>pam模块</code>到系统下</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /usr/local/lib/security/pam_google_authenticator.so /lib64/security/</span><br></pre></td></tr></table></figure></li><li><p>配置<code>/etc/pam.d/sshd</code>文件，将认证模块添加</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth required pam_google_authenticator.so</span><br></pre></td></tr></table></figure></li><li><p>修改SSH服务配置&#x2F;etc&#x2F;ssh&#x2F;sshd_config文件，将注释去掉</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ChallengeResponseAuthentication <span class="built_in">yes</span></span><br></pre></td></tr></table></figure></li><li><p>重启ssh服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service sshd restart</span><br></pre></td></tr></table></figure></li><li><p>切换到需要验证的系统账户，运行程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ google-authenticator</span><br></pre></td></tr></table></figure></li><li><p>手机下载<code>Google Authenticator</code>, 打开扫一扫，扫描屏幕二维码。</p></li><li><p>输入验证码</p></li><li><p>一路按<code>y</code></p></li></ol><h2 id="重置"><a href="#重置" class="headerlink" title="重置"></a>重置</h2><h3 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h3><ol><li>阿里云VNC远程连接（它是跳过ssh登录的）</li><li>执行 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-authenticator</span><br></pre></td></tr></table></figure></li><li>一路<code>y</code></li></ol><h2 id="备份验证码"><a href="#备份验证码" class="headerlink" title="备份验证码"></a>备份验证码</h2><p>baota</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">账号：Nmh9016q</span><br><span class="line">密钥：6AXEZCT2THSI264X</span><br><span class="line">类型：基于时间</span><br></pre></td></tr></table></figure><p>server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">67587051</span><br><span class="line">59969125</span><br><span class="line">71013538</span><br><span class="line">49745900</span><br><span class="line">73960262</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker问题解决</title>
      <link href="/2017/10/11/docker/Docker%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2017/10/11/docker/Docker%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>常见docker问题解决</p><span id="more"></span><h2 id="Docker-容器一启动就退出"><a href="#Docker-容器一启动就退出" class="headerlink" title="Docker 容器一启动就退出"></a>Docker 容器一启动就退出</h2><p>根据镜像启动容器，执行命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name npm -d node</span><br></pre></td></tr></table></figure><p>通过<code>docker ps</code>查看正在运行中容器，却找不到<code>npm</code>容器。再次通过<code>docker ps -a</code>查看发现，<code>npm</code>容器已经处于停止状态了。<br><strong>原因</strong><br>Docker容器后台运行,就必须有一个前台进程.<br>容器运行的命令如果不是那些一直挂起的命令（eg. 运行top，tail等），就是会自动退出<br>这个是 docker 的机制问题，比如我们的 web 容器，以 nginx 和 fpm 为例,<br>正常情况下，启动服务只需启动相应的 service 即可，例如：service nginx start &amp;&amp; service php5-fpm start，但是，这样做, nginx 和 fpm 均以后台进程模式运行，就会导致 docker 前台没有正在运行的应用，so，容器会立即自杀，因为他觉得没事可做了。</p><p><strong>解决方案</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name npm -P -d node /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS11和Xcode9踩坑</title>
      <link href="/2017/09/20/ios/general/iOS11%E5%92%8CXcode9%E8%B8%A9%E5%9D%91/"/>
      <url>/2017/09/20/ios/general/iOS11%E5%92%8CXcode9%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.rencheng.cc/blog/jymfv.jpg"></p><span id="more"></span><h1 id="tableview"><a href="#tableview" class="headerlink" title="tableview"></a>tableview</h1><h2 id="headerView-footerView"><a href="#headerView-footerView" class="headerlink" title="headerView&#x2F;footerView"></a>headerView&#x2F;footerView</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h3><p>只实现<code>tableView:heightForFooterInSection:</code>或<code>tableView:heightForHeaderInSection:</code>方法返回section的header&#x2F;footer高度时header&#x2F;footer会使用默认值，如下图，只返回了footer的高度，没有返回footer的对象。<br><img src="https://cdn.rencheng.cc/blog/42o56.jpg"></p><h3 id="解决方法-2种"><a href="#解决方法-2种" class="headerlink" title="解决方法(2种):"></a>解决方法(2种):</h3><ul><li><p>需要控制header&#x2F;footer的高度还需要实现<br>tableView:viewForHeaderInSection:或tableView:viewForFooterInSection:方法。如图，即使是返回nil也会使高度设置生效<br>  <img src="https://cdn.rencheng.cc/blog/e932s.jpg"></p></li><li><p>通过将tableview新增的estimatedSectionHeaderHeight和estimatedSectionFooterHeight属性设置为0，如下图<br><img src="https://cdn.rencheng.cc/blog/1m23b.png"></p></li></ul><h1 id="BarButtonItem"><a href="#BarButtonItem" class="headerlink" title="BarButtonItem"></a>BarButtonItem</h1><h2 id="设置负width失效"><a href="#设置负width失效" class="headerlink" title="设置负width失效"></a>设置负width失效</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述:"></a>问题描述:</h3><p>像往常一样，创建了两个barButtonItem，一个作为按钮，一个作为调整宽度的，将width设置为了-10，但是Xcode9编译运行后，并不是想要的按钮的位置向右缩减了10，如图:<br><img src="https://cdn.rencheng.cc/blog/bndpq.png"><br>但是在设置其width&gt;0是会生效的</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h3><p>创建一个UIButton并设置其title&#x2F;imageEdgeInsets，然后通过customView创建UIBarButtonItem。<br><img src="https://cdn.rencheng.cc/blog/06pkq.png"></p><h2 id="设定了样式后点击样式"><a href="#设定了样式后点击样式" class="headerlink" title="设定了样式后点击样式"></a>设定了样式后点击样式</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述:"></a>问题描述:</h3><p>在Xcode9之前，通过<code>-setTitleTextAttributes:forState:</code>方式设定UIBarButtonItem的样式，只需要设定<code>UIControlStateNormal</code>的时候即可同时让其他状态也会使用相同的样式，而Xcode9只会设置Normal的样式，在按下高亮时还是默认的样式。<br><img src="https://cdn.rencheng.cc/blog/kmpjz.gif"></p><h3 id="解决方法-2种-1"><a href="#解决方法-2种-1" class="headerlink" title="解决方法(2种):"></a>解决方法(2种):</h3><ul><li>同样给<code>UIControlStateHighlighted</code>状态设定一下样式。<br>  <img src="https://cdn.rencheng.cc/blog/1npzx.gif"></li><li>或者将UIBarButtonItem使用UIButton作为customView创建，UIButton没有出现这个问题。<br>  <img src="https://cdn.rencheng.cc/blog/qwhqb.gif"></li></ul><h2 id="ToolBar上Item点击失效"><a href="#ToolBar上Item点击失效" class="headerlink" title="ToolBar上Item点击失效"></a>ToolBar上Item点击失效</h2><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述:"></a>问题描述:</h3><ol><li>创建一个全屏的半透明View并在这个View上放置一个tapGesture</li><li>创建一个toolBar放在这个View上</li><li>通过<code>-initWithTitle:target:action:</code>方法创建一个UIBarButtonItem放置在toolbar上</li><li>点击这个UIBarButtonItem，发现其有高亮状态但是点击被tapGesture响应<br> 问题仅在<code>Xcode9+iOS11</code>上出现。<code>Xcode8+iOS11</code>或<code>Xcode9+iOS10</code>无法复现，大致样式如下图<br> <img src="https://cdn.rencheng.cc/blog/ceiu3.png"></li></ol><h3 id="解决方法-2种-2"><a href="#解决方法-2种-2" class="headerlink" title="解决方法(2种):"></a>解决方法(2种):</h3><p>个人更倾向于第二种</p><ul><li>再创建一个View放置在上半截位置上，然后将tapGesture添加给这个只有半截的View上</li><li>将UIBarButtonItem的初始化方法改为通过customView初始化，使用UIButton作为customView</li></ul><h1 id="App图标丢失"><a href="#App图标丢失" class="headerlink" title="App图标丢失"></a>App图标丢失</h1><h2 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述:"></a>问题描述:</h2><p>使用Xcode9+CocoaPods的工程在编译运行后，会出现AppIcon丢失的问题</p><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法:"></a>解决方法:</h2><p>参考<a href="https://github.com/CocoaPods/CocoaPods/issues/7003">CocoaPods-Issue7003</a>的方法，但是issues里建议的脚本在我这边运行会报错找不到：<br><img src="https://cdn.rencheng.cc/blog/nbl2m.png"><br>后通过翻查<a href="https://guides.cocoapods.org/syntax/podfile.html#post_install">Podfile-syntax</a>以及<a href="http://www.rubydoc.info/gems/cocoapods/Pod/AggregateTarget">ruby-pod-AggregateTarget</a>找到其属性client_root可以获取项目路径，最终结合Issue7003里的脚本，插入到Podfile中，执行pod install后，即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">post_install do |installer|</span><br><span class="line">    installer.aggregate_targets.each do |target|</span><br><span class="line">        copy_pods_resources_path = &quot;#&#123;target.client_root&#125;/Pods/Target Support Files/#&#123;target.name&#125;/#&#123;target.name&#125;-resources.sh&quot;</span><br><span class="line">        string_to_replace = &#x27;--compile &quot;$&#123;BUILT_PRODUCTS_DIR&#125;/$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;&quot;&#x27;</span><br><span class="line">        assets_compile_with_app_icon_arguments = &#x27;--compile &quot;$&#123;BUILT_PRODUCTS_DIR&#125;/$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;&quot; --app-icon &quot;$&#123;ASSETCATALOG_COMPILER_</span><br><span class="line">APPICON_NAME&#125;&quot; --output-partial-info-plist &quot;$&#123;BUILD_DIR&#125;/assetcatalog_generated_info.plist&quot;&#x27;</span><br><span class="line">        text = File.read(copy_pods_resources_path)</span><br><span class="line">        new_contents = text.gsub(string_to_replace, assets_compile_with_app_icon_arguments)</span><br><span class="line">        File.open(copy_pods_resources_path, &quot;w&quot;) &#123;|file| file.puts new_contents &#125;</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h1 id="部分宏定义失效"><a href="#部分宏定义失效" class="headerlink" title="部分宏定义失效"></a>部分宏定义失效</h1><h2 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述:"></a>问题描述:</h2><p>我们使用的一个库中<code>check_compile_time()</code>报错，如下图:<br><img src="https://cdn.rencheng.cc/blog/h9n27.png"></p><h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程:"></a>排查过程:</h2><p>但是使用Xcode9无法跳转其定义，使用Xcode8跳转后发现其实际是<code>__Check_Compile_Time()</code>，如下图:<br><img src="https://cdn.rencheng.cc/blog/5pu6g.png"><br>然后再回到Xcode9改为了__Check_Compile_Time()后点击跳转定义文件里发现，提示一些原来的宏被更改名称为__开头了:<br><img src="https://cdn.rencheng.cc/blog/j2ayg.png"></p><h2 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法:"></a>解决方法:</h2><p>将上图中提示的相关的宏定义替换成新的即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-Xcode相关脚本</title>
      <link href="/2017/09/14/ios/general/iOS-Xcode%E7%9B%B8%E5%85%B3%E8%84%9A%E6%9C%AC/"/>
      <url>/2017/09/14/ios/general/iOS-Xcode%E7%9B%B8%E5%85%B3%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>作用于Xcode的脚本<br>持续补入</p><span id="more"></span><h2 id="Xcode-缓存清理"><a href="#Xcode-缓存清理" class="headerlink" title="Xcode 缓存清理"></a>Xcode 缓存清理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf ~/Library/Developer/Xcode/Archives/</span><br><span class="line"><span class="built_in">rm</span> -rf ~/Library/Developer/Xcode/DerivedData/ </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>签名机制</title>
      <link href="/2017/04/07/ios/general/%E7%AD%BE%E5%90%8D%E6%9C%BA%E5%88%B6/"/>
      <url>/2017/04/07/ios/general/%E7%AD%BE%E5%90%8D%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>保证安装到用户手机上的APP都是经过Apple官方允许的</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>不管是真机调试，还是发布APP，开发者都需要经过一系列复杂的步骤</p><ul><li>生成CertificateSigningRequest.certSigningRequest文件</li><li>获得ios_development.cer\ios_distribution.cer证书文件</li><li>注册device、添加App ID</li><li>获得*.mobileprovision文件</li></ul><blockquote><p>对于真机调试，现在的Xcode已经自动帮开发者做了以上操作</p></blockquote><h2 id="Apple各设备中包含的密钥"><a href="#Apple各设备中包含的密钥" class="headerlink" title="Apple各设备中包含的密钥"></a>Apple各设备中包含的密钥</h2><p><img src="https://cdn.rencheng.cc/blog/5xpz6.png"></p><p>Mac设备</p><ul><li>Mac公钥</li><li>Mac私钥</li></ul><p>App后台</p><ul><li>Apple私钥</li></ul><p>iOS设备</p><ul><li>Apple公钥</li></ul><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p><img src="https://cdn.rencheng.cc/blog/7ugkp.png"></p><ol><li><code>Mac私钥</code>对<code>APP</code>进行数字签名，生成<code>App代码</code>以及<code>签名</code>。</li><li><code>Apple私钥</code>对<code>Mac公钥</code>进行证书签名，生成<code>Mac公钥</code>以及对应的<code>Mac公钥散列值加密后的值</code>，也即是<code>证书</code>。</li><li><code>Apple私钥</code>对第2步生成的<code>证书</code>以及<code>app id</code>，<code>entitlements</code>和<code>devices</code>进行数字签名，生成对应的<code>数字签名</code>和<code>证书</code>以及<code>app id</code>， <code>entitlements</code>和<code>devices</code>的明文，这一步也就是生成<code>描述文件</code>。</li><li><code>Apple公钥</code>对第3步的<code>描述文件</code>中的数字签名进行验证，验证通过之后，可以拿到里面的证书。然后再用描述文件中的App信息对App的信息以及手机设备信息进行校验。</li><li>用<code>Apple公钥</code>对第4步中拿到的证书进行数字签名验证，验证通过之后可以拿到证书里面的<code>Mac公钥</code>。</li><li>用第5步中拿到的<code>Mac公钥</code>对App进行数字签名校验，验证通过之后就说明可以在真机上面运行。</li></ol><h2 id="如何获取Mac公钥"><a href="#如何获取Mac公钥" class="headerlink" title="如何获取Mac公钥"></a>如何获取Mac公钥</h2><p><img src="https://cdn.rencheng.cc/blog/v7d8h.jpg"></p><blockquote><p><code>.certSigningRequest</code>文件，就是Mac设备的公钥。简称CSR文件。</p></blockquote><h2 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h2><p><img src="https://cdn.rencheng.cc/blog/1qh92.jpg"><br><img src="https://cdn.rencheng.cc/blog/mcwqo.jpg"><br><img src="https://cdn.rencheng.cc/blog/tr22e.jpg"><br><img src="https://cdn.rencheng.cc/blog/jbvto.jpg"><br><img src="https://cdn.rencheng.cc/blog/5jmmj.jpg"></p><blockquote><p><code>.cer</code>文件：利用Apple私钥（CA），对Mac公钥生成的数字签名</p></blockquote><h2 id="生成mobileProvision"><a href="#生成mobileProvision" class="headerlink" title="生成mobileProvision"></a>生成mobileProvision</h2><p><img src="https://cdn.rencheng.cc/blog/2siug.jpg"><br><img src="https://cdn.rencheng.cc/blog/4bvoy.jpg"><br><img src="https://cdn.rencheng.cc/blog/q4634.jpg"><br><img src="https://cdn.rencheng.cc/blog/gkik4.jpg"><br><img src="https://cdn.rencheng.cc/blog/b32q8.jpg"></p><blockquote><p><code>.mobileprovision</code>文件：利用Apple私钥（CA），对[.cer证书、devices、app id、entitlements]进行数字签名</p></blockquote><h2 id="App启动时需要做的安全检测"><a href="#App启动时需要做的安全检测" class="headerlink" title="App启动时需要做的安全检测"></a>App启动时需要做的安全检测</h2><h3 id="AppStore"><a href="#AppStore" class="headerlink" title="AppStore"></a>AppStore</h3><p>从AppStore下载安装的APP，你会发现里面是没有<code>.mobileprovision</code>文件的。<br>它的验证流程会简单很多，大概如下所示</p><p><img src="https://cdn.rencheng.cc/blog/j1ap0.png"></p><ol><li><code>APP</code>上传到<code>Apple Connect</code>之后，Apple会用<code>Apple私钥</code>对<code>APP</code>进行签名</li><li>当我们启动App的时候，只需要通过<code>Apple公钥</code>对安装包进行验证。</li></ol><h3 id="App其他渠道"><a href="#App其他渠道" class="headerlink" title="App其他渠道"></a>App其他渠道</h3><p><img src="https://cdn.rencheng.cc/blog/pd5hu.jpg"></p><h2 id="P12文件"><a href="#P12文件" class="headerlink" title="P12文件"></a>P12文件</h2><p>P12一般用于团队开发当中，当我们用大于三个Mac设备开发应用时，想要申请新的证书，如果在我们的证书里，包含了3个发布证书，2个开发证书，可以发现再也申请不了开发证书和发布证书了。（具体的限制可能随时变）<br>P12中包含哪些信息</p><ul><li>Mac私钥</li><li>证书<ul><li>Mac公钥</li><li>由<code>Apple私钥</code>对<code>Mac公钥</code>签名</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书籍推荐</title>
      <link href="/2017/04/06/recommend/%E4%B9%A6%E7%B1%8D%E6%8E%A8%E8%8D%90/"/>
      <url>/2017/04/06/recommend/%E4%B9%A6%E7%B1%8D%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<p>记录一下书单，也给自己立一个Flag或者是backlog</p><span id="more"></span><h2 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h2><table><thead><tr><th align="left">书名</th><th align="left">作者</th></tr></thead><tbody><tr><td align="left">《数据结构》</td><td align="left">严蔚敏，吴伟民</td></tr><tr><td align="left">《大话数据结构和算法》</td><td align="left">程杰</td></tr></tbody></table><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><table><thead><tr><th align="left">书名</th><th align="left">作者</th></tr></thead><tbody><tr><td align="left">《HTTP权威指南》</td><td align="left">David Gourley</td></tr><tr><td align="left">《TCP&#x2F;IP详解卷I》</td><td align="left">[美] 凯文R.福尔（Kevin R. Fall）</td></tr></tbody></table><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><table><thead><tr><th align="left">书名</th><th align="left">作者</th></tr></thead><tbody><tr><td align="left"><a href="https://github.com/skyming/Trip-to-iOS-Design-Patterns">Trip-to-iOS-Design-Patterns</a></td><td align="left">skyming</td></tr><tr><td align="left"><a href="https://design-patterns.readthedocs.io/zh_CN/latest/">图说设计模式</a></td><td align="left">me115</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-事故记录</title>
      <link href="/2017/01/04/ios/record/Code%E4%BA%8B%E6%95%85%E8%AE%B0%E5%BD%9501/"/>
      <url>/2017/01/04/ios/record/Code%E4%BA%8B%E6%95%85%E8%AE%B0%E5%BD%9501/</url>
      
        <content type="html"><![CDATA[<p>2017-11-04 编码事故记录<br>CV战士的墙真的是挺硬，编码问题</p><span id="more"></span><p>今天上线发现<code>iPhone7 Plus</code>设备都用不了，一顿排查，发现字符编码出现了问题</p><p><code>iPhone7 Plus</code>第二个<code>P</code>是古希腊字符<code>Ρ</code>,它的Unicode码是<code>\u03a1</code>，正常的<code>P</code>的Unicode码是<code>\u0050</code>。</p><p>我们在校验字符的时候不会通过，最后导致程序起不来。GG</p><p>以后上线测试需要给力哦！</p>]]></content>
      
      
      <categories>
          
          <category> 事故记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计Xcode工程代码行数</title>
      <link href="/2016/12/01/ios/general/%E7%BB%9F%E8%AE%A1Xcode%E5%B7%A5%E7%A8%8B%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0/"/>
      <url>/2016/12/01/ios/general/%E7%BB%9F%E8%AE%A1Xcode%E5%B7%A5%E7%A8%8B%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>写着写着突然想看一下自己写了多少行代码。</p><span id="more"></span><h2 id="Shell-命令"><a href="#Shell-命令" class="headerlink" title="Shell 命令"></a>Shell 命令</h2><p><strong>切换到指定工程目录,执行如下代码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . <span class="string">&quot;(&quot;</span> -name <span class="string">&quot;*.m&quot;</span> -or -name <span class="string">&quot;*.mm&quot;</span> -or -name <span class="string">&quot;*.cpp&quot;</span> -or -name <span class="string">&quot;*.h&quot;</span> -or -name <span class="string">&quot;*.rss&quot;</span> <span class="string">&quot;)&quot;</span> -<span class="built_in">print</span> | xargs <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><blockquote><p>其中，<code>-name &quot;*.m&quot;</code> 就表示扩展名为<code>.m</code>的文件。同时要统计<code>java</code>文件和<code>xml</code>文件的命令分别是：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find . <span class="string">&quot;(&quot;</span> -name <span class="string">&quot;*.java&quot;</span> <span class="string">&quot;)&quot;</span> -<span class="built_in">print</span> | xargs <span class="built_in">wc</span> -l</span><br><span class="line">find . <span class="string">&quot;(&quot;</span> -name <span class="string">&quot;*.xml&quot;</span> <span class="string">&quot;)&quot;</span> -<span class="built_in">print</span> | xargs <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><h2 id="cloc"><a href="#cloc" class="headerlink" title="cloc"></a>cloc</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install cloc</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><strong>统计当前文件夹代码行数(请先cd 到目标目录)：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloc ./</span><br></pre></td></tr></table></figure><p><strong>排除当前目录若干个文件夹</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloc ./ --exclude-dir=Pods,MCTest</span><br></pre></td></tr></table></figure><p><strong>查看帮助文档</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloc --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Language                     files          blank        comment           code</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Objective C                   1083          25500          13123         136158</span><br><span class="line">JSON                           814              5              0          49898</span><br><span class="line">XML                            403              0              1          47877</span><br><span class="line">C/C++ Header                  1123          10460          14104          21373</span><br><span class="line">C                               16           1289            628           6448</span><br><span class="line">Objective C++                    2             53             19            285</span><br><span class="line">JavaScript                       1              6              0             85</span><br><span class="line">Markdown                         3             16              0             65</span><br><span class="line">CSS                              1              0              0             44</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">SUM:                          3446          37329          27875         262233</span><br><span class="line">-------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程</title>
      <link href="/2016/11/11/linux/Shell%E7%BC%96%E7%A8%8B/"/>
      <url>/2016/11/11/linux/Shell%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>用Shell改变Tina地</p><span id="more"></span><h2 id="Shell格式"><a href="#Shell格式" class="headerlink" title="Shell格式"></a>Shell格式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、扩展名: xxx.sh</span><br><span class="line">2、正文第一行必须指定解释器: #!/bin/bash</span><br></pre></td></tr></table></figure><h2 id="shell执行方式"><a href="#shell执行方式" class="headerlink" title="shell执行方式"></a>shell执行方式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式一: 加权限,  ./xxx.sh 执行</span></span><br><span class="line">1、chmod +x  xxx.sh</span><br><span class="line">2、./xxx.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式二: 手动指定解释器</span></span><br><span class="line">bash xxx.sh</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><strong>自定义变量</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 定义变量</span></span><br><span class="line">变量名=值    ----&gt;  注意: =两侧绝对不能有空格</span><br><span class="line">eg1: name=&quot;take me to your heart&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 调用变量的格式</span></span><br><span class="line">echo $变量名</span><br><span class="line">     </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 小细节: 单引号和双引号的区别</span></span><br><span class="line">单引号: 无法获取变量的值</span><br><span class="line">双引号: 可以获取变量的值</span><br></pre></td></tr></table></figure><ul><li><strong>环境变量+位置变量+预设变量</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">环境变量</span></span><br><span class="line">echo $USER   --  当前用户</span><br><span class="line">echo $UID    --  当前用户的UID号</span><br><span class="line">echo $PWD    --  当前路径</span><br><span class="line">echo $PATH   --  命令搜索路径</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">位置变量</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">1 <span class="variable">$2</span> <span class="variable">$3</span> ... ... shell的位置变量</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预定义变量</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="comment"># $* $?</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">$? : 返回上一条命令执行的状态(0代表正确,非0代表失败)</span></span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出$1+$2,例如输出结果: 3+5</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo $1 + $2 = `expr $1 + $2`</span><br></pre></td></tr></table></figure><ul><li><strong>变量赋值 - 接收用户从终端输入的值</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法格式</span></span><br><span class="line">read -p 提示信息 变量名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read -p 请输入姓名: name</span><br><span class="line">echo &quot;您输入的姓名是:$name&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定超时时间</span></span><br><span class="line">read -p 提示信息 变量名</span><br><span class="line">read -t n -p 提示信息 变量名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read -t 3 -p 请输入用户名: username</span><br></pre></td></tr></table></figure><p>**</p><h2 id="shell-算术运算符"><a href="#shell-算术运算符" class="headerlink" title="shell - 算术运算符"></a><strong>shell - 算术运算符</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运算符</span></span><br><span class="line">1、+ - * / % </span><br><span class="line">2、++ : 自加1运算,类似于python中 i++  等同于 i+=1</span><br><span class="line">3、-- : 同++</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运算命令</span></span><br><span class="line">1、let 运算表达式</span><br><span class="line">i=1</span><br><span class="line">let i++</span><br><span class="line">echo $i</span><br><span class="line">2、expr 运算表达式</span><br><span class="line">i=1</span><br><span class="line">sum=`expr $i + 5` # +两侧要有空格</span><br><span class="line">echo $sum</span><br><span class="line">3、$[]</span><br><span class="line">echo $[1+1]</span><br><span class="line">echo $[1-1]</span><br><span class="line">echo $[a+a] # 调用变量不用多次添加$符号</span><br><span class="line">echo $[1*1] # 乘法无需转义</span><br></pre></td></tr></table></figure><p><strong>练习</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用 位置变量+以上方法一、二中任何一种,实现2个数字的相加</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo $[$1+$2]</span><br><span class="line">echo `expr $1 + $2`</span><br></pre></td></tr></table></figure><h2 id="shell-比较运算符"><a href="#shell-比较运算符" class="headerlink" title="shell - 比较运算符"></a><strong>shell - 比较运算符</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法格式</span></span><br><span class="line">[  判断语句  ]# 注意括号必须有空格</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、字符比较</span></span><br><span class="line">[ A == A ]#相等(等号两边需要有空格)</span><br><span class="line">[ A != B ]#不相等</span><br><span class="line">[ -z $变量 ]#判断是否为空</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、数字比较</span></span><br><span class="line">-eq等于(equal)</span><br><span class="line">-ne不等于(not equal)</span><br><span class="line">-gt大于(greater than)</span><br><span class="line">-ge大于等于(great or equal)</span><br><span class="line">-lt小于(less than)</span><br><span class="line">-le小于等于(less or equal)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、文件|目录比较</span></span><br><span class="line">   [ -e 文件或目录 ]    #是否存在exist</span><br><span class="line">   [ -f  文件      ]    #存在且为文件file</span><br><span class="line">   [ -d  目录      ]    #存在且为目录directory</span><br><span class="line">   [ -r 文件或目录 ]    #判断是否可读read</span><br><span class="line">   [ -w 文件或目录 ]    #判断是否可写write</span><br><span class="line">   [ -x 文件或目录 ]    #判断是否可执行</span><br></pre></td></tr></table></figure><h2 id="shell-if分支结构"><a href="#shell-if分支结构" class="headerlink" title="shell - if分支结构"></a><strong>shell - if分支结构</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、单分支语法格式</span></span><br><span class="line">     if 判断 ;then</span><br><span class="line">        命令</span><br><span class="line">        命令</span><br><span class="line">     fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、双分支语法格式</span></span><br><span class="line">if 判断 ;then</span><br><span class="line">命令1</span><br><span class="line">else</span><br><span class="line">命令2</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、多分支语法格式</span></span><br><span class="line">  if 判断;then</span><br><span class="line">    命令1</span><br><span class="line">  elif 判断 ;then</span><br><span class="line">    命令2</span><br><span class="line">  else</span><br><span class="line">    命令3</span><br><span class="line">  fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">if [ $USER == tarena ];then</span><br><span class="line">echo &quot;Yes,You are Tarena.&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;You are other man.&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><strong>练习:使用shell编写猜数字游戏,无须循环</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">num=$RANDOM</span><br><span class="line">read -p &quot;我有一个随机数,你猜:&quot;  guess</span><br><span class="line">if [ $guess -eq $num ];then</span><br><span class="line">echo &quot;恭喜,猜对了.&quot;</span><br><span class="line">elif [ $guess -gt $num ];then</span><br><span class="line">echo &quot;你猜大了&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;你猜小了&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="shell-for循环"><a href="#shell-for循环" class="headerlink" title="shell - for循环"></a><strong>shell - for循环</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法格式</span></span><br><span class="line">for 变量 in 值序列</span><br><span class="line">do</span><br><span class="line">命令</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">for i in 1 2 3 4 5</span><br><span class="line">do</span><br><span class="line">echo &quot;hello world&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>练习:判断指定网段的IP地址哪些可以用,哪些不能用？</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for i in &#123;1..254&#125;</span><br><span class="line">do</span><br><span class="line"><span class="meta prompt_">   # </span><span class="language-bash">/dev/null为黑洞,不想要的输出放到里面</span></span><br><span class="line">   ping -c 2 172.40.91.$i &amp;&gt;/dev/null</span><br><span class="line"><span class="meta prompt_">   # </span><span class="language-bash">$?是返回上一条命令的执行状态</span></span><br><span class="line">   if [ $? -eq 0 ];then</span><br><span class="line">echo &quot;172.40.91.$i is up.&quot;</span><br><span class="line">   else</span><br><span class="line">echo &quot;172.40.91.$i is down&quot;</span><br><span class="line">   fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="shell-while循环"><a href="#shell-while循环" class="headerlink" title="shell - while循环"></a><strong>shell - while循环</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法格式</span></span><br><span class="line"><span class="keyword">while</span> 条件判断</span><br><span class="line">do</span><br><span class="line">命令</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> [ $i -lt <span class="number">5</span> ]</span><br><span class="line">do</span><br><span class="line">   echo baby</span><br><span class="line">   let i++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>while补充</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、死循环</span><br><span class="line">while :</span><br><span class="line">do</span><br><span class="line">循环体</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">2、vim批量缩进</span><br><span class="line">显示行号: set nu </span><br><span class="line">命令行模式下输入:</span><br><span class="line">1,3&gt; 敲Enter  - 向右缩进</span><br><span class="line">3,8&lt; 敲Enter  - 向左缩进</span><br></pre></td></tr></table></figure><h2 id="shell-case分支结构"><a href="#shell-case分支结构" class="headerlink" title="shell - case分支结构"></a><strong>shell - case分支结构</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、特点</span></span><br><span class="line">根据变量值的不同,执行不同的操作</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、语法格式</span></span><br><span class="line">case $变量名 in</span><br><span class="line">模式1)</span><br><span class="line">代码块</span><br><span class="line">;;</span><br><span class="line">模式2)</span><br><span class="line">代码块</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">代码块</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p><strong>示例 - 输入1个字符,判断为数字、字母还是其他字符</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;+------------------------+&quot;</span><br><span class="line">echo &quot;|  Welcome(q to quit)    |&quot;</span><br><span class="line">echo &quot;+------------------------+&quot;</span><br><span class="line"></span><br><span class="line">read -p &quot;请输入1个字符:&quot; char</span><br><span class="line">if [ $&#123;#char&#125; -ne 1 ];then</span><br><span class="line">    echo &quot;$char不是1个字符!!&quot;</span><br><span class="line">    exit</span><br><span class="line">elif [ $char == &quot;q&quot; ];then</span><br><span class="line">    echo &quot;程序退出&quot;</span><br><span class="line">    exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">case $char in </span><br><span class="line">[a-z]|[A-Z])</span><br><span class="line">    echo &quot;字母&quot;</span><br><span class="line">    ;;</span><br><span class="line">[0-9])</span><br><span class="line">    echo &quot;数字&quot;</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    echo &quot;其他字符&quot;</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p><strong>练习:编写1个nginx的启动脚本，包含: start stop restart</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">read -p &quot;操作(start|stop|restart):&quot; op</span><br><span class="line">case $op in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">sudo /etc/init.d/nginx restart</span><br><span class="line">;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">sudo /etc/init.d/nginx stop</span><br><span class="line">;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">sudo /etc/init.d/nginx restart</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;Please choice in start|stop|restart&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p><strong>知识点总结</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、获取字符串长度</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;#变量名&#125;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、字符串索引及切片</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;string:index:number&#125;</span></span><br><span class="line">key=&#x27;ABCDE&#x27;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;key:0:1&#125; <span class="comment"># A 获取下表索引为0的元素</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;key:1:2&#125; <span class="comment"># BC</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、vim批量缩进</span></span><br><span class="line">1、进入命令行模式 : shift + :</span><br><span class="line">2、1,3&gt; + Enter  : 1-3行缩进</span><br><span class="line">3、1,3&lt; + Enter  : 1-3行往回缩进</span><br></pre></td></tr></table></figure><h2 id="shell实战"><a href="#shell实战" class="headerlink" title="shell实战"></a><strong>shell实战</strong></h2><p><strong>1、每2秒中检测一次MySQL数据库的连接数量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysqladmin命令</span></span><br><span class="line">mysql服务器管理任务的工具，它可以检查mysql服务器的配置和当前工作状态</span><br></pre></td></tr></table></figure><p>​<strong>代码实现</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每2秒检测一次MySQL并发连接数</span></span><br><span class="line"></span><br><span class="line">user=&quot;root&quot; </span><br><span class="line">passwd=&quot;123456&quot; </span><br><span class="line"></span><br><span class="line">while : </span><br><span class="line">do         </span><br><span class="line">sleep 2         </span><br><span class="line">count=`mysqladmin  -u&quot;$user&quot;  -p&quot;$passwd&quot; status |  awk &#x27;&#123;print $4&#125;&#x27;`</span><br><span class="line">echo &quot;`date %F` 并发连接数为:$count&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>2、根据md5校验码，检测文件是否被修改</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、生成md5的文件校验码</span></span><br><span class="line">md5sum nginx.conf</span><br></pre></td></tr></table></figure><p>​<strong>代码实现</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">本示例脚本检测的是/etc 目录下所有的conf结尾的文件</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">本脚本在目标数据没有被修改时执行一次，当怀疑数据被人篡改，再执行一次</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将两次执行的结果做对比，MD5码发生改变的文件，就是被人篡改的文件</span> </span><br><span class="line">for  i  in  $(ls /etc/*.conf) </span><br><span class="line">do  </span><br><span class="line">md5sum &quot;$i&quot; &gt;&gt; /home/tarena/md5log.txt</span><br><span class="line">done </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如何查看两个文件不同</span></span><br><span class="line">diff 文件1 文件2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. test.conf 发生了改变</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 第30行发生了变化(change)</span></span><br><span class="line">30c30</span><br><span class="line">d8dbe7e909b0b8ddfdfd  /etc/test.conf</span><br><span class="line">ad69e9d04d86ddf5d668  /etc/test.conf</span><br></pre></td></tr></table></figure><p><strong>3、备份MySQL数据库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份MySQL数据库中的mysql库</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"> </span><br><span class="line">user=&quot;root&quot; </span><br><span class="line">passwd=&quot;123456&quot; </span><br><span class="line">dbname=&quot;mysql&quot;</span><br><span class="line">date=$(date +%Y%m%d) </span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">测试备份目录是否存在，不存在则自动创建该目录</span> </span><br><span class="line">if [  ! -d  /home/tarena/mysqlbackup ];then</span><br><span class="line">mkdir  /home/tarena/mysqlbackup</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用mysqldump命令备份数据库</span> </span><br><span class="line">mysqldump -u&quot;$user&quot;  -p&quot;$passwd&quot; &quot;$dbname&quot; &gt; /home/tarena/mysqlbackup/&quot;$dbname&quot;-$&#123;date&#125;.sql </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>4、随机生成8为密码 - 数字、字母、下划线</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置变量key，存储密码的所有可能性（密码库），如果还需要其他字符请自行添加其他密码字符</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用<span class="variable">$#</span>统计密码库的长度</span> </span><br><span class="line"></span><br><span class="line">key=&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; </span><br><span class="line">num=$&#123;#key&#125; </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置初始密码为空</span> </span><br><span class="line">pass=&#x27;&#x27; </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">循环8次，生成 8为随机密码</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每次都是随机数对密码库的长度取余，确保提取的密码字符不超过密码库的长度</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每次循环提取一位随机密码，并将该随机密码追加到pass变量的最后</span> </span><br><span class="line">for i in &#123;1..8&#125; </span><br><span class="line">do   </span><br><span class="line">index=$[RANDOM%num]  </span><br><span class="line">pass=$pass$&#123;key:$index:1&#125; </span><br><span class="line">done </span><br><span class="line">echo $pass</span><br></pre></td></tr></table></figure><p><strong>shell - 函数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、语法格式</span><br><span class="line">函数名()&#123;</span><br><span class="line">   代码块</span><br><span class="line">&#125;</span><br><span class="line">2、调用</span><br><span class="line">函数名</span><br></pre></td></tr></table></figure><p><strong>示例代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">sumn()&#123;</span><br><span class="line">    echo $[n1+n2]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subn()&#123;</span><br><span class="line">    echo $[n1-n2]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read -p &quot;First:&quot; n1</span><br><span class="line">read -p &quot;Second:&quot; n2</span><br><span class="line">read -p &quot;Operation(+|-):&quot; op</span><br><span class="line"></span><br><span class="line">case $op in </span><br><span class="line">&quot;+&quot;)</span><br><span class="line">    sumn</span><br><span class="line">    ;;</span><br><span class="line">&quot;-&quot;)</span><br><span class="line">    subn</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    echo &quot;Invalid&quot;</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2016/11/10/linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2016/11/10/linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>记录Linux的常用命令，有备无患</p><span id="more"></span><h2 id="常用Linux操作系统"><a href="#常用Linux操作系统" class="headerlink" title="常用Linux操作系统"></a>常用Linux操作系统</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RedHat(红帽)：<span class="number">6.5</span>、<span class="number">7</span></span><br><span class="line">CentOS：<span class="number">6.5</span>、<span class="number">7</span></span><br><span class="line">Ubuntu：<span class="number">16.04</span>、<span class="number">18.04</span></span><br></pre></td></tr></table></figure><h2 id="远程连接工具-xshell"><a href="#远程连接工具-xshell" class="headerlink" title="远程连接工具-xshell"></a>远程连接工具-xshell</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、定义</span></span><br><span class="line">xshell: 安装终端模拟软件</span><br><span class="line"><span class="comment"># 2、使用</span></span><br><span class="line">文件-新建-输入服务器IP地址-输入用户名-输入密码-确认连接</span><br><span class="line"><span class="comment"># 3、文件互传</span></span><br><span class="line">sudo apt-get install lrzsz</span><br><span class="line">Windows -&gt; Linux：rz </span><br><span class="line">Linux -&gt; Windows: sz filename</span><br></pre></td></tr></table></figure><h2 id="默认已熟练使用的Linux命令"><a href="#默认已熟练使用的Linux命令" class="headerlink" title="默认已熟练使用的Linux命令"></a>默认已熟练使用的Linux命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、pwd</span><br><span class="line"><span class="number">2</span>、cd    -- cd .. 、cd</span><br><span class="line"><span class="number">3</span>、ls -l   -- ll</span><br><span class="line"><span class="number">4</span>、mkdir -p /home/tarena/a/b/c/d</span><br><span class="line">   os</span><br><span class="line">   os.mkdir(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">   os.makedirs(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="number">5</span>、touch</span><br><span class="line"><span class="number">6</span>、tar </span><br><span class="line">  tar -zcvf xxx.tar.gz dir1 dir2</span><br><span class="line">  tar -zxvf xxx.tar.gz</span><br><span class="line">  tar -xf xxx.tar.gz</span><br><span class="line">  tar xf xxx.tar.gz</span><br><span class="line">  unzip xxx.<span class="built_in">zip</span></span><br><span class="line"><span class="number">7</span>、cp    -- cp -r <span class="comment">#-r选项递归复制,复制非空文件夹</span></span><br><span class="line"><span class="number">8</span>、mv</span><br><span class="line">  mv dir1 /home/tarena/</span><br><span class="line">  mv dir1 new_dir1</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、ifconfig</span><br><span class="line">  查看IP地址和MAC地址</span><br><span class="line">  Windows中命令为:ipconfig 或者 ipconfig/<span class="built_in">all</span></span><br><span class="line">  <span class="comment"># ubuntu18.04 不能使用ifconfig</span></span><br><span class="line">  sudo apt-get install net-tools</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、ping IP/域名 [-c n]</span><br><span class="line">  测试网络连通性,-c指定连接次数</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、nslookup 域名</span><br><span class="line">  解析域名对应的IP地址</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、ls -lh file|directory</span><br><span class="line">  显示文件权限及详细信息,h选项提供易读容量单位</span><br><span class="line">  -rw-r--r--  tarena tarena</span><br><span class="line">  分三组:  所有者权限 所属组用户权限 其他用户权限</span><br><span class="line">  r - 读(<span class="number">4</span>)</span><br><span class="line">  w - 写(<span class="number">2</span>)</span><br><span class="line">  x - 可执行(<span class="number">1</span>)</span><br><span class="line">  前<span class="number">3</span>位: 所有者(tarena这个用户)rw-</span><br><span class="line">  中<span class="number">3</span>位: 所属组其它用户(用户tarena2对文件权限)r--</span><br><span class="line">  尾<span class="number">3</span>位: 其它组其它用户(用户develop1对文件权限)r--</span><br><span class="line">  <span class="comment"># 777 rwxrwxrwx</span></span><br><span class="line">  <span class="comment"># 666 rw-rw-rw-</span></span><br><span class="line">  <span class="comment"># 644 rw-r--r--</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、tar -zcvf filename.tar.gz file1 file2 directory3 </span><br><span class="line">  将文件|目录打包并压缩</span><br><span class="line"> </span><br><span class="line"><span class="number">6</span>、tar -zxvf filename.tar.gz [-C path]</span><br><span class="line">  解压缩,默认解压到当前路径,-C可指定路径</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、ps -aux</span><br><span class="line">  显示进程命令(包含PID号)  ps -aux | grep <span class="string">&#x27;mysql&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、kill PID</span><br><span class="line">  杀死某个进程</span><br><span class="line">  eg: ps -aux | grep <span class="string">&#x27;mysql&#x27;</span></span><br><span class="line">      sudo kill PID号</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>、chmod 权限 file</span><br><span class="line">  给文件指定或者增加某权限</span><br><span class="line">  chmod <span class="number">777</span> 文件名</span><br><span class="line">  chmod <span class="number">644</span> 文件名</span><br><span class="line">  rw-r--r--</span><br><span class="line">  chmod u+x 文件名 <span class="comment"># 文件所有者增加x权限(user)</span></span><br><span class="line">  chmod g+w 文件名 <span class="comment"># 同组其它用户增加w权限(group)</span></span><br><span class="line">  chmod o-r 文件名 <span class="comment"># 其它组其它用户减r权限(other)</span></span><br><span class="line">  chmod a+x 文件名 <span class="comment"># 给所有用户增加x权限(all)</span></span><br><span class="line"></span><br><span class="line"><span class="number">10</span>、chown user:group file</span><br><span class="line">  更改属主和属组</span><br><span class="line">  eg: chown root:root file</span><br><span class="line">       </span><br><span class="line"><span class="number">11</span>、find path -name filename</span><br><span class="line">  在某个路径下查找文件</span><br><span class="line">  eg: find /home/tarena/ -name <span class="string">&#x27;*.avi&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="number">12</span>、ssh user@IP</span><br><span class="line">  远程连接到服务器</span><br><span class="line">  eg: ssh tarena@<span class="number">172.40</span><span class="number">.91</span><span class="number">.138</span></span><br><span class="line">    </span><br><span class="line"><span class="number">13</span>、scp file user@IP:绝对路径</span><br><span class="line">  本地文件复制到远程</span><br><span class="line">  eg: scp python.tar.gz tarena@<span class="number">172.40</span><span class="number">.91</span><span class="number">.138</span>:/home/tarena/</span><br></pre></td></tr></table></figure><h2 id="vi及vim使用"><a href="#vi及vim使用" class="headerlink" title="vi及vim使用"></a>vi及vim使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">文本编辑器,vim是vi的升级版</span><br><span class="line"><span class="comment"># 使用流程</span></span><br><span class="line"><span class="number">1</span>、vi filename</span><br><span class="line">初始(不能编辑,浏览模式)  -&gt; 按 a(可编辑,插入模式) -&gt; 编辑内容 -&gt; 按ESC,然后shift+:(命令行模式) -&gt; 输入wq!(保存并退出)、或q!(不保存直接退出)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习</span></span><br><span class="line"><span class="number">1</span>、打开一个文件,写入你最喜欢的一首诗,保存退出</span><br><span class="line"><span class="number">2</span>、cat 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用</span></span><br><span class="line"><span class="number">1</span>、查找</span><br><span class="line">  浏览模式 -&gt; 输入 /  -&gt; 输入查找内容 -&gt; Enter  (n表示下<span class="number">1</span>个,shift+n表示上<span class="number">1</span>个)</span><br><span class="line"><span class="number">2</span>、复制+删除+粘贴+撤销</span><br><span class="line">  yy：复制光标所在行(2yy复制两行内容)</span><br><span class="line">   p：粘贴</span><br><span class="line">  dd：删除(剪切)光标所在行(3dd删除(剪切)<span class="number">3</span>行内容）</span><br><span class="line">   u: 撤销</span><br><span class="line"></span><br><span class="line"><span class="comment"># 光标的跳转(浏览模式)：</span></span><br><span class="line">  行首： home</span><br><span class="line">  行尾： end</span><br><span class="line">  全文的首行：gg</span><br><span class="line">  全文的最后一行：G</span><br><span class="line">  全文的<span class="number">12</span>行：12G</span><br></pre></td></tr></table></figure><h2 id="Linux命令-Go-on"><a href="#Linux命令-Go-on" class="headerlink" title="Linux命令-Go on"></a>Linux命令-Go on</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 22、统计文件的行数</span></span><br><span class="line">  wc -l</span><br><span class="line">eg1: wc -l /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 23、对文件中内容进行排序</span></span><br><span class="line">  sort 文件名</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 24、去除重复行,并统计每行出现的次数(相邻行)</span></span><br><span class="line">  uniq -c</span><br><span class="line">  sort 文件名 | uniq -c</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 14、管道操作  | ：  </span></span><br><span class="line">  将前面命令的输出，传递给后面命令，作为后面命令的参数</span><br><span class="line">  查看 /etc/passwd 文件的 第<span class="number">6</span>-<span class="number">10</span>行？ - cat、head、tail</span><br><span class="line">  <span class="comment"># cat /etc/passwd | head -10 | tail -5</span></span><br><span class="line">  <span class="comment"># head -10 /etc/passwd | tail -5</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 15、统计目录总共的占用空间的大小</span></span><br><span class="line">  du -sh 目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 16、查看磁盘使用情况(根分区使用情况)</span></span><br><span class="line">  df -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 17、常见通配符使用</span></span><br><span class="line">  *：任意多个字符</span><br><span class="line">  ？：单个字符</span><br><span class="line">  eg1: rm -rf /home/tarena/test/*</span><br><span class="line">  eg2: ls *.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 18、重定向: 将前面命令的输出，写入到文本文件中</span></span><br><span class="line">  &gt;：覆盖重定向</span><br><span class="line">  &gt;&gt;：追加重定向</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 19、创建用户(会创建同名组)</span></span><br><span class="line">  useradd username</span><br><span class="line"></span><br><span class="line"><span class="comment"># 20、设置密码</span></span><br><span class="line">  sudo passwd 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 21、删除用户</span></span><br><span class="line">  userdel 用户名</span><br><span class="line">  -r：递归删除，删除用户的家目录以及用户的邮件文件</span><br></pre></td></tr></table></figure><h2 id="raid0-raid1-raid5的区别"><a href="#raid0-raid1-raid5的区别" class="headerlink" title="raid0 raid1 raid5的区别"></a>raid0 raid1 raid5的区别</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、什么是raid？</span></span><br><span class="line">由一系列硬盘组成的阵列,简单说:一个服务器有<span class="number">10</span>个一硬盘,你如何能保证坏掉<span class="number">1</span>个硬盘后数据不丢,业务不断</span><br><span class="line"></span><br><span class="line"><span class="comment"># raid分类:raid0 、raid1、raid5</span></span><br><span class="line">raid0</span><br><span class="line">  <span class="number">1</span>、特点:数据分散存储在多个硬盘</span><br><span class="line">  <span class="number">2</span>、优点:读写并发,速度超快,提升数倍</span><br><span class="line">  <span class="number">3</span>、缺点:一旦一个硬盘挂掉,则损坏全部数据</span><br><span class="line">raid1:</span><br><span class="line">  <span class="number">1</span>、特点:数据分别写入两个磁盘(写了两份)</span><br><span class="line">  <span class="number">2</span>、优点:实现了数据备份</span><br><span class="line">  <span class="number">3</span>、缺点:磁盘使用率只能到<span class="number">50</span>%</span><br><span class="line">raid5:</span><br><span class="line">  <span class="number">1</span>、特点:提供热备盘实现故障恢复</span><br><span class="line">  <span class="number">2</span>、优点:只损坏<span class="number">1</span>块磁盘,数据不会损坏</span><br><span class="line">  <span class="number">3</span>、缺点:同时坏<span class="number">2</span>块磁盘,数据损坏</span><br></pre></td></tr></table></figure><h2 id="周期性计划任务"><a href="#周期性计划任务" class="headerlink" title="周期性计划任务"></a>周期性计划任务</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、进入周期性计划任务</span></span><br><span class="line">crontab -e (首次进入按<span class="number">2</span> - 找vim)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置周期性计划任务</span></span><br><span class="line">* * * * *  : 五个*号代表  分 时 日 月 周</span><br><span class="line"><span class="number">0</span> <span class="number">2</span> * * *  : 每天凌晨<span class="number">2</span>点</span><br><span class="line">分 ：<span class="number">0</span>-<span class="number">59</span></span><br><span class="line">时 ：<span class="number">0</span>-<span class="number">23</span></span><br><span class="line">日 ：<span class="number">1</span>-<span class="number">31</span></span><br><span class="line">月 ：<span class="number">1</span>-<span class="number">12</span></span><br><span class="line">周 ：<span class="number">0</span>-<span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始设置 : </span></span><br><span class="line"><span class="number">1</span>、<span class="string">&#x27;*&#x27;</span> 代表所有可能值</span><br><span class="line"><span class="number">2</span>、<span class="string">&#x27;,&#x27;</span> 指定多个时间点 <span class="number">0</span> <span class="number">1</span>,<span class="number">5</span> * * * xxx</span><br><span class="line"><span class="number">3</span>、<span class="string">&#x27;/&#x27;</span> 指定时间间隔频率 <span class="number">0</span> <span class="number">0</span>-<span class="number">6</span>/<span class="number">1</span> * * * xxx</span><br><span class="line"><span class="number">4</span>、<span class="string">&#x27;-&#x27;</span> 指定一个时间段</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="number">1</span>、每月的<span class="number">1</span>日和<span class="number">5</span>日两天: * * <span class="number">1</span>,<span class="number">5</span> * * </span><br><span class="line"><span class="number">2</span>、每<span class="number">10</span>分钟: */<span class="number">10</span> * * * * </span><br><span class="line"><span class="number">3</span>、<span class="number">0</span>点-<span class="number">6</span>点每小时执行: <span class="number">0</span> <span class="number">0</span>-<span class="number">6</span>/<span class="number">1</span> * * *</span><br><span class="line"><span class="number">4</span>、每分钟执行: * * * * *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习</span></span><br><span class="line"><span class="number">1</span>、每小时的第<span class="number">3</span>分钟和第<span class="number">15</span>分钟执行</span><br><span class="line">  <span class="number">3</span>,<span class="number">15</span> * * * * python3 xxx.py</span><br><span class="line"><span class="number">2</span>、每周六、周日的<span class="number">0</span>点执行一个 <span class="number">01.</span>py 文件</span><br><span class="line">  <span class="number">0</span> <span class="number">0</span> * * <span class="number">6</span>,<span class="number">0</span></span><br><span class="line"><span class="number">6</span>、每天<span class="number">18</span>:<span class="number">00</span>到<span class="number">23</span>:<span class="number">00</span>之间每小时执行 <span class="number">01.</span>py 文件</span><br><span class="line">  <span class="number">0</span> <span class="number">18</span>-<span class="number">23</span>/<span class="number">1</span> * * *</span><br></pre></td></tr></table></figure><h2 id="文本处理工具-awk"><a href="#文本处理工具-awk" class="headerlink" title="文本处理工具 - awk"></a>文本处理工具 - awk</h2><p><strong>语法格式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk 选项 <span class="string">&#x27;动作&#x27;</span> 文件列表</span><br></pre></td></tr></table></figure><p><strong>常用方式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux命令  |   awk  选项  <span class="string">&#x27;动作&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>使用方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print &quot;abc&quot;&#125;&#x27;</span> ip.txt</span><br><span class="line"><span class="comment"># 思考: 这个会输出什么？</span></span><br><span class="line">df -h | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -F：指定分隔符</span></span><br><span class="line">awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>  <span class="comment"># 显示 : 分隔后的第2列</span></span><br><span class="line"><span class="comment"># 示例: 提取根分区的使用量</span></span><br><span class="line">df -h | head -<span class="number">4</span> | tail -<span class="number">1</span> | awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span> | awk -F <span class="string">&#x27;%&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 练习</span></span><br><span class="line">输出本机的IP地址</span><br><span class="line">ifconfig | head -<span class="number">2</span> | tail -<span class="number">1</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>grep命令之正则表达式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正则表达式元字符集 - 使用grep命令</span></span><br><span class="line">^    :   以 ... 开头</span><br><span class="line">$    :   以 ... 结尾</span><br><span class="line">.     :   任何<span class="number">1</span>个字符</span><br><span class="line">*    :   <span class="number">0</span>次或多次</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则表达式扩展字符集 - 使用 egrep 命令</span></span><br><span class="line">+    :   <span class="number">1</span>次或多次</span><br><span class="line">&#123;n&#125; :   出现n次</span><br><span class="line">()  ：  分组</span><br><span class="line"></span><br><span class="line">[a-z]   :  所有小写字母</span><br><span class="line">[A-Z]  :  所有大写字母</span><br><span class="line">[a-Z]  :  所有字母</span><br><span class="line">[<span class="number">0</span>-<span class="number">9</span>]  : 所有数字</span><br><span class="line">[a-Z0-<span class="number">9</span>]  : 所有的字母和数字</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mac地址正则匹配</span></span><br><span class="line">([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">2</span>&#125;:)&#123;<span class="number">5</span>&#125;[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="使用命令必须养成的习惯"><a href="#使用命令必须养成的习惯" class="headerlink" title="使用命令必须养成的习惯"></a><strong>使用命令必须养成的习惯</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、tab键自动补全</span><br><span class="line"><span class="number">2</span>、Ctrl + l : 清理屏幕</span><br><span class="line"><span class="number">3</span>、Ctrl + c : 终止当前命令的执行</span><br></pre></td></tr></table></figure><h2 id="常用远程连接软件"><a href="#常用远程连接软件" class="headerlink" title="常用远程连接软件"></a><strong>常用远程连接软件</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 终端仿真程序，其实就是Windows下登录UNIX或Linux服务器主机的软件，支持ssh、telnet</span></span><br><span class="line"><span class="number">1</span>、Xshell</span><br><span class="line"><span class="number">2</span>、Secure CRT</span><br><span class="line"></span><br><span class="line"><span class="comment"># xshell实现文件互传</span></span><br><span class="line"><span class="number">1</span>、xshell图形界面: 新建文件传输</span><br><span class="line"><span class="number">2</span>、安装: lrzsz,是一款可在linux里可代替ftp上传和下载的程序</span><br></pre></td></tr></table></figure><h2 id="常见服务的端口号"><a href="#常见服务的端口号" class="headerlink" title="常见服务的端口号"></a><strong>常见服务的端口号</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MySQL - <span class="number">3306</span></span><br><span class="line">MongoDB - <span class="number">27017</span></span><br><span class="line">Redis - <span class="number">6379</span></span><br><span class="line">redis-sentinel - <span class="number">26379</span></span><br><span class="line">SSH - <span class="number">22</span></span><br><span class="line">HTTP - <span class="number">80</span> </span><br><span class="line">NGINX - <span class="number">80</span></span><br><span class="line">HTTPS - <span class="number">443</span></span><br><span class="line">TELNET - <span class="number">23</span></span><br><span class="line">FTP - <span class="number">21</span></span><br></pre></td></tr></table></figure><h2 id="文本处理工具-awk-1"><a href="#文本处理工具-awk-1" class="headerlink" title="文本处理工具 - awk"></a><strong>文本处理工具 - awk</strong></h2><p><strong>语法格式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk 选项 <span class="string">&#x27;动作&#x27;</span> 文件列表</span><br></pre></td></tr></table></figure><p><strong>常用方式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux命令  |   awk  选项  <span class="string">&#x27;动作&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>作业</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx的访问日志目录 ： /var/log/nginx/access.log</span></span><br><span class="line">问题<span class="number">1</span>: 把访问过自己的IP地址输出</span><br><span class="line">  cat access.log | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | sort | uniq </span><br><span class="line">问题<span class="number">2</span>: 统计有多少个IP访问过我</span><br><span class="line">  cat access.log | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | sort | uniq | wc -l</span><br><span class="line">问题<span class="number">3</span>: 统计每个IP地址的访问次数,输出前<span class="number">10</span>个访问量最大的用户IP</span><br><span class="line">  cat access.log | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | sort | uniq -c | sort -rnk <span class="number">1</span> | head -<span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>grep命令之正则表达式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正则表达式元字符集 - 使用grep命令</span></span><br><span class="line">^    :   以 ... 开头</span><br><span class="line">$    :   以 ... 结尾</span><br><span class="line">.     :   任何<span class="number">1</span>个字符</span><br><span class="line">*    :   <span class="number">0</span>次或多次</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则表达式扩展字符集 - 使用 egrep 命令</span></span><br><span class="line">+    :   <span class="number">1</span>次或多次</span><br><span class="line">&#123;n&#125; :   出现n次</span><br><span class="line">()  ：  分组</span><br><span class="line"></span><br><span class="line">[a-z]   :  所有小写字母</span><br><span class="line">[A-Z]  :  所有大写字母</span><br><span class="line">[a-Z]  :  所有字母</span><br><span class="line">[<span class="number">0</span>-<span class="number">9</span>]  : 所有数字</span><br><span class="line">[a-Z0-<span class="number">9</span>]  : 所有的字母和数字</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mac地址正则匹配</span></span><br><span class="line"><span class="comment"># 00:0c:29:c6:36:2d</span></span><br><span class="line">([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">2</span>&#125;:)&#123;<span class="number">5</span>&#125;[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">ifconfig | egrep <span class="string">&quot;([0-9a-fA-F]&#123;2&#125;:)&#123;5&#125;[0-9a-fA-F]&#123;2&#125;&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>价值观</title>
      <link href="/2016/10/28/life/%E4%BB%B7%E5%80%BC%E8%A7%82/"/>
      <url>/2016/10/28/life/%E4%BB%B7%E5%80%BC%E8%A7%82/</url>
      
        <content type="html"><![CDATA[<p>今天跟朋友讨论了一下关于价值观的问题。写在这里面告诫一下自己</p><span id="more"></span><h2 id="中西方老师教育的方式"><a href="#中西方老师教育的方式" class="headerlink" title="中西方老师教育的方式"></a>中西方老师教育的方式</h2><p><strong>举个栗子：<br>灰姑娘这节课</strong></p><p><strong>西</strong>：会跟孩子们学会其中的道理。例如交朋友，宽容，守时，不要怕犯错等价值观。<br><strong>中</strong>：同学们，这句划重点，这篇文章主要是总分总，期末要考；都讲完了，来我们一起说一下它的中心思想。老师在传授实用主义价值观，只学有用的。</p><h2 id="孩子发脾气"><a href="#孩子发脾气" class="headerlink" title="孩子发脾气"></a>孩子发脾气</h2><p><strong>举个栗子：<br>在商场跟爸妈喊着要玩具</strong></p><p>把孩子带到一边，好好跟他说表明态度，“你这么不冷静，爸爸妈妈肯定是不会满足你的要求的。如果你平静的跟爸爸妈妈表达你的想法，爸爸妈妈会考虑你的想法，然后再决定买不买。“</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教育 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS10和Xcode8踩坑</title>
      <link href="/2016/09/12/ios/general/iOS10%E5%92%8CXcode8%E8%B8%A9%E5%9D%91/"/>
      <url>/2016/09/12/ios/general/iOS10%E5%92%8CXcode8%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>iOS10和Xcode8的GM版放出后，iOS10适配工作就非常重要了。Xcode8下完打开项目后就陆续碰到了一些坑，本文对此这些坑做一些记录。</p><span id="more"></span><h2 id="无法打开的xib和storyboard"><a href="#无法打开的xib和storyboard" class="headerlink" title="无法打开的xib和storyboard"></a>无法打开的xib和storyboard</h2><p>由于同事们还在Xcode7.3上开发，然而你用Xcode8打开xib或storyboard后，会弹出一个选择机型的框，如果想要用Xcode8改xib或storyboard，就必须choose<br><img src="https://cdn.rencheng.cc/blog/v9ou8.png"><br>然而你choose后，同事用7.3去打开这个xib或者storyboard你会发现，打不开了，这不是逗比了吗？<br><img src="https://cdn.rencheng.cc/blog/fhgu5.png"><br>不过也可以通过source code去删除掉版本限制，不过建议还是不要这样做。<br><img src="https://cdn.rencheng.cc/blog/syvcx.png"></p><h2 id="控制台的疯狂"><a href="#控制台的疯狂" class="headerlink" title="控制台的疯狂"></a>控制台的疯狂</h2><p><strong>控制台输出不相关信息</strong><br>跑起项目后发现控制台在疯狂输出，根本无法看到自己的打印输出<br><img src="https://cdn.rencheng.cc/blog/k9izf.png"><br>需要EditScheme -&gt; 左侧Run -&gt; 右侧Arguments -&gt; 下方Environment Variables -&gt; 添加 <code>OS_ACTIVITY_MODE = disable</code><br><img src="https://cdn.rencheng.cc/blog/xan3g.png"><br><img src="https://cdn.rencheng.cc/blog/qlnth.png"></p><h3 id="真机调试打印显示不全（2016-10-24补充）"><a href="#真机调试打印显示不全（2016-10-24补充）" class="headerlink" title="真机调试打印显示不全（2016.10.24补充）"></a>真机调试打印显示不全（2016.10.24补充）</h3><p>这几天调试时发现，使用Xcode8+iOS10调试时，首先是真机输出打印不输出，后面发现是因为上面设置的<code>OS_ACTIVITY_MODE = disable</code>影响到了打印输出，取消这个设置后后虽然能打印了。</p><p>但是又出现一个新问题：在iOS10真机调试打印请求回调的json居然截断了（显示不全），但是Xcode8+iOS9却正常，经过一番查询，解决办法是在pch里用printf重新定义一下NSLog。</p><p>具体代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NSLog(format, ...) \</span></span><br><span class="line"><span class="meta">do &#123; \</span></span><br><span class="line"><span class="meta">printf(<span class="string">&quot;\n&lt;%s : %d : %s&gt;-: %s&quot;</span>, \</span></span><br><span class="line"><span class="meta">[[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String], \</span></span><br><span class="line"><span class="meta">__LINE__, \</span></span><br><span class="line"><span class="meta">__FUNCTION__, \</span></span><br><span class="line"><span class="meta">[[NSString stringWithFormat:format, ##__VA_ARGS__] UTF8String]); \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NSLog(format, ...) do&#123; &#125; while(0)</span></span><br></pre></td></tr></table></figure><h2 id="注释失效了"><a href="#注释失效了" class="headerlink" title="注释失效了"></a>注释失效了</h2><p>终端来一发<code>sudo /usr/libexec/xpccachectl</code>然后重启</p><h3 id="新增的文档注释"><a href="#新增的文档注释" class="headerlink" title="新增的文档注释"></a>新增的文档注释</h3><p>Xcode8里加入了喵神的文档注释，但是貌似功能没有之前插件的强，新的文档注释使用快捷键<code>Option + Command + /</code><br><img src="https://cdn.rencheng.cc/blog/bil07.png"><br><img src="https://cdn.rencheng.cc/blog/zljhg.png"><br>不过这个文档注释并不能像喵神的插件一样随意使用，如下图的时候就报提示没找到需要进行文档注释的东西😂<br><img src="https://cdn.rencheng.cc/blog/wnfbm.png"></p><h2 id="label显示不全"><a href="#label显示不全" class="headerlink" title="label显示不全"></a>label显示不全</h2><p>详见上一篇<a href="https://rencheng.cc/2016/09/10/iOS10%E7%9A%84label%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%85%A8%E9%97%AE%E9%A2%98/">iOS10的label文字显示不全问题</a></p><h2 id="权限授权"><a href="#权限授权" class="headerlink" title="权限授权"></a>权限授权</h2><p>在排查上个label显示不全问题的时候，发现调相机崩了，调相册崩了，调定位又崩了，但是xcode7打的包在iOS10手机安装使用却是正常，什么👻</p><p>这次Xcode8对调用各种隐私权限做了控制，在调试的时候，需要在info.plist里声明你的权限和对应的提示文案，比如相册权限<br><img src="https://cdn.rencheng.cc/blog/xngko.png"><br><img src="https://cdn.rencheng.cc/blog/x0rit.png"></p><h3 id="其他权限"><a href="#其他权限" class="headerlink" title="其他权限"></a>其他权限</h3><p>可以在info.plist值看到所有Private - 开头的都是<br><img src="https://cdn.rencheng.cc/blog/69frc.png"><br><img src="https://cdn.rencheng.cc/blog/hq5dk.png"></p><h2 id="xib和storyboard布局混乱"><a href="#xib和storyboard布局混乱" class="headerlink" title="xib和storyboard布局混乱"></a>xib和storyboard布局混乱</h2><h3 id="问题详述"><a href="#问题详述" class="headerlink" title="问题详述"></a>问题详述</h3><p>使用Xcode8偶然打开了项目中的storyboard文件，然后跑起项目，却发现界面全乱了<br><img src="https://cdn.rencheng.cc/blog/6xj66.png"></p><h3 id="造成原因"><a href="#造成原因" class="headerlink" title="造成原因"></a>造成原因</h3><p>经过一番搜索后，发现Xcode8对xib和storyboard做出了一些修改，似的在<code>awakeFromNib</code>和<code>viewDidLoad</code>方法中拿自己拖上去的控件的frame均变成了<code>(0, 0, 1000, 1000)</code>，若直接在此使用控件frame进行二次修改，如：修改A控件的宽为B控件的一半，则B控件实际当前的宽是1000，就会造成混乱。解决办法是在使用原控件frame之前调一次<code>layoutIfNeeded</code>方法。</p><h3 id="查证实践"><a href="#查证实践" class="headerlink" title="查证实践"></a>查证实践</h3><ol><li>使用Xcode7建一个项目，拖一个tableview和cell，给cell上拖一个imageview和一个label，并设置约束<br> <img src="https://cdn.rencheng.cc/blog/rtudw.png"></li><li>在viewController的viewDidLoad中打印调用layoutIfNeeded前后各元素的frame<br> <img src="https://cdn.rencheng.cc/blog/4jeqm.png"></li><li>在cell的awakeFromNib调用layoutIfNeeded方法前后打印frame，并测试给cell赋值后是否frame也需要调用<br> <img src="https://cdn.rencheng.cc/blog/vidv3.png"></li><li>在Xcode7中运行，打印结果<br> 发现原在Xcode7时，viewDidLoad和awakeFromNib中能获取正常的frame<br> <img src="https://cdn.rencheng.cc/blog/z85uy.png"></li><li>使用Xcode8，并点开storyboard后<br> 发现git修改记录中删除了很多标签的元素<br> <img src="https://cdn.rencheng.cc/blog/4erku.png"><br> 在Xcode8中运行后，打印结果，发现viewDidLoad和awakeFromNib中，执行layoutIfNeeded之前拖上去的控件的frame都变成了{0, 0, 1000, 1000}，执行之后的frame是正常的，给cell赋值时的frame也是正常的。<br> <img src="https://cdn.rencheng.cc/blog/yne47.png"></li><li>再次打开Xcode7， 使用source code模式删除storyboard中版本限制后，再以interface builder方式打开storyboard，发现size被设置成了inferred模式，而且各控件的值也是不对的。<br> <img src="https://cdn.rencheng.cc/blog/2s0uo.png"></li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>在更新Xcode8后，并打开了某个xib&#x2F;storyboard后，最好run下看看是不是乱了。如果乱了，就去对应的controller或cell看看是不是在<code>viewDidLoad</code>和<code>awakeFromNib</code>中使用了控件的frame，如果使用了，请在使用前调用<code>layoutIfNeeded</code>方法。</p><p>如：之前我司项目中的布局乱了，确实是在<code>awakeFromNib</code>中利用控件的frame来修改某个控件的frame，于是就坑了。<br><img src="https://cdn.rencheng.cc/blog/jdro1.png"></p><p>然后，加上调用<code>layoutIfNeeded</code>后，就恢复如初了。<br><img src="https://cdn.rencheng.cc/blog/8iaxi.png"></p><h2 id="swift版本兼容问题"><a href="#swift版本兼容问题" class="headerlink" title="swift版本兼容问题"></a>swift版本兼容问题</h2><p>如果工程中使用了swift，则第一次使用xcode8打开时，会弹窗提示转换，也有可能不弹窗而且是编译的时候，报错，错误如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Use Legacy Swift Language Version” (SWIFT_VERSION) is </span><br><span class="line">required to be configured correctly for targets which use Swift.</span><br><span class="line">Use the [Edit &gt; Convert &gt; To Current Swift Syntax…] menu </span><br><span class="line">to choose a Swift version or use the Build Settings editor to </span><br><span class="line">configure the build setting directly.</span><br></pre></td></tr></table></figure><p>如图：<br><img src="https://cdn.rencheng.cc/blog/q0akf.png"></p><p>实际上就是提示你去转换一下swift版本，因为在Xcode7.3.1时swift为2.2，而xcode8支持swift2.3或者swift3.0。如果是直接弹窗提示了，且你是纯swift工程或是自己写的siwft库，可以尝试转换一下，虽然可能他的修改建议不合适。如果是三方库是swift写的，可以考虑等待三方库更新。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li>引入swift2.3&#x2F;3.0的三方库 或者 自行修改之后，手动从Xcode菜单栏-&gt;Edit-&gt;Convert-&gt;To Current Swift Syntax…打开迁移引导。<br> <img src="https://cdn.rencheng.cc/blog/jz2p9.png"></li><li>选择符合的swift版本<br> <img src="https://cdn.rencheng.cc/blog/yxu3y.png"></li><li>勾选需要转换的framework或者工程<br> 比如：我司项目使用了一个swift库<a href="https://github.com/danielgindi/Charts">Charts</a>，使用pod引入最新支持2.3的版本后，xcode8会报错让执行迁移引导，实际上勾选并点击next后，会提示不需要转换。（此图是已经进行过迁移引导后的截图，所以下方会提示已经转换成2.3的语法了）<br> <img src="https://cdn.rencheng.cc/blog/iyvwi.png"></li><li>目前还有pod useFramework导致其他库.h文件找不到问题，还在尝试解决</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS10的label文字显示不全问题</title>
      <link href="/2016/09/10/ios/general/iOS10%E7%9A%84label%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%85%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2016/09/10/ios/general/iOS10%E7%9A%84label%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%85%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>更新iOS10 beta后，陆续发现挺多App出现了Label&#x2F;Button文字显示不全的情况。当时感觉可能是系统问题，很长一段时间，大家都没修复这个问题，也就没太在意。直到前天iOS10 GM推送了，问题依然存在，那么就得赶紧排查修复了。</p><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>更新iOS10 beta后，陆续发现挺多App出现了Label&#x2F;Button文字显示不全的情况（如下图）。当时感觉可能是系统问题，很长一段时间，大家都没修复这个问题，也就没太在意。</p><p>直到前天iOS10 GM(<a href="https://en.wikipedia.org/w/index.php?title=Golden_Master">Golden Master，黄金母带，基本上该版与正式版相差无几</a>)推送后，问题依然存在，那么就得赶紧排查修复了。<br><img src="https://cdn.rencheng.cc/blog/6iarm.png"><br><img src="https://cdn.rencheng.cc/blog/040dz.png"></p><h2 id="分析和尝试"><a href="#分析和尝试" class="headerlink" title="分析和尝试"></a>分析和尝试</h2><p>宽度不够是在iOS上Label&#x2F;Button出现显示不全的原因，但是为什么有的Label&#x2F;Button上文字能正常显示，有的却iOS9正常显示，而iOS10不正常？</p><h3 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h3><p>最早的时候我怀疑的是系统文字的宽度变了，后来看到QQ的右上角弹出显示工具的控件也出现了问题，因为觉得这种控件应该是使用计算文字宽度的方法来设置Label&#x2F;Button的宽度的，再联想到之前iOS7后建议替换<code>sizeWithFont:</code>方法为<code>sizeWithAttribute:</code>，会不会老的计算宽度方法在iOS10中有问题了呢？带着这个疑问，赶紧下了一个Xcode8 GM版。</p><h3 id="实践检验"><a href="#实践检验" class="headerlink" title="实践检验"></a>实践检验</h3><ol><li>使用Xcode7创建一个工程，并拖一个UILabel，并填入文字<code>测试</code>，不改变其他属性选项，并给Label按约束提示的宽高来设置约束。<br> iOS中使用系统默认字体输入中文的话<code>UILabel的宽度 = 字号 * 字符数量</code>，所以很明显测试这两个字在默认字体和默认字号17的情况下宽度为34。于是点开storyboard中约束设置也可以看到，自动计算出来的宽度是34，高度是21。<br> <img src="https://cdn.rencheng.cc/blog/fxs3e.png"></li><li>继续使用Xcode7在代码中使用两个文字size计算方法<br>使用文字size方法计算方法<code>sizeWithFont:</code> 和 <code>sizeWithAttribute:</code>执行后，可以看到在xcode7中宽度均为34。<br> <img src="https://cdn.rencheng.cc/blog/r1auq.png"></li><li>转战Xcode8，打开Storyboard后，移除Label的宽度约束，提示实际为35。<br>看来文字确实是变宽了。<br> <img src="https://cdn.rencheng.cc/blog/k5rii.png"></li><li>同样在xcode8中使用文字size计算方法<br>执行后发现，输出为35和34.646，说明老的计算方法<code>sizeWithFont:</code>并没有问题。<br> <img src="https://cdn.rencheng.cc/blog/mfgl2.png"></li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>经过上面的测试，最终导致问题的根本原因应该是iOS10中的文字变宽了。间接原因是设置Label和Button的宽度不够。可能对于固定的文字宽度在storyboard中设置约束的时候勾上了根据文字内容自动计算的宽度，或者在使用代码创建的时候，直接根据文字数量x字号了。<br>其实对于这些固定的文字Label&#x2F;Button，如果使用xib或storyboard进行AutoLayout布局时，可以考虑不设置宽度约束，因为UILabel和Button是有固有内容大小（Intrinsic Content Size）的，默认是会根据文字内容改变宽度显示。</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2016/08/25/git/Git/"/>
      <url>/2016/08/25/git/Git/</url>
      
        <content type="html"><![CDATA[<p>git是一个开源的分布式版本控制系统，可用于高效的管理大小项目。</p><span id="more"></span><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/">优秀教程</a></p><h2 id="代码管理工具作用"><a href="#代码管理工具作用" class="headerlink" title="代码管理工具作用"></a>代码管理工具作用</h2><ul><li>防止代码丢失，做备份</li><li>代码版本的管理，可以进行多个节点的备份，在多个版本之间跳跃</li><li>可以方便的将代码在多人之间进行共享传输</li><li>多人开发时有各种模式可以方便代码管理</li></ul><h2 id="什么是git"><a href="#什么是git" class="headerlink" title="什么是git"></a>什么是git</h2><p>git是一个开源的分布式版本控制系统，可用于高效的管理大小项目。</p><h2 id="分布式和集中式"><a href="#分布式和集中式" class="headerlink" title="分布式和集中式"></a>分布式和集中式</h2><p>分布式： 每个节点都保存完成的代码，没有明确的中央服务器，节点之间项目推送下载代码完成代码共享</p><p>集中式： 代码集中管理，每次完成的代码上传到中央管理器，然后再统一从中央管理器下载代码使用</p><h2 id="git特点"><a href="#git特点" class="headerlink" title="git特点"></a>git特点</h2><ul><li>git可以管理各种文件，特别是代码项目，多在*nix系统中使用</li><li>是分布式管理，不同于集中式，这是git和svn的核心区别</li><li>git可以更好的支持分支，方便多人协同工作</li><li>git分布式代码更安全，有全球唯一的commit版本号</li><li>git是开源的系统</li><li>使用git可以脱网工作，且数据传输速度较快</li></ul><h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><p>linux:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>windows</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msysgit.github.io</span><br></pre></td></tr></table></figure><h2 id="git-配置命令"><a href="#git-配置命令" class="headerlink" title="git 配置命令"></a>git 配置命令</h2><h3 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h3><h4 id="配置级别"><a href="#配置级别" class="headerlink" title="配置级别"></a>配置级别</h4><ol><li><p>系统中所有的用户都可使用该配置</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config  --system   </span><br></pre></td></tr></table></figure><p> 配置文件： &#x2F;etc&#x2F;gitconfig</p></li><li><p>当前用户可使用该配置</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config  --global</span><br></pre></td></tr></table></figure><p> 配置文件： ~&#x2F;.gitconfig</p></li><li><p>当前项目可使用该配置</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config</span><br></pre></td></tr></table></figure><p> 配置文件： project&#x2F;.git&#x2F;config</p></li></ol><h4 id="配置内容"><a href="#配置内容" class="headerlink" title="配置内容"></a>配置内容</h4><ol><li><p>配置用户名<br> 配置用户名为rencheng：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git config --system user.name rencheng</span><br></pre></td></tr></table></figure></li><li><p>配置用户邮箱<br> 配置邮箱</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email rencheng11@icloud.cn</span><br></pre></td></tr></table></figure></li><li><p>配置编译器</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config core.editor sublime</span><br></pre></td></tr></table></figure></li><li><p>查看配置信息</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></li></ol><h2 id="git基本命令"><a href="#git基本命令" class="headerlink" title="git基本命令"></a>git基本命令</h2><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>在某个目录下初始化仓库后会自动产生.git目录。该目录下工作的所有文档即可以使用git进行管理</li></ul><h3 id="查看分支状态"><a href="#查看分支状态" class="headerlink" title="查看分支状态"></a>查看分支状态</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><ul><li>默认工作分支为master，可通过创建新的分支切换</li></ul><h3 id="文件提交"><a href="#文件提交" class="headerlink" title="文件提交"></a>文件提交</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  add   [file]</span><br></pre></td></tr></table></figure><ul><li>将文件提交到暂存区</li><li>提交内容可以是一个文件，多个文件用个空格分开</li><li>如果是 * 表示所有文件，也可以是目录</li></ul><h3 id="删除暂存区某个文件提交记录"><a href="#删除暂存区某个文件提交记录" class="headerlink" title="删除暂存区某个文件提交记录"></a>删除暂存区某个文件提交记录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached Readme.txt</span><br></pre></td></tr></table></figure><h3 id="文件同步到本地仓库"><a href="#文件同步到本地仓库" class="headerlink" title="文件同步到本地仓库"></a>文件同步到本地仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;some message&quot;</span><br></pre></td></tr></table></figure><ul><li>同步时需要附加一些同步信息 在-m后添加</li><li>所有对工作区的修改如果想同步到本地仓库，都需要    add—&gt;commit</li></ul><h3 id="查看commit日志"><a href="#查看commit日志" class="headerlink" title="查看commit日志"></a>查看commit日志</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git log  --pretty=oneline</span><br></pre></td></tr></table></figure><h3 id="一些工作区命令"><a href="#一些工作区命令" class="headerlink" title="一些工作区命令"></a>一些工作区命令</h3><h4 id="查看本地文件和工作区差异"><a href="#查看本地文件和工作区差异" class="headerlink" title="查看本地文件和工作区差异"></a>查看本地文件和工作区差异</h4><pre><code>git  diff   file</code></pre><h4 id="从本地仓库恢复文件"><a href="#从本地仓库恢复文件" class="headerlink" title="从本地仓库恢复文件"></a>从本地仓库恢复文件</h4><pre><code>git checkout file</code></pre><h4 id="丢弃工作区修改"><a href="#丢弃工作区修改" class="headerlink" title="丢弃工作区修改"></a>丢弃工作区修改</h4><pre><code>git checkout -- file</code></pre><h3 id="本地仓库文件的移动和删除"><a href="#本地仓库文件的移动和删除" class="headerlink" title="本地仓库文件的移动和删除"></a>本地仓库文件的移动和删除</h3><pre><code> 移动文件 git  mv   file  dir   删除文件 git  rm   file * 用法和mv rm命令相同。操作后直接commit即可工  作区和本地仓库同步</code></pre><h3 id="版本控制命令"><a href="#版本控制命令" class="headerlink" title="版本控制命令"></a>版本控制命令</h3><h4 id="回到之前版本"><a href="#回到之前版本" class="headerlink" title="回到之前版本"></a>回到之前版本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><ul><li>HEAD后的<code>^</code>数量决定了回到上几个版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard  commit_id</span><br></pre></td></tr></table></figure><ul><li>使用commit前7位即可，回到指定的版本</li></ul><h4 id="去往更新的版本"><a href="#去往更新的版本" class="headerlink" title="去往更新的版本"></a>去往更新的版本</h4><ol><li><p>查看所有历史版本号</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure></li><li><p>使用git reset 去往指定版本</p><ul><li>git reflog 会有所有的操作记录，最新的操作时钟在   最上边</li></ul></li></ol><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><p>即在当前工作位置添加快照，保存工作状态，一般用于版本的迭代。</p><h4 id="创建新的标签"><a href="#创建新的标签" class="headerlink" title="创建新的标签"></a>创建新的标签</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag  v1.0</span><br></pre></td></tr></table></figure><ul><li>默认在最新的commit_id处打标签</li></ul><h4 id="添加标签信息"><a href="#添加标签信息" class="headerlink" title="添加标签信息"></a>添加标签信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0  -m  &quot;message&quot;</span><br></pre></td></tr></table></figure><h4 id="指定某个commit-id打标签"><a href="#指定某个commit-id打标签" class="headerlink" title="指定某个commit_id打标签"></a>指定某个commit_id打标签</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag  v0.9  [commit_id]</span><br></pre></td></tr></table></figure><h4 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag    #列出当前标签</span><br><span class="line">git show v1.0  #显示标签具体信息</span><br></pre></td></tr></table></figure><h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v1.0</span><br></pre></td></tr></table></figure><h4 id="去往某个标签版本"><a href="#去往某个标签版本" class="headerlink" title="去往某个标签版本"></a>去往某个标签版本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard  v0.9</span><br></pre></td></tr></table></figure><h3 id="临时工作区操作"><a href="#临时工作区操作" class="headerlink" title="临时工作区操作"></a>临时工作区操作</h3><h4 id="创建保存临时工作区"><a href="#创建保存临时工作区" class="headerlink" title="创建保存临时工作区"></a>创建保存临时工作区</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  stash</span><br></pre></td></tr></table></figure><h4 id="查看保存的工作区"><a href="#查看保存的工作区" class="headerlink" title="查看保存的工作区"></a>查看保存的工作区</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  stash  list</span><br></pre></td></tr></table></figure><h4 id="应用哪个工作区"><a href="#应用哪个工作区" class="headerlink" title="应用哪个工作区"></a>应用哪个工作区</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply stash@&#123;1&#125;</span><br></pre></td></tr></table></figure><h4 id="应用上一个工作区并且删除"><a href="#应用上一个工作区并且删除" class="headerlink" title="应用上一个工作区并且删除"></a>应用上一个工作区并且删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h4 id="删除工作区"><a href="#删除工作区" class="headerlink" title="删除工作区"></a>删除工作区</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash drop stash@&#123;0&#125;   #删除某一个</span><br><span class="line">git stash clear            #删除所有</span><br></pre></td></tr></table></figure><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><h4 id="什么是分支？"><a href="#什么是分支？" class="headerlink" title="什么是分支？"></a>什么是分支？</h4><p>分支即每个人获取原有代码，在此基础上创建自己的工作环境，单独开发，不会影响其他分支的操作。开发完成后再统一合并到主线分支中。</p><p>分支的好处：安全，不影响其他人工作，自己控制进度</p><h4 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  branch</span><br></pre></td></tr></table></figure><ul><li>前面有 * 号的分支表示当前正在工作的分支</li></ul><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch  [branch_name]</span><br></pre></td></tr></table></figure><h4 id="切换工作分支"><a href="#切换工作分支" class="headerlink" title="切换工作分支"></a>切换工作分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [branch]</span><br></pre></td></tr></table></figure><h4 id="创建并切换到新的分支"><a href="#创建并切换到新的分支" class="headerlink" title="创建并切换到新的分支"></a>创建并切换到新的分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b [branch_name]</span><br></pre></td></tr></table></figure><h4 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h4><p>将某个分支合并到当前分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [branch]</span><br></pre></td></tr></table></figure><ul><li>合并过程中如果没有冲突则直接合并后当前分支即为   干净的状态</li><li>如果产生冲突则需要人为选择然后在进行add    commit等操作</li><li>在创建分支前尽量保证当前分支是干净点，以减少冲突的发生</li></ul><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d [branch_name]</span><br></pre></td></tr></table></figure><h4 id="强制删除没有合并的分支"><a href="#强制删除没有合并的分支" class="headerlink" title="强制删除没有合并的分支"></a>强制删除没有合并的分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D [branch_name] </span><br></pre></td></tr></table></figure><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>远程主机上的仓库。实际上git是分布式的，每一台主机的git结构都相似，只是把其他主机的git仓库叫做远程而已。</p><h4 id="创建共享仓库"><a href="#创建共享仓库" class="headerlink" title="创建共享仓库"></a>创建共享仓库</h4><ol><li><p>创建文件夹</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir gitrepo</span><br></pre></td></tr></table></figure></li><li><p>设置文件夹属主</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown tarena:tarena gitrepo</span><br></pre></td></tr></table></figure></li><li><p>将该文件夹设置为可共享的git仓库</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd gitrepo</span><br><span class="line">git init  --bare  fly.git</span><br></pre></td></tr></table></figure></li><li><p>设置本地仓库属主</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R tarena:tarena fly.git</span><br></pre></td></tr></table></figure></li></ol><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://****/****.git</span><br></pre></td></tr></table></figure><ul><li>默认使用SSH作为传输手段</li><li>必须在本地的某个git仓库下执行才能使本地仓库和远程   仓库关联</li></ul><h4 id="删除远程主机"><a href="#删除远程主机" class="headerlink" title="删除远程主机"></a>删除远程主机</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote  rm  [origin]</span><br></pre></td></tr></table></figure><h4 id="将本地分支推送到远程"><a href="#将本地分支推送到远程" class="headerlink" title="将本地分支推送到远程"></a>将本地分支推送到远程</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ul><li>在第一次向远程仓库推送时需要加 -u选项，以后就不   需要了</li></ul><h4 id="从远程仓库获取项目"><a href="#从远程仓库获取项目" class="headerlink" title="从远程仓库获取项目"></a>从远程仓库获取项目</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://****/****.git</span><br></pre></td></tr></table></figure><h3 id="从远程仓库拉取分支或代码"><a href="#从远程仓库拉取分支或代码" class="headerlink" title="从远程仓库拉取分支或代码"></a>从远程仓库拉取分支或代码</h3><p>直接拉取远程分支和当前工作分支合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin dev_Tom </span><br></pre></td></tr></table></figure><p>拉取远程分支到本地，不合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin dev_Tom : dev_Tom</span><br><span class="line">                远程分支名 本地分支名</span><br></pre></td></tr></table></figure><h4 id="代码退出和拉取"><a href="#代码退出和拉取" class="headerlink" title="代码退出和拉取"></a>代码退出和拉取</h4><p>将本地代码推送到连接的远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  push </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push  --force  origin (当本地版本比远程版本旧                            是用本地旧版本覆盖远程                            新版本)</span><br></pre></td></tr></table></figure><p>从远程仓库更新代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git  pull</span><br><span class="line">git  fetch  （如果有新的分支拉取到本地不会和本地              分支合并）</span><br></pre></td></tr></table></figure><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p>github是一个开源项目社区网站。拥有全球最多的开源项目。开发者可以注册这个网站建立自己的github仓库。然后就可以在本地通过git像操作远程仓库一样操作github仓库。</p><p>git是github唯一指定的代码管理工具</p><p>网址：<a href="https://github.com/">https://github.com/</a></p><h4 id="添加ssh秘钥"><a href="#添加ssh秘钥" class="headerlink" title="添加ssh秘钥"></a>添加ssh秘钥</h4><ol><li><p>在本地主机生成ssh密钥对<br>   ssh-keygen</p><ul><li>默认密钥对存放在 <code>~/.ssh/</code> 下</li><li>生成过程会提示设置密码，如果直接回车则表示不设置密码</li></ul></li><li><p>进入 <code>~/.ssh</code> 目录 复制 <code>id_rsa.pub</code> 公钥内容</p></li><li><p>登录github账号  </p><ol><li>右上角头像下拉菜单</li><li>settings</li><li>左侧 SSH and GPG keys</li><li>new ssh key</li><li>填写title，将复制内容加入key文本框</li><li>点击add…</li></ol></li></ol><h4 id="创建新的github仓库"><a href="#创建新的github仓库" class="headerlink" title="创建新的github仓库"></a>创建新的github仓库</h4><ol><li>右上角 + 下拉菜单</li><li>new repository</li><li>填写参考名和基本描述，根据情况选择是否添加readme等内容，选择共有还是私有</li><li>点击创建</li></ol><h4 id="操作github仓库"><a href="#操作github仓库" class="headerlink" title="操作github仓库"></a>操作github仓库</h4><ol><li>git remote 连接远程github仓库 如果需要输入密码输   入github密码即可</li><li>使用git push等操作远程仓库的方法操作即可</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iTerm2的配置</title>
      <link href="/2016/08/16/tools/macos/Iterm2%E9%85%8D%E7%BD%AE/"/>
      <url>/2016/08/16/tools/macos/Iterm2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><code>iTerm2</code>是一款完全免费的，专为<code>Mac OS</code>用户打造的命令行应用。直接在<a href="http://iterm2.com/">官网</a>上下载并安装即可。</p><span id="more"></span><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><ol><li><p>设置iTerm为默认终端<br> <img src="https://cdn.rencheng.cc/blog/5m1i4.jpg-thumb100"></p></li><li><p>查看系统有几个shell</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/shells</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure><p> <del><code>bash</code>是MacOS中terminal自带的shell，把它换成zsh。</del>（目前新版本MacOS默认就是zsh）这个的功能要多得多。拥有语法高亮，命令行tab补全，自动提示符，显示Git仓库状态等功能。</p></li><li><p>使用下面命令切换默认shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h2><p><a href="https://github.com/robbyrussell/oh-my-zsh">Github</a><br>使用<code>curl</code>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>打开zsh配置文件，修改主题为<code>agnoster</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">&quot;agnoster&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">zsh主题</a>，参考主题连接选择自己喜欢的主题。</p></blockquote><h3 id="解决乱码问题"><a href="#解决乱码问题" class="headerlink" title="解决乱码问题"></a>解决乱码问题</h3><ol><li>使用<code>Meslo</code>字体，<a href="https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf">点开连接</a>点击 <code>view raw</code>下载字体。</li><li>安装字体到系统字体册。</li><li>应用字体到iTerm2下，设置自己喜欢看着舒服的字号，我设置的12px（iTerm -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Change Font）。<br> <img src="https://cdn.rencheng.cc/blog/vgk1f.jpg-thumb100"></li></ol><h2 id="设置配色方案"><a href="#设置配色方案" class="headerlink" title="设置配色方案"></a>设置配色方案</h2><p><img src="https://cdn.rencheng.cc/blog/aijnh.jpg-thumb100"></p><h2 id="自动提示命令"><a href="#自动提示命令" class="headerlink" title="自动提示命令"></a>自动提示命令</h2><ol><li>下载插件到指定文件夹 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure></li><li>引入指定插件(打开<code>~/.zshrc</code>文件) <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(zsh-autosuggestions git)</span><br></pre></td></tr></table></figure></li><li>重新打开终端窗口。</li></ol><h2 id="高亮插件"><a href="#高亮插件" class="headerlink" title="高亮插件"></a>高亮插件</h2><ol><li>克隆代码 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br></pre></td></tr></table></figure></li><li>更改文件名，切换成隐藏文件夹 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> zsh-syntax-highlighting .zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></li><li>配置环境变量 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source <span class="variable">$&#123;(q-)PWD&#125;</span>/.zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot;</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zshrc</span><br></pre></td></tr></table></figure></li><li>加载环境变量 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ./.zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure></li><li>加载环境变量 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .zshrc</span><br></pre></td></tr></table></figure></li></ol><h2 id="更换背景图"><a href="#更换背景图" class="headerlink" title="更换背景图"></a>更换背景图</h2><p>点击下载<a href="https://cdn.rencheng.cc/blog/98yay.jpg-thumb100">背景图片</a><br><img src="https://cdn.rencheng.cc/blog/t6eau.jpg-thumb100"></p><h2 id="去除前缀"><a href="#去除前缀" class="headerlink" title="去除前缀"></a>去除前缀</h2><p>路径前缀的XX@XX太长。<br>在<code>~/.oh-my-zsh/themes</code>路径下找到<code>agnoster.zsh-theme</code>文件，可使用文本工具打开，将里面的<code>build_prompt</code>下的<code>prompt_context</code>字段在前面加<code>#</code>注释掉即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸡汤</title>
      <link href="/2015/09/04/life/%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4/"/>
      <url>/2015/09/04/life/%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4/</url>
      
        <content type="html"><![CDATA[<p>MARK一些鸡汤，灌给自己</p><span id="more"></span><h2 id="奋斗篇"><a href="#奋斗篇" class="headerlink" title="奋斗篇"></a>奋斗篇</h2><p><strong>请不要在该奋斗的年纪选择了安逸！</strong></p><p><code>20</code>岁的贪玩，造就了<code>30</code>岁的无奈<br><code>30</code>岁的无奈，造就了<code>40</code>岁的无为<br><code>40</code>岁的无为，造就了<code>50</code>岁的失败</p><p>当<code>父母</code>需要你时，除了泪水，你一无所有。<br>当<code>孩子</code>需要你时，除了惭愧，你一无所有。<br>当<code>你</code>回首过去， 你还是<code>一无所有</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS-Socket/Tcp编程</title>
      <link href="/2014/12/01/ios/general/Socket-Tcp/"/>
      <url>/2014/12/01/ios/general/Socket-Tcp/</url>
      
        <content type="html"><![CDATA[<p>很多同学一听到Socket TCP UDP 这几个字眼感觉特别害怕, 很怕在工作当中使用,因为他们有些底层了。下面是我在工作中使用Socket类库GCDAsyncSocket进行的一次应用。socket只适用于用户量偏小的app使用。如果数据量过大，请学习XMPP即时通讯协议。</p><span id="more"></span><h1 id="集成步骤"><a href="#集成步骤" class="headerlink" title="集成步骤"></a>集成步骤</h1><ol><li><p>GCDAsyncSocket框架下载地址</p><ul><li>地址: <a href="http://pan.baidu.com/s/1c1bHytM">http://pan.baidu.com/s/1c1bHytM</a></li><li>密码: p22g</li></ul></li><li><p>向工程导入下面两个文件。</p><ul><li>GCDAsyncSocket.h</li><li>GCDAsyncSocket.m</li></ul></li><li><p>创建一个单例类Client 继承于NSObject</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import &lt;Foundation/Foundation.h&gt;</span></span><br><span class="line">// 重定义block类型</span><br><span class="line">typedef void(^BLOCK)(<span class="built_in">id</span> result);</span><br><span class="line">@interface RCClient : NSObject</span><br><span class="line">// 实现单例方法</span><br><span class="line">+ (Client *)shareInstance;</span><br><span class="line">// 发送信息</span><br><span class="line">- (void)sendMessage:(NSString *)str complete:(BLOCK)block;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li><li><p>Client.m 文件内容如下:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#import &quot;Client.h&quot;</span></span><br><span class="line"><span class="comment">#import &quot;GCDAsyncSocket.h&quot;</span></span><br><span class="line">// TCP连接</span><br><span class="line">@interface Client ()</span><br><span class="line">@property (nonatomic,strong)GCDAsyncSocket *socket;</span><br><span class="line">@property (nonatomic,copy)BLOCK block;</span><br><span class="line">@property (nonatomic,assign)NSInteger counter;</span><br><span class="line"><span class="comment">#define IP @&quot;192.168.1.100&quot;</span></span><br><span class="line"><span class="comment">#define PORT 5555</span></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Client</span><br><span class="line"><span class="comment">#pragma mark - 初始化方法</span></span><br><span class="line">- (instancetype)init</span><br><span class="line">&#123;</span><br><span class="line">    self = [superinit];</span><br><span class="line">    <span class="keyword">if</span> (self) &#123;</span><br><span class="line">        [selfcreateConnection];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> self;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#pragma mark - 创建单例</span></span><br><span class="line">+ (Client *)shareInstance &#123;</span><br><span class="line">    staticClient *client =nil;</span><br><span class="line">    staticdispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        client = [[Clientalloc]init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">return</span> client;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#pragma mark - 建立连接</span></span><br><span class="line">- (void)createConnection &#123;</span><br><span class="line">    self.socket = [[GCDAsyncSocketalloc]initWithDelegate:selfdelegateQueue:dispatch_get_main_queue()];</span><br><span class="line">    // 连接</span><br><span class="line">    NSError *error =nil;</span><br><span class="line">    [self.socketconnectToHost:IPonPort:PORTerror:&amp;error];</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        NSLog(@<span class="string">&quot;连接错误%@&quot;</span>, error);</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    [self.socketreadDataWithTimeout:-1tag:0];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#pragma mark - 发送数据</span></span><br><span class="line">- (void)sendMessage:(NSString *)str tag:(NSInteger)tag complete:(BLOCK)block &#123;</span><br><span class="line">    self.block = block;</span><br><span class="line">    [self.socketwriteData:[strdataUsingEncoding:NSUTF8StringEncoding]withTimeout:-1tag:0];</span><br><span class="line">    [self.socket readDataWithTimeout:-1 tag:0];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#pragma mark - 服务器返回数据</span></span><br><span class="line">- (void)socket:(GCDAsyncSocket*)sock didReadData:(NSData *)data withTag:(long)tag &#123;</span><br><span class="line">    NSString *str =     [[NSStringalloc]initWithData:dataencoding:NSUTF8StringEncoding];</span><br><span class="line">    NSLog(@<span class="string">&quot;str = %@&quot;</span>, result);</span><br><span class="line">    <span class="keyword">if</span>(self.block) &#123;</span><br><span class="line">        self.block(result);</span><br><span class="line">    &#125;</span><br><span class="line">    [self.socketreadDataWithTimeout:-1 tag:0];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#pragma mark - 服务器返回数据[</span></span><br><span class="line">- (void)socketDidDisconnect:(GCDAsyncSocket *)sock withError:(NSError *)err &#123;</span><br><span class="line">    NSLog(@<span class="string">&quot;已经断开连接!&quot;</span>);</span><br><span class="line">    [self.socketreadDataWithTimeout:-1 tag:0];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS崩溃日志符号化</title>
      <link href="/2014/11/06/ios/general/%E5%B4%A9%E6%BA%83%E6%97%A5%E5%BF%97%E7%AC%A6%E5%8F%B7%E5%8C%96/"/>
      <url>/2014/11/06/ios/general/%E5%B4%A9%E6%BA%83%E6%97%A5%E5%BF%97%E7%AC%A6%E5%8F%B7%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>当提交appStore审核程序的过程中，如果程序发生崩溃，程序审核官会给开发者反馈一个crash文件。当我们打开crash文件的时候，里面的错误原因都是内存地址。所以下面我要说的就是怎么把crash文件的内存地址转化成对应我们编码的错误位置，这种转化方式就是符号化</p><span id="more"></span><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><ol><li>在Mac桌面上面创建一个文件夹”crash”,</li><li>打开Xcode-&gt;window-&gt;organizer找到崩溃的那个版本的archive文件,右键show in finder</li><li>右键archive显示包内容,把所有文件夹及其文件拷贝一份放到桌面的”crash”文件</li><li>终端输入命令，找到symbolicatecrash工具 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find /Applications/Xcode.app -name symbolicatecrash -<span class="built_in">type</span> f</span><br></pre></td></tr></table></figure></li><li>把symbolicatecrash复制到”crash”文件夹下“dSYMs”文件夹下</li><li>终端切换路径到”crash”文件夹下“dSYMs”文件夹下</li><li>配置环境变量 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> DEVELOPER_DIR=/Applications/XCode.app/Contents/Developer</span><br></pre></td></tr></table></figure></li><li>符号化转化 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./symbolicatecrash ./temp..wkkackjh.crash ./LocationChat.app.dSYM &gt; symbol.crash</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo教程</title>
      <link href="/2014/10/06/hexo/Hexo%E6%95%99%E7%A8%8B/"/>
      <url>/2014/10/06/hexo/Hexo%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到<a href="https://hexo.io/">Hexo</a>！这是你的第一篇文章。有关详细信息，请查看<a href="https://hexo.io/docs/">文档</a>。如果您在使用Hexo时遇到任何问题，可以在<a href="https://hexo.io/docs/troubleshooting.html">故障排除</a>中找到答案，或者您可以在<a href="https://github.com/">GitHub</a>上找到我。</p><span id="more"></span><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建一篇新文章"><a href="#创建一篇新文章" class="headerlink" title="创建一篇新文章"></a>创建一篇新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个路径下的博客</span></span><br><span class="line">$ hexo new --path /ios/general/App分析 <span class="string">&quot;App分析&quot;</span></span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">或</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">或</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到网站上"><a href="#部署到网站上" class="headerlink" title="部署到网站上"></a>部署到网站上</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">或</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
